
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

	

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fc19 	bl	2000083a <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <delay_250ns>:
	// 					DELAYS					//
void delay_250ns(void){
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000002c:	4b0c      	ldr	r3, [pc, #48]	; (20000060 <delay_250ns+0x38>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000032:	4b0c      	ldr	r3, [pc, #48]	; (20000064 <delay_250ns+0x3c>)
20000034:	2229      	movs	r2, #41	; 0x29
20000036:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000038:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <delay_250ns+0x40>)
2000003a:	2200      	movs	r2, #0
2000003c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000003e:	4b08      	ldr	r3, [pc, #32]	; (20000060 <delay_250ns+0x38>)
20000040:	2205      	movs	r2, #5
20000042:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <delay_250ns+0x44>)
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	b2db      	uxtb	r3, r3
2000004c:	001a      	movs	r2, r3
2000004e:	2301      	movs	r3, #1
20000050:	4013      	ands	r3, r2
20000052:	d1f8      	bne.n	20000046 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000054:	4b02      	ldr	r3, [pc, #8]	; (20000060 <delay_250ns+0x38>)
20000056:	2200      	movs	r2, #0
20000058:	701a      	strb	r2, [r3, #0]
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	bd80      	pop	{r7, pc}
20000060:	e000e010 	and	lr, r0, r0, lsl r0
20000064:	e000e014 	and	lr, r0, r4, lsl r0
20000068:	e000e018 	and	lr, r0, r8, lsl r0
2000006c:	e000e012 	and	lr, r0, r2, lsl r0

20000070 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000070:	b580      	push	{r7, lr}
20000072:	b084      	sub	sp, #16
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	22fa      	movs	r2, #250	; 0xfa
2000007c:	0091      	lsls	r1, r2, #2
2000007e:	0018      	movs	r0, r3
20000080:	f000 fbf8 	bl	20000874 <__udivsi3>
20000084:	0003      	movs	r3, r0
20000086:	607b      	str	r3, [r7, #4]
	us ++;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	3301      	adds	r3, #1
2000008c:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
2000008e:	2300      	movs	r3, #0
20000090:	60fb      	str	r3, [r7, #12]
20000092:	e004      	b.n	2000009e <delay_mikro+0x2e>
		delay_250ns();
20000094:	f7ff ffc8 	bl	20000028 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000098:	68fb      	ldr	r3, [r7, #12]
2000009a:	3301      	adds	r3, #1
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	009a      	lsls	r2, r3, #2
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	429a      	cmp	r2, r3
200000a6:	d8f5      	bhi.n	20000094 <delay_mikro+0x24>
	}
}
200000a8:	46c0      	nop			; (mov r8, r8)
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46bd      	mov	sp, r7
200000ae:	b004      	add	sp, #16
200000b0:	bd80      	pop	{r7, pc}

200000b2 <delay_milli>:

void delay_milli(unsigned int ms){
200000b2:	b580      	push	{r7, lr}
200000b4:	b084      	sub	sp, #16
200000b6:	af00      	add	r7, sp, #0
200000b8:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	22fa      	movs	r2, #250	; 0xfa
200000be:	0091      	lsls	r1, r2, #2
200000c0:	0018      	movs	r0, r3
200000c2:	f000 fbd7 	bl	20000874 <__udivsi3>
200000c6:	0003      	movs	r3, r0
200000c8:	607b      	str	r3, [r7, #4]
		ms ++;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	3301      	adds	r3, #1
200000ce:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000d0:	2300      	movs	r3, #0
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	e007      	b.n	200000e6 <delay_milli+0x34>
		delay_mikro(1000);
200000d6:	23fa      	movs	r3, #250	; 0xfa
200000d8:	009b      	lsls	r3, r3, #2
200000da:	0018      	movs	r0, r3
200000dc:	f7ff ffc8 	bl	20000070 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	3301      	adds	r3, #1
200000e4:	60fb      	str	r3, [r7, #12]
200000e6:	68fb      	ldr	r3, [r7, #12]
200000e8:	687a      	ldr	r2, [r7, #4]
200000ea:	429a      	cmp	r2, r3
200000ec:	d8f3      	bhi.n	200000d6 <delay_milli+0x24>
	}
}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b004      	add	sp, #16
200000f6:	bd80      	pop	{r7, pc}

200000f8 <delay_500ns>:

void delay_500ns(){
200000f8:	b580      	push	{r7, lr}
200000fa:	af00      	add	r7, sp, #0
	delay_250ns();
200000fc:	f7ff ff94 	bl	20000028 <delay_250ns>
	delay_250ns();
20000100:	f7ff ff92 	bl	20000028 <delay_250ns>
}
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	46bd      	mov	sp, r7
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_ctrl_bit_set>:

//						DISPLAY						//

void graphic_ctrl_bit_set(uint8_t x){
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
20000110:	0002      	movs	r2, r0
20000112:	1dfb      	adds	r3, r7, #7
20000114:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
20000116:	4b0d      	ldr	r3, [pc, #52]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000118:	781b      	ldrb	r3, [r3, #0]
2000011a:	b2db      	uxtb	r3, r3
2000011c:	b25a      	sxtb	r2, r3
2000011e:	1dfb      	adds	r3, r7, #7
20000120:	781b      	ldrb	r3, [r3, #0]
20000122:	b25b      	sxtb	r3, r3
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b25b      	sxtb	r3, r3
2000012a:	4313      	orrs	r3, r2
2000012c:	b25a      	sxtb	r2, r3
2000012e:	4b07      	ldr	r3, [pc, #28]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000130:	b2d2      	uxtb	r2, r2
20000132:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	b2db      	uxtb	r3, r3
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <graphic_ctrl_bit_set+0x42>)
2000013c:	2104      	movs	r1, #4
2000013e:	438b      	bics	r3, r1
20000140:	b2db      	uxtb	r3, r3
20000142:	7013      	strb	r3, [r2, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b002      	add	sp, #8
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
2000015c:	4b0a      	ldr	r3, [pc, #40]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	b2db      	uxtb	r3, r3
20000162:	b25b      	sxtb	r3, r3
20000164:	1dfa      	adds	r2, r7, #7
20000166:	7812      	ldrb	r2, [r2, #0]
20000168:	2104      	movs	r1, #4
2000016a:	430a      	orrs	r2, r1
2000016c:	b2d2      	uxtb	r2, r2
2000016e:	b252      	sxtb	r2, r2
20000170:	43d2      	mvns	r2, r2
20000172:	b252      	sxtb	r2, r2
20000174:	4013      	ands	r3, r2
20000176:	b25a      	sxtb	r2, r3
20000178:	4b03      	ldr	r3, [pc, #12]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000017a:	b2d2      	uxtb	r2, r2
2000017c:	701a      	strb	r2, [r3, #0]
}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	46bd      	mov	sp, r7
20000182:	b002      	add	sp, #8
20000184:	bd80      	pop	{r7, pc}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	40021014 	andmi	r1, r2, r4, lsl r0

2000018c <select_controller>:

void select_controller(uint8_t controller){
2000018c:	b580      	push	{r7, lr}
2000018e:	b084      	sub	sp, #16
20000190:	af00      	add	r7, sp, #0
20000192:	0002      	movs	r2, r0
20000194:	1dfb      	adds	r3, r7, #7
20000196:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000198:	230f      	movs	r3, #15
2000019a:	18fb      	adds	r3, r7, r3
2000019c:	2200      	movs	r2, #0
2000019e:	701a      	strb	r2, [r3, #0]
	switch(controller){
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
200001a4:	2b18      	cmp	r3, #24
200001a6:	d01a      	beq.n	200001de <select_controller+0x52>
200001a8:	dc1d      	bgt.n	200001e6 <select_controller+0x5a>
200001aa:	2b10      	cmp	r3, #16
200001ac:	d010      	beq.n	200001d0 <select_controller+0x44>
200001ae:	dc1a      	bgt.n	200001e6 <select_controller+0x5a>
200001b0:	2b00      	cmp	r3, #0
200001b2:	d002      	beq.n	200001ba <select_controller+0x2e>
200001b4:	2b08      	cmp	r3, #8
200001b6:	d004      	beq.n	200001c2 <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001b8:	e015      	b.n	200001e6 <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001ba:	2018      	movs	r0, #24
200001bc:	f7ff ffc8 	bl	20000150 <graphic_ctrl_bit_clear>
200001c0:	e012      	b.n	200001e8 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001c2:	2010      	movs	r0, #16
200001c4:	f7ff ffc4 	bl	20000150 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001c8:	2008      	movs	r0, #8
200001ca:	f7ff ff9e 	bl	2000010a <graphic_ctrl_bit_set>
200001ce:	e00b      	b.n	200001e8 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001d0:	2008      	movs	r0, #8
200001d2:	f7ff ffbd 	bl	20000150 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001d6:	2010      	movs	r0, #16
200001d8:	f7ff ff97 	bl	2000010a <graphic_ctrl_bit_set>
200001dc:	e004      	b.n	200001e8 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001de:	2018      	movs	r0, #24
200001e0:	f7ff ff93 	bl	2000010a <graphic_ctrl_bit_set>
200001e4:	e000      	b.n	200001e8 <select_controller+0x5c>
		default: return;
200001e6:	46c0      	nop			; (mov r8, r8)
	}
}
200001e8:	46bd      	mov	sp, r7
200001ea:	b004      	add	sp, #16
200001ec:	bd80      	pop	{r7, pc}

200001ee <graphic_wait_ready>:

void graphic_wait_ready(void){
200001ee:	b580      	push	{r7, lr}
200001f0:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001f2:	2040      	movs	r0, #64	; 0x40
200001f4:	f7ff ffac 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001f8:	4b12      	ldr	r3, [pc, #72]	; (20000244 <graphic_wait_ready+0x56>)
200001fa:	4a13      	ldr	r2, [pc, #76]	; (20000248 <graphic_wait_ready+0x5a>)
200001fc:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001fe:	2002      	movs	r0, #2
20000200:	f7ff ff83 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000204:	2001      	movs	r0, #1
20000206:	f7ff ffa3 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_500ns();
2000020a:	f7ff ff75 	bl	200000f8 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
2000020e:	2040      	movs	r0, #64	; 0x40
20000210:	f7ff ff7b 	bl	2000010a <graphic_ctrl_bit_set>
		delay_500ns();
20000214:	f7ff ff70 	bl	200000f8 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff ff99 	bl	20000150 <graphic_ctrl_bit_clear>
		delay_500ns();
2000021e:	f7ff ff6b 	bl	200000f8 <delay_500ns>
		if((* portIdrHigh & LCD_BUSY) == 0){
20000222:	4b0a      	ldr	r3, [pc, #40]	; (2000024c <graphic_wait_ready+0x5e>)
20000224:	781b      	ldrb	r3, [r3, #0]
20000226:	b2db      	uxtb	r3, r3
20000228:	b25b      	sxtb	r3, r3
2000022a:	2b00      	cmp	r3, #0
2000022c:	da00      	bge.n	20000230 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
2000022e:	e7ee      	b.n	2000020e <graphic_wait_ready+0x20>
			break;
20000230:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000232:	2040      	movs	r0, #64	; 0x40
20000234:	f7ff ff69 	bl	2000010a <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000238:	4b02      	ldr	r3, [pc, #8]	; (20000244 <graphic_wait_ready+0x56>)
2000023a:	4a05      	ldr	r2, [pc, #20]	; (20000250 <graphic_wait_ready+0x62>)
2000023c:	601a      	str	r2, [r3, #0]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	bd80      	pop	{r7, pc}
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	40021011 	andmi	r1, r2, r1, lsl r0
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000254:	b580      	push	{r7, lr}
20000256:	b084      	sub	sp, #16
20000258:	af00      	add	r7, sp, #0
2000025a:	0002      	movs	r2, r0
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff75 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000266:	4b1b      	ldr	r3, [pc, #108]	; (200002d4 <graphic_read+0x80>)
20000268:	4a1b      	ldr	r2, [pc, #108]	; (200002d8 <graphic_read+0x84>)
2000026a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
2000026c:	2003      	movs	r0, #3
2000026e:	f7ff ff4c 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller(controller);
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	0018      	movs	r0, r3
20000278:	f7ff ff88 	bl	2000018c <select_controller>
	delay_500ns();
2000027c:	f7ff ff3c 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff42 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
20000286:	f7ff ff37 	bl	200000f8 <delay_500ns>
	uint8_t rv = * portIdrHigh;
2000028a:	4a14      	ldr	r2, [pc, #80]	; (200002dc <graphic_read+0x88>)
2000028c:	230f      	movs	r3, #15
2000028e:	18fb      	adds	r3, r7, r3
20000290:	7812      	ldrb	r2, [r2, #0]
20000292:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000294:	2040      	movs	r0, #64	; 0x40
20000296:	f7ff ff5b 	bl	20000150 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
2000029a:	4b0e      	ldr	r3, [pc, #56]	; (200002d4 <graphic_read+0x80>)
2000029c:	4a10      	ldr	r2, [pc, #64]	; (200002e0 <graphic_read+0x8c>)
2000029e:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	2b08      	cmp	r3, #8
200002a6:	d104      	bne.n	200002b2 <graphic_read+0x5e>
		select_controller(B_CS1);
200002a8:	2008      	movs	r0, #8
200002aa:	f7ff ff6f 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002ae:	f7ff ff9e 	bl	200001ee <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	781b      	ldrb	r3, [r3, #0]
200002b6:	2b10      	cmp	r3, #16
200002b8:	d104      	bne.n	200002c4 <graphic_read+0x70>
		select_controller(B_CS2);
200002ba:	2010      	movs	r0, #16
200002bc:	f7ff ff66 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002c0:	f7ff ff95 	bl	200001ee <graphic_wait_ready>
	}
	return rv;
200002c4:	230f      	movs	r3, #15
200002c6:	18fb      	adds	r3, r7, r3
200002c8:	781b      	ldrb	r3, [r3, #0]
}
200002ca:	0018      	movs	r0, r3
200002cc:	46bd      	mov	sp, r7
200002ce:	b004      	add	sp, #16
200002d0:	bd80      	pop	{r7, pc}
200002d2:	46c0      	nop			; (mov r8, r8)
200002d4:	40021000 	andmi	r1, r2, r0
200002d8:	00005555 	andeq	r5, r0, r5, asr r5
200002dc:	40021011 	andmi	r1, r2, r1, lsl r0
200002e0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002e4 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002e4:	b580      	push	{r7, lr}
200002e6:	b082      	sub	sp, #8
200002e8:	af00      	add	r7, sp, #0
200002ea:	0002      	movs	r2, r0
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	701a      	strb	r2, [r3, #0]
200002f0:	1dbb      	adds	r3, r7, #6
200002f2:	1c0a      	adds	r2, r1, #0
200002f4:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002f6:	4a1a      	ldr	r2, [pc, #104]	; (20000360 <graphic_write+0x7c>)
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	781b      	ldrb	r3, [r3, #0]
200002fc:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002fe:	1dbb      	adds	r3, r7, #6
20000300:	781b      	ldrb	r3, [r3, #0]
20000302:	0018      	movs	r0, r3
20000304:	f7ff ff42 	bl	2000018c <select_controller>
	delay_500ns();
20000308:	f7ff fef6 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff fefc 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
20000312:	f7ff fef1 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff ff1a 	bl	20000150 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
2000031c:	1dbb      	adds	r3, r7, #6
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	2208      	movs	r2, #8
20000322:	4013      	ands	r3, r2
20000324:	d004      	beq.n	20000330 <graphic_write+0x4c>
		select_controller(B_CS1);
20000326:	2008      	movs	r0, #8
20000328:	f7ff ff30 	bl	2000018c <select_controller>
		graphic_wait_ready();
2000032c:	f7ff ff5f 	bl	200001ee <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000330:	1dbb      	adds	r3, r7, #6
20000332:	781b      	ldrb	r3, [r3, #0]
20000334:	2210      	movs	r2, #16
20000336:	4013      	ands	r3, r2
20000338:	d004      	beq.n	20000344 <graphic_write+0x60>
		select_controller(B_CS2);
2000033a:	2010      	movs	r0, #16
2000033c:	f7ff ff26 	bl	2000018c <select_controller>
		graphic_wait_ready();
20000340:	f7ff ff55 	bl	200001ee <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000344:	4b06      	ldr	r3, [pc, #24]	; (20000360 <graphic_write+0x7c>)
20000346:	2200      	movs	r2, #0
20000348:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000034a:	2040      	movs	r0, #64	; 0x40
2000034c:	f7ff fedd 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller(0);
20000350:	2000      	movs	r0, #0
20000352:	f7ff ff1b 	bl	2000018c <select_controller>
}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	46bd      	mov	sp, r7
2000035a:	b002      	add	sp, #8
2000035c:	bd80      	pop	{r7, pc}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	40021015 	andmi	r1, r2, r5, lsl r0

20000364 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
20000370:	1dbb      	adds	r3, r7, #6
20000372:	1c0a      	adds	r2, r1, #0
20000374:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000376:	2040      	movs	r0, #64	; 0x40
20000378:	f7ff feea 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	781b      	ldrb	r3, [r3, #0]
20000380:	0018      	movs	r0, r3
20000382:	f7ff ff03 	bl	2000018c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000386:	2003      	movs	r0, #3
20000388:	f7ff fee2 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	781a      	ldrb	r2, [r3, #0]
20000390:	1dfb      	adds	r3, r7, #7
20000392:	781b      	ldrb	r3, [r3, #0]
20000394:	0011      	movs	r1, r2
20000396:	0018      	movs	r0, r3
20000398:	f7ff ffa4 	bl	200002e4 <graphic_write>
}
2000039c:	46c0      	nop			; (mov r8, r8)
2000039e:	46bd      	mov	sp, r7
200003a0:	b002      	add	sp, #8
200003a2:	bd80      	pop	{r7, pc}

200003a4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003a4:	b580      	push	{r7, lr}
200003a6:	b082      	sub	sp, #8
200003a8:	af00      	add	r7, sp, #0
200003aa:	0002      	movs	r2, r0
200003ac:	1dfb      	adds	r3, r7, #7
200003ae:	701a      	strb	r2, [r3, #0]
200003b0:	1dbb      	adds	r3, r7, #6
200003b2:	1c0a      	adds	r2, r1, #0
200003b4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003b6:	2040      	movs	r0, #64	; 0x40
200003b8:	f7ff feca 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003bc:	1dbb      	adds	r3, r7, #6
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	0018      	movs	r0, r3
200003c2:	f7ff fee3 	bl	2000018c <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003c6:	2001      	movs	r0, #1
200003c8:	f7ff fe9f 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003cc:	2002      	movs	r0, #2
200003ce:	f7ff febf 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003d2:	1dbb      	adds	r3, r7, #6
200003d4:	781a      	ldrb	r2, [r3, #0]
200003d6:	1dfb      	adds	r3, r7, #7
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	0011      	movs	r1, r2
200003dc:	0018      	movs	r0, r3
200003de:	f7ff ff81 	bl	200002e4 <graphic_write>
}
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46bd      	mov	sp, r7
200003e6:	b002      	add	sp, #8
200003e8:	bd80      	pop	{r7, pc}

200003ea <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003ea:	b580      	push	{r7, lr}
200003ec:	b082      	sub	sp, #8
200003ee:	af00      	add	r7, sp, #0
200003f0:	0002      	movs	r2, r0
200003f2:	1dfb      	adds	r3, r7, #7
200003f4:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	0018      	movs	r0, r3
200003fc:	f7ff ff2a 	bl	20000254 <graphic_read>
	return graphic_read(controller);
20000400:	1dfb      	adds	r3, r7, #7
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	0018      	movs	r0, r3
20000406:	f7ff ff25 	bl	20000254 <graphic_read>
2000040a:	0003      	movs	r3, r0
}
2000040c:	0018      	movs	r0, r3
2000040e:	46bd      	mov	sp, r7
20000410:	b002      	add	sp, #8
20000412:	bd80      	pop	{r7, pc}

20000414 <graphic_initialize>:

void graphic_initialize(){
20000414:	b580      	push	{r7, lr}
20000416:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff fe76 	bl	2000010a <graphic_ctrl_bit_set>
	delay_mikro(10);
2000041e:	200a      	movs	r0, #10
20000420:	f7ff fe26 	bl	20000070 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000424:	2078      	movs	r0, #120	; 0x78
20000426:	f7ff fe93 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000042a:	201e      	movs	r0, #30
2000042c:	f7ff fe41 	bl	200000b2 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000430:	2020      	movs	r0, #32
20000432:	f7ff fe6a 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203e      	movs	r0, #62	; 0x3e
2000043a:	f7ff ff93 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	203f      	movs	r0, #63	; 0x3f
20000442:	f7ff ff8f 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	20c0      	movs	r0, #192	; 0xc0
2000044a:	f7ff ff8b 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	2040      	movs	r0, #64	; 0x40
20000452:	f7ff ff87 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000456:	2118      	movs	r1, #24
20000458:	20b8      	movs	r0, #184	; 0xb8
2000045a:	f7ff ff83 	bl	20000364 <graphic_write_command>
	select_controller(0);
2000045e:	2000      	movs	r0, #0
20000460:	f7ff fe94 	bl	2000018c <select_controller>
}
20000464:	46c0      	nop			; (mov r8, r8)
20000466:	46bd      	mov	sp, r7
20000468:	bd80      	pop	{r7, pc}

2000046a <graphic_clear_screen>:

void graphic_clear_screen(){
2000046a:	b580      	push	{r7, lr}
2000046c:	b082      	sub	sp, #8
2000046e:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000470:	1dfb      	adds	r3, r7, #7
20000472:	2200      	movs	r2, #0
20000474:	701a      	strb	r2, [r3, #0]
20000476:	e023      	b.n	200004c0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000478:	1dfb      	adds	r3, r7, #7
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	2248      	movs	r2, #72	; 0x48
2000047e:	4252      	negs	r2, r2
20000480:	4313      	orrs	r3, r2
20000482:	b2db      	uxtb	r3, r3
20000484:	2118      	movs	r1, #24
20000486:	0018      	movs	r0, r3
20000488:	f7ff ff6c 	bl	20000364 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000048c:	2118      	movs	r1, #24
2000048e:	2040      	movs	r0, #64	; 0x40
20000490:	f7ff ff68 	bl	20000364 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
20000494:	1dbb      	adds	r3, r7, #6
20000496:	2200      	movs	r2, #0
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	e008      	b.n	200004ae <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
2000049c:	2118      	movs	r1, #24
2000049e:	2000      	movs	r0, #0
200004a0:	f7ff ff80 	bl	200003a4 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
200004a4:	1dbb      	adds	r3, r7, #6
200004a6:	781a      	ldrb	r2, [r3, #0]
200004a8:	1dbb      	adds	r3, r7, #6
200004aa:	3201      	adds	r2, #1
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	1dbb      	adds	r3, r7, #6
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	2b3f      	cmp	r3, #63	; 0x3f
200004b4:	d9f2      	bls.n	2000049c <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004b6:	1dfb      	adds	r3, r7, #7
200004b8:	781a      	ldrb	r2, [r3, #0]
200004ba:	1dfb      	adds	r3, r7, #7
200004bc:	3201      	adds	r2, #1
200004be:	701a      	strb	r2, [r3, #0]
200004c0:	1dfb      	adds	r3, r7, #7
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2b07      	cmp	r3, #7
200004c6:	d9d7      	bls.n	20000478 <graphic_clear_screen+0xe>
		}
	}
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46c0      	nop			; (mov r8, r8)
200004cc:	46bd      	mov	sp, r7
200004ce:	b002      	add	sp, #8
200004d0:	bd80      	pop	{r7, pc}

200004d2 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004d2:	b5f0      	push	{r4, r5, r6, r7, lr}
200004d4:	b085      	sub	sp, #20
200004d6:	af00      	add	r7, sp, #0
200004d8:	0004      	movs	r4, r0
200004da:	0008      	movs	r0, r1
200004dc:	0011      	movs	r1, r2
200004de:	1dfb      	adds	r3, r7, #7
200004e0:	1c22      	adds	r2, r4, #0
200004e2:	701a      	strb	r2, [r3, #0]
200004e4:	1dbb      	adds	r3, r7, #6
200004e6:	1c02      	adds	r2, r0, #0
200004e8:	701a      	strb	r2, [r3, #0]
200004ea:	1d7b      	adds	r3, r7, #5
200004ec:	1c0a      	adds	r2, r1, #0
200004ee:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)){return;}
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	2b80      	cmp	r3, #128	; 0x80
200004f6:	d900      	bls.n	200004fa <pixel+0x28>
200004f8:	e0bd      	b.n	20000676 <pixel+0x1a4>
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	2b40      	cmp	r3, #64	; 0x40
20000500:	d900      	bls.n	20000504 <pixel+0x32>
20000502:	e0b8      	b.n	20000676 <pixel+0x1a4>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000504:	1dbb      	adds	r3, r7, #6
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	3b01      	subs	r3, #1
2000050a:	2b00      	cmp	r3, #0
2000050c:	da00      	bge.n	20000510 <pixel+0x3e>
2000050e:	3307      	adds	r3, #7
20000510:	10db      	asrs	r3, r3, #3
20000512:	001a      	movs	r2, r3
20000514:	230c      	movs	r3, #12
20000516:	18fb      	adds	r3, r7, r3
20000518:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	3b01      	subs	r3, #1
20000520:	4a57      	ldr	r2, [pc, #348]	; (20000680 <pixel+0x1ae>)
20000522:	4013      	ands	r3, r2
20000524:	d504      	bpl.n	20000530 <pixel+0x5e>
20000526:	3b01      	subs	r3, #1
20000528:	2208      	movs	r2, #8
2000052a:	4252      	negs	r2, r2
2000052c:	4313      	orrs	r3, r2
2000052e:	3301      	adds	r3, #1
20000530:	2b07      	cmp	r3, #7
20000532:	d82c      	bhi.n	2000058e <pixel+0xbc>
20000534:	009a      	lsls	r2, r3, #2
20000536:	4b53      	ldr	r3, [pc, #332]	; (20000684 <pixel+0x1b2>)
20000538:	18d3      	adds	r3, r2, r3
2000053a:	681b      	ldr	r3, [r3, #0]
2000053c:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000053e:	230f      	movs	r3, #15
20000540:	18fb      	adds	r3, r7, r3
20000542:	2201      	movs	r2, #1
20000544:	701a      	strb	r2, [r3, #0]
20000546:	e023      	b.n	20000590 <pixel+0xbe>
		case 1: mask = 2; break;
20000548:	230f      	movs	r3, #15
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	2202      	movs	r2, #2
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	e01e      	b.n	20000590 <pixel+0xbe>
		case 2: mask = 4; break;
20000552:	230f      	movs	r3, #15
20000554:	18fb      	adds	r3, r7, r3
20000556:	2204      	movs	r2, #4
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	e019      	b.n	20000590 <pixel+0xbe>
		case 3: mask = 8; break;
2000055c:	230f      	movs	r3, #15
2000055e:	18fb      	adds	r3, r7, r3
20000560:	2208      	movs	r2, #8
20000562:	701a      	strb	r2, [r3, #0]
20000564:	e014      	b.n	20000590 <pixel+0xbe>
		case 4: mask = 0x10; break;
20000566:	230f      	movs	r3, #15
20000568:	18fb      	adds	r3, r7, r3
2000056a:	2210      	movs	r2, #16
2000056c:	701a      	strb	r2, [r3, #0]
2000056e:	e00f      	b.n	20000590 <pixel+0xbe>
		case 5: mask = 0x20; break;
20000570:	230f      	movs	r3, #15
20000572:	18fb      	adds	r3, r7, r3
20000574:	2220      	movs	r2, #32
20000576:	701a      	strb	r2, [r3, #0]
20000578:	e00a      	b.n	20000590 <pixel+0xbe>
		case 6: mask = 0x40; break;
2000057a:	230f      	movs	r3, #15
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	2240      	movs	r2, #64	; 0x40
20000580:	701a      	strb	r2, [r3, #0]
20000582:	e005      	b.n	20000590 <pixel+0xbe>
		case 7: mask = 0x80; break;
20000584:	230f      	movs	r3, #15
20000586:	18fb      	adds	r3, r7, r3
20000588:	2280      	movs	r2, #128	; 0x80
2000058a:	701a      	strb	r2, [r3, #0]
2000058c:	e000      	b.n	20000590 <pixel+0xbe>
		default: break;
2000058e:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
20000590:	1d7b      	adds	r3, r7, #5
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	2b00      	cmp	r3, #0
20000596:	d105      	bne.n	200005a4 <pixel+0xd2>
		mask = ~mask;
20000598:	220f      	movs	r2, #15
2000059a:	18bb      	adds	r3, r7, r2
2000059c:	18ba      	adds	r2, r7, r2
2000059e:	7812      	ldrb	r2, [r2, #0]
200005a0:	43d2      	mvns	r2, r2
200005a2:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005a4:	1dfb      	adds	r3, r7, #7
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	2b40      	cmp	r3, #64	; 0x40
200005aa:	d90a      	bls.n	200005c2 <pixel+0xf0>
		controller = B_CS2;
200005ac:	230e      	movs	r3, #14
200005ae:	18fb      	adds	r3, r7, r3
200005b0:	2210      	movs	r2, #16
200005b2:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005b4:	230d      	movs	r3, #13
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	1dfa      	adds	r2, r7, #7
200005ba:	7812      	ldrb	r2, [r2, #0]
200005bc:	3a41      	subs	r2, #65	; 0x41
200005be:	701a      	strb	r2, [r3, #0]
200005c0:	e009      	b.n	200005d6 <pixel+0x104>
	}else{
		controller = B_CS1;
200005c2:	230e      	movs	r3, #14
200005c4:	18fb      	adds	r3, r7, r3
200005c6:	2208      	movs	r2, #8
200005c8:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005ca:	230d      	movs	r3, #13
200005cc:	18fb      	adds	r3, r7, r3
200005ce:	1dfa      	adds	r2, r7, #7
200005d0:	7812      	ldrb	r2, [r2, #0]
200005d2:	3a01      	subs	r2, #1
200005d4:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005d6:	260d      	movs	r6, #13
200005d8:	19bb      	adds	r3, r7, r6
200005da:	781b      	ldrb	r3, [r3, #0]
200005dc:	2240      	movs	r2, #64	; 0x40
200005de:	4313      	orrs	r3, r2
200005e0:	b2da      	uxtb	r2, r3
200005e2:	250e      	movs	r5, #14
200005e4:	197b      	adds	r3, r7, r5
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	0019      	movs	r1, r3
200005ea:	0010      	movs	r0, r2
200005ec:	f7ff feba 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005f0:	230c      	movs	r3, #12
200005f2:	18fb      	adds	r3, r7, r3
200005f4:	781b      	ldrb	r3, [r3, #0]
200005f6:	2248      	movs	r2, #72	; 0x48
200005f8:	4252      	negs	r2, r2
200005fa:	4313      	orrs	r3, r2
200005fc:	b2da      	uxtb	r2, r3
200005fe:	197b      	adds	r3, r7, r5
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	0019      	movs	r1, r3
20000604:	0010      	movs	r0, r2
20000606:	f7ff fead 	bl	20000364 <graphic_write_command>
	data_holder = graphic_read_data(controller);
2000060a:	230b      	movs	r3, #11
2000060c:	18fc      	adds	r4, r7, r3
2000060e:	197b      	adds	r3, r7, r5
20000610:	781b      	ldrb	r3, [r3, #0]
20000612:	0018      	movs	r0, r3
20000614:	f7ff fee9 	bl	200003ea <graphic_read_data>
20000618:	0003      	movs	r3, r0
2000061a:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
2000061c:	19bb      	adds	r3, r7, r6
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2240      	movs	r2, #64	; 0x40
20000622:	4313      	orrs	r3, r2
20000624:	b2da      	uxtb	r2, r3
20000626:	197b      	adds	r3, r7, r5
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	0019      	movs	r1, r3
2000062c:	0010      	movs	r0, r2
2000062e:	f7ff fe99 	bl	20000364 <graphic_write_command>
	if(set==1){
20000632:	1d7b      	adds	r3, r7, #5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	2b01      	cmp	r3, #1
20000638:	d109      	bne.n	2000064e <pixel+0x17c>
		mask |= data_holder;
2000063a:	210f      	movs	r1, #15
2000063c:	187b      	adds	r3, r7, r1
2000063e:	1879      	adds	r1, r7, r1
20000640:	220b      	movs	r2, #11
20000642:	18ba      	adds	r2, r7, r2
20000644:	7809      	ldrb	r1, [r1, #0]
20000646:	7812      	ldrb	r2, [r2, #0]
20000648:	430a      	orrs	r2, r1
2000064a:	701a      	strb	r2, [r3, #0]
2000064c:	e008      	b.n	20000660 <pixel+0x18e>
	}else{
		mask &= data_holder;
2000064e:	220f      	movs	r2, #15
20000650:	18bb      	adds	r3, r7, r2
20000652:	18ba      	adds	r2, r7, r2
20000654:	210b      	movs	r1, #11
20000656:	1879      	adds	r1, r7, r1
20000658:	7812      	ldrb	r2, [r2, #0]
2000065a:	7809      	ldrb	r1, [r1, #0]
2000065c:	400a      	ands	r2, r1
2000065e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000660:	230e      	movs	r3, #14
20000662:	18fb      	adds	r3, r7, r3
20000664:	781a      	ldrb	r2, [r3, #0]
20000666:	230f      	movs	r3, #15
20000668:	18fb      	adds	r3, r7, r3
2000066a:	781b      	ldrb	r3, [r3, #0]
2000066c:	0011      	movs	r1, r2
2000066e:	0018      	movs	r0, r3
20000670:	f7ff fe98 	bl	200003a4 <graphic_write_data>
20000674:	e000      	b.n	20000678 <pixel+0x1a6>
	if((x > 128)||(y > 64)){return;}
20000676:	46c0      	nop			; (mov r8, r8)
}
20000678:	46bd      	mov	sp, r7
2000067a:	b005      	add	sp, #20
2000067c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000067e:	46c0      	nop			; (mov r8, r8)
20000680:	80000007 	andhi	r0, r0, r7
20000684:	200009e4 	andcs	r0, r0, r4, ror #19

20000688 <set_object_speed>:

// 					OBJECT FUNCTIONS					//

void set_object_speed(POBJECT o, int speedx, int speedy){
20000688:	b580      	push	{r7, lr}
2000068a:	b084      	sub	sp, #16
2000068c:	af00      	add	r7, sp, #0
2000068e:	60f8      	str	r0, [r7, #12]
20000690:	60b9      	str	r1, [r7, #8]
20000692:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000694:	68fb      	ldr	r3, [r7, #12]
20000696:	68ba      	ldr	r2, [r7, #8]
20000698:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
2000069a:	68fb      	ldr	r3, [r7, #12]
2000069c:	687a      	ldr	r2, [r7, #4]
2000069e:	609a      	str	r2, [r3, #8]
}
200006a0:	46c0      	nop			; (mov r8, r8)
200006a2:	46bd      	mov	sp, r7
200006a4:	b004      	add	sp, #16
200006a6:	bd80      	pop	{r7, pc}

200006a8 <draw_object>:

void draw_object(POBJECT o){
200006a8:	b580      	push	{r7, lr}
200006aa:	b084      	sub	sp, #16
200006ac:	af00      	add	r7, sp, #0
200006ae:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006b0:	2300      	movs	r3, #0
200006b2:	60fb      	str	r3, [r7, #12]
200006b4:	e020      	b.n	200006f8 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	681a      	ldr	r2, [r3, #0]
200006ba:	68fb      	ldr	r3, [r7, #12]
200006bc:	3304      	adds	r3, #4
200006be:	005b      	lsls	r3, r3, #1
200006c0:	18d3      	adds	r3, r2, r3
200006c2:	3304      	adds	r3, #4
200006c4:	781a      	ldrb	r2, [r3, #0]
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	68db      	ldr	r3, [r3, #12]
200006ca:	b2db      	uxtb	r3, r3
200006cc:	18d3      	adds	r3, r2, r3
200006ce:	b2d8      	uxtb	r0, r3
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	681a      	ldr	r2, [r3, #0]
200006d4:	68fb      	ldr	r3, [r7, #12]
200006d6:	3304      	adds	r3, #4
200006d8:	005b      	lsls	r3, r3, #1
200006da:	18d3      	adds	r3, r2, r3
200006dc:	3305      	adds	r3, #5
200006de:	781a      	ldrb	r2, [r3, #0]
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	691b      	ldr	r3, [r3, #16]
200006e4:	b2db      	uxtb	r3, r3
200006e6:	18d3      	adds	r3, r2, r3
200006e8:	b2db      	uxtb	r3, r3
200006ea:	2201      	movs	r2, #1
200006ec:	0019      	movs	r1, r3
200006ee:	f7ff fef0 	bl	200004d2 <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006f2:	68fb      	ldr	r3, [r7, #12]
200006f4:	3301      	adds	r3, #1
200006f6:	60fb      	str	r3, [r7, #12]
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	681b      	ldr	r3, [r3, #0]
200006fc:	681b      	ldr	r3, [r3, #0]
200006fe:	68fa      	ldr	r2, [r7, #12]
20000700:	429a      	cmp	r2, r3
20000702:	dbd8      	blt.n	200006b6 <draw_object+0xe>
	}
}
20000704:	46c0      	nop			; (mov r8, r8)
20000706:	46c0      	nop			; (mov r8, r8)
20000708:	46bd      	mov	sp, r7
2000070a:	b004      	add	sp, #16
2000070c:	bd80      	pop	{r7, pc}

2000070e <clear_object>:

void clear_object(POBJECT o){
2000070e:	b580      	push	{r7, lr}
20000710:	b084      	sub	sp, #16
20000712:	af00      	add	r7, sp, #0
20000714:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
20000716:	2300      	movs	r3, #0
20000718:	60fb      	str	r3, [r7, #12]
2000071a:	e020      	b.n	2000075e <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	681a      	ldr	r2, [r3, #0]
20000720:	68fb      	ldr	r3, [r7, #12]
20000722:	3304      	adds	r3, #4
20000724:	005b      	lsls	r3, r3, #1
20000726:	18d3      	adds	r3, r2, r3
20000728:	3304      	adds	r3, #4
2000072a:	781a      	ldrb	r2, [r3, #0]
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	68db      	ldr	r3, [r3, #12]
20000730:	b2db      	uxtb	r3, r3
20000732:	18d3      	adds	r3, r2, r3
20000734:	b2d8      	uxtb	r0, r3
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	681a      	ldr	r2, [r3, #0]
2000073a:	68fb      	ldr	r3, [r7, #12]
2000073c:	3304      	adds	r3, #4
2000073e:	005b      	lsls	r3, r3, #1
20000740:	18d3      	adds	r3, r2, r3
20000742:	3305      	adds	r3, #5
20000744:	781a      	ldrb	r2, [r3, #0]
20000746:	687b      	ldr	r3, [r7, #4]
20000748:	691b      	ldr	r3, [r3, #16]
2000074a:	b2db      	uxtb	r3, r3
2000074c:	18d3      	adds	r3, r2, r3
2000074e:	b2db      	uxtb	r3, r3
20000750:	2200      	movs	r2, #0
20000752:	0019      	movs	r1, r3
20000754:	f7ff febd 	bl	200004d2 <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	3301      	adds	r3, #1
2000075c:	60fb      	str	r3, [r7, #12]
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	681b      	ldr	r3, [r3, #0]
20000762:	681b      	ldr	r3, [r3, #0]
20000764:	68fa      	ldr	r2, [r7, #12]
20000766:	429a      	cmp	r2, r3
20000768:	dbd8      	blt.n	2000071c <clear_object+0xe>
	}
}
2000076a:	46c0      	nop			; (mov r8, r8)
2000076c:	46c0      	nop			; (mov r8, r8)
2000076e:	46bd      	mov	sp, r7
20000770:	b004      	add	sp, #16
20000772:	bd80      	pop	{r7, pc}

20000774 <move_object>:

void move_object(POBJECT o){
20000774:	b580      	push	{r7, lr}
20000776:	b084      	sub	sp, #16
20000778:	af00      	add	r7, sp, #0
2000077a:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	0018      	movs	r0, r3
20000780:	f7ff ffc5 	bl	2000070e <clear_object>
	int newx = o->posx + o->dx;
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	68da      	ldr	r2, [r3, #12]
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	685b      	ldr	r3, [r3, #4]
2000078c:	18d3      	adds	r3, r2, r3
2000078e:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000790:	687b      	ldr	r3, [r7, #4]
20000792:	691a      	ldr	r2, [r3, #16]
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	689b      	ldr	r3, [r3, #8]
20000798:	18d3      	adds	r3, r2, r3
2000079a:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	2b00      	cmp	r3, #0
200007a0:	dc08      	bgt.n	200007b4 <move_object+0x40>
		o->dx = -o->dx;
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	685b      	ldr	r3, [r3, #4]
200007a6:	425a      	negs	r2, r3
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	605a      	str	r2, [r3, #4]
		o->posx = 1;
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	2201      	movs	r2, #1
200007b0:	60da      	str	r2, [r3, #12]
200007b2:	e03a      	b.n	2000082a <move_object+0xb6>
	}
	else if((newx + o->geo->sizex) > 128){
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	681b      	ldr	r3, [r3, #0]
200007b8:	685a      	ldr	r2, [r3, #4]
200007ba:	68fb      	ldr	r3, [r7, #12]
200007bc:	18d3      	adds	r3, r2, r3
200007be:	2b80      	cmp	r3, #128	; 0x80
200007c0:	dd0c      	ble.n	200007dc <move_object+0x68>
		o->dx = -o->dx;
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	685b      	ldr	r3, [r3, #4]
200007c6:	425a      	negs	r2, r3
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	681b      	ldr	r3, [r3, #0]
200007d0:	685b      	ldr	r3, [r3, #4]
200007d2:	2280      	movs	r2, #128	; 0x80
200007d4:	1ad2      	subs	r2, r2, r3
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	60da      	str	r2, [r3, #12]
200007da:	e026      	b.n	2000082a <move_object+0xb6>
	}
	else if(newy < 1){
200007dc:	68bb      	ldr	r3, [r7, #8]
200007de:	2b00      	cmp	r3, #0
200007e0:	dc08      	bgt.n	200007f4 <move_object+0x80>
		o->dy = -o->dy;
200007e2:	687b      	ldr	r3, [r7, #4]
200007e4:	689b      	ldr	r3, [r3, #8]
200007e6:	425a      	negs	r2, r3
200007e8:	687b      	ldr	r3, [r7, #4]
200007ea:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200007ec:	687b      	ldr	r3, [r7, #4]
200007ee:	2201      	movs	r2, #1
200007f0:	611a      	str	r2, [r3, #16]
200007f2:	e01a      	b.n	2000082a <move_object+0xb6>
	}
	else if(newy > 64 - o->geo->sizey){
200007f4:	687b      	ldr	r3, [r7, #4]
200007f6:	681b      	ldr	r3, [r3, #0]
200007f8:	689b      	ldr	r3, [r3, #8]
200007fa:	2240      	movs	r2, #64	; 0x40
200007fc:	1ad3      	subs	r3, r2, r3
200007fe:	68ba      	ldr	r2, [r7, #8]
20000800:	429a      	cmp	r2, r3
20000802:	dd0c      	ble.n	2000081e <move_object+0xaa>
		o->dy = -o->dy;
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	689b      	ldr	r3, [r3, #8]
20000808:	425a      	negs	r2, r3
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	681b      	ldr	r3, [r3, #0]
20000812:	689b      	ldr	r3, [r3, #8]
20000814:	2240      	movs	r2, #64	; 0x40
20000816:	1ad2      	subs	r2, r2, r3
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	611a      	str	r2, [r3, #16]
2000081c:	e005      	b.n	2000082a <move_object+0xb6>
	}else{
		o->posx = newx;
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	68fa      	ldr	r2, [r7, #12]
20000822:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	68ba      	ldr	r2, [r7, #8]
20000828:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	0018      	movs	r0, r3
2000082e:	f7ff ff3b 	bl	200006a8 <draw_object>
}
20000832:	46c0      	nop			; (mov r8, r8)
20000834:	46bd      	mov	sp, r7
20000836:	b004      	add	sp, #16
20000838:	bd80      	pop	{r7, pc}

2000083a <main>:

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 1, 1, draw_object, clear_object, move_object, set_object_speed};

void main(void){
2000083a:	b580      	push	{r7, lr}
2000083c:	b082      	sub	sp, #8
2000083e:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
20000840:	4b0b      	ldr	r3, [pc, #44]	; (20000870 <main+0x36>)
20000842:	607b      	str	r3, [r7, #4]
	init_app();
20000844:	f7ff fbe4 	bl	20000010 <init_app>
	graphic_initialize();
20000848:	f7ff fde4 	bl	20000414 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	p->set_speed(p,4,1);
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	6a1b      	ldr	r3, [r3, #32]
20000850:	6878      	ldr	r0, [r7, #4]
20000852:	2201      	movs	r2, #1
20000854:	2104      	movs	r1, #4
20000856:	4798      	blx	r3
	p->posx = 25;
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	2219      	movs	r2, #25
2000085c:	60da      	str	r2, [r3, #12]
	p->posy = 25;
2000085e:	687b      	ldr	r3, [r7, #4]
20000860:	2219      	movs	r2, #25
20000862:	611a      	str	r2, [r3, #16]
	while(1){
		p->move(p);
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	69db      	ldr	r3, [r3, #28]
20000868:	687a      	ldr	r2, [r7, #4]
2000086a:	0010      	movs	r0, r2
2000086c:	4798      	blx	r3
2000086e:	e7f9      	b.n	20000864 <main+0x2a>
20000870:	200009c0 	andcs	r0, r0, r0, asr #19

20000874 <__udivsi3>:
20000874:	2200      	movs	r2, #0
20000876:	0843      	lsrs	r3, r0, #1
20000878:	428b      	cmp	r3, r1
2000087a:	d374      	bcc.n	20000966 <__udivsi3+0xf2>
2000087c:	0903      	lsrs	r3, r0, #4
2000087e:	428b      	cmp	r3, r1
20000880:	d35f      	bcc.n	20000942 <__udivsi3+0xce>
20000882:	0a03      	lsrs	r3, r0, #8
20000884:	428b      	cmp	r3, r1
20000886:	d344      	bcc.n	20000912 <__udivsi3+0x9e>
20000888:	0b03      	lsrs	r3, r0, #12
2000088a:	428b      	cmp	r3, r1
2000088c:	d328      	bcc.n	200008e0 <__udivsi3+0x6c>
2000088e:	0c03      	lsrs	r3, r0, #16
20000890:	428b      	cmp	r3, r1
20000892:	d30d      	bcc.n	200008b0 <__udivsi3+0x3c>
20000894:	22ff      	movs	r2, #255	; 0xff
20000896:	0209      	lsls	r1, r1, #8
20000898:	ba12      	rev	r2, r2
2000089a:	0c03      	lsrs	r3, r0, #16
2000089c:	428b      	cmp	r3, r1
2000089e:	d302      	bcc.n	200008a6 <__udivsi3+0x32>
200008a0:	1212      	asrs	r2, r2, #8
200008a2:	0209      	lsls	r1, r1, #8
200008a4:	d065      	beq.n	20000972 <__udivsi3+0xfe>
200008a6:	0b03      	lsrs	r3, r0, #12
200008a8:	428b      	cmp	r3, r1
200008aa:	d319      	bcc.n	200008e0 <__udivsi3+0x6c>
200008ac:	e000      	b.n	200008b0 <__udivsi3+0x3c>
200008ae:	0a09      	lsrs	r1, r1, #8
200008b0:	0bc3      	lsrs	r3, r0, #15
200008b2:	428b      	cmp	r3, r1
200008b4:	d301      	bcc.n	200008ba <__udivsi3+0x46>
200008b6:	03cb      	lsls	r3, r1, #15
200008b8:	1ac0      	subs	r0, r0, r3
200008ba:	4152      	adcs	r2, r2
200008bc:	0b83      	lsrs	r3, r0, #14
200008be:	428b      	cmp	r3, r1
200008c0:	d301      	bcc.n	200008c6 <__udivsi3+0x52>
200008c2:	038b      	lsls	r3, r1, #14
200008c4:	1ac0      	subs	r0, r0, r3
200008c6:	4152      	adcs	r2, r2
200008c8:	0b43      	lsrs	r3, r0, #13
200008ca:	428b      	cmp	r3, r1
200008cc:	d301      	bcc.n	200008d2 <__udivsi3+0x5e>
200008ce:	034b      	lsls	r3, r1, #13
200008d0:	1ac0      	subs	r0, r0, r3
200008d2:	4152      	adcs	r2, r2
200008d4:	0b03      	lsrs	r3, r0, #12
200008d6:	428b      	cmp	r3, r1
200008d8:	d301      	bcc.n	200008de <__udivsi3+0x6a>
200008da:	030b      	lsls	r3, r1, #12
200008dc:	1ac0      	subs	r0, r0, r3
200008de:	4152      	adcs	r2, r2
200008e0:	0ac3      	lsrs	r3, r0, #11
200008e2:	428b      	cmp	r3, r1
200008e4:	d301      	bcc.n	200008ea <__udivsi3+0x76>
200008e6:	02cb      	lsls	r3, r1, #11
200008e8:	1ac0      	subs	r0, r0, r3
200008ea:	4152      	adcs	r2, r2
200008ec:	0a83      	lsrs	r3, r0, #10
200008ee:	428b      	cmp	r3, r1
200008f0:	d301      	bcc.n	200008f6 <__udivsi3+0x82>
200008f2:	028b      	lsls	r3, r1, #10
200008f4:	1ac0      	subs	r0, r0, r3
200008f6:	4152      	adcs	r2, r2
200008f8:	0a43      	lsrs	r3, r0, #9
200008fa:	428b      	cmp	r3, r1
200008fc:	d301      	bcc.n	20000902 <__udivsi3+0x8e>
200008fe:	024b      	lsls	r3, r1, #9
20000900:	1ac0      	subs	r0, r0, r3
20000902:	4152      	adcs	r2, r2
20000904:	0a03      	lsrs	r3, r0, #8
20000906:	428b      	cmp	r3, r1
20000908:	d301      	bcc.n	2000090e <__udivsi3+0x9a>
2000090a:	020b      	lsls	r3, r1, #8
2000090c:	1ac0      	subs	r0, r0, r3
2000090e:	4152      	adcs	r2, r2
20000910:	d2cd      	bcs.n	200008ae <__udivsi3+0x3a>
20000912:	09c3      	lsrs	r3, r0, #7
20000914:	428b      	cmp	r3, r1
20000916:	d301      	bcc.n	2000091c <__udivsi3+0xa8>
20000918:	01cb      	lsls	r3, r1, #7
2000091a:	1ac0      	subs	r0, r0, r3
2000091c:	4152      	adcs	r2, r2
2000091e:	0983      	lsrs	r3, r0, #6
20000920:	428b      	cmp	r3, r1
20000922:	d301      	bcc.n	20000928 <__udivsi3+0xb4>
20000924:	018b      	lsls	r3, r1, #6
20000926:	1ac0      	subs	r0, r0, r3
20000928:	4152      	adcs	r2, r2
2000092a:	0943      	lsrs	r3, r0, #5
2000092c:	428b      	cmp	r3, r1
2000092e:	d301      	bcc.n	20000934 <__udivsi3+0xc0>
20000930:	014b      	lsls	r3, r1, #5
20000932:	1ac0      	subs	r0, r0, r3
20000934:	4152      	adcs	r2, r2
20000936:	0903      	lsrs	r3, r0, #4
20000938:	428b      	cmp	r3, r1
2000093a:	d301      	bcc.n	20000940 <__udivsi3+0xcc>
2000093c:	010b      	lsls	r3, r1, #4
2000093e:	1ac0      	subs	r0, r0, r3
20000940:	4152      	adcs	r2, r2
20000942:	08c3      	lsrs	r3, r0, #3
20000944:	428b      	cmp	r3, r1
20000946:	d301      	bcc.n	2000094c <__udivsi3+0xd8>
20000948:	00cb      	lsls	r3, r1, #3
2000094a:	1ac0      	subs	r0, r0, r3
2000094c:	4152      	adcs	r2, r2
2000094e:	0883      	lsrs	r3, r0, #2
20000950:	428b      	cmp	r3, r1
20000952:	d301      	bcc.n	20000958 <__udivsi3+0xe4>
20000954:	008b      	lsls	r3, r1, #2
20000956:	1ac0      	subs	r0, r0, r3
20000958:	4152      	adcs	r2, r2
2000095a:	0843      	lsrs	r3, r0, #1
2000095c:	428b      	cmp	r3, r1
2000095e:	d301      	bcc.n	20000964 <__udivsi3+0xf0>
20000960:	004b      	lsls	r3, r1, #1
20000962:	1ac0      	subs	r0, r0, r3
20000964:	4152      	adcs	r2, r2
20000966:	1a41      	subs	r1, r0, r1
20000968:	d200      	bcs.n	2000096c <__udivsi3+0xf8>
2000096a:	4601      	mov	r1, r0
2000096c:	4152      	adcs	r2, r2
2000096e:	4610      	mov	r0, r2
20000970:	4770      	bx	lr
20000972:	e7ff      	b.n	20000974 <__udivsi3+0x100>
20000974:	b501      	push	{r0, lr}
20000976:	2000      	movs	r0, #0
20000978:	f000 f806 	bl	20000988 <__aeabi_idiv0>
2000097c:	bd02      	pop	{r1, pc}
2000097e:	46c0      	nop			; (mov r8, r8)

20000980 <__aeabi_uidivmod>:
20000980:	2900      	cmp	r1, #0
20000982:	d0f7      	beq.n	20000974 <__udivsi3+0x100>
20000984:	e776      	b.n	20000874 <__udivsi3>
20000986:	4770      	bx	lr

20000988 <__aeabi_idiv0>:
20000988:	4770      	bx	lr
2000098a:	46c0      	nop			; (mov r8, r8)

2000098c <ball_geometry>:
2000098c:	0000000c 	andeq	r0, r0, ip
20000990:	00000004 	andeq	r0, r0, r4
20000994:	00000004 	andeq	r0, r0, r4
20000998:	02000100 	andeq	r0, r0, #0, 2
2000099c:	01010001 	tsteq	r1, r1
200009a0:	03010201 	movweq	r0, #4609	; 0x1201
200009a4:	01020002 	tsteq	r2, r2
200009a8:	03020202 	movweq	r0, #8706	; 0x2202
200009ac:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200009c0 <ball>:
200009c0:	2000098c 	andcs	r0, r0, ip, lsl #19
	...
200009cc:	00000001 	andeq	r0, r0, r1
200009d0:	00000001 	andeq	r0, r0, r1
200009d4:	200006a9 	andcs	r0, r0, r9, lsr #13
200009d8:	2000070f 	andcs	r0, r0, pc, lsl #14
200009dc:	20000775 	andcs	r0, r0, r5, ror r7
200009e0:	20000689 	andcs	r0, r0, r9, lsl #13
200009e4:	2000053e 	andcs	r0, r0, lr, lsr r5
200009e8:	20000548 	andcs	r0, r0, r8, asr #10
200009ec:	20000552 	andcs	r0, r0, r2, asr r5
200009f0:	2000055c 	andcs	r0, r0, ip, asr r5
200009f4:	20000566 	andcs	r0, r0, r6, ror #10
200009f8:	20000570 	andcs	r0, r0, r0, ror r5
200009fc:	2000057a 	andcs	r0, r0, sl, ror r5
20000a00:	20000584 	andcs	r0, r0, r4, lsl #11

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000637 	andeq	r0, r0, r7, lsr r6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000019a 	muleq	r0, sl, r1
  10:	0002280c 	andeq	r2, r2, ip, lsl #16
  14:	0000bb00 	andeq	fp, r0, r0, lsl #22
	...
  24:	017a0200 	cmneq	sl, r0, lsl #4
  28:	2b010000 	blcs	40030 <startup-0x1ffbffd0>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000085 	andeq	r0, r0, r5, lsl #1
  38:	00006c04 	andeq	r6, r0, r4, lsl #24
  3c:	2e010200 	cdpcs	2, 0, cr0, cr1, cr0, {0}
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a2f01 	strcs	r2, [sl, #-3841]	; 0xfffff0ff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250a30 	eoreq	r0, r5, r0, lsr sl
  58:	00010000 	andeq	r0, r1, r0
  5c:	00007f02 	andeq	r7, r0, r2, lsl #30
  60:	02310100 	eorseq	r0, r1, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00016704 	andeq	r6, r1, r4, lsl #14
  6c:	33013400 	movwcc	r3, #5120	; 0x1400
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	03190600 	tsteq	r9, #0, 12
  78:	34010000 	strcc	r0, [r1], #-0
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	82060000 	andhi	r0, r6, #0
  84:	01000001 	tsteq	r0, r1
  88:	00a90635 	adceq	r0, r9, r5, lsr r6
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000188 	andeq	r0, r0, r8, lsl #3
  94:	a9063601 	stmdbge	r6, {r0, r9, sl, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0083701 	andlt	r3, r8, r1, lsl #14
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	5a070403 	bpl	1c10d4 <startup-0x1fe3ef2c>
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68033801 	stmdavs	r3, {r0, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e3801 	svcle	0x000e3801
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	03020400 	movweq	r0, #9216	; 0x2400
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	0166103a 	cmneq	r6, sl, lsr r0
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30c3b 	sbcseq	r0, r3, fp, lsr ip
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a9063c 	adceq	r0, r9, ip, lsr r6
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90a3c 	adceq	r0, r9, ip, lsr sl
 114:	06080000 	streq	r0, [r8], -r0
 118:	00000307 	andeq	r0, r0, r7, lsl #6
 11c:	a9063d01 	stmdbge	r6, {r0, r8, sl, fp, ip, sp}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00009306 	andeq	r9, r0, r6, lsl #6
 128:	0b3d0100 	bleq	f40530 <startup-0x1f0bfad0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02230610 	eoreq	r0, r3, #16, 12	; 0x1000000
 134:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	35061400 	strcc	r1, [r6, #-1024]	; 0xfffffc00
 140:	01000001 	tsteq	r0, r1
 144:	01770a3f 	cmneq	r7, pc, lsr sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	0000002c 	andeq	r0, r0, ip, lsr #32
 150:	770a4001 	strvc	r4, [sl, -r1]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	0002c506 	andeq	ip, r2, r6, lsl #10
 15c:	0a410100 	beq	1040564 <startup-0x1efbfa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	00035102 	andeq	r5, r3, r2, lsl #2
 19c:	03420100 	movteq	r0, #8448	; 0x2100
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	00035002 	andeq	r5, r3, r2
 1a8:	0c420100 	stfeqe	f0, [r2], {-0}
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0000980d 	andeq	r9, r0, sp, lsl #16
 1b4:	014d0100 	mrseq	r0, (UNDEF: 93)
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
 1c0:	0d200009 	stceq	0, cr0, [r0, #-36]!	; 0xffffffdc
 1c4:	0000021e 	andeq	r0, r0, lr, lsl r2
 1c8:	0f014e01 	svceq	0x00014e01
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	09c00305 	stmibeq	r0, {r0, r2, r8, r9}^
 1d4:	0c0e2000 	stceq	0, cr2, [lr], {-0}
 1d8:	01000001 	tsteq	r0, r1
 1dc:	3a060150 	bcc	180724 <startup-0x1fe7f8dc>
 1e0:	3a200008 	bcc	800208 <startup-0x1f7ffdf8>
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0001fc9c 	muleq	r1, ip, ip
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a015101 	beq	545fc <startup-0x1ffaba04>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1fc:	0003360e 	andeq	r3, r3, lr, lsl #12
 200:	01320100 	teqeq	r2, r0, lsl #2
 204:	00077406 	andeq	r7, r7, r6, lsl #8
 208:	0000c620 	andeq	ip, r0, r0, lsr #12
 20c:	429c0100 	addsmi	r0, ip, #0, 2
 210:	10000002 	andne	r0, r0, r2
 214:	3201006f 	andcc	r0, r1, #111	; 0x6f
 218:	01a41a01 			; <UNDEFINED> instruction: 0x01a41a01
 21c:	91020000 	mrsls	r0, (UNDEF: 2)
 220:	01500d6c 	cmpeq	r0, ip, ror #26
 224:	34010000 	strcc	r0, [r1], #-0
 228:	00a90601 	adceq	r0, r9, r1, lsl #12
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	01550d74 	cmpeq	r5, r4, ror sp
 234:	35010000 	strcc	r0, [r1, #-0]
 238:	00a90601 	adceq	r0, r9, r1, lsl #12
 23c:	91020000 	mrsls	r0, (UNDEF: 2)
 240:	e40e0070 	str	r0, [lr], #-112	; 0xffffff90
 244:	01000002 	tsteq	r0, r2
 248:	0e06012c 	adfeqsp	f0, f6, #4.0
 24c:	66200007 	strtvs	r0, [r0], -r7
 250:	01000000 	mrseq	r0, (UNDEF: 0)
 254:	0002809c 	muleq	r2, ip, r0
 258:	006f1000 	rsbeq	r1, pc, r0
 25c:	1b012c01 	blne	4b268 <startup-0x1ffb4d98>
 260:	000001a4 	andeq	r0, r0, r4, lsr #3
 264:	116c9102 	cmnne	ip, r2, lsl #2
 268:	20000716 	andcs	r0, r0, r6, lsl r7
 26c:	00000054 	andeq	r0, r0, r4, asr r0
 270:	0100740f 	tsteq	r0, pc, lsl #8
 274:	a90a012d 	stmdbge	sl, {r0, r2, r3, r5, r8}
 278:	02000000 	andeq	r0, r0, #0
 27c:	00007491 	muleq	r0, r1, r4
 280:	0000200e 	andeq	r2, r0, lr
 284:	01260100 			; <UNDEFINED> instruction: 0x01260100
 288:	0006a806 	andeq	sl, r6, r6, lsl #16
 28c:	00006620 	andeq	r6, r0, r0, lsr #12
 290:	be9c0100 	fmllte	f0, f4, f0
 294:	10000002 	andne	r0, r0, r2
 298:	2601006f 	strcs	r0, [r1], -pc, rrx
 29c:	01a41a01 			; <UNDEFINED> instruction: 0x01a41a01
 2a0:	91020000 	mrsls	r0, (UNDEF: 2)
 2a4:	06b0116c 	ldrteq	r1, [r0], ip, ror #2
 2a8:	00542000 	subseq	r2, r4, r0
 2ac:	740f0000 	strvc	r0, [pc], #-0	; 2b4 <startup-0x1ffffd4c>
 2b0:	01270100 			; <UNDEFINED> instruction: 0x01270100
 2b4:	0000a90a 	andeq	sl, r0, sl, lsl #18
 2b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2bc:	b4120000 	ldrlt	r0, [r2], #-0
 2c0:	01000002 	tsteq	r0, r2
 2c4:	88060121 	stmdahi	r6, {r0, r5, r8}
 2c8:	20200006 	eorcs	r0, r0, r6
 2cc:	01000000 	mrseq	r0, (UNDEF: 0)
 2d0:	0003049c 	muleq	r3, ip, r4
 2d4:	006f1000 	rsbeq	r1, pc, r0
 2d8:	1f012101 	svcne	0x00012101
 2dc:	000001a4 	andeq	r0, r0, r4, lsr #3
 2e0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 2e4:	00000342 	andeq	r0, r0, r2, asr #6
 2e8:	26012101 	strcs	r2, [r1], -r1, lsl #2
 2ec:	000000a9 	andeq	r0, r0, r9, lsr #1
 2f0:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 2f4:	00000349 	andeq	r0, r0, r9, asr #6
 2f8:	32012101 	andcc	r2, r1, #1073741824	; 0x40000000
 2fc:	000000a9 	andeq	r0, r0, r9, lsr #1
 300:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 304:	00005a14 	andeq	r5, r0, r4, lsl sl
 308:	06f80100 	ldrbteq	r0, [r8], r0, lsl #2
 30c:	200004d2 	ldrdcs	r0, [r0], -r2
 310:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 314:	038f9c01 	orreq	r9, pc, #256	; 0x100
 318:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
 31c:	14f80100 	ldrbtne	r0, [r8], #256	; 0x100
 320:	00000025 	andeq	r0, r0, r5, lsr #32
 324:	155f9102 	ldrbne	r9, [pc, #-258]	; 22a <startup-0x1ffffdd6>
 328:	f8010079 			; <UNDEFINED> instruction: 0xf8010079
 32c:	0000251f 	andeq	r2, r0, pc, lsl r5
 330:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
 334:	74657315 	strbtvc	r7, [r5], #-789	; 0xfffffceb
 338:	2af80100 	bcs	ffe00740 <ball+0xdfdffd80>
 33c:	00000025 	andeq	r0, r0, r5, lsr #32
 340:	165d9102 	ldrbne	r9, [sp], -r2, lsl #2
 344:	00000284 	andeq	r0, r0, r4, lsl #5
 348:	250afa01 	strcs	pc, [sl, #-2561]	; 0xfffff5ff
 34c:	02000000 	andeq	r0, r0, #0
 350:	38166791 	ldmdacc	r6, {r0, r4, r7, r8, r9, sl, sp, lr}
 354:	01000000 	mrseq	r0, (UNDEF: 0)
 358:	002510fa 	strdeq	r1, [r5], -sl	; <UNPREDICTABLE>
 35c:	91020000 	mrsls	r0, (UNDEF: 2)
 360:	00b41666 	adcseq	r1, r4, r6, ror #12
 364:	fa010000 	blx	4036c <startup-0x1ffbfc94>
 368:	0000251c 	andeq	r2, r0, ip, lsl r5
 36c:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 370:	00007316 	andeq	r7, r0, r6, lsl r3
 374:	24fa0100 	ldrbtcs	r0, [sl], #256	; 0x100
 378:	00000025 	andeq	r0, r0, r5, lsr #32
 37c:	16639102 	strbtne	r9, [r3], -r2, lsl #2
 380:	00000289 	andeq	r0, r0, r9, lsl #5
 384:	250afb01 	strcs	pc, [sl, #-2817]	; 0xfffff4ff
 388:	02000000 	andeq	r0, r0, #0
 38c:	17006491 			; <UNDEFINED> instruction: 0x17006491
 390:	000002cf 	andeq	r0, r0, pc, asr #5
 394:	6a06ee01 	bvs	1bbba0 <startup-0x1fe44460>
 398:	68200004 	stmdavs	r0!, {r2}
 39c:	01000000 	mrseq	r0, (UNDEF: 0)
 3a0:	0003d89c 	muleq	r3, ip, r8
 3a4:	04701100 	ldrbteq	r1, [r0], #-256	; 0xffffff00
 3a8:	00582000 	subseq	r2, r8, r0
 3ac:	55160000 	ldrpl	r0, [r6, #-0]
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	00250fef 	eoreq	r0, r5, pc, ror #31
 3b8:	91020000 	mrsls	r0, (UNDEF: 2)
 3bc:	04941177 	ldreq	r1, [r4], #375	; 0x177
 3c0:	00222000 	eoreq	r2, r2, r0
 3c4:	61180000 	tstvs	r8, r0
 3c8:	01006464 	tsteq	r0, r4, ror #8
 3cc:	00250ff2 	strdeq	r0, [r5], -r2	; <UNPREDICTABLE>
 3d0:	91020000 	mrsls	r0, (UNDEF: 2)
 3d4:	00000076 	andeq	r0, r0, r6, ror r0
 3d8:	00011119 	andeq	r1, r1, r9, lsl r1
 3dc:	06e00100 	strbteq	r0, [r0], r0, lsl #2
 3e0:	20000414 	andcs	r0, r0, r4, lsl r4
 3e4:	00000056 	andeq	r0, r0, r6, asr r0
 3e8:	431a9c01 	tstmi	sl, #256	; 0x100
 3ec:	01000000 	mrseq	r0, (UNDEF: 0)
 3f0:	002509db 	ldrdeq	r0, [r5], -fp	; <UNPREDICTABLE>
 3f4:	03ea0000 	mvneq	r0, #0
 3f8:	002a2000 	eoreq	r2, sl, r0
 3fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 400:	00000414 	andeq	r0, r0, r4, lsl r4
 404:	0000381b 	andeq	r3, r0, fp, lsl r8
 408:	23db0100 	bicscs	r0, fp, #0, 2
 40c:	00000025 	andeq	r0, r0, r5, lsr #32
 410:	00779102 	rsbseq	r9, r7, r2, lsl #2
 414:	0002a114 	andeq	sl, r2, r4, lsl r1
 418:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
 41c:	200003a4 	andcs	r0, r0, r4, lsr #7
 420:	00000046 	andeq	r0, r0, r6, asr #32
 424:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
 428:	501b0000 	andspl	r0, fp, r0
 42c:	01000000 	mrseq	r0, (UNDEF: 0)
 430:	002521d3 	ldrdeq	r2, [r5], -r3	; <UNPREDICTABLE>
 434:	91020000 	mrsls	r0, (UNDEF: 2)
 438:	00381b77 	eorseq	r1, r8, r7, ror fp
 43c:	d3010000 	movwle	r0, #4096	; 0x1000
 440:	0000252f 	andeq	r2, r0, pc, lsr #10
 444:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 448:	000a1400 	andeq	r1, sl, r0, lsl #8
 44c:	cc010000 	stcgt	0, cr0, [r1], {-0}
 450:	00036406 	andeq	r6, r3, r6, lsl #8
 454:	00004020 	andeq	r4, r0, r0, lsr #32
 458:	7e9c0100 	fmlvce	f0, f4, f0
 45c:	1b000004 	blne	474 <startup-0x1ffffb8c>
 460:	00000018 	andeq	r0, r0, r8, lsl r0
 464:	2524cc01 	strcs	ip, [r4, #-3073]!	; 0xfffff3ff
 468:	02000000 	andeq	r0, r0, #0
 46c:	381b7791 	ldmdacc	fp, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 470:	01000000 	mrseq	r0, (UNDEF: 0)
 474:	002535cc 	eoreq	r3, r5, ip, asr #11
 478:	91020000 	mrsls	r0, (UNDEF: 2)
 47c:	a6140076 			; <UNDEFINED> instruction: 0xa6140076
 480:	01000000 	mrseq	r0, (UNDEF: 0)
 484:	02e406b7 	rsceq	r0, r4, #191889408	; 0xb700000
 488:	00802000 	addeq	r2, r0, r0
 48c:	9c010000 	stcls	0, cr0, [r1], {-0}
 490:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
 494:	00028f1b 	andeq	r8, r2, fp, lsl pc
 498:	1cb70100 	ldfnes	f0, [r7]
 49c:	00000025 	andeq	r0, r0, r5, lsr #32
 4a0:	1b779102 	blne	1de48b0 <startup-0x1e21b750>
 4a4:	00000038 	andeq	r0, r0, r8, lsr r0
 4a8:	252bb701 	strcs	fp, [fp, #-1793]!	; 0xfffff8ff
 4ac:	02000000 	andeq	r0, r0, #0
 4b0:	1a007691 	bne	1defc <startup-0x1ffe2104>
 4b4:	0000030c 	andeq	r0, r0, ip, lsl #6
 4b8:	2509a101 	strcs	sl, [r9, #-257]	; 0xfffffeff
 4bc:	54000000 	strpl	r0, [r0], #-0
 4c0:	90200002 	eorls	r0, r0, r2
 4c4:	01000000 	mrseq	r0, (UNDEF: 0)
 4c8:	0004eb9c 	muleq	r4, ip, fp
 4cc:	00381b00 	eorseq	r1, r8, r0, lsl #22
 4d0:	a1010000 	mrsge	r0, (UNDEF: 1)
 4d4:	0000251e 	andeq	r2, r0, lr, lsl r5
 4d8:	6f910200 	svcvs	0x00910200
 4dc:	00767218 	rsbseq	r7, r6, r8, lsl r2
 4e0:	250aa901 	strcs	sl, [sl, #-2305]	; 0xfffff6ff
 4e4:	02000000 	andeq	r0, r0, #0
 4e8:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 4ec:	00000323 	andeq	r0, r0, r3, lsr #6
 4f0:	ee068e01 	cdp	14, 0, cr8, cr6, cr1, {0}
 4f4:	66200001 	strtvs	r0, [r0], -r1
 4f8:	01000000 	mrseq	r0, (UNDEF: 0)
 4fc:	0031149c 	mlaseq	r1, ip, r4, r1
 500:	81010000 	mrshi	r0, (UNDEF: 1)
 504:	00018c06 	andeq	r8, r1, r6, lsl #24
 508:	00006220 	andeq	r6, r0, r0, lsr #4
 50c:	329c0100 	addscc	r0, ip, #0, 2
 510:	1b000005 	blne	52c <startup-0x1ffffad4>
 514:	00000038 	andeq	r0, r0, r8, lsr r0
 518:	25208101 	strcs	r8, [r0, #-257]!	; 0xfffffeff
 51c:	02000000 	andeq	r0, r0, #0
 520:	f1166f91 			; <UNDEFINED> instruction: 0xf1166f91
 524:	01000002 	tsteq	r0, r2
 528:	00250a82 	eoreq	r0, r5, r2, lsl #21
 52c:	91020000 	mrsls	r0, (UNDEF: 2)
 530:	241d0077 	ldrcs	r0, [sp], #-119	; 0xffffff89
 534:	01000001 	tsteq	r0, r1
 538:	0150067d 	cmpeq	r0, sp, ror r6
 53c:	003c2000 	eorseq	r2, ip, r0
 540:	9c010000 	stcls	0, cr0, [r1], {-0}
 544:	00000556 	andeq	r0, r0, r6, asr r5
 548:	01007815 	tsteq	r0, r5, lsl r8
 54c:	0025257d 	eoreq	r2, r5, sp, ror r5
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	3b1d0077 	blcc	740738 <startup-0x1f8bf8c8>
 558:	01000001 	tsteq	r0, r1
 55c:	010a0678 	tsteq	sl, r8, ror r6
 560:	00462000 	subeq	r2, r6, r0
 564:	9c010000 	stcls	0, cr0, [r1], {-0}
 568:	0000057a 	andeq	r0, r0, sl, ror r5
 56c:	01007815 	tsteq	r0, r5, lsl r8
 570:	00252378 	eoreq	r2, r5, r8, ror r3
 574:	91020000 	mrsls	r0, (UNDEF: 2)
 578:	f6190077 			; <UNDEFINED> instruction: 0xf6190077
 57c:	01000002 	tsteq	r0, r2
 580:	00f80671 	rscseq	r0, r8, r1, ror r6
 584:	00122000 	andseq	r2, r2, r0
 588:	9c010000 	stcls	0, cr0, [r1], {-0}
 58c:	00029514 	andeq	r9, r2, r4, lsl r5
 590:	06670100 	strbteq	r0, [r7], -r0, lsl #2
 594:	200000b2 	strhcs	r0, [r0], -r2
 598:	00000046 	andeq	r0, r0, r6, asr #32
 59c:	05c89c01 	strbeq	r9, [r8, #3073]	; 0xc01
 5a0:	6d150000 	ldcvs	0, cr0, [r5, #-0]
 5a4:	67010073 	smlsdxvs	r1, r3, r0, r0
 5a8:	0000c01f 	andeq	ip, r0, pc, lsl r0
 5ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5b0:	0000d011 	andeq	sp, r0, r1, lsl r0
 5b4:	00001e20 	andeq	r1, r0, r0, lsr #28
 5b8:	00691800 	rsbeq	r1, r9, r0, lsl #16
 5bc:	a90a6c01 	stmdbge	sl, {r0, sl, fp, sp, lr}
 5c0:	02000000 	andeq	r0, r0, #0
 5c4:	00007491 	muleq	r0, r1, r4
 5c8:	00006014 	andeq	r6, r0, r4, lsl r0
 5cc:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
 5d0:	20000070 	andcs	r0, r0, r0, ror r0
 5d4:	00000042 	andeq	r0, r0, r2, asr #32
 5d8:	06049c01 	streq	r9, [r4], -r1, lsl #24
 5dc:	75150000 	ldrvc	r0, [r5, #-0]
 5e0:	5d010073 	stcpl	0, cr0, [r1, #-460]	; 0xfffffe34
 5e4:	0000c01f 	andeq	ip, r0, pc, lsl r0
 5e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5ec:	00008e11 	andeq	r8, r0, r1, lsl lr
 5f0:	00001a20 	andeq	r1, r0, r0, lsr #20
 5f4:	00691800 	rsbeq	r1, r9, r0, lsl #16
 5f8:	a90a6201 	stmdbge	sl, {r0, r9, sp, lr}
 5fc:	02000000 	andeq	r0, r0, #0
 600:	00007491 	muleq	r0, r1, r4
 604:	00018e1e 	andeq	r8, r1, lr, lsl lr
 608:	06530100 	ldrbeq	r0, [r3], -r0, lsl #2
 60c:	20000028 	andcs	r0, r0, r8, lsr #32
 610:	00000048 	andeq	r0, r0, r8, asr #32
 614:	711e9c01 	tstvc	lr, r1, lsl #24
 618:	01000001 	tsteq	r0, r1
 61c:	0010064f 	andseq	r0, r0, pc, asr #12
 620:	00182000 	andseq	r2, r8, r0
 624:	9c010000 	stcls	0, cr0, [r1], {-0}
 628:	0002161e 	andeq	r1, r2, lr, lsl r6
 62c:	06470100 	strbeq	r0, [r7], -r0, lsl #2
 630:	20000000 	andcs	r0, r0, r0
 634:	0000000c 	andeq	r0, r0, ip
 638:	Address 0x00000638 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	03000510 	movweq	r0, #1296	; 0x510
  d8:	3b0b3a08 	blcc	2ce900 <startup-0x1fd31700>
  dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  e0:	00180213 	andseq	r0, r8, r3, lsl r2
  e4:	010b1100 	mrseq	r1, (UNDEF: 27)
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  f0:	03193f01 	tsteq	r9, #1, 30
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	97184006 	ldrls	r4, [r8, -r6]
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	05130000 	ldreq	r0, [r3, #-0]
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 118:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 11c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	0b390b3b 	bleq	e42e18 <startup-0x1f1bd1e8>
 128:	01111927 	tsteq	r1, r7, lsr #18
 12c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 130:	01194296 			; <UNDEFINED> instruction: 0x01194296
 134:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 138:	08030005 	stmdaeq	r3, {r0, r2}
 13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
 140:	13490b39 	movtne	r0, #39737	; 0x9b39
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	03003416 	movweq	r3, #1046	; 0x416
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 154:	00180213 	andseq	r0, r8, r3, lsl r2
 158:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 15c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 160:	0b3b0b3a 	bleq	ec2e50 <startup-0x1f13d1b0>
 164:	01110b39 	tsteq	r1, r9, lsr fp
 168:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 16c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 170:	18000013 	stmdane	r0, {r0, r1, r4}
 174:	08030034 	stmdaeq	r3, {r2, r4, r5}
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	13490b39 	movtne	r0, #39737	; 0x9b39
 180:	00001802 	andeq	r1, r0, r2, lsl #16
 184:	3f002e19 	svccc	0x00002e19
 188:	3a0e0319 	bcc	380df4 <startup-0x1fc7f20c>
 18c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 190:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 194:	96184006 	ldrls	r4, [r8], -r6
 198:	00001942 	andeq	r1, r0, r2, asr #18
 19c:	3f012e1a 	svccc	0x00012e1a
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1b0:	96184006 	ldrls	r4, [r8], -r6
 1b4:	13011942 	movwne	r1, #6466	; 0x1942
 1b8:	051b0000 	ldreq	r0, [fp, #-0]
 1bc:	3a0e0300 	bcc	380dc4 <startup-0x1fc7f23c>
 1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1c8:	1c000018 	stcne	0, cr0, [r0], {24}
 1cc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	0b390b3b 	bleq	e42ec8 <startup-0x1f1bd138>
 1d8:	01111927 	tsteq	r1, r7, lsr #18
 1dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1e0:	00194296 	mulseq	r9, r6, r2
 1e4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 1e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1ec:	0b3b0b3a 	bleq	ec2edc <startup-0x1f13d124>
 1f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1fc:	00130119 	andseq	r0, r3, r9, lsl r1
 200:	002e1e00 	eoreq	r1, lr, r0, lsl #28
 204:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 208:	0b3b0b3a 	bleq	ec2ef8 <startup-0x1f13d108>
 20c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 210:	06120111 			; <UNDEFINED> instruction: 0x06120111
 214:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 218:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000864 	andeq	r0, r0, r4, ror #16
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000874 	andcs	r0, r0, r4, ror r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000485 	andeq	r0, r0, r5, lsl #9
   4:	00720003 	rsbseq	r0, r2, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	734f2f37 	movtvc	r2, #65335	; 0xff37
  58:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  5c:	6262614c 	rsbvs	r6, r2, #76, 2
  60:	612f7261 			; <UNDEFINED> instruction: 0x612f7261
  64:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  68:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  6c:	74756100 	ldrbtvc	r6, [r5], #-256	; 0xffffff00
  70:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  74:	00632e67 	rsbeq	r2, r3, r7, ror #28
  78:	00000001 	andeq	r0, r0, r1
  7c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
  80:	00000002 	andeq	r0, r0, r2
  84:	00c60320 	sbceq	r0, r6, r0, lsr #6
  88:	13010501 	movwne	r0, #5377	; 0x1501
  8c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  90:	01000302 	tsteq	r0, r2, lsl #6
  94:	00140501 	andseq	r0, r4, r1, lsl #10
  98:	00100205 	andseq	r0, r0, r5, lsl #4
  9c:	ce032000 	cdpgt	0, 0, cr2, cr3, cr0, {0}
  a0:	02050100 	andeq	r0, r5, #0, 2
  a4:	200e052f 	andcs	r0, lr, pc, lsr #10
  a8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffab <ball+0xdffff5eb>
  ac:	02057617 	andeq	r7, r5, #24117248	; 0x1700000
  b0:	200c052f 	andcs	r0, ip, pc, lsr #10
  b4:	052f0205 	streq	r0, [pc, #-517]!	; fffffeb7 <ball+0xdffff4f7>
  b8:	0205200c 	andeq	r2, r5, #12
  bc:	200b052f 	andcs	r0, fp, pc, lsr #10
  c0:	052f0205 	streq	r0, [pc, #-517]!	; fffffec3 <ball+0xdffff503>
  c4:	0705200c 	streq	r2, [r5, -ip]
  c8:	000a052f 	andeq	r0, sl, pc, lsr #10
  cc:	20010402 	andcs	r0, r1, r2, lsl #8
  d0:	02001905 	andeq	r1, r0, #81920	; 0x14000
  d4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  d8:	04020007 	streq	r0, [r2], #-7
  dc:	02053c01 	andeq	r3, r5, #256	; 0x100
  e0:	200c0522 	andcs	r0, ip, r2, lsr #10
  e4:	052f0105 	streq	r0, [pc, #-261]!	; ffffffe7 <ball+0xdffff627>
  e8:	0505ae22 	streq	sl, [r5, #-3618]	; 0xfffff1de
  ec:	0a05834c 	beq	160e24 <startup-0x1fe9f1dc>
  f0:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
  f4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  f8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
  fc:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 100:	16052d03 	strne	r2, [r5], -r3, lsl #26
 104:	01040200 	mrseq	r0, R12_usr
 108:	0013053c 	andseq	r0, r3, ip, lsr r5
 10c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 110:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 114:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 118:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 11c:	4c06055a 	cfstr32mi	mvfx0, [r6], {90}	; 0x5a
 120:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 124:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 128:	04020003 	streq	r0, [r2], #-3
 12c:	1a052103 	bne	148540 <startup-0x1feb7ac0>
 130:	03040200 	movweq	r0, #16896	; 0x4200
 134:	00130557 	andseq	r0, r3, r7, asr r5
 138:	3c010402 	cfstrscc	mvf0, [r1], {2}
 13c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 140:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 144:	13053f01 	movwne	r3, #24321	; 0x5f01
 148:	2f02055a 	svccs	0x0002055a
 14c:	2f01052f 	svccs	0x0001052f
 150:	05402505 	strbeq	r2, [r0, #-1285]	; 0xfffffafb
 154:	1505670f 	strne	r6, [r5, #-1807]	; 0xfffff8f1
 158:	660f054a 	strvs	r0, [pc], -sl, asr #10
 15c:	83010559 	movwhi	r0, #5465	; 0x1559
 160:	05682705 	strbeq	r2, [r8, #-1797]!	; 0xfffff8fb
 164:	0105670f 	tsteq	r5, pc, lsl #14
 168:	2b051308 	blcs	144d90 <startup-0x1febb270>
 16c:	670a0576 	smlsdxvs	sl, r6, r5, r0
 170:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 174:	0b05c10c 	bleq	1705ac <startup-0x1fe8fa54>
 178:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
 17c:	0f053c03 	svceq	0x00053c03
 180:	3d060521 	cfstr32cc	mvfx0, [r6, #-132]	; 0xffffff7c
 184:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 188:	1b053d06 	blne	14f5a8 <startup-0x1feb0a58>
 18c:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 190:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 194:	1e052201 	cdpne	2, 0, cr2, cr5, cr1, {0}
 198:	2f02053e 	svccs	0x0002053e
 19c:	200d053d 	andcs	r0, sp, sp, lsr r5
 1a0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 194 <startup-0x1ffffe6c>
 1a4:	3003053d 	andcc	r0, r3, sp, lsr r5
 1a8:	053d2f3d 	ldreq	r2, [sp, #-3901]!	; 0xfffff0c3
 1ac:	21052f07 	tstcs	r5, r7, lsl #30
 1b0:	2005053c 	andcs	r0, r5, ip, lsr r5
 1b4:	052a0305 	streq	r0, [sl, #-773]!	; 0xfffffcfb
 1b8:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
 1bc:	0e053d23 	cdpeq	13, 0, cr3, cr5, cr3, {1}
 1c0:	2f010520 	svccs	0x00010520
 1c4:	05ae2905 	streq	r2, [lr, #2309]!	; 0x905
 1c8:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 1cc:	0205200d 	andeq	r2, r5, #13
 1d0:	2f593d2f 	svccs	0x00593d2f
 1d4:	2f0f053d 	svccs	0x000f053d
 1d8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 1dc:	053d4b02 	ldreq	r4, [sp, #-2818]!	; 0xfffff4fe
 1e0:	0405200e 	streq	r2, [r5], #-14
 1e4:	4b03052f 	blmi	c16a8 <startup-0x1ff3e958>
 1e8:	3004053d 	andcc	r0, r4, sp, lsr r5
 1ec:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 1f0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 1f4:	36053d01 	strcc	r3, [r5], -r1, lsl #26
 1f8:	910205ca 	smlabtls	r2, sl, r5, r0
 1fc:	05201005 	streq	r1, [r0, #-5]!
 200:	2f593d02 	svccs	0x00593d02
 204:	10052f3d 	andne	r2, r5, sp, lsr pc
 208:	4a04053e 	bmi	101708 <startup-0x1fefe8f8>
 20c:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 210:	05301005 	ldreq	r1, [r0, #-5]!
 214:	03054a04 	movweq	r4, #23044	; 0x5a04
 218:	02053d21 	andeq	r3, r5, #2112	; 0x840
 21c:	200f0530 	andcs	r0, pc, r0, lsr r5	; <UNPREDICTABLE>
 220:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 214 <startup-0x1ffffdec>
 224:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 228:	02057640 	andeq	r7, r5, #64, 12	; 0x4000000
 22c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 230:	05830105 	streq	r0, [r3, #261]	; 0x105
 234:	02054c3a 	andeq	r4, r5, #14848	; 0x3a00
 238:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 23c:	8301053d 	movwhi	r0, #5437	; 0x153d
 240:	054c2e05 	strbeq	r2, [ip, #-3589]	; 0xfffff1fb
 244:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 248:	67010559 	smlsdvs	r1, r9, r5, r0
 24c:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
 250:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 254:	4b3d3d3d 	blmi	f4f750 <startup-0x1f0b08b0>
 258:	4b4b4b4b 	blmi	12d2f8c <startup-0x1ed2d074>
 25c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 260:	0f053e1c 	svceq	0x00053e1c
 264:	3c02053d 	cfstr32cc	mvfx0, [r2], {61}	; 0x3d
 268:	9f210305 	svcls	0x00210305
 26c:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 270:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
 274:	03040200 	movweq	r0, #16896	; 0x4200
 278:	00250521 	eoreq	r0, r5, r1, lsr #10
 27c:	49030402 	stmdbmi	r3, {r1, sl}
 280:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 284:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 288:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 28c:	02054702 	andeq	r4, r5, #524288	; 0x80000
 290:	01040200 	mrseq	r0, R12_usr
 294:	51010558 	tstpl	r1, r8, asr r5
 298:	055a2e05 	ldrbeq	r2, [sl, #-3589]	; 0xfffff1fb
 29c:	0e05e504 	cfsh32eq	mvfx14, mvfx5, #4
 2a0:	02040200 	andeq	r0, r4, #0, 4
 2a4:	5a140558 	bpl	50180c <startup-0x1fafe7f4>
 2a8:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
 2ac:	0b05580a 	bleq	1562dc <startup-0x1fea9d24>
 2b0:	3c0f053e 	cfstr32cc	mvfx0, [pc], {62}	; 0x3e
 2b4:	05e51005 	strbeq	r1, [r5, #5]!
 2b8:	10054a03 	andne	r4, r5, r3, lsl #20
 2bc:	4a030521 	bmi	c1748 <startup-0x1ff3e8b8>
 2c0:	05211005 	streq	r1, [r1, #-5]!
 2c4:	10054a03 	andne	r4, r5, r3, lsl #20
 2c8:	4a030521 	bmi	c1754 <startup-0x1ff3e8ac>
 2cc:	05211005 	streq	r1, [r1, #-5]!
 2d0:	10054a03 	andne	r4, r5, r3, lsl #20
 2d4:	4a030521 	bmi	c1760 <startup-0x1ff3e8a0>
 2d8:	05211005 	streq	r1, [r1, #-5]!
 2dc:	10054a03 	andne	r4, r5, r3, lsl #20
 2e0:	4a030521 	bmi	c176c <startup-0x1ff3e894>
 2e4:	22040521 	andcs	r0, r4, #138412032	; 0x8400000
 2e8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 2ec:	0e056904 	vmlaeq.f16	s12, s10, s8	; <UNPREDICTABLE>
 2f0:	4b0a054b 	blmi	281824 <startup-0x1fd7e7dc>
 2f4:	05760e05 	ldrbeq	r0, [r6, #-3589]!	; 0xfffff1fb
 2f8:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 2fc:	1005c968 	andne	ip, r5, r8, ror #18
 300:	910205c9 	smlabtls	r2, r9, r5, r0
 304:	05ad0405 	streq	r0, [sp, #1029]!	; 0x405
 308:	05a04b08 	streq	r4, [r0, #2824]!	; 0xb08
 30c:	1a059202 	bne	164b1c <startup-0x1fe9b4e4>
 310:	05ac5d03 	streq	r5, [ip, #3331]!	; 0xd03
 314:	20240301 	eorcs	r0, r4, r1, lsl #6
 318:	05863905 	streq	r3, [r6, #2309]	; 0x905
 31c:	053d6708 	ldreq	r6, [sp, #-1800]!	; 0xfffff8f8
 320:	1c053d01 	stcne	13, cr3, [r5], {1}
 324:	4b0a054c 	blmi	28185c <startup-0x1fd7e7a4>
 328:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 32c:	0402000a 	streq	r0, [r2], #-10
 330:	16052103 	strne	r2, [r5], -r3, lsl #2
 334:	03040200 	movweq	r0, #16896	; 0x4200
 338:	001c052e 	andseq	r0, ip, lr, lsr #10
 33c:	66030402 	strvs	r0, [r3], -r2, lsl #8
 340:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 344:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 348:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 34c:	31053c03 	tstcc	r5, r3, lsl #24
 350:	03040200 	movweq	r0, #16896	; 0x4200
 354:	0037052e 	eorseq	r0, r7, lr, lsr #10
 358:	66030402 	strvs	r0, [r3], -r2, lsl #8
 35c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 360:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 364:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 368:	16057303 	strne	r7, [r5], -r3, lsl #6
 36c:	01040200 	mrseq	r0, R12_usr
 370:	0027053c 	eoreq	r0, r7, ip, lsr r5
 374:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 378:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 37c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 380:	1d053f01 	stcne	15, cr3, [r5, #-4]
 384:	4b0a055a 	blmi	2818f4 <startup-0x1fd7e70c>
 388:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 38c:	0402000a 	streq	r0, [r2], #-10
 390:	16052103 	strne	r2, [r5], -r3, lsl #2
 394:	03040200 	movweq	r0, #16896	; 0x4200
 398:	001c052e 	andseq	r0, ip, lr, lsr #10
 39c:	66030402 	strvs	r0, [r3], -r2, lsl #8
 3a0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3a4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3a8:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 3ac:	31053c03 	tstcc	r5, r3, lsl #24
 3b0:	03040200 	movweq	r0, #16896	; 0x4200
 3b4:	0037052e 	eorseq	r0, r7, lr, lsr #10
 3b8:	66030402 	strvs	r0, [r3], -r2, lsl #8
 3bc:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3c0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3c4:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 3c8:	16057303 	strne	r7, [r5], -r3, lsl #6
 3cc:	01040200 	mrseq	r0, R12_usr
 3d0:	001b053c 	andseq	r0, fp, ip, lsr r5
 3d4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3d8:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 3dc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3e0:	1c053f01 	stcne	15, cr3, [r5], {1}
 3e4:	4b02055a 	blmi	81954 <startup-0x1ff7e6ac>
 3e8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 3ec:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 3f0:	2f0e052e 	svccs	0x000e052e
 3f4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3f8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
 3fc:	3d0d0530 	cfstr32cc	mvfx0, [sp, #-192]	; 0xffffff40
 400:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 404:	0b052009 	bleq	148430 <startup-0x1feb7bd0>
 408:	4c13052f 	cfldr32mi	mvfx0, [r3], {47}	; 0x2f
 40c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 410:	09052010 	stmdbeq	r5, {r4, sp}
 414:	2f0d052e 	svccs	0x000d052e
 418:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 41c:	14052009 	strne	r2, [r5], #-9
 420:	2e19052f 	cfmul64cs	mvdx0, mvdx9, mvdx15
 424:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 428:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
 42c:	3d0d053e 	cfstr32cc	mvfx0, [sp, #-248]	; 0xffffff08
 430:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 434:	0b052009 	bleq	148460 <startup-0x1feb7ba0>
 438:	4c17052f 	cfldr32mi	mvfx0, [r7], {47}	; 0x2f
 43c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 440:	09052014 	stmdbeq	r5, {r2, r4, sp}
 444:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 448:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 44c:	13052009 	movwne	r2, #20489	; 0x5009
 450:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 454:	05201005 	streq	r1, [r0, #-5]!
 458:	3d3e2e0b 	ldccc	14, cr2, [lr, #-44]!	; 0xffffffd4
 45c:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 460:	10054b01 	andne	r4, r5, r1, lsl #22
 464:	3d0a054f 	cfstr32cc	mvfx0, [sl, #-316]	; 0xfffffec4
 468:	2f2f0205 	svccs	0x002f0205
 46c:	05320305 	ldreq	r0, [r2, #-773]!	; 0xfffffcfb
 470:	0a052e02 	beq	14bc80 <startup-0x1feb4380>
 474:	04053d4b 	streq	r3, [r5], #-3403	; 0xfffff2b5
 478:	01040200 	mrseq	r0, R12_usr
 47c:	0003053e 	andeq	r0, r3, lr, lsr r5
 480:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 484:	01000602 	tsteq	r0, r2, lsl #12
 488:	Address 0x00000488 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	72670059 	rsbvc	r0, r7, #89	; 0x59
   c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  10:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  14:	5f657469 	svcpl	0x00657469
  18:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  1c:	00646e61 	rsbeq	r6, r4, r1, ror #28
  20:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  24:	6a626f5f 	bvs	189bda8 <startup-0x1e764258>
  28:	00746365 	rsbseq	r6, r4, r5, ror #6
  2c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  30:	6c657300 	stclvs	3, cr7, [r5], #-0
  34:	5f746365 	svcpl	0x00746365
  38:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  3c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  40:	67007265 	strvs	r7, [r0, -r5, ror #4]
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  4c:	5f646165 	svcpl	0x00646165
  50:	61746164 	cmnvs	r4, r4, ror #2
  54:	67617000 	strbvs	r7, [r1, -r0]!
  58:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
  5c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  60:	616c6564 	cmnvs	ip, r4, ror #10
  64:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  68:	006f726b 	rsbeq	r7, pc, fp, ror #4
  6c:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  70:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
  74:	5f617461 	svcpl	0x00617461
  78:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
  7c:	50007265 	andpl	r7, r0, r5, ror #4
  80:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  84:	736e7500 	cmnvc	lr, #0, 10
  88:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  8c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  90:	70007261 	andvc	r7, r0, r1, ror #4
  94:	0079736f 	rsbseq	r7, r9, pc, ror #6
  98:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  9c:	6f65675f 	svcvs	0x0065675f
  a0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  a4:	72670079 	rsbvc	r0, r7, #121	; 0x79
  a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  ac:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  b0:	00657469 	rsbeq	r7, r5, r9, ror #8
  b4:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
  b8:	43006c61 	movwmi	r6, #3169	; 0xc61
  bc:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  c0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  c4:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  c8:	6f445c6e 	svcvs	0x00445c6e
  cc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  d0:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  d4:	50746947 	rsbspl	r6, r4, r7, asr #18
  d8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  dc:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
  e0:	6f686353 	svcvs	0x00686353
  e4:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  e8:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  ec:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
  f0:	31305441 	teqcc	r0, r1, asr #8
  f4:	734f5c37 	movtvc	r5, #64567	; 0xfc37
  f8:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  fc:	6262614c 	rsbvs	r6, r2, #76, 2
 100:	615c7261 	cmpvs	ip, r1, ror #4
 104:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 108:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 10c:	6e69616d 	powvsez	f6, f1, #5.0
 110:	61726700 	cmnvs	r2, r0, lsl #14
 114:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 118:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 11c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 120:	00657a69 	rsbeq	r7, r5, r9, ror #20
 124:	70617267 	rsbvc	r7, r1, r7, ror #4
 128:	5f636968 	svcpl	0x00636968
 12c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 130:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 134:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 138:	67007261 	strvs	r7, [r0, -r1, ror #4]
 13c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 140:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 144:	5f6c7274 	svcpl	0x006c7274
 148:	5f746962 	svcpl	0x00746962
 14c:	00746573 	rsbseq	r6, r4, r3, ror r5
 150:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 154:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 158:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
 15c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 160:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 164:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 168:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 54 <startup-0x1fffffac>
 16c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 170:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 174:	70615f74 	rsbvc	r5, r1, r4, ror pc
 178:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
 17c:	5f38746e 	svcpl	0x0038746e
 180:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 184:	0078657a 	rsbseq	r6, r8, sl, ror r5
 188:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 18c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 190:	5f79616c 	svcpl	0x0079616c
 194:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 198:	4e470073 	mcrmi	0, 2, r0, cr7, cr3, {3}
 19c:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 1a0:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 1a4:	20312e32 	eorscs	r2, r1, r2, lsr lr
 1a8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 1ac:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 1b0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 1b4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 1b8:	5b202965 	blpl	80a754 <startup-0x1f7f58ac>
 1bc:	2f4d5241 	svccs	0x004d5241
 1c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 1c4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 1c8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1cc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1d0:	6f697369 	svcvs	0x00697369
 1d4:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 1d8:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 1dc:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1e0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1e4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1e8:	616f6c66 	cmnvs	pc, r6, ror #24
 1ec:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1f0:	6f733d69 	svcvs	0x00733d69
 1f4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1f8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 1fc:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 200:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 204:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 208:	304f2d20 	subcc	r2, pc, r0, lsr #26
 20c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 210:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 214:	74730039 	ldrbtvc	r0, [r3], #-57	; 0xffffffc7
 218:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 21c:	61620070 	smcvs	8192	; 0x2000
 220:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 224:	00776172 	rsbseq	r6, r7, r2, ror r1
 228:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7ed <ball+0xdfffee2d>
 22c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 230:	61736f2f 	cmnvs	r3, pc, lsr #30
 234:	442f6e6e 	strtmi	r6, [pc], #-3694	; 23c <startup-0x1ffffdc4>
 238:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 23c:	73746e65 	cmnvc	r4, #1616	; 0x650
 240:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 244:	6a6f7250 	bvs	1bdcb8c <startup-0x1e423474>
 248:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 24c:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 250:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 254:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 258:	2f737463 	svccs	0x00737463
 25c:	30544144 	subscc	r4, r4, r4, asr #2
 260:	4f2f3731 	svcmi	0x002f3731
 264:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 268:	62614c73 	rsbvs	r4, r1, #29440	; 0x7300
 26c:	2f726162 	svccs	0x00726162
 270:	6f747561 	svcvs	0x00747561
 274:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 278:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 27c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 280:	00632e67 	rsbeq	r2, r3, r7, ror #28
 284:	6b73616d 	blvs	1cd8840 <startup-0x1e3277c0>
 288:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 28c:	76007865 	strvc	r7, [r0], -r5, ror #16
 290:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 294:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 298:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1de <startup-0x1ffffe22>	; <UNPREDICTABLE>
 29c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 2a0:	61726700 	cmnvs	r2, r0, lsl #14
 2a4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2a8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2ac:	645f6574 	ldrbvs	r6, [pc], #-1396	; 2b4 <startup-0x1ffffd4c>
 2b0:	00617461 	rsbeq	r7, r1, r1, ror #8
 2b4:	5f746573 	svcpl	0x00746573
 2b8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2bc:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2c0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2c4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 2c8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 2cc:	67006465 	strvs	r6, [r0, -r5, ror #8]
 2d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2dc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2e0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2e4:	61656c63 	cmnvs	r5, r3, ror #24
 2e8:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2ec:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2f0:	746f6200 	strbtvc	r6, [pc], #-512	; 2f8 <startup-0x1ffffd08>
 2f4:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
 2f8:	5f79616c 	svcpl	0x0079616c
 2fc:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 300:	4f740073 	svcmi	0x00740073
 304:	70006a62 	andvc	r6, r0, r2, ror #20
 308:	0078736f 	rsbseq	r7, r8, pc, ror #6
 30c:	70617267 	rsbvc	r7, r1, r7, ror #4
 310:	5f636968 	svcpl	0x00636968
 314:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 318:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 31c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 320:	67007374 	smlsdxvs	r0, r4, r3, r7
 324:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 328:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 32c:	5f746961 	svcpl	0x00746961
 330:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 334:	6f6d0079 	svcvs	0x006d0079
 338:	6f5f6576 	svcvs	0x005f6576
 33c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 340:	70730074 	rsbsvc	r0, r3, r4, ror r0
 344:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 348:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 34c:	00796465 	rsbseq	r6, r9, r5, ror #8
 350:	4a424f50 	bmi	1094098 <startup-0x1ef6bf68>
 354:	00544345 	subseq	r4, r4, r5, asr #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000042 	andeq	r0, r0, r2, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000b2 	strhcs	r0, [r0], -r2
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000f8 	strdcs	r0, [r0], -r8
  a4:	00000012 	andeq	r0, r0, r2, lsl r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0000070d 	andeq	r0, r0, sp, lsl #14
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	2000010a 	andcs	r0, r0, sl, lsl #2
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000150 	andcs	r0, r0, r0, asr r1
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000018c 	andcs	r0, r0, ip, lsl #3
 100:	00000062 	andeq	r0, r0, r2, rrx
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001ee 	andcs	r0, r0, lr, ror #3
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000254 	andcs	r0, r0, r4, asr r2
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002e4 	andcs	r0, r0, r4, ror #5
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000364 	andcs	r0, r0, r4, ror #6
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003a4 	andcs	r0, r0, r4, lsr #7
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003ea 	andcs	r0, r0, sl, ror #7
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000414 	andcs	r0, r0, r4, lsl r4
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	2000046a 	andcs	r0, r0, sl, ror #8
 1f8:	00000068 	andeq	r0, r0, r8, rrx
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 208:	00000007 	andeq	r0, r0, r7
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	200004d2 	ldrdcs	r0, [r0], -r2
 218:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 21c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 220:	86048505 	strhi	r8, [r4], -r5, lsl #10
 224:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 228:	280e4101 	stmdacs	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	20000688 	andcs	r0, r0, r8, lsl #13
 23c:	00000020 	andeq	r0, r0, r0, lsr #32
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	200006a8 	andcs	r0, r0, r8, lsr #13
 25c:	00000066 	andeq	r0, r0, r6, rrx
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	2000070e 	andcs	r0, r0, lr, lsl #14
 27c:	00000066 	andeq	r0, r0, r6, rrx
 280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 284:	41018e02 	tstmi	r1, r2, lsl #28
 288:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 28c:	00000007 	andeq	r0, r0, r7
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	00000000 	andeq	r0, r0, r0
 298:	20000774 	andcs	r0, r0, r4, ror r7
 29c:	000000c6 	andeq	r0, r0, r6, asr #1
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	2000083a 	andcs	r0, r0, sl, lsr r8
 2bc:	0000003a 	andeq	r0, r0, sl, lsr r0
 2c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c4:	41018e02 	tstmi	r1, r2, lsl #28
 2c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2cc:	00000007 	andeq	r0, r0, r7
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c010001 	stcvc	0, cr0, [r1], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	20000875 	andcs	r0, r0, r5, ror r8
 2ec:	0000010a 	andeq	r0, r0, sl, lsl #2
