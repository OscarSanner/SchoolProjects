
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

	

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fc1c 	bl	20000840 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:



	// 					DELAYS					//
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
	us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
20000060:	2300      	movs	r3, #0
20000062:	60fb      	str	r3, [r7, #12]
20000064:	e004      	b.n	20000070 <delay_mikro+0x18>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	3301      	adds	r3, #1
2000006e:	60fb      	str	r3, [r7, #12]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	009a      	lsls	r2, r3, #2
20000074:	68fb      	ldr	r3, [r7, #12]
20000076:	429a      	cmp	r2, r3
20000078:	d8f5      	bhi.n	20000066 <delay_mikro+0xe>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	b004      	add	sp, #16
20000082:	bd80      	pop	{r7, pc}

20000084 <delay_milli>:

void delay_milli(unsigned int ms){
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
2000008c:	2300      	movs	r3, #0
2000008e:	60fb      	str	r3, [r7, #12]
20000090:	e007      	b.n	200000a2 <delay_milli+0x1e>
		delay_mikro(1000);
20000092:	23fa      	movs	r3, #250	; 0xfa
20000094:	009b      	lsls	r3, r3, #2
20000096:	0018      	movs	r0, r3
20000098:	f7ff ffde 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	3301      	adds	r3, #1
200000a0:	60fb      	str	r3, [r7, #12]
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	687a      	ldr	r2, [r7, #4]
200000a6:	429a      	cmp	r2, r3
200000a8:	d8f3      	bhi.n	20000092 <delay_milli+0xe>
	}
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b004      	add	sp, #16
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(){
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
	delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
	delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

//						DISPLAY						//

void graphic_ctrl_bit_set(uint8_t x){
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000d2:	4b0d      	ldr	r3, [pc, #52]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	b25a      	sxtb	r2, r3
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	b25b      	sxtb	r3, r3
200000e0:	2104      	movs	r1, #4
200000e2:	438b      	bics	r3, r1
200000e4:	b25b      	sxtb	r3, r3
200000e6:	4313      	orrs	r3, r2
200000e8:	b25a      	sxtb	r2, r3
200000ea:	4b07      	ldr	r3, [pc, #28]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000ec:	b2d2      	uxtb	r2, r2
200000ee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
200000f0:	4b05      	ldr	r3, [pc, #20]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	b2db      	uxtb	r3, r3
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f8:	2104      	movs	r1, #4
200000fa:	438b      	bics	r3, r1
200000fc:	b2db      	uxtb	r3, r3
200000fe:	7013      	strb	r3, [r2, #0]
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b002      	add	sp, #8
20000106:	bd80      	pop	{r7, pc}
20000108:	40021014 	andmi	r1, r2, r4, lsl r0

2000010c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
2000010c:	b580      	push	{r7, lr}
2000010e:	b082      	sub	sp, #8
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000118:	4b0a      	ldr	r3, [pc, #40]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	b2db      	uxtb	r3, r3
2000011e:	b25b      	sxtb	r3, r3
20000120:	1dfa      	adds	r2, r7, #7
20000122:	7812      	ldrb	r2, [r2, #0]
20000124:	2104      	movs	r1, #4
20000126:	430a      	orrs	r2, r1
20000128:	b2d2      	uxtb	r2, r2
2000012a:	b252      	sxtb	r2, r2
2000012c:	43d2      	mvns	r2, r2
2000012e:	b252      	sxtb	r2, r2
20000130:	4013      	ands	r3, r2
20000132:	b25a      	sxtb	r2, r3
20000134:	4b03      	ldr	r3, [pc, #12]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
20000136:	b2d2      	uxtb	r2, r2
20000138:	701a      	strb	r2, [r3, #0]
}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	b002      	add	sp, #8
20000140:	bd80      	pop	{r7, pc}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	40021014 	andmi	r1, r2, r4, lsl r0

20000148 <select_controller>:

void select_controller(uint8_t controller){
20000148:	b580      	push	{r7, lr}
2000014a:	b084      	sub	sp, #16
2000014c:	af00      	add	r7, sp, #0
2000014e:	0002      	movs	r2, r0
20000150:	1dfb      	adds	r3, r7, #7
20000152:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000154:	230f      	movs	r3, #15
20000156:	18fb      	adds	r3, r7, r3
20000158:	2200      	movs	r2, #0
2000015a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	2b18      	cmp	r3, #24
20000162:	d01a      	beq.n	2000019a <select_controller+0x52>
20000164:	dc1d      	bgt.n	200001a2 <select_controller+0x5a>
20000166:	2b10      	cmp	r3, #16
20000168:	d010      	beq.n	2000018c <select_controller+0x44>
2000016a:	dc1a      	bgt.n	200001a2 <select_controller+0x5a>
2000016c:	2b00      	cmp	r3, #0
2000016e:	d002      	beq.n	20000176 <select_controller+0x2e>
20000170:	2b08      	cmp	r3, #8
20000172:	d004      	beq.n	2000017e <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
20000174:	e015      	b.n	200001a2 <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000176:	2018      	movs	r0, #24
20000178:	f7ff ffc8 	bl	2000010c <graphic_ctrl_bit_clear>
2000017c:	e012      	b.n	200001a4 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
2000017e:	2010      	movs	r0, #16
20000180:	f7ff ffc4 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
20000184:	2008      	movs	r0, #8
20000186:	f7ff ff9e 	bl	200000c6 <graphic_ctrl_bit_set>
2000018a:	e00b      	b.n	200001a4 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
2000018c:	2008      	movs	r0, #8
2000018e:	f7ff ffbd 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
20000192:	2010      	movs	r0, #16
20000194:	f7ff ff97 	bl	200000c6 <graphic_ctrl_bit_set>
20000198:	e004      	b.n	200001a4 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
2000019a:	2018      	movs	r0, #24
2000019c:	f7ff ff93 	bl	200000c6 <graphic_ctrl_bit_set>
200001a0:	e000      	b.n	200001a4 <select_controller+0x5c>
		default: return;
200001a2:	46c0      	nop			; (mov r8, r8)
	}
}
200001a4:	46bd      	mov	sp, r7
200001a6:	b004      	add	sp, #16
200001a8:	bd80      	pop	{r7, pc}

200001aa <graphic_wait_ready>:

void graphic_wait_ready(void){
200001aa:	b580      	push	{r7, lr}
200001ac:	b082      	sub	sp, #8
200001ae:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001b0:	2040      	movs	r0, #64	; 0x40
200001b2:	f7ff ffab 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001b6:	4b16      	ldr	r3, [pc, #88]	; (20000210 <graphic_wait_ready+0x66>)
200001b8:	4a16      	ldr	r2, [pc, #88]	; (20000214 <graphic_wait_ready+0x6a>)
200001ba:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001bc:	2002      	movs	r0, #2
200001be:	f7ff ff82 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001c2:	2001      	movs	r0, #1
200001c4:	f7ff ffa2 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_500ns();
200001c8:	f7ff ff74 	bl	200000b4 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001cc:	2040      	movs	r0, #64	; 0x40
200001ce:	f7ff ff7a 	bl	200000c6 <graphic_ctrl_bit_set>
		delay_500ns();
200001d2:	f7ff ff6f 	bl	200000b4 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
200001d6:	4b10      	ldr	r3, [pc, #64]	; (20000218 <graphic_wait_ready+0x6e>)
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	b2da      	uxtb	r2, r3
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	217f      	movs	r1, #127	; 0x7f
200001e0:	438a      	bics	r2, r1
200001e2:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001e4:	2040      	movs	r0, #64	; 0x40
200001e6:	f7ff ff91 	bl	2000010c <graphic_ctrl_bit_clear>
		delay_500ns();
200001ea:	f7ff ff63 	bl	200000b4 <delay_500ns>
		if(c == 0){
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	2b00      	cmp	r3, #0
200001f4:	d000      	beq.n	200001f8 <graphic_wait_ready+0x4e>
	while(1){
200001f6:	e7e9      	b.n	200001cc <graphic_wait_ready+0x22>
			break;
200001f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001fa:	2040      	movs	r0, #64	; 0x40
200001fc:	f7ff ff63 	bl	200000c6 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000200:	4b03      	ldr	r3, [pc, #12]	; (20000210 <graphic_wait_ready+0x66>)
20000202:	4a06      	ldr	r2, [pc, #24]	; (2000021c <graphic_wait_ready+0x72>)
20000204:	601a      	str	r2, [r3, #0]
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	40021000 	andmi	r1, r2, r0
20000214:	00005555 	andeq	r5, r0, r5, asr r5
20000218:	40021011 	andmi	r1, r2, r1, lsl r0
2000021c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000220 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000220:	b580      	push	{r7, lr}
20000222:	b084      	sub	sp, #16
20000224:	af00      	add	r7, sp, #0
20000226:	0002      	movs	r2, r0
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff6d 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000232:	4b1b      	ldr	r3, [pc, #108]	; (200002a0 <graphic_read+0x80>)
20000234:	4a1b      	ldr	r2, [pc, #108]	; (200002a4 <graphic_read+0x84>)
20000236:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000238:	2003      	movs	r0, #3
2000023a:	f7ff ff44 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(controller);
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	0018      	movs	r0, r3
20000244:	f7ff ff80 	bl	20000148 <select_controller>
	delay_500ns();
20000248:	f7ff ff34 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000024c:	2040      	movs	r0, #64	; 0x40
2000024e:	f7ff ff3a 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
20000252:	f7ff ff2f 	bl	200000b4 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000256:	4a14      	ldr	r2, [pc, #80]	; (200002a8 <graphic_read+0x88>)
20000258:	230f      	movs	r3, #15
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff53 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000266:	4b0e      	ldr	r3, [pc, #56]	; (200002a0 <graphic_read+0x80>)
20000268:	4a10      	ldr	r2, [pc, #64]	; (200002ac <graphic_read+0x8c>)
2000026a:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2b08      	cmp	r3, #8
20000272:	d104      	bne.n	2000027e <graphic_read+0x5e>
		select_controller(B_CS1);
20000274:	2008      	movs	r0, #8
20000276:	f7ff ff67 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000027a:	f7ff ff96 	bl	200001aa <graphic_wait_ready>
	}
	if(controller == B_CS2){
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	2b10      	cmp	r3, #16
20000284:	d104      	bne.n	20000290 <graphic_read+0x70>
		select_controller(B_CS2);
20000286:	2010      	movs	r0, #16
20000288:	f7ff ff5e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000028c:	f7ff ff8d 	bl	200001aa <graphic_wait_ready>
	}
	return rv;
20000290:	230f      	movs	r3, #15
20000292:	18fb      	adds	r3, r7, r3
20000294:	781b      	ldrb	r3, [r3, #0]
}
20000296:	0018      	movs	r0, r3
20000298:	46bd      	mov	sp, r7
2000029a:	b004      	add	sp, #16
2000029c:	bd80      	pop	{r7, pc}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	40021000 	andmi	r1, r2, r0
200002a4:	00005555 	andeq	r5, r0, r5, asr r5
200002a8:	40021011 	andmi	r1, r2, r1, lsl r0
200002ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
200002bc:	1dbb      	adds	r3, r7, #6
200002be:	1c0a      	adds	r2, r1, #0
200002c0:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002c2:	4a1a      	ldr	r2, [pc, #104]	; (2000032c <graphic_write+0x7c>)
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002ca:	1dbb      	adds	r3, r7, #6
200002cc:	781b      	ldrb	r3, [r3, #0]
200002ce:	0018      	movs	r0, r3
200002d0:	f7ff ff3a 	bl	20000148 <select_controller>
	delay_500ns();
200002d4:	f7ff feee 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff fef4 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
200002de:	f7ff fee9 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff ff12 	bl	2000010c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2208      	movs	r2, #8
200002ee:	4013      	ands	r3, r2
200002f0:	d004      	beq.n	200002fc <graphic_write+0x4c>
		select_controller(B_CS1);
200002f2:	2008      	movs	r0, #8
200002f4:	f7ff ff28 	bl	20000148 <select_controller>
		graphic_wait_ready();
200002f8:	f7ff ff57 	bl	200001aa <graphic_wait_ready>
	}
	if(controller & B_CS2){
200002fc:	1dbb      	adds	r3, r7, #6
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2210      	movs	r2, #16
20000302:	4013      	ands	r3, r2
20000304:	d004      	beq.n	20000310 <graphic_write+0x60>
		select_controller(B_CS2);
20000306:	2010      	movs	r0, #16
20000308:	f7ff ff1e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000030c:	f7ff ff4d 	bl	200001aa <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000310:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7c>)
20000312:	2200      	movs	r2, #0
20000314:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff fed5 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(0);
2000031c:	2000      	movs	r0, #0
2000031e:	f7ff ff13 	bl	20000148 <select_controller>
}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}
2000032a:	46c0      	nop			; (mov r8, r8)
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fee2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff fefb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000352:	2003      	movs	r0, #3
20000354:	f7ff feda 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa4 	bl	200002b0 <graphic_write>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff fec2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fedb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000392:	2001      	movs	r0, #1
20000394:	f7ff fe97 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000398:	2002      	movs	r0, #2
2000039a:	f7ff feb7 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff81 	bl	200002b0 <graphic_write>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
200003bc:	0002      	movs	r2, r0
200003be:	1dfb      	adds	r3, r7, #7
200003c0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	0018      	movs	r0, r3
200003c8:	f7ff ff2a 	bl	20000220 <graphic_read>
	return graphic_read(controller);
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff25 	bl	20000220 <graphic_read>
200003d6:	0003      	movs	r3, r0
}
200003d8:	0018      	movs	r0, r3
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <graphic_initialize>:

void graphic_initialize(){
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff fe6e 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ea:	200a      	movs	r0, #10
200003ec:	f7ff fe34 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003f0:	2078      	movs	r0, #120	; 0x78
200003f2:	f7ff fe8b 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_milli(30);
200003f6:	201e      	movs	r0, #30
200003f8:	f7ff fe44 	bl	20000084 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003fc:	2020      	movs	r0, #32
200003fe:	f7ff fe62 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000402:	2118      	movs	r1, #24
20000404:	203e      	movs	r0, #62	; 0x3e
20000406:	f7ff ff93 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	203f      	movs	r0, #63	; 0x3f
2000040e:	f7ff ff8f 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000412:	2118      	movs	r1, #24
20000414:	20c0      	movs	r0, #192	; 0xc0
20000416:	f7ff ff8b 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	2040      	movs	r0, #64	; 0x40
2000041e:	f7ff ff87 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000422:	2118      	movs	r1, #24
20000424:	20b8      	movs	r0, #184	; 0xb8
20000426:	f7ff ff83 	bl	20000330 <graphic_write_command>
	select_controller(0);
2000042a:	2000      	movs	r0, #0
2000042c:	f7ff fe8c 	bl	20000148 <select_controller>
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	bd80      	pop	{r7, pc}

20000436 <graphic_clear_screen>:

void graphic_clear_screen(){
20000436:	b580      	push	{r7, lr}
20000438:	b082      	sub	sp, #8
2000043a:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	2200      	movs	r2, #0
20000440:	701a      	strb	r2, [r3, #0]
20000442:	e023      	b.n	2000048c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2248      	movs	r2, #72	; 0x48
2000044a:	4252      	negs	r2, r2
2000044c:	4313      	orrs	r3, r2
2000044e:	b2db      	uxtb	r3, r3
20000450:	2118      	movs	r1, #24
20000452:	0018      	movs	r0, r3
20000454:	f7ff ff6c 	bl	20000330 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000458:	2118      	movs	r1, #24
2000045a:	2040      	movs	r0, #64	; 0x40
2000045c:	f7ff ff68 	bl	20000330 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
20000460:	1dbb      	adds	r3, r7, #6
20000462:	2200      	movs	r2, #0
20000464:	701a      	strb	r2, [r3, #0]
20000466:	e008      	b.n	2000047a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000468:	2118      	movs	r1, #24
2000046a:	2000      	movs	r0, #0
2000046c:	f7ff ff80 	bl	20000370 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000470:	1dbb      	adds	r3, r7, #6
20000472:	781a      	ldrb	r2, [r3, #0]
20000474:	1dbb      	adds	r3, r7, #6
20000476:	3201      	adds	r2, #1
20000478:	701a      	strb	r2, [r3, #0]
2000047a:	1dbb      	adds	r3, r7, #6
2000047c:	781b      	ldrb	r3, [r3, #0]
2000047e:	2b3f      	cmp	r3, #63	; 0x3f
20000480:	d9f2      	bls.n	20000468 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781a      	ldrb	r2, [r3, #0]
20000486:	1dfb      	adds	r3, r7, #7
20000488:	3201      	adds	r2, #1
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dfb      	adds	r3, r7, #7
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	2b07      	cmp	r3, #7
20000492:	d9d7      	bls.n	20000444 <graphic_clear_screen+0xe>
		}
	}
}
20000494:	46c0      	nop			; (mov r8, r8)
20000496:	46c0      	nop			; (mov r8, r8)
20000498:	46bd      	mov	sp, r7
2000049a:	b002      	add	sp, #8
2000049c:	bd80      	pop	{r7, pc}

2000049e <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
2000049e:	b5f0      	push	{r4, r5, r6, r7, lr}
200004a0:	b085      	sub	sp, #20
200004a2:	af00      	add	r7, sp, #0
200004a4:	0004      	movs	r4, r0
200004a6:	0008      	movs	r0, r1
200004a8:	0011      	movs	r1, r2
200004aa:	1dfb      	adds	r3, r7, #7
200004ac:	1c22      	adds	r2, r4, #0
200004ae:	701a      	strb	r2, [r3, #0]
200004b0:	1dbb      	adds	r3, r7, #6
200004b2:	1c02      	adds	r2, r0, #0
200004b4:	701a      	strb	r2, [r3, #0]
200004b6:	1d7b      	adds	r3, r7, #5
200004b8:	1c0a      	adds	r2, r1, #0
200004ba:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
200004bc:	1dfb      	adds	r3, r7, #7
200004be:	781b      	ldrb	r3, [r3, #0]
200004c0:	2b80      	cmp	r3, #128	; 0x80
200004c2:	d900      	bls.n	200004c6 <pixel+0x28>
200004c4:	e0c7      	b.n	20000656 <pixel+0x1b8>
200004c6:	1dbb      	adds	r3, r7, #6
200004c8:	781b      	ldrb	r3, [r3, #0]
200004ca:	2b40      	cmp	r3, #64	; 0x40
200004cc:	d900      	bls.n	200004d0 <pixel+0x32>
200004ce:	e0c2      	b.n	20000656 <pixel+0x1b8>
200004d0:	1dfb      	adds	r3, r7, #7
200004d2:	781b      	ldrb	r3, [r3, #0]
200004d4:	2b00      	cmp	r3, #0
200004d6:	d100      	bne.n	200004da <pixel+0x3c>
200004d8:	e0bd      	b.n	20000656 <pixel+0x1b8>
200004da:	1dbb      	adds	r3, r7, #6
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	2b00      	cmp	r3, #0
200004e0:	d100      	bne.n	200004e4 <pixel+0x46>
200004e2:	e0b8      	b.n	20000656 <pixel+0x1b8>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
200004e4:	1dbb      	adds	r3, r7, #6
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	3b01      	subs	r3, #1
200004ea:	2b00      	cmp	r3, #0
200004ec:	da00      	bge.n	200004f0 <pixel+0x52>
200004ee:	3307      	adds	r3, #7
200004f0:	10db      	asrs	r3, r3, #3
200004f2:	001a      	movs	r2, r3
200004f4:	230c      	movs	r3, #12
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	3b01      	subs	r3, #1
20000500:	4a57      	ldr	r2, [pc, #348]	; (20000660 <pixel+0x1c2>)
20000502:	4013      	ands	r3, r2
20000504:	d504      	bpl.n	20000510 <pixel+0x72>
20000506:	3b01      	subs	r3, #1
20000508:	2208      	movs	r2, #8
2000050a:	4252      	negs	r2, r2
2000050c:	4313      	orrs	r3, r2
2000050e:	3301      	adds	r3, #1
20000510:	2b07      	cmp	r3, #7
20000512:	d82c      	bhi.n	2000056e <pixel+0xd0>
20000514:	009a      	lsls	r2, r3, #2
20000516:	4b53      	ldr	r3, [pc, #332]	; (20000664 <pixel+0x1c6>)
20000518:	18d3      	adds	r3, r2, r3
2000051a:	681b      	ldr	r3, [r3, #0]
2000051c:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000051e:	230f      	movs	r3, #15
20000520:	18fb      	adds	r3, r7, r3
20000522:	2201      	movs	r2, #1
20000524:	701a      	strb	r2, [r3, #0]
20000526:	e023      	b.n	20000570 <pixel+0xd2>
		case 1: mask = 2; break;
20000528:	230f      	movs	r3, #15
2000052a:	18fb      	adds	r3, r7, r3
2000052c:	2202      	movs	r2, #2
2000052e:	701a      	strb	r2, [r3, #0]
20000530:	e01e      	b.n	20000570 <pixel+0xd2>
		case 2: mask = 4; break;
20000532:	230f      	movs	r3, #15
20000534:	18fb      	adds	r3, r7, r3
20000536:	2204      	movs	r2, #4
20000538:	701a      	strb	r2, [r3, #0]
2000053a:	e019      	b.n	20000570 <pixel+0xd2>
		case 3: mask = 8; break;
2000053c:	230f      	movs	r3, #15
2000053e:	18fb      	adds	r3, r7, r3
20000540:	2208      	movs	r2, #8
20000542:	701a      	strb	r2, [r3, #0]
20000544:	e014      	b.n	20000570 <pixel+0xd2>
		case 4: mask = 0x10; break;
20000546:	230f      	movs	r3, #15
20000548:	18fb      	adds	r3, r7, r3
2000054a:	2210      	movs	r2, #16
2000054c:	701a      	strb	r2, [r3, #0]
2000054e:	e00f      	b.n	20000570 <pixel+0xd2>
		case 5: mask = 0x20; break;
20000550:	230f      	movs	r3, #15
20000552:	18fb      	adds	r3, r7, r3
20000554:	2220      	movs	r2, #32
20000556:	701a      	strb	r2, [r3, #0]
20000558:	e00a      	b.n	20000570 <pixel+0xd2>
		case 6: mask = 0x40; break;
2000055a:	230f      	movs	r3, #15
2000055c:	18fb      	adds	r3, r7, r3
2000055e:	2240      	movs	r2, #64	; 0x40
20000560:	701a      	strb	r2, [r3, #0]
20000562:	e005      	b.n	20000570 <pixel+0xd2>
		case 7: mask = 0x80; break;
20000564:	230f      	movs	r3, #15
20000566:	18fb      	adds	r3, r7, r3
20000568:	2280      	movs	r2, #128	; 0x80
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	e000      	b.n	20000570 <pixel+0xd2>
		default: break;
2000056e:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
20000570:	1d7b      	adds	r3, r7, #5
20000572:	781b      	ldrb	r3, [r3, #0]
20000574:	2b00      	cmp	r3, #0
20000576:	d105      	bne.n	20000584 <pixel+0xe6>
		mask = ~mask;
20000578:	220f      	movs	r2, #15
2000057a:	18bb      	adds	r3, r7, r2
2000057c:	18ba      	adds	r2, r7, r2
2000057e:	7812      	ldrb	r2, [r2, #0]
20000580:	43d2      	mvns	r2, r2
20000582:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
20000584:	1dfb      	adds	r3, r7, #7
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	2b40      	cmp	r3, #64	; 0x40
2000058a:	d90a      	bls.n	200005a2 <pixel+0x104>
		controller = B_CS2;
2000058c:	230e      	movs	r3, #14
2000058e:	18fb      	adds	r3, r7, r3
20000590:	2210      	movs	r2, #16
20000592:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
20000594:	230d      	movs	r3, #13
20000596:	18fb      	adds	r3, r7, r3
20000598:	1dfa      	adds	r2, r7, #7
2000059a:	7812      	ldrb	r2, [r2, #0]
2000059c:	3a41      	subs	r2, #65	; 0x41
2000059e:	701a      	strb	r2, [r3, #0]
200005a0:	e009      	b.n	200005b6 <pixel+0x118>
	}else{
		controller = B_CS1;
200005a2:	230e      	movs	r3, #14
200005a4:	18fb      	adds	r3, r7, r3
200005a6:	2208      	movs	r2, #8
200005a8:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005aa:	230d      	movs	r3, #13
200005ac:	18fb      	adds	r3, r7, r3
200005ae:	1dfa      	adds	r2, r7, #7
200005b0:	7812      	ldrb	r2, [r2, #0]
200005b2:	3a01      	subs	r2, #1
200005b4:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005b6:	260d      	movs	r6, #13
200005b8:	19bb      	adds	r3, r7, r6
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	2240      	movs	r2, #64	; 0x40
200005be:	4313      	orrs	r3, r2
200005c0:	b2da      	uxtb	r2, r3
200005c2:	250e      	movs	r5, #14
200005c4:	197b      	adds	r3, r7, r5
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0019      	movs	r1, r3
200005ca:	0010      	movs	r0, r2
200005cc:	f7ff feb0 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005d0:	230c      	movs	r3, #12
200005d2:	18fb      	adds	r3, r7, r3
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	2248      	movs	r2, #72	; 0x48
200005d8:	4252      	negs	r2, r2
200005da:	4313      	orrs	r3, r2
200005dc:	b2da      	uxtb	r2, r3
200005de:	197b      	adds	r3, r7, r5
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	0019      	movs	r1, r3
200005e4:	0010      	movs	r0, r2
200005e6:	f7ff fea3 	bl	20000330 <graphic_write_command>
	data_holder = graphic_read_data(controller);
200005ea:	230b      	movs	r3, #11
200005ec:	18fc      	adds	r4, r7, r3
200005ee:	197b      	adds	r3, r7, r5
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	0018      	movs	r0, r3
200005f4:	f7ff fedf 	bl	200003b6 <graphic_read_data>
200005f8:	0003      	movs	r3, r0
200005fa:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005fc:	19bb      	adds	r3, r7, r6
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2240      	movs	r2, #64	; 0x40
20000602:	4313      	orrs	r3, r2
20000604:	b2da      	uxtb	r2, r3
20000606:	197b      	adds	r3, r7, r5
20000608:	781b      	ldrb	r3, [r3, #0]
2000060a:	0019      	movs	r1, r3
2000060c:	0010      	movs	r0, r2
2000060e:	f7ff fe8f 	bl	20000330 <graphic_write_command>
	if(set==1){
20000612:	1d7b      	adds	r3, r7, #5
20000614:	781b      	ldrb	r3, [r3, #0]
20000616:	2b01      	cmp	r3, #1
20000618:	d109      	bne.n	2000062e <pixel+0x190>
		mask |= data_holder;
2000061a:	210f      	movs	r1, #15
2000061c:	187b      	adds	r3, r7, r1
2000061e:	1879      	adds	r1, r7, r1
20000620:	220b      	movs	r2, #11
20000622:	18ba      	adds	r2, r7, r2
20000624:	7809      	ldrb	r1, [r1, #0]
20000626:	7812      	ldrb	r2, [r2, #0]
20000628:	430a      	orrs	r2, r1
2000062a:	701a      	strb	r2, [r3, #0]
2000062c:	e008      	b.n	20000640 <pixel+0x1a2>
	}else{
		mask &= data_holder;
2000062e:	220f      	movs	r2, #15
20000630:	18bb      	adds	r3, r7, r2
20000632:	18ba      	adds	r2, r7, r2
20000634:	210b      	movs	r1, #11
20000636:	1879      	adds	r1, r7, r1
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	7809      	ldrb	r1, [r1, #0]
2000063c:	400a      	ands	r2, r1
2000063e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000640:	230e      	movs	r3, #14
20000642:	18fb      	adds	r3, r7, r3
20000644:	781a      	ldrb	r2, [r3, #0]
20000646:	230f      	movs	r3, #15
20000648:	18fb      	adds	r3, r7, r3
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	0011      	movs	r1, r2
2000064e:	0018      	movs	r0, r3
20000650:	f7ff fe8e 	bl	20000370 <graphic_write_data>
20000654:	e000      	b.n	20000658 <pixel+0x1ba>
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
20000656:	46c0      	nop			; (mov r8, r8)
}
20000658:	46bd      	mov	sp, r7
2000065a:	b005      	add	sp, #20
2000065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	80000007 	andhi	r0, r0, r7
20000664:	200008e0 	andcs	r0, r0, r0, ror #17

20000668 <set_object_speed>:

// 					OBJECT FUNCTIONS					//

void set_object_speed(POBJECT o, int speedx, int speedy){
20000668:	b580      	push	{r7, lr}
2000066a:	b084      	sub	sp, #16
2000066c:	af00      	add	r7, sp, #0
2000066e:	60f8      	str	r0, [r7, #12]
20000670:	60b9      	str	r1, [r7, #8]
20000672:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000674:	68fb      	ldr	r3, [r7, #12]
20000676:	68ba      	ldr	r2, [r7, #8]
20000678:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
2000067a:	68fb      	ldr	r3, [r7, #12]
2000067c:	687a      	ldr	r2, [r7, #4]
2000067e:	609a      	str	r2, [r3, #8]
}
20000680:	46c0      	nop			; (mov r8, r8)
20000682:	46bd      	mov	sp, r7
20000684:	b004      	add	sp, #16
20000686:	bd80      	pop	{r7, pc}

20000688 <draw_object>:

void draw_object(POBJECT o){
20000688:	b580      	push	{r7, lr}
2000068a:	b084      	sub	sp, #16
2000068c:	af00      	add	r7, sp, #0
2000068e:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000690:	2300      	movs	r3, #0
20000692:	60fb      	str	r3, [r7, #12]
20000694:	e020      	b.n	200006d8 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
20000696:	687b      	ldr	r3, [r7, #4]
20000698:	681a      	ldr	r2, [r3, #0]
2000069a:	68fb      	ldr	r3, [r7, #12]
2000069c:	3304      	adds	r3, #4
2000069e:	005b      	lsls	r3, r3, #1
200006a0:	18d3      	adds	r3, r2, r3
200006a2:	3304      	adds	r3, #4
200006a4:	781a      	ldrb	r2, [r3, #0]
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	68db      	ldr	r3, [r3, #12]
200006aa:	b2db      	uxtb	r3, r3
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	b2d8      	uxtb	r0, r3
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	681a      	ldr	r2, [r3, #0]
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	3304      	adds	r3, #4
200006b8:	005b      	lsls	r3, r3, #1
200006ba:	18d3      	adds	r3, r2, r3
200006bc:	3305      	adds	r3, #5
200006be:	781a      	ldrb	r2, [r3, #0]
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	691b      	ldr	r3, [r3, #16]
200006c4:	b2db      	uxtb	r3, r3
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	b2db      	uxtb	r3, r3
200006ca:	2201      	movs	r2, #1
200006cc:	0019      	movs	r1, r3
200006ce:	f7ff fee6 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006d2:	68fb      	ldr	r3, [r7, #12]
200006d4:	3301      	adds	r3, #1
200006d6:	60fb      	str	r3, [r7, #12]
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	68fa      	ldr	r2, [r7, #12]
200006e0:	429a      	cmp	r2, r3
200006e2:	dbd8      	blt.n	20000696 <draw_object+0xe>
	}
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	46bd      	mov	sp, r7
200006ea:	b004      	add	sp, #16
200006ec:	bd80      	pop	{r7, pc}

200006ee <clear_object>:

void clear_object(POBJECT o){
200006ee:	b580      	push	{r7, lr}
200006f0:	b084      	sub	sp, #16
200006f2:	af00      	add	r7, sp, #0
200006f4:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
200006f6:	2300      	movs	r3, #0
200006f8:	60fb      	str	r3, [r7, #12]
200006fa:	e020      	b.n	2000073e <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	681a      	ldr	r2, [r3, #0]
20000700:	68fb      	ldr	r3, [r7, #12]
20000702:	3304      	adds	r3, #4
20000704:	005b      	lsls	r3, r3, #1
20000706:	18d3      	adds	r3, r2, r3
20000708:	3304      	adds	r3, #4
2000070a:	781a      	ldrb	r2, [r3, #0]
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	68db      	ldr	r3, [r3, #12]
20000710:	b2db      	uxtb	r3, r3
20000712:	18d3      	adds	r3, r2, r3
20000714:	b2d8      	uxtb	r0, r3
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	681a      	ldr	r2, [r3, #0]
2000071a:	68fb      	ldr	r3, [r7, #12]
2000071c:	3304      	adds	r3, #4
2000071e:	005b      	lsls	r3, r3, #1
20000720:	18d3      	adds	r3, r2, r3
20000722:	3305      	adds	r3, #5
20000724:	781a      	ldrb	r2, [r3, #0]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	691b      	ldr	r3, [r3, #16]
2000072a:	b2db      	uxtb	r3, r3
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	b2db      	uxtb	r3, r3
20000730:	2200      	movs	r2, #0
20000732:	0019      	movs	r1, r3
20000734:	f7ff feb3 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000738:	68fb      	ldr	r3, [r7, #12]
2000073a:	3301      	adds	r3, #1
2000073c:	60fb      	str	r3, [r7, #12]
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	681b      	ldr	r3, [r3, #0]
20000742:	681b      	ldr	r3, [r3, #0]
20000744:	68fa      	ldr	r2, [r7, #12]
20000746:	429a      	cmp	r2, r3
20000748:	dbd8      	blt.n	200006fc <clear_object+0xe>
	}
}
2000074a:	46c0      	nop			; (mov r8, r8)
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	b004      	add	sp, #16
20000752:	bd80      	pop	{r7, pc}

20000754 <move_object>:

void move_object(POBJECT o){
20000754:	b580      	push	{r7, lr}
20000756:	b084      	sub	sp, #16
20000758:	af00      	add	r7, sp, #0
2000075a:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	0018      	movs	r0, r3
20000760:	f7ff ffc5 	bl	200006ee <clear_object>
	int newx = o->posx + o->dx;
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	68da      	ldr	r2, [r3, #12]
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	685b      	ldr	r3, [r3, #4]
2000076c:	18d3      	adds	r3, r2, r3
2000076e:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	691a      	ldr	r2, [r3, #16]
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	689b      	ldr	r3, [r3, #8]
20000778:	18d3      	adds	r3, r2, r3
2000077a:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	2b00      	cmp	r3, #0
20000780:	dc08      	bgt.n	20000794 <move_object+0x40>
		o->dx = -o->dx;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	685b      	ldr	r3, [r3, #4]
20000786:	425a      	negs	r2, r3
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	605a      	str	r2, [r3, #4]
		o->posx = 1;
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	2201      	movs	r2, #1
20000790:	60da      	str	r2, [r3, #12]
20000792:	e03a      	b.n	2000080a <move_object+0xb6>
	}
	else if((newx + o->geo->sizex) > 128){
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	681b      	ldr	r3, [r3, #0]
20000798:	685a      	ldr	r2, [r3, #4]
2000079a:	68fb      	ldr	r3, [r7, #12]
2000079c:	18d3      	adds	r3, r2, r3
2000079e:	2b80      	cmp	r3, #128	; 0x80
200007a0:	dd0c      	ble.n	200007bc <move_object+0x68>
		o->dx = -o->dx;
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	685b      	ldr	r3, [r3, #4]
200007a6:	425a      	negs	r2, r3
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	685b      	ldr	r3, [r3, #4]
200007b2:	2280      	movs	r2, #128	; 0x80
200007b4:	1ad2      	subs	r2, r2, r3
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	60da      	str	r2, [r3, #12]
200007ba:	e026      	b.n	2000080a <move_object+0xb6>
	}
	else if(newy < 1){
200007bc:	68bb      	ldr	r3, [r7, #8]
200007be:	2b00      	cmp	r3, #0
200007c0:	dc08      	bgt.n	200007d4 <move_object+0x80>
		o->dy = -o->dy;
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	689b      	ldr	r3, [r3, #8]
200007c6:	425a      	negs	r2, r3
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	2201      	movs	r2, #1
200007d0:	611a      	str	r2, [r3, #16]
200007d2:	e01a      	b.n	2000080a <move_object+0xb6>
	}
	else if(newy > 64 - o->geo->sizey){
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	681b      	ldr	r3, [r3, #0]
200007d8:	689b      	ldr	r3, [r3, #8]
200007da:	2240      	movs	r2, #64	; 0x40
200007dc:	1ad3      	subs	r3, r2, r3
200007de:	68ba      	ldr	r2, [r7, #8]
200007e0:	429a      	cmp	r2, r3
200007e2:	dd0c      	ble.n	200007fe <move_object+0xaa>
		o->dy = -o->dy;
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	689b      	ldr	r3, [r3, #8]
200007e8:	425a      	negs	r2, r3
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
200007ee:	687b      	ldr	r3, [r7, #4]
200007f0:	681b      	ldr	r3, [r3, #0]
200007f2:	689b      	ldr	r3, [r3, #8]
200007f4:	2240      	movs	r2, #64	; 0x40
200007f6:	1ad2      	subs	r2, r2, r3
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	611a      	str	r2, [r3, #16]
200007fc:	e005      	b.n	2000080a <move_object+0xb6>
	}else{
		o->posx = newx;
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	68fa      	ldr	r2, [r7, #12]
20000802:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	68ba      	ldr	r2, [r7, #8]
20000808:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	0018      	movs	r0, r3
2000080e:	f7ff ff3b 	bl	20000688 <draw_object>
}
20000812:	46c0      	nop			; (mov r8, r8)
20000814:	46bd      	mov	sp, r7
20000816:	b004      	add	sp, #16
20000818:	bd80      	pop	{r7, pc}

2000081a <init_app>:

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 1, 1, draw_object, clear_object, move_object, set_object_speed};

void init_app(void){
2000081a:	b580      	push	{r7, lr}
2000081c:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
2000081e:	4b05      	ldr	r3, [pc, #20]	; (20000834 <init_app+0x1a>)
20000820:	4a05      	ldr	r2, [pc, #20]	; (20000838 <init_app+0x1e>)
20000822:	601a      	str	r2, [r3, #0]
#ifdef USBDM
	*((unsigned long * ) 0x40023830) = 0x18;
20000824:	4b05      	ldr	r3, [pc, #20]	; (2000083c <init_app+0x22>)
20000826:	2218      	movs	r2, #24
20000828:	601a      	str	r2, [r3, #0]
	__asm__ volatile (" LDR R0, =0x08000209 \n");
2000082a:	4816      	ldr	r0, [pc, #88]	; (20000884 <main+0x44>)
	__asm__ volatile (" BLX R0 \n");
2000082c:	4780      	blx	r0
#endif
}
2000082e:	46c0      	nop			; (mov r8, r8)
20000830:	46bd      	mov	sp, r7
20000832:	bd80      	pop	{r7, pc}
20000834:	40021000 	andmi	r1, r2, r0
20000838:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000083c:	40023830 	andmi	r3, r2, r0, lsr r8

20000840 <main>:

void main(void){
20000840:	b580      	push	{r7, lr}
20000842:	b082      	sub	sp, #8
20000844:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
20000846:	4b0e      	ldr	r3, [pc, #56]	; (20000880 <main+0x40>)
20000848:	607b      	str	r3, [r7, #4]
	init_app();
2000084a:	f7ff ffe6 	bl	2000081a <init_app>
	graphic_initialize();
2000084e:	f7ff fdc7 	bl	200003e0 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
20000852:	f7ff fdf0 	bl	20000436 <graphic_clear_screen>
#endif
	p->set_speed(p,4,1);
20000856:	687b      	ldr	r3, [r7, #4]
20000858:	6a1b      	ldr	r3, [r3, #32]
2000085a:	6878      	ldr	r0, [r7, #4]
2000085c:	2201      	movs	r2, #1
2000085e:	2104      	movs	r1, #4
20000860:	4798      	blx	r3
	p->posx = 25;
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	2219      	movs	r2, #25
20000866:	60da      	str	r2, [r3, #12]
	p->posy = 25;
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	2219      	movs	r2, #25
2000086c:	611a      	str	r2, [r3, #16]
	while(1){
		p->move(p);
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	69db      	ldr	r3, [r3, #28]
20000872:	687a      	ldr	r2, [r7, #4]
20000874:	0010      	movs	r0, r2
20000876:	4798      	blx	r3
		delay_milli(40);
20000878:	2028      	movs	r0, #40	; 0x28
2000087a:	f7ff fc03 	bl	20000084 <delay_milli>
		p->move(p);
2000087e:	e7f6      	b.n	2000086e <main+0x2e>
20000880:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
20000884:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000888 <ball_geometry>:
20000888:	0000000c 	andeq	r0, r0, ip
2000088c:	00000004 	andeq	r0, r0, r4
20000890:	00000004 	andeq	r0, r0, r4
20000894:	02000100 	andeq	r0, r0, #0, 2
20000898:	01010001 	tsteq	r1, r1
2000089c:	03010201 	movweq	r0, #4609	; 0x1201
200008a0:	01020002 	tsteq	r2, r2
200008a4:	03020202 	movweq	r0, #8706	; 0x2202
200008a8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200008bc <ball>:
200008bc:	20000888 	andcs	r0, r0, r8, lsl #17
	...
200008c8:	00000001 	andeq	r0, r0, r1
200008cc:	00000001 	andeq	r0, r0, r1
200008d0:	20000689 	andcs	r0, r0, r9, lsl #13
200008d4:	200006ef 	andcs	r0, r0, pc, ror #13
200008d8:	20000755 	andcs	r0, r0, r5, asr r7
200008dc:	20000669 	andcs	r0, r0, r9, ror #12
200008e0:	2000051e 	andcs	r0, r0, lr, lsl r5
200008e4:	20000528 	andcs	r0, r0, r8, lsr #10
200008e8:	20000532 	andcs	r0, r0, r2, lsr r5
200008ec:	2000053c 	andcs	r0, r0, ip, lsr r5
200008f0:	20000546 	andcs	r0, r0, r6, asr #10
200008f4:	20000550 	andcs	r0, r0, r0, asr r5
200008f8:	2000055a 	andcs	r0, r0, sl, asr r5
200008fc:	20000564 	andcs	r0, r0, r4, ror #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000650 	andeq	r0, r0, r0, asr r6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000019a 	muleq	r0, sl, r1
  10:	0002280c 	andeq	r2, r2, ip, lsl #16
  14:	0000bb00 	andeq	fp, r0, r0, lsl #22
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	017a0200 	cmneq	sl, r0, lsl #4
  28:	2c010000 	stccs	0, cr0, [r1], {-0}
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000085 	andeq	r0, r0, r5, lsl #1
  38:	00006c04 	andeq	r6, r0, r4, lsl #24
  3c:	2f010200 	svccs	0x00010200
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a3001 	strcs	r3, [sl, #-1]
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250a31 	eoreq	r0, r5, r1, lsr sl
  58:	00010000 	andeq	r0, r1, r0
  5c:	00007f02 	andeq	r7, r0, r2, lsl #30
  60:	02320100 	eorseq	r0, r2, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00016704 	andeq	r6, r1, r4, lsl #14
  6c:	34013400 	strcc	r3, [r1], #-1024	; 0xfffffc00
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	03190600 	tsteq	r9, #0, 12
  78:	35010000 	strcc	r0, [r1, #-0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	82060000 	andhi	r0, r6, #0
  84:	01000001 	tsteq	r0, r1
  88:	00a90636 	adceq	r0, r9, r6, lsr r6
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000188 	andeq	r0, r0, r8, lsl #3
  94:	a9063701 	stmdbge	r6, {r0, r8, r9, sl, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0083801 	andlt	r3, r8, r1, lsl #16
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	5a070403 	bpl	1c10d4 <startup-0x1fe3ef2c>
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68033901 	stmdavs	r3, {r0, r8, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e3901 	svcle	0x000e3901
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	03020400 	movweq	r0, #9216	; 0x2400
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	0166103b 	cmneq	r6, fp, lsr r0
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30c3c 	sbcseq	r0, r3, ip, lsr ip
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a9063d 	adceq	r0, r9, sp, lsr r6
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90a3d 	adceq	r0, r9, sp, lsr sl
 114:	06080000 	streq	r0, [r8], -r0
 118:	00000307 	andeq	r0, r0, r7, lsl #6
 11c:	a9063e01 	stmdbge	r6, {r0, r9, sl, fp, ip, sp}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00009306 	andeq	r9, r0, r6, lsl #6
 128:	0b3e0100 	bleq	f80530 <startup-0x1f07fad0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02230610 	eoreq	r0, r3, #16, 12	; 0x1000000
 134:	3f010000 	svccc	0x00010000
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	35061400 	strcc	r1, [r6, #-1024]	; 0xfffffc00
 140:	01000001 	tsteq	r0, r1
 144:	01770a40 	cmneq	r7, r0, asr #20
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	0000002c 	andeq	r0, r0, ip, lsr #32
 150:	770a4101 	strvc	r4, [sl, -r1, lsl #2]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	0002c506 	andeq	ip, r2, r6, lsl #10
 15c:	0a420100 	beq	1080564 <startup-0x1ef7fa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	00035102 	andeq	r5, r3, r2, lsl #2
 19c:	03430100 	movteq	r0, #12544	; 0x3100
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	00035002 	andeq	r5, r3, r2
 1a8:	0c430100 	stfeqe	f0, [r3], {-0}
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0000980d 	andeq	r9, r0, sp, lsl #16
 1b4:	014d0100 	mrseq	r0, (UNDEF: 93)
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	88030500 	stmdahi	r3, {r8, sl}
 1c0:	0d200008 	stceq	0, cr0, [r0, #-32]!	; 0xffffffe0
 1c4:	0000021e 	andeq	r0, r0, lr, lsl r2
 1c8:	0f014e01 	svceq	0x00014e01
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	08bc0305 	ldmeq	ip!, {r0, r2, r8, r9}
 1d4:	0c0e2000 	stceq	0, cr2, [lr], {-0}
 1d8:	01000001 	tsteq	r0, r1
 1dc:	40060159 	andmi	r0, r6, r9, asr r1
 1e0:	44200008 	strtmi	r0, [r0], #-8
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0001fc9c 	muleq	r1, ip, ip
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a015a01 	beq	569fc <startup-0x1ffa9604>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1fc:	00017110 	andeq	r7, r1, r0, lsl r1
 200:	01500100 	cmpeq	r0, r0, lsl #2
 204:	00081a06 	andeq	r1, r8, r6, lsl #20
 208:	00002620 	andeq	r2, r0, r0, lsr #12
 20c:	0e9c0100 	fmleqe	f0, f4, f0
 210:	00000336 	andeq	r0, r0, r6, lsr r3
 214:	06013201 	streq	r3, [r1], -r1, lsl #4
 218:	20000754 	andcs	r0, r0, r4, asr r7
 21c:	000000c6 	andeq	r0, r0, r6, asr #1
 220:	02559c01 	subseq	r9, r5, #256	; 0x100
 224:	6f110000 	svcvs	0x00110000
 228:	01320100 	teqeq	r2, r0, lsl #2
 22c:	0001a41a 	andeq	sl, r1, sl, lsl r4
 230:	6c910200 	lfmvs	f0, 4, [r1], {0}
 234:	0001500d 	andeq	r5, r1, sp
 238:	01340100 	teqeq	r4, r0, lsl #2
 23c:	0000a906 	andeq	sl, r0, r6, lsl #18
 240:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 244:	0001550d 	andeq	r5, r1, sp, lsl #10
 248:	01350100 	teqeq	r5, r0, lsl #2
 24c:	0000a906 	andeq	sl, r0, r6, lsl #18
 250:	70910200 	addsvc	r0, r1, r0, lsl #4
 254:	02e40e00 	rsceq	r0, r4, #0, 28
 258:	2c010000 	stccs	0, cr0, [r1], {-0}
 25c:	06ee0601 	strbteq	r0, [lr], r1, lsl #12
 260:	00662000 	rsbeq	r2, r6, r0
 264:	9c010000 	stcls	0, cr0, [r1], {-0}
 268:	00000293 	muleq	r0, r3, r2
 26c:	01006f11 	tsteq	r0, r1, lsl pc
 270:	a41b012c 	ldrge	r0, [fp], #-300	; 0xfffffed4
 274:	02000001 	andeq	r0, r0, #1
 278:	f6126c91 			; <UNDEFINED> instruction: 0xf6126c91
 27c:	54200006 	strtpl	r0, [r0], #-6
 280:	0f000000 	svceq	0x00000000
 284:	2d010074 	stccs	0, cr0, [r1, #-464]	; 0xfffffe30
 288:	00a90a01 	adceq	r0, r9, r1, lsl #20
 28c:	91020000 	mrsls	r0, (UNDEF: 2)
 290:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
 294:	00000020 	andeq	r0, r0, r0, lsr #32
 298:	06012601 	streq	r2, [r1], -r1, lsl #12
 29c:	20000688 	andcs	r0, r0, r8, lsl #13
 2a0:	00000066 	andeq	r0, r0, r6, rrx
 2a4:	02d19c01 	sbcseq	r9, r1, #256	; 0x100
 2a8:	6f110000 	svcvs	0x00110000
 2ac:	01260100 			; <UNDEFINED> instruction: 0x01260100
 2b0:	0001a41a 	andeq	sl, r1, sl, lsl r4
 2b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2b8:	00069012 	andeq	r9, r6, r2, lsl r0
 2bc:	00005420 	andeq	r5, r0, r0, lsr #8
 2c0:	00740f00 	rsbseq	r0, r4, r0, lsl #30
 2c4:	0a012701 	beq	49ed0 <startup-0x1ffb6130>
 2c8:	000000a9 	andeq	r0, r0, r9, lsr #1
 2cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2d0:	02b41300 	adcseq	r1, r4, #0, 6
 2d4:	21010000 	mrscs	r0, (UNDEF: 1)
 2d8:	06680601 	strbteq	r0, [r8], -r1, lsl #12
 2dc:	00202000 	eoreq	r2, r0, r0
 2e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e4:	00000317 	andeq	r0, r0, r7, lsl r3
 2e8:	01006f11 	tsteq	r0, r1, lsl pc
 2ec:	a41f0121 	ldrge	r0, [pc], #-289	; 2f4 <startup-0x1ffffd0c>
 2f0:	02000001 	andeq	r0, r0, #1
 2f4:	42147491 	andsmi	r7, r4, #-1862270976	; 0x91000000
 2f8:	01000003 	tsteq	r0, r3
 2fc:	a9260121 	stmdbge	r6!, {r0, r5, r8}
 300:	02000000 	andeq	r0, r0, #0
 304:	49147091 	ldmdbmi	r4, {r0, r4, r7, ip, sp, lr}
 308:	01000003 	tsteq	r0, r3
 30c:	a9320121 	ldmdbge	r2!, {r0, r5, r8}
 310:	02000000 	andeq	r0, r0, #0
 314:	15006c91 	strne	r6, [r0, #-3217]	; 0xfffff36f
 318:	0000005a 	andeq	r0, r0, sl, asr r0
 31c:	9e06f801 	cdpls	8, 0, cr15, cr6, cr1, {0}
 320:	ca200004 	bgt	800338 <startup-0x1f7ffcc8>
 324:	01000001 	tsteq	r0, r1
 328:	0003a29c 	muleq	r3, ip, r2
 32c:	00781600 	rsbseq	r1, r8, r0, lsl #12
 330:	2514f801 	ldrcs	pc, [r4, #-2049]	; 0xfffff7ff
 334:	02000000 	andeq	r0, r0, #0
 338:	79165f91 	ldmdbvc	r6, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 33c:	1ff80100 	svcne	0x00f80100
 340:	00000025 	andeq	r0, r0, r5, lsr #32
 344:	165e9102 	ldrbne	r9, [lr], -r2, lsl #2
 348:	00746573 	rsbseq	r6, r4, r3, ror r5
 34c:	252af801 	strcs	pc, [sl, #-2049]!	; 0xfffff7ff
 350:	02000000 	andeq	r0, r0, #0
 354:	84175d91 	ldrhi	r5, [r7], #-3473	; 0xfffff26f
 358:	01000002 	tsteq	r0, r2
 35c:	00250afa 	strdeq	r0, [r5], -sl	; <UNPREDICTABLE>
 360:	91020000 	mrsls	r0, (UNDEF: 2)
 364:	00381767 	eorseq	r1, r8, r7, ror #14
 368:	fa010000 	blx	40370 <startup-0x1ffbfc90>
 36c:	00002510 	andeq	r2, r0, r0, lsl r5
 370:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 374:	0000b417 	andeq	fp, r0, r7, lsl r4
 378:	1cfa0100 	ldfnee	f0, [sl]
 37c:	00000025 	andeq	r0, r0, r5, lsr #32
 380:	17659102 	strbne	r9, [r5, -r2, lsl #2]!
 384:	00000073 	andeq	r0, r0, r3, ror r0
 388:	2524fa01 	strcs	pc, [r4, #-2561]!	; 0xfffff5ff
 38c:	02000000 	andeq	r0, r0, #0
 390:	89176391 	ldmdbhi	r7, {r0, r4, r7, r8, r9, sp, lr}
 394:	01000002 	tsteq	r0, r2
 398:	00250afb 	strdeq	r0, [r5], -fp	; <UNPREDICTABLE>
 39c:	91020000 	mrsls	r0, (UNDEF: 2)
 3a0:	cf180064 	svcgt	0x00180064
 3a4:	01000002 	tsteq	r0, r2
 3a8:	043606ee 	ldrteq	r0, [r6], #-1774	; 0xfffff912
 3ac:	00682000 	rsbeq	r2, r8, r0
 3b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3b4:	000003eb 	andeq	r0, r0, fp, ror #7
 3b8:	00043c12 	andeq	r3, r4, r2, lsl ip
 3bc:	00005820 	andeq	r5, r0, r0, lsr #16
 3c0:	00551700 	subseq	r1, r5, r0, lsl #14
 3c4:	ef010000 	svc	0x00010000
 3c8:	0000250f 	andeq	r2, r0, pc, lsl #10
 3cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3d0:	00046012 	andeq	r6, r4, r2, lsl r0
 3d4:	00002220 	andeq	r2, r0, r0, lsr #4
 3d8:	64611900 	strbtvs	r1, [r1], #-2304	; 0xfffff700
 3dc:	f2010064 	vhadd.s8	q0, <illegal reg q0.5>, q10
 3e0:	0000250f 	andeq	r2, r0, pc, lsl #10
 3e4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 3e8:	1a000000 	bne	3f0 <startup-0x1ffffc10>
 3ec:	00000111 	andeq	r0, r0, r1, lsl r1
 3f0:	e006e001 	and	lr, r6, r1
 3f4:	56200003 	strtpl	r0, [r0], -r3
 3f8:	01000000 	mrseq	r0, (UNDEF: 0)
 3fc:	00431b9c 	umaaleq	r1, r3, ip, fp
 400:	db010000 	blle	40408 <startup-0x1ffbfbf8>
 404:	00002509 	andeq	r2, r0, r9, lsl #10
 408:	0003b600 	andeq	fp, r3, r0, lsl #12
 40c:	00002a20 	andeq	r2, r0, r0, lsr #20
 410:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
 414:	1c000004 	stcne	0, cr0, [r0], {4}
 418:	00000038 	andeq	r0, r0, r8, lsr r0
 41c:	2523db01 	strcs	sp, [r3, #-2817]!	; 0xfffff4ff
 420:	02000000 	andeq	r0, r0, #0
 424:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 428:	000002a1 	andeq	r0, r0, r1, lsr #5
 42c:	7006d301 	andvc	sp, r6, r1, lsl #6
 430:	46200003 	strtmi	r0, [r0], -r3
 434:	01000000 	mrseq	r0, (UNDEF: 0)
 438:	00045c9c 	muleq	r4, ip, ip
 43c:	00501c00 	subseq	r1, r0, r0, lsl #24
 440:	d3010000 	movwle	r0, #4096	; 0x1000
 444:	00002521 	andeq	r2, r0, r1, lsr #10
 448:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 44c:	0000381c 	andeq	r3, r0, ip, lsl r8
 450:	2fd30100 	svccs	0x00d30100
 454:	00000025 	andeq	r0, r0, r5, lsr #32
 458:	00769102 	rsbseq	r9, r6, r2, lsl #2
 45c:	00000a15 	andeq	r0, r0, r5, lsl sl
 460:	06cc0100 	strbeq	r0, [ip], r0, lsl #2
 464:	20000330 	andcs	r0, r0, r0, lsr r3
 468:	00000040 	andeq	r0, r0, r0, asr #32
 46c:	04919c01 	ldreq	r9, [r1], #3073	; 0xc01
 470:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
 474:	01000000 	mrseq	r0, (UNDEF: 0)
 478:	002524cc 	eoreq	r2, r5, ip, asr #9
 47c:	91020000 	mrsls	r0, (UNDEF: 2)
 480:	00381c77 	eorseq	r1, r8, r7, ror ip
 484:	cc010000 	stcgt	0, cr0, [r1], {-0}
 488:	00002535 	andeq	r2, r0, r5, lsr r5
 48c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 490:	00a61500 	adceq	r1, r6, r0, lsl #10
 494:	b7010000 	strlt	r0, [r1, -r0]
 498:	0002b006 	andeq	fp, r2, r6
 49c:	00008020 	andeq	r8, r0, r0, lsr #32
 4a0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
 4a4:	1c000004 	stcne	0, cr0, [r0], {4}
 4a8:	0000028f 	andeq	r0, r0, pc, lsl #5
 4ac:	251cb701 	ldrcs	fp, [ip, #-1793]	; 0xfffff8ff
 4b0:	02000000 	andeq	r0, r0, #0
 4b4:	381c7791 	ldmdacc	ip, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 4b8:	01000000 	mrseq	r0, (UNDEF: 0)
 4bc:	00252bb7 	strhteq	r2, [r5], -r7
 4c0:	91020000 	mrsls	r0, (UNDEF: 2)
 4c4:	0c1b0076 	ldceq	0, cr0, [fp], {118}	; 0x76
 4c8:	01000003 	tsteq	r0, r3
 4cc:	002509a1 	eoreq	r0, r5, r1, lsr #19
 4d0:	02200000 	eoreq	r0, r0, #0
 4d4:	00902000 	addseq	r2, r0, r0
 4d8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4dc:	000004fe 	strdeq	r0, [r0], -lr
 4e0:	0000381c 	andeq	r3, r0, ip, lsl r8
 4e4:	1ea10100 	fdvnes	f0, f1, f0
 4e8:	00000025 	andeq	r0, r0, r5, lsr #32
 4ec:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 4f0:	01007672 	tsteq	r0, r2, ror r6
 4f4:	00250aa9 	eoreq	r0, r5, r9, lsr #21
 4f8:	91020000 	mrsls	r0, (UNDEF: 2)
 4fc:	23150077 	tstcs	r5, #119	; 0x77
 500:	01000003 	tsteq	r0, r3
 504:	01aa068d 			; <UNDEFINED> instruction: 0x01aa068d
 508:	00762000 	rsbseq	r2, r6, r0
 50c:	9c010000 	stcls	0, cr0, [r1], {-0}
 510:	00000528 	andeq	r0, r0, r8, lsr #10
 514:	0000001d 	andeq	r0, r0, sp, lsl r0
 518:	00631900 	rsbeq	r1, r3, r0, lsl #18
 51c:	250b9601 	strcs	r9, [fp, #-1537]	; 0xfffff9ff
 520:	02000000 	andeq	r0, r0, #0
 524:	00007791 	muleq	r0, r1, r7
 528:	00003115 	andeq	r3, r0, r5, lsl r1
 52c:	06800100 	streq	r0, [r0], r0, lsl #2
 530:	20000148 	andcs	r0, r0, r8, asr #2
 534:	00000062 	andeq	r0, r0, r2, rrx
 538:	055d9c01 	ldrbeq	r9, [sp, #-3073]	; 0xfffff3ff
 53c:	381c0000 	ldmdacc	ip, {}	; <UNPREDICTABLE>
 540:	01000000 	mrseq	r0, (UNDEF: 0)
 544:	00252080 	eoreq	r2, r5, r0, lsl #1
 548:	91020000 	mrsls	r0, (UNDEF: 2)
 54c:	02f1176f 	rscseq	r1, r1, #29097984	; 0x1bc0000
 550:	81010000 	mrshi	r0, (UNDEF: 1)
 554:	0000250a 	andeq	r2, r0, sl, lsl #10
 558:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 55c:	01241e00 			; <UNDEFINED> instruction: 0x01241e00
 560:	7c010000 	stcvc	0, cr0, [r1], {-0}
 564:	00010c06 	andeq	r0, r1, r6, lsl #24
 568:	00003c20 	andeq	r3, r0, r0, lsr #24
 56c:	819c0100 	orrshi	r0, ip, r0, lsl #2
 570:	16000005 	strne	r0, [r0], -r5
 574:	7c010078 	stcvc	0, cr0, [r1], {120}	; 0x78
 578:	00002525 	andeq	r2, r0, r5, lsr #10
 57c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 580:	013b1e00 	teqeq	fp, r0, lsl #28
 584:	77010000 	strvc	r0, [r1, -r0]
 588:	0000c606 	andeq	ip, r0, r6, lsl #12
 58c:	00004620 	andeq	r4, r0, r0, lsr #12
 590:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
 594:	16000005 	strne	r0, [r0], -r5
 598:	77010078 	smlsdxvc	r1, r8, r0, r0
 59c:	00002523 	andeq	r2, r0, r3, lsr #10
 5a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5a4:	02f61a00 	rscseq	r1, r6, #0, 20
 5a8:	70010000 	andvc	r0, r1, r0
 5ac:	0000b406 	andeq	fp, r0, r6, lsl #8
 5b0:	00001220 	andeq	r1, r0, r0, lsr #4
 5b4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
 5b8:	00000295 	muleq	r0, r5, r2
 5bc:	84066601 	strhi	r6, [r6], #-1537	; 0xfffff9ff
 5c0:	30200000 	eorcc	r0, r0, r0
 5c4:	01000000 	mrseq	r0, (UNDEF: 0)
 5c8:	0005f39c 	muleq	r5, ip, r3
 5cc:	736d1600 	cmnvc	sp, #0, 12
 5d0:	1f660100 	svcne	0x00660100
 5d4:	000000c0 	andeq	r0, r0, r0, asr #1
 5d8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 5dc:	2000008c 	andcs	r0, r0, ip, lsl #1
 5e0:	0000001e 	andeq	r0, r0, lr, lsl r0
 5e4:	01006919 	tsteq	r0, r9, lsl r9
 5e8:	00a90a6b 	adceq	r0, r9, fp, ror #20
 5ec:	91020000 	mrsls	r0, (UNDEF: 2)
 5f0:	15000074 	strne	r0, [r0, #-116]	; 0xffffff8c
 5f4:	00000060 	andeq	r0, r0, r0, rrx
 5f8:	58065c01 	stmdapl	r6, {r0, sl, fp, ip, lr}
 5fc:	2c200000 	stccs	0, cr0, [r0], #-0
 600:	01000000 	mrseq	r0, (UNDEF: 0)
 604:	00062f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
 608:	73751600 	cmnvc	r5, #0, 12
 60c:	1f5c0100 	svcne	0x005c0100
 610:	000000c0 	andeq	r0, r0, r0, asr #1
 614:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 618:	20000060 	andcs	r0, r0, r0, rrx
 61c:	0000001a 	andeq	r0, r0, sl, lsl r0
 620:	01006919 	tsteq	r0, r9, lsl r9
 624:	00a90a61 	adceq	r0, r9, r1, ror #20
 628:	91020000 	mrsls	r0, (UNDEF: 2)
 62c:	1f000074 	svcne	0x00000074
 630:	0000018e 	andeq	r0, r0, lr, lsl #3
 634:	10065201 	andne	r5, r6, r1, lsl #4
 638:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
 63c:	01000000 	mrseq	r0, (UNDEF: 0)
 640:	02161f9c 	andseq	r1, r6, #156, 30	; 0x270
 644:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 648:	00000006 	andeq	r0, r0, r6
 64c:	00000c20 	andeq	r0, r0, r0, lsr #24
 650:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	3f002e10 	svccc	0x00002e10
  d8:	3a0e0319 	bcc	380d44 <startup-0x1fc7f2bc>
  dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	1119270b 	tstne	r9, fp, lsl #14
  e4:	40061201 	andmi	r1, r6, r1, lsl #4
  e8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  ec:	05110000 	ldreq	r0, [r1, #-0]
  f0:	3a080300 	bcc	200cf8 <startup-0x1fdff308>
  f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  fc:	12000018 	andne	r0, r0, #24
 100:	0111010b 	tsteq	r1, fp, lsl #2
 104:	00000612 	andeq	r0, r0, r2, lsl r6
 108:	3f012e13 	svccc	0x00012e13
 10c:	3a0e0319 	bcc	380d78 <startup-0x1fc7f288>
 110:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	1119270b 	tstne	r9, fp, lsl #14
 118:	40061201 	andmi	r1, r6, r1, lsl #4
 11c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 120:	00001301 	andeq	r1, r0, r1, lsl #6
 124:	03000514 	movweq	r0, #1300	; 0x514
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 130:	00180213 	andseq	r0, r8, r3, lsl r2
 134:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 138:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
 140:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 14c:	00130119 	andseq	r0, r3, r9, lsl r1
 150:	00051600 	andeq	r1, r5, r0, lsl #12
 154:	0b3a0803 	bleq	e82168 <startup-0x1f17de98>
 158:	0b390b3b 	bleq	e42e4c <startup-0x1f1bd1b4>
 15c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 160:	34170000 	ldrcc	r0, [r7], #-0
 164:	3a0e0300 	bcc	380d6c <startup-0x1fc7f294>
 168:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 170:	18000018 	stmdane	r0, {r3, r4}
 174:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	0b390b3b 	bleq	e42e70 <startup-0x1f1bd190>
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	00341900 	eorseq	r1, r4, r0, lsl #18
 190:	0b3a0803 	bleq	e821a4 <startup-0x1f17de5c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 19c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 1a0:	03193f00 	tsteq	r9, #0, 30
 1a4:	3b0b3a0e 	blcc	2ce9e4 <startup-0x1fd3161c>
 1a8:	110b390b 	tstne	fp, fp, lsl #18
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1b8:	03193f01 	tsteq	r9, #1, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c4:	11134919 	tstne	r3, r9, lsl r9
 1c8:	40061201 	andmi	r1, r6, r1, lsl #4
 1cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d0:	00001301 	andeq	r1, r0, r1, lsl #6
 1d4:	0300051c 	movweq	r0, #1308	; 0x51c
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1e0:	00180213 	andseq	r0, r8, r3, lsl r2
 1e4:	010b1d00 	tsteq	fp, r0, lsl #26
 1e8:	00001755 	andeq	r1, r0, r5, asr r7
 1ec:	3f012e1e 	svccc	0x00012e1e
 1f0:	3a0e0319 	bcc	380e5c <startup-0x1fc7f1a4>
 1f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f8:	1119270b 	tstne	r9, fp, lsl #14
 1fc:	40061201 	andmi	r1, r6, r1, lsl #4
 200:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 204:	00001301 	andeq	r1, r0, r1, lsl #6
 208:	3f002e1f 	svccc	0x00002e1f
 20c:	3a0e0319 	bcc	380e78 <startup-0x1fc7f188>
 210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 214:	1119270b 	tstne	r9, fp, lsl #14
 218:	40061201 	andmi	r1, r6, r1, lsl #4
 21c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 220:	Address 0x00000220 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000874 	andeq	r0, r0, r4, ror r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001cc 	andcs	r0, r0, ip, asr #3
   4:	200001f6 	strdcs	r0, [r0], -r6
   8:	200001f8 	strdcs	r0, [r0], -r8
   c:	200001fa 	strdcs	r0, [r0], -sl
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20000884 	andcs	r0, r0, r4, lsl #17
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000004a4 	andeq	r0, r0, r4, lsr #9
   4:	00720003 	rsbseq	r0, r2, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	734f2f37 	movtvc	r2, #65335	; 0xff37
  58:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  5c:	6262614c 	rsbvs	r6, r2, #76, 2
  60:	612f7261 			; <UNDEFINED> instruction: 0x612f7261
  64:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  68:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  6c:	74756100 	ldrbtvc	r6, [r5], #-256	; 0xffffff00
  70:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  74:	00632e67 	rsbeq	r2, r3, r7, ror #28
  78:	00000001 	andeq	r0, r0, r1
  7c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
  80:	00000002 	andeq	r0, r0, r2
  84:	00c70320 	sbceq	r0, r7, r0, lsr #6
  88:	13010501 	movwne	r0, #5377	; 0x1501
  8c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  90:	01000302 	tsteq	r0, r2, lsl #6
  94:	00170501 	andseq	r0, r7, r1, lsl #10
  98:	00100205 	andseq	r0, r0, r5, lsl #4
  9c:	d1032000 	mrsle	r2, (UNDEF: 3)
  a0:	02050100 	andeq	r0, r5, #0, 2
  a4:	200c052f 	andcs	r0, ip, pc, lsr #10
  a8:	052f0205 	streq	r0, [pc, #-517]!	; fffffeab <ball+0xdffff5ef>
  ac:	0205200c 	andeq	r2, r5, #12
  b0:	200b052f 	andcs	r0, fp, pc, lsr #10
  b4:	052f0205 	streq	r0, [pc, #-517]!	; fffffeb7 <ball+0xdffff5fb>
  b8:	0705200c 	streq	r2, [r5, -ip]
  bc:	000a052f 	andeq	r0, sl, pc, lsr #10
  c0:	20010402 	andcs	r0, r1, r2, lsl #8
  c4:	02001905 	andeq	r1, r0, #81920	; 0x14000
  c8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  cc:	04020007 	streq	r0, [r2], #-7
  d0:	02053c01 	andeq	r3, r5, #256	; 0x100
  d4:	200c0522 	andcs	r0, ip, r2, lsr #10
  d8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffdb <ball+0xdffff71f>
  dc:	0a05ae22 	beq	16b96c <startup-0x1fe94694>
  e0:	2e02054f 	cfsh32cs	mvfx0, mvfx2, #47
  e4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  e8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
  ec:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  f0:	16052d03 	strne	r2, [r5], -r3, lsl #26
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	0013053c 	andseq	r0, r3, ip, lsr r5
  fc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 100:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 104:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 108:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 10c:	4f0a055a 	svcmi	0x000a055a
 110:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 114:	04020003 	streq	r0, [r2], #-3
 118:	1a052103 	bne	14852c <startup-0x1feb7ad4>
 11c:	03040200 	movweq	r0, #16896	; 0x4200
 120:	00130557 	andseq	r0, r3, r7, asr r5
 124:	3c010402 	cfstrscc	mvf0, [r1], {2}
 128:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 12c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 130:	13053f01 	movwne	r3, #24321	; 0x5f01
 134:	2f02055a 	svccs	0x0002055a
 138:	2f01052f 	svccs	0x0001052f
 13c:	05402505 	strbeq	r2, [r0, #-1285]	; 0xfffffafb
 140:	1505670f 	strne	r6, [r5, #-1807]	; 0xfffff8f1
 144:	660f054a 	strvs	r0, [pc], -sl, asr #10
 148:	83010559 	movwhi	r0, #5465	; 0x1559
 14c:	05682705 	strbeq	r2, [r8, #-1797]!	; 0xfffff8fb
 150:	0105670f 	tsteq	r5, pc, lsl #14
 154:	2b051308 	blcs	144d7c <startup-0x1febb284>
 158:	670a0576 	smlsdxvs	sl, r6, r5, r0
 15c:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 160:	0b05c10c 	bleq	170598 <startup-0x1fe8fa68>
 164:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
 168:	0f053c03 	svceq	0x00053c03
 16c:	3d060521 	cfstr32cc	mvfx0, [r6, #-132]	; 0xffffff7c
 170:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 174:	1b053d06 	blne	14f594 <startup-0x1feb0a6c>
 178:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 17c:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 180:	1e052201 	cdpne	2, 0, cr2, cr5, cr1, {0}
 184:	3d02053e 	cfstr32cc	mvfx0, [r2, #-248]	; 0xffffff08
 188:	200d053d 	andcs	r0, sp, sp, lsr r5
 18c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 180 <startup-0x1ffffe80>
 190:	3003053d 	andcc	r0, r3, sp, lsr r5
 194:	2f1d053d 	svccs	0x001d053d
 198:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
 19c:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 1a0:	0a052f05 	beq	14bdbc <startup-0x1feb4244>
 1a4:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 1a8:	02052704 	andeq	r2, r5, #4, 14	; 0x100000
 1ac:	0e053d23 	cdpeq	13, 0, cr3, cr5, cr3, {1}
 1b0:	2f010520 	svccs	0x00010520
 1b4:	05ca2905 	strbeq	r2, [sl, #2309]	; 0x905
 1b8:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 1bc:	0205200d 	andeq	r2, r5, #13
 1c0:	2f593d2f 	svccs	0x00593d2f
 1c4:	2f0f053d 	svccs	0x000f053d
 1c8:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 1cc:	053d4b02 	ldreq	r4, [sp, #-2818]!	; 0xfffff4fe
 1d0:	0405200e 	streq	r2, [r5], #-14
 1d4:	4b03052f 	blmi	c1698 <startup-0x1ff3e968>
 1d8:	3004053d 	andcc	r0, r4, sp, lsr r5
 1dc:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 1e0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 1e4:	36053d01 	strcc	r3, [r5], -r1, lsl #26
 1e8:	910205ca 	smlabtls	r2, sl, r5, r0
 1ec:	05201005 	streq	r1, [r0, #-5]!
 1f0:	2f593d02 	svccs	0x00593d02
 1f4:	10052f3d 	andne	r2, r5, sp, lsr pc
 1f8:	4a04053e 	bmi	1016f8 <startup-0x1fefe908>
 1fc:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 200:	05301005 	ldreq	r1, [r0, #-5]!
 204:	03054a04 	movweq	r4, #23044	; 0x5a04
 208:	02053d21 	andeq	r3, r5, #2112	; 0x840
 20c:	200f0530 	andcs	r0, pc, r0, lsr r5	; <UNPREDICTABLE>
 210:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 204 <startup-0x1ffffdfc>
 214:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 218:	02057640 	andeq	r7, r5, #64, 12	; 0x4000000
 21c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 220:	05830105 	streq	r0, [r3, #261]	; 0x105
 224:	02054c3a 	andeq	r4, r5, #14848	; 0x3a00
 228:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 22c:	8301053d 	movwhi	r0, #5437	; 0x153d
 230:	054c2e05 	strbeq	r2, [ip, #-3589]	; 0xfffff1fb
 234:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 238:	67010559 	smlsdvs	r1, r9, r5, r0
 23c:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
 240:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 244:	4b3d3d3d 	blmi	f4f740 <startup-0x1f0b08c0>
 248:	4b4b4b4b 	blmi	12d2f7c <startup-0x1ed2d084>
 24c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 250:	0f053e1c 	svceq	0x00053e1c
 254:	3c02053d 	cfstr32cc	mvfx0, [r2], {61}	; 0x3d
 258:	9f210305 	svcls	0x00210305
 25c:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 260:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
 264:	03040200 	movweq	r0, #16896	; 0x4200
 268:	00250521 	eoreq	r0, r5, r1, lsr #10
 26c:	49030402 	stmdbmi	r3, {r1, sl}
 270:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 274:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 278:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 27c:	02054702 	andeq	r4, r5, #524288	; 0x80000
 280:	01040200 	mrseq	r0, R12_usr
 284:	51010558 	tstpl	r1, r8, asr r5
 288:	055a2e05 	ldrbeq	r2, [sl, #-3589]	; 0xfffff1fb
 28c:	0e05e504 	cfsh32eq	mvfx14, mvfx5, #4
 290:	02040200 	andeq	r0, r4, #0, 4
 294:	00180558 	andseq	r0, r8, r8, asr r5
 298:	58040402 	stmdapl	r4, {r1, sl}
 29c:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 2a0:	05580604 	ldrbeq	r0, [r8, #-1540]	; 0xfffff9fc
 2a4:	18055a14 	stmdane	r5, {r2, r4, r9, fp, ip, lr}
 2a8:	580a053c 	stmdapl	sl, {r2, r3, r4, r5, r8, sl}
 2ac:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
 2b0:	10053c0f 	andne	r3, r5, pc, lsl #24
 2b4:	4a0305e5 	bmi	c1a50 <startup-0x1ff3e5b0>
 2b8:	05211005 	streq	r1, [r1, #-5]!
 2bc:	10054a03 	andne	r4, r5, r3, lsl #20
 2c0:	4a030521 	bmi	c174c <startup-0x1ff3e8b4>
 2c4:	05211005 	streq	r1, [r1, #-5]!
 2c8:	10054a03 	andne	r4, r5, r3, lsl #20
 2cc:	4a030521 	bmi	c1758 <startup-0x1ff3e8a8>
 2d0:	05211005 	streq	r1, [r1, #-5]!
 2d4:	10054a03 	andne	r4, r5, r3, lsl #20
 2d8:	4a030521 	bmi	c1764 <startup-0x1ff3e89c>
 2dc:	05211005 	streq	r1, [r1, #-5]!
 2e0:	05214a03 	streq	r4, [r1, #-2563]!	; 0xfffff5fd
 2e4:	08052204 	stmdaeq	r5, {r2, r9, sp}
 2e8:	6904054b 	stmdbvs	r4, {r0, r1, r3, r6, r8, sl}
 2ec:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 2f0:	0e054b0a 	vmlaeq.f64	d4, d5, d10
 2f4:	4b0a0576 	blmi	2818d4 <startup-0x1fd7e72c>
 2f8:	c9680205 	stmdbgt	r8!, {r0, r2, r9}^
 2fc:	05c91005 	strbeq	r1, [r9, #5]
 300:	04059102 	streq	r9, [r5], #-258	; 0xfffffefe
 304:	4b0805ad 	blmi	2019c0 <startup-0x1fdfe640>
 308:	920205a0 	andls	r0, r2, #160, 10	; 0x28000000
 30c:	5d032c05 	stcpl	12, cr2, [r3, #-20]	; 0xffffffec
 310:	030105ac 	movweq	r0, #5548	; 0x15ac
 314:	39052024 	stmdbcc	r5, {r2, r5, sp}
 318:	67080586 	strvs	r0, [r8, -r6, lsl #11]
 31c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 320:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 324:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 328:	000a052e 	andeq	r0, sl, lr, lsr #10
 32c:	21030402 	tstcs	r3, r2, lsl #8
 330:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 334:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 338:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 33c:	03056603 	movweq	r6, #22019	; 0x5603
 340:	03040200 	movweq	r0, #16896	; 0x4200
 344:	0025052e 	eoreq	r0, r5, lr, lsr #10
 348:	3c030402 	cfstrscc	mvf0, [r3], {2}
 34c:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 350:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 354:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 358:	03056603 	movweq	r6, #22019	; 0x5603
 35c:	03040200 	movweq	r0, #16896	; 0x4200
 360:	002c052e 	eoreq	r0, ip, lr, lsr #10
 364:	73030402 	movwvc	r0, #13314	; 0x3402
 368:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 36c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 370:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 374:	02052e01 	andeq	r2, r5, #1, 28
 378:	01040200 	mrseq	r0, R12_usr
 37c:	3f010520 	svccc	0x00010520
 380:	055a1d05 	ldrbeq	r1, [sl, #-3333]	; 0xfffff2fb
 384:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 388:	000a052e 	andeq	r0, sl, lr, lsr #10
 38c:	21030402 	tstcs	r3, r2, lsl #8
 390:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 394:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 398:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 39c:	03056603 	movweq	r6, #22019	; 0x5603
 3a0:	03040200 	movweq	r0, #16896	; 0x4200
 3a4:	0025052e 	eoreq	r0, r5, lr, lsr #10
 3a8:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3ac:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 3b0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3b4:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 3b8:	03056603 	movweq	r6, #22019	; 0x5603
 3bc:	03040200 	movweq	r0, #16896	; 0x4200
 3c0:	0029052e 	eoreq	r0, r9, lr, lsr #10
 3c4:	73030402 	movwvc	r0, #13314	; 0x3402
 3c8:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3cc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3d0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 3d4:	02052e01 	andeq	r2, r5, #1, 28
 3d8:	01040200 	mrseq	r0, R12_usr
 3dc:	3f010520 	svccc	0x00010520
 3e0:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 3e4:	0e054b02 	vmlaeq.f64	d4, d5, d2
 3e8:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 3ec:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 3f0:	18052f0e 	stmdane	r5, {r1, r2, r3, r8, r9, sl, fp, sp}
 3f4:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 3f8:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 3fc:	0b053d0d 	bleq	14f838 <startup-0x1feb07c8>
 400:	2009052e 	andcs	r0, r9, lr, lsr #10
 404:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff907 <ball+0xdffff04b>
 408:	18054c13 	stmdane	r5, {r0, r1, r4, sl, fp, lr}
 40c:	2010052e 	andscs	r0, r0, lr, lsr #10
 410:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 414:	0b052f0d 	bleq	14c050 <startup-0x1feb3fb0>
 418:	2009052e 	andcs	r0, r9, lr, lsr #10
 41c:	052f1405 	streq	r1, [pc, #-1029]!	; 1f <startup-0x1fffffe1>
 420:	11052e19 	tstne	r5, r9, lsl lr
 424:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 428:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
 42c:	0b053d0d 	bleq	14f868 <startup-0x1feb0798>
 430:	2009052e 	andcs	r0, r9, lr, lsr #10
 434:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff937 <ball+0xdffff07b>
 438:	1c054c17 	stcne	12, cr4, [r5], {23}
 43c:	2014052e 	andscs	r0, r4, lr, lsr #10
 440:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 444:	0b053d0d 	bleq	14f880 <startup-0x1feb0780>
 448:	2009052e 	andcs	r0, r9, lr, lsr #10
 44c:	052f1305 	streq	r1, [pc, #-773]!	; 14f <startup-0x1ffffeb1>
 450:	10052e18 	andne	r2, r5, r8, lsl lr
 454:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 458:	02053d3e 	andeq	r3, r5, #3968	; 0xf80
 45c:	4b01053e 	blmi	4195c <startup-0x1ffbe6a4>
 460:	054f1405 	strbeq	r1, [pc, #-1029]	; 63 <startup-0x1fffff9d>
 464:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 468:	30020520 	andcc	r0, r2, r0, lsr #10
 46c:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
 470:	05212f02 	streq	r2, [r1, #-3842]!	; 0xfffff0fe
 474:	10052201 	andne	r2, r5, r1, lsl #4
 478:	3d0a0592 	cfstr32cc	mvfx0, [sl, #-584]	; 0xfffffdb8
 47c:	2f2f0205 	svccs	0x002f0205
 480:	30030530 	andcc	r0, r3, r0, lsr r5
 484:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 488:	053d4b0a 	ldreq	r4, [sp, #-2826]!	; 0xfffff4f6
 48c:	04020004 	streq	r0, [r2], #-4
 490:	03053e01 	movweq	r3, #24065	; 0x5e01
 494:	01040200 	mrseq	r0, R12_usr
 498:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 49c:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 4a0:	023b0104 	eorseq	r0, fp, #4, 2
 4a4:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	72670059 	rsbvc	r0, r7, #89	; 0x59
   c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  10:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  14:	5f657469 	svcpl	0x00657469
  18:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  1c:	00646e61 	rsbeq	r6, r4, r1, ror #28
  20:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  24:	6a626f5f 	bvs	189bda8 <startup-0x1e764258>
  28:	00746365 	rsbseq	r6, r4, r5, ror #6
  2c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  30:	6c657300 	stclvs	3, cr7, [r5], #-0
  34:	5f746365 	svcpl	0x00746365
  38:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  3c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  40:	67007265 	strvs	r7, [r0, -r5, ror #4]
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  4c:	5f646165 	svcpl	0x00646165
  50:	61746164 	cmnvs	r4, r4, ror #2
  54:	67617000 	strbvs	r7, [r1, -r0]!
  58:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
  5c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  60:	616c6564 	cmnvs	ip, r4, ror #10
  64:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  68:	006f726b 	rsbeq	r7, pc, fp, ror #4
  6c:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  70:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
  74:	5f617461 	svcpl	0x00617461
  78:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
  7c:	50007265 	andpl	r7, r0, r5, ror #4
  80:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  84:	736e7500 	cmnvc	lr, #0, 10
  88:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  8c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  90:	70007261 	andvc	r7, r0, r1, ror #4
  94:	0079736f 	rsbseq	r7, r9, pc, ror #6
  98:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  9c:	6f65675f 	svcvs	0x0065675f
  a0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  a4:	72670079 	rsbvc	r0, r7, #121	; 0x79
  a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  ac:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  b0:	00657469 	rsbeq	r7, r5, r9, ror #8
  b4:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
  b8:	43006c61 	movwmi	r6, #3169	; 0xc61
  bc:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  c0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  c4:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  c8:	6f445c6e 	svcvs	0x00445c6e
  cc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  d0:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  d4:	50746947 	rsbspl	r6, r4, r7, asr #18
  d8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  dc:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
  e0:	6f686353 	svcvs	0x00686353
  e4:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  e8:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  ec:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
  f0:	31305441 	teqcc	r0, r1, asr #8
  f4:	734f5c37 	movtvc	r5, #64567	; 0xfc37
  f8:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  fc:	6262614c 	rsbvs	r6, r2, #76, 2
 100:	615c7261 	cmpvs	ip, r1, ror #4
 104:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 108:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 10c:	6e69616d 	powvsez	f6, f1, #5.0
 110:	61726700 	cmnvs	r2, r0, lsl #14
 114:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 118:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 11c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 120:	00657a69 	rsbeq	r7, r5, r9, ror #20
 124:	70617267 	rsbvc	r7, r1, r7, ror #4
 128:	5f636968 	svcpl	0x00636968
 12c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 130:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 134:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 138:	67007261 	strvs	r7, [r0, -r1, ror #4]
 13c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 140:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 144:	5f6c7274 	svcpl	0x006c7274
 148:	5f746962 	svcpl	0x00746962
 14c:	00746573 	rsbseq	r6, r4, r3, ror r5
 150:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 154:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 158:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
 15c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 160:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 164:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 168:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 54 <startup-0x1fffffac>
 16c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 170:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 174:	70615f74 	rsbvc	r5, r1, r4, ror pc
 178:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
 17c:	5f38746e 	svcpl	0x0038746e
 180:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 184:	0078657a 	rsbseq	r6, r8, sl, ror r5
 188:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 18c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 190:	5f79616c 	svcpl	0x0079616c
 194:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 198:	4e470073 	mcrmi	0, 2, r0, cr7, cr3, {3}
 19c:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 1a0:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 1a4:	20312e32 	eorscs	r2, r1, r2, lsr lr
 1a8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 1ac:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 1b0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 1b4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 1b8:	5b202965 	blpl	80a754 <startup-0x1f7f58ac>
 1bc:	2f4d5241 	svccs	0x004d5241
 1c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 1c4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 1c8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1cc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1d0:	6f697369 	svcvs	0x00697369
 1d4:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 1d8:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 1dc:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1e0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1e4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1e8:	616f6c66 	cmnvs	pc, r6, ror #24
 1ec:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1f0:	6f733d69 	svcvs	0x00733d69
 1f4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1f8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 1fc:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 200:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 204:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 208:	304f2d20 	subcc	r2, pc, r0, lsr #26
 20c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 210:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 214:	74730039 	ldrbtvc	r0, [r3], #-57	; 0xffffffc7
 218:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 21c:	61620070 	smcvs	8192	; 0x2000
 220:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 224:	00776172 	rsbseq	r6, r7, r2, ror r1
 228:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7ed <ball+0xdfffef31>
 22c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 230:	61736f2f 	cmnvs	r3, pc, lsr #30
 234:	442f6e6e 	strtmi	r6, [pc], #-3694	; 23c <startup-0x1ffffdc4>
 238:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 23c:	73746e65 	cmnvc	r4, #1616	; 0x650
 240:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 244:	6a6f7250 	bvs	1bdcb8c <startup-0x1e423474>
 248:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 24c:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 250:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 254:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 258:	2f737463 	svccs	0x00737463
 25c:	30544144 	subscc	r4, r4, r4, asr #2
 260:	4f2f3731 	svcmi	0x002f3731
 264:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 268:	62614c73 	rsbvs	r4, r1, #29440	; 0x7300
 26c:	2f726162 	svccs	0x00726162
 270:	6f747561 	svcvs	0x00747561
 274:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 278:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 27c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 280:	00632e67 	rsbeq	r2, r3, r7, ror #28
 284:	6b73616d 	blvs	1cd8840 <startup-0x1e3277c0>
 288:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 28c:	76007865 	strvc	r7, [r0], -r5, ror #16
 290:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 294:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 298:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1de <startup-0x1ffffe22>	; <UNPREDICTABLE>
 29c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 2a0:	61726700 	cmnvs	r2, r0, lsl #14
 2a4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2a8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2ac:	645f6574 	ldrbvs	r6, [pc], #-1396	; 2b4 <startup-0x1ffffd4c>
 2b0:	00617461 	rsbeq	r7, r1, r1, ror #8
 2b4:	5f746573 	svcpl	0x00746573
 2b8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2bc:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2c0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2c4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 2c8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 2cc:	67006465 	strvs	r6, [r0, -r5, ror #8]
 2d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2dc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2e0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2e4:	61656c63 	cmnvs	r5, r3, ror #24
 2e8:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2ec:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2f0:	746f6200 	strbtvc	r6, [pc], #-512	; 2f8 <startup-0x1ffffd08>
 2f4:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
 2f8:	5f79616c 	svcpl	0x0079616c
 2fc:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 300:	4f740073 	svcmi	0x00740073
 304:	70006a62 	andvc	r6, r0, r2, ror #20
 308:	0078736f 	rsbseq	r7, r8, pc, ror #6
 30c:	70617267 	rsbvc	r7, r1, r7, ror #4
 310:	5f636968 	svcpl	0x00636968
 314:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 318:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 31c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 320:	67007374 	smlsdxvs	r0, r4, r3, r7
 324:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 328:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 32c:	5f746961 	svcpl	0x00746961
 330:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 334:	6f6d0079 	svcvs	0x006d0079
 338:	6f5f6576 	svcvs	0x005f6576
 33c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 340:	70730074 	rsbsvc	r0, r3, r4, ror r0
 344:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 348:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 34c:	00796465 	rsbseq	r6, r9, r5, ror #8
 350:	4a424f50 	bmi	1094098 <startup-0x1ef6bf68>
 354:	00544345 	subseq	r4, r4, r5, asr #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	0000002c 	andeq	r0, r0, ip, lsr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000084 	andcs	r0, r0, r4, lsl #1
  68:	00000030 	andeq	r0, r0, r0, lsr r0
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000b4 	strhcs	r0, [r0], -r4
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000046 	andeq	r0, r0, r6, asr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000010c 	andcs	r0, r0, ip, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000148 	andcs	r0, r0, r8, asr #2
  e4:	00000062 	andeq	r0, r0, r2, rrx
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001aa 	andcs	r0, r0, sl, lsr #3
 104:	00000076 	andeq	r0, r0, r6, ror r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000220 	andcs	r0, r0, r0, lsr #4
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000330 	andcs	r0, r0, r0, lsr r3
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000370 	andcs	r0, r0, r0, ror r3
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003e0 	andcs	r0, r0, r0, ror #7
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000436 	andcs	r0, r0, r6, lsr r4
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000049e 	mulcs	r0, lr, r4
 200:	000001ca 	andeq	r0, r0, sl, asr #3
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	280e4101 	stmdacs	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000668 	andcs	r0, r0, r8, ror #12
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000688 	andcs	r0, r0, r8, lsl #13
 244:	00000066 	andeq	r0, r0, r6, rrx
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006ee 	andcs	r0, r0, lr, ror #13
 264:	00000066 	andeq	r0, r0, r6, rrx
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000754 	andcs	r0, r0, r4, asr r7
 284:	000000c6 	andeq	r0, r0, r6, asr #1
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	2000081a 	andcs	r0, r0, sl, lsl r8
 2a4:	00000026 	andeq	r0, r0, r6, lsr #32
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	20000840 	andcs	r0, r0, r0, asr #16
 2c0:	00000044 	andeq	r0, r0, r4, asr #32
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
