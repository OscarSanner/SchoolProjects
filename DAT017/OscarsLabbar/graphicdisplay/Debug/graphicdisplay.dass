
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
typedef unsigned char uint8_t;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fb40 	bl	20000688 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <delay_250ns>:
	// 					DELAYS					//
void delay_250ns(void){
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000002c:	4b0c      	ldr	r3, [pc, #48]	; (20000060 <delay_250ns+0x38>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000032:	4b0c      	ldr	r3, [pc, #48]	; (20000064 <delay_250ns+0x3c>)
20000034:	2229      	movs	r2, #41	; 0x29
20000036:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000038:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <delay_250ns+0x40>)
2000003a:	2200      	movs	r2, #0
2000003c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000003e:	4b08      	ldr	r3, [pc, #32]	; (20000060 <delay_250ns+0x38>)
20000040:	2205      	movs	r2, #5
20000042:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <delay_250ns+0x44>)
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	b2db      	uxtb	r3, r3
2000004c:	001a      	movs	r2, r3
2000004e:	2301      	movs	r3, #1
20000050:	4013      	ands	r3, r2
20000052:	d1f8      	bne.n	20000046 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000054:	4b02      	ldr	r3, [pc, #8]	; (20000060 <delay_250ns+0x38>)
20000056:	2200      	movs	r2, #0
20000058:	701a      	strb	r2, [r3, #0]
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	bd80      	pop	{r7, pc}
20000060:	e000e010 	and	lr, r0, r0, lsl r0
20000064:	e000e014 	and	lr, r0, r4, lsl r0
20000068:	e000e018 	and	lr, r0, r8, lsl r0
2000006c:	e000e012 	and	lr, r0, r2, lsl r0

20000070 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000070:	b580      	push	{r7, lr}
20000072:	b084      	sub	sp, #16
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	22fa      	movs	r2, #250	; 0xfa
2000007c:	0091      	lsls	r1, r2, #2
2000007e:	0018      	movs	r0, r3
20000080:	f000 fb66 	bl	20000750 <__udivsi3>
20000084:	0003      	movs	r3, r0
20000086:	607b      	str	r3, [r7, #4]
	us ++;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	3301      	adds	r3, #1
2000008c:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
2000008e:	2300      	movs	r3, #0
20000090:	60fb      	str	r3, [r7, #12]
20000092:	e004      	b.n	2000009e <delay_mikro+0x2e>
		delay_250ns();
20000094:	f7ff ffc8 	bl	20000028 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000098:	68fb      	ldr	r3, [r7, #12]
2000009a:	3301      	adds	r3, #1
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	009a      	lsls	r2, r3, #2
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	429a      	cmp	r2, r3
200000a6:	d8f5      	bhi.n	20000094 <delay_mikro+0x24>
	}
}
200000a8:	46c0      	nop			; (mov r8, r8)
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46bd      	mov	sp, r7
200000ae:	b004      	add	sp, #16
200000b0:	bd80      	pop	{r7, pc}

200000b2 <delay_milli>:

void delay_milli(unsigned int ms){
200000b2:	b580      	push	{r7, lr}
200000b4:	b084      	sub	sp, #16
200000b6:	af00      	add	r7, sp, #0
200000b8:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	22fa      	movs	r2, #250	; 0xfa
200000be:	0091      	lsls	r1, r2, #2
200000c0:	0018      	movs	r0, r3
200000c2:	f000 fb45 	bl	20000750 <__udivsi3>
200000c6:	0003      	movs	r3, r0
200000c8:	607b      	str	r3, [r7, #4]
		ms ++;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	3301      	adds	r3, #1
200000ce:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000d0:	2300      	movs	r3, #0
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	e007      	b.n	200000e6 <delay_milli+0x34>
		delay_mikro(1000);
200000d6:	23fa      	movs	r3, #250	; 0xfa
200000d8:	009b      	lsls	r3, r3, #2
200000da:	0018      	movs	r0, r3
200000dc:	f7ff ffc8 	bl	20000070 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	3301      	adds	r3, #1
200000e4:	60fb      	str	r3, [r7, #12]
200000e6:	68fb      	ldr	r3, [r7, #12]
200000e8:	687a      	ldr	r2, [r7, #4]
200000ea:	429a      	cmp	r2, r3
200000ec:	d8f3      	bhi.n	200000d6 <delay_milli+0x24>
	}
}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b004      	add	sp, #16
200000f6:	bd80      	pop	{r7, pc}

200000f8 <delay_500ns>:

void delay_500ns(){
200000f8:	b580      	push	{r7, lr}
200000fa:	af00      	add	r7, sp, #0
	delay_250ns();
200000fc:	f7ff ff94 	bl	20000028 <delay_250ns>
	delay_250ns();
20000100:	f7ff ff92 	bl	20000028 <delay_250ns>
}
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	46bd      	mov	sp, r7
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_ctrl_bit_set>:

//						DISPLAY						//

void graphic_ctrl_bit_set(uint8_t x){
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
20000110:	0002      	movs	r2, r0
20000112:	1dfb      	adds	r3, r7, #7
20000114:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
20000116:	4b0d      	ldr	r3, [pc, #52]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000118:	781b      	ldrb	r3, [r3, #0]
2000011a:	b2db      	uxtb	r3, r3
2000011c:	b25a      	sxtb	r2, r3
2000011e:	1dfb      	adds	r3, r7, #7
20000120:	781b      	ldrb	r3, [r3, #0]
20000122:	b25b      	sxtb	r3, r3
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b25b      	sxtb	r3, r3
2000012a:	4313      	orrs	r3, r2
2000012c:	b25a      	sxtb	r2, r3
2000012e:	4b07      	ldr	r3, [pc, #28]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000130:	b2d2      	uxtb	r2, r2
20000132:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	b2db      	uxtb	r3, r3
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <graphic_ctrl_bit_set+0x42>)
2000013c:	2104      	movs	r1, #4
2000013e:	438b      	bics	r3, r1
20000140:	b2db      	uxtb	r3, r3
20000142:	7013      	strb	r3, [r2, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b002      	add	sp, #8
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <graphic_ctrl_bit_clear>:
void graphic_ctrl_bit_clear(uint8_t x){
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
2000015c:	4b0a      	ldr	r3, [pc, #40]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	b2db      	uxtb	r3, r3
20000162:	b25b      	sxtb	r3, r3
20000164:	1dfa      	adds	r2, r7, #7
20000166:	7812      	ldrb	r2, [r2, #0]
20000168:	2104      	movs	r1, #4
2000016a:	430a      	orrs	r2, r1
2000016c:	b2d2      	uxtb	r2, r2
2000016e:	b252      	sxtb	r2, r2
20000170:	43d2      	mvns	r2, r2
20000172:	b252      	sxtb	r2, r2
20000174:	4013      	ands	r3, r2
20000176:	b25a      	sxtb	r2, r3
20000178:	4b03      	ldr	r3, [pc, #12]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000017a:	b2d2      	uxtb	r2, r2
2000017c:	701a      	strb	r2, [r3, #0]
}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	46bd      	mov	sp, r7
20000182:	b002      	add	sp, #8
20000184:	bd80      	pop	{r7, pc}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	40021014 	andmi	r1, r2, r4, lsl r0

2000018c <select_controller>:

void select_controller(uint8_t controller){
2000018c:	b580      	push	{r7, lr}
2000018e:	b084      	sub	sp, #16
20000190:	af00      	add	r7, sp, #0
20000192:	0002      	movs	r2, r0
20000194:	1dfb      	adds	r3, r7, #7
20000196:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000198:	230f      	movs	r3, #15
2000019a:	18fb      	adds	r3, r7, r3
2000019c:	2200      	movs	r2, #0
2000019e:	701a      	strb	r2, [r3, #0]
	switch(controller){
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
200001a4:	2b18      	cmp	r3, #24
200001a6:	d01a      	beq.n	200001de <select_controller+0x52>
200001a8:	dc1d      	bgt.n	200001e6 <select_controller+0x5a>
200001aa:	2b10      	cmp	r3, #16
200001ac:	d010      	beq.n	200001d0 <select_controller+0x44>
200001ae:	dc1a      	bgt.n	200001e6 <select_controller+0x5a>
200001b0:	2b00      	cmp	r3, #0
200001b2:	d002      	beq.n	200001ba <select_controller+0x2e>
200001b4:	2b08      	cmp	r3, #8
200001b6:	d004      	beq.n	200001c2 <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001b8:	e015      	b.n	200001e6 <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001ba:	2018      	movs	r0, #24
200001bc:	f7ff ffc8 	bl	20000150 <graphic_ctrl_bit_clear>
200001c0:	e012      	b.n	200001e8 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001c2:	2010      	movs	r0, #16
200001c4:	f7ff ffc4 	bl	20000150 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001c8:	2008      	movs	r0, #8
200001ca:	f7ff ff9e 	bl	2000010a <graphic_ctrl_bit_set>
200001ce:	e00b      	b.n	200001e8 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001d0:	2008      	movs	r0, #8
200001d2:	f7ff ffbd 	bl	20000150 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001d6:	2010      	movs	r0, #16
200001d8:	f7ff ff97 	bl	2000010a <graphic_ctrl_bit_set>
200001dc:	e004      	b.n	200001e8 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001de:	2018      	movs	r0, #24
200001e0:	f7ff ff93 	bl	2000010a <graphic_ctrl_bit_set>
200001e4:	e000      	b.n	200001e8 <select_controller+0x5c>
		default: return;
200001e6:	46c0      	nop			; (mov r8, r8)
	}
}
200001e8:	46bd      	mov	sp, r7
200001ea:	b004      	add	sp, #16
200001ec:	bd80      	pop	{r7, pc}

200001ee <graphic_wait_ready>:

void graphic_wait_ready(void){
200001ee:	b580      	push	{r7, lr}
200001f0:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001f2:	2040      	movs	r0, #64	; 0x40
200001f4:	f7ff ffac 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001f8:	4b12      	ldr	r3, [pc, #72]	; (20000244 <graphic_wait_ready+0x56>)
200001fa:	4a13      	ldr	r2, [pc, #76]	; (20000248 <graphic_wait_ready+0x5a>)
200001fc:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001fe:	2002      	movs	r0, #2
20000200:	f7ff ff83 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000204:	2001      	movs	r0, #1
20000206:	f7ff ffa3 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_500ns();
2000020a:	f7ff ff75 	bl	200000f8 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
2000020e:	2040      	movs	r0, #64	; 0x40
20000210:	f7ff ff7b 	bl	2000010a <graphic_ctrl_bit_set>
		delay_500ns();
20000214:	f7ff ff70 	bl	200000f8 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000218:	2040      	movs	r0, #64	; 0x40
2000021a:	f7ff ff99 	bl	20000150 <graphic_ctrl_bit_clear>
		delay_500ns();
2000021e:	f7ff ff6b 	bl	200000f8 <delay_500ns>
		if((* portIdrHigh & LCD_BUSY) == 0){
20000222:	4b0a      	ldr	r3, [pc, #40]	; (2000024c <graphic_wait_ready+0x5e>)
20000224:	781b      	ldrb	r3, [r3, #0]
20000226:	b2db      	uxtb	r3, r3
20000228:	b25b      	sxtb	r3, r3
2000022a:	2b00      	cmp	r3, #0
2000022c:	da00      	bge.n	20000230 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
2000022e:	e7ee      	b.n	2000020e <graphic_wait_ready+0x20>
			break;
20000230:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000232:	2040      	movs	r0, #64	; 0x40
20000234:	f7ff ff69 	bl	2000010a <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000238:	4b02      	ldr	r3, [pc, #8]	; (20000244 <graphic_wait_ready+0x56>)
2000023a:	4a05      	ldr	r2, [pc, #20]	; (20000250 <graphic_wait_ready+0x62>)
2000023c:	601a      	str	r2, [r3, #0]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	bd80      	pop	{r7, pc}
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	40021011 	andmi	r1, r2, r1, lsl r0
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000254:	b580      	push	{r7, lr}
20000256:	b084      	sub	sp, #16
20000258:	af00      	add	r7, sp, #0
2000025a:	0002      	movs	r2, r0
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff75 	bl	20000150 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000266:	4b1b      	ldr	r3, [pc, #108]	; (200002d4 <graphic_read+0x80>)
20000268:	4a1b      	ldr	r2, [pc, #108]	; (200002d8 <graphic_read+0x84>)
2000026a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
2000026c:	2003      	movs	r0, #3
2000026e:	f7ff ff4c 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller(controller);
20000272:	1dfb      	adds	r3, r7, #7
20000274:	781b      	ldrb	r3, [r3, #0]
20000276:	0018      	movs	r0, r3
20000278:	f7ff ff88 	bl	2000018c <select_controller>
	delay_500ns();
2000027c:	f7ff ff3c 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000280:	2040      	movs	r0, #64	; 0x40
20000282:	f7ff ff42 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
20000286:	f7ff ff37 	bl	200000f8 <delay_500ns>
	uint8_t rv = * portIdrHigh;
2000028a:	4a14      	ldr	r2, [pc, #80]	; (200002dc <graphic_read+0x88>)
2000028c:	230f      	movs	r3, #15
2000028e:	18fb      	adds	r3, r7, r3
20000290:	7812      	ldrb	r2, [r2, #0]
20000292:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000294:	2040      	movs	r0, #64	; 0x40
20000296:	f7ff ff5b 	bl	20000150 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
2000029a:	4b0e      	ldr	r3, [pc, #56]	; (200002d4 <graphic_read+0x80>)
2000029c:	4a10      	ldr	r2, [pc, #64]	; (200002e0 <graphic_read+0x8c>)
2000029e:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	2b08      	cmp	r3, #8
200002a6:	d104      	bne.n	200002b2 <graphic_read+0x5e>
		select_controller(B_CS1);
200002a8:	2008      	movs	r0, #8
200002aa:	f7ff ff6f 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002ae:	f7ff ff9e 	bl	200001ee <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	781b      	ldrb	r3, [r3, #0]
200002b6:	2b10      	cmp	r3, #16
200002b8:	d104      	bne.n	200002c4 <graphic_read+0x70>
		select_controller(B_CS2);
200002ba:	2010      	movs	r0, #16
200002bc:	f7ff ff66 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002c0:	f7ff ff95 	bl	200001ee <graphic_wait_ready>
	}
	return rv;
200002c4:	230f      	movs	r3, #15
200002c6:	18fb      	adds	r3, r7, r3
200002c8:	781b      	ldrb	r3, [r3, #0]
}
200002ca:	0018      	movs	r0, r3
200002cc:	46bd      	mov	sp, r7
200002ce:	b004      	add	sp, #16
200002d0:	bd80      	pop	{r7, pc}
200002d2:	46c0      	nop			; (mov r8, r8)
200002d4:	40021000 	andmi	r1, r2, r0
200002d8:	00005555 	andeq	r5, r0, r5, asr r5
200002dc:	40021011 	andmi	r1, r2, r1, lsl r0
200002e0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002e4 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002e4:	b580      	push	{r7, lr}
200002e6:	b082      	sub	sp, #8
200002e8:	af00      	add	r7, sp, #0
200002ea:	0002      	movs	r2, r0
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	701a      	strb	r2, [r3, #0]
200002f0:	1dbb      	adds	r3, r7, #6
200002f2:	1c0a      	adds	r2, r1, #0
200002f4:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002f6:	4a1a      	ldr	r2, [pc, #104]	; (20000360 <graphic_write+0x7c>)
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	781b      	ldrb	r3, [r3, #0]
200002fc:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002fe:	1dbb      	adds	r3, r7, #6
20000300:	781b      	ldrb	r3, [r3, #0]
20000302:	0018      	movs	r0, r3
20000304:	f7ff ff42 	bl	2000018c <select_controller>
	delay_500ns();
20000308:	f7ff fef6 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff fefc 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
20000312:	f7ff fef1 	bl	200000f8 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff ff1a 	bl	20000150 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
2000031c:	1dbb      	adds	r3, r7, #6
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	2208      	movs	r2, #8
20000322:	4013      	ands	r3, r2
20000324:	d004      	beq.n	20000330 <graphic_write+0x4c>
		select_controller(B_CS1);
20000326:	2008      	movs	r0, #8
20000328:	f7ff ff30 	bl	2000018c <select_controller>
		graphic_wait_ready();
2000032c:	f7ff ff5f 	bl	200001ee <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000330:	1dbb      	adds	r3, r7, #6
20000332:	781b      	ldrb	r3, [r3, #0]
20000334:	2210      	movs	r2, #16
20000336:	4013      	ands	r3, r2
20000338:	d004      	beq.n	20000344 <graphic_write+0x60>
		select_controller(B_CS2);
2000033a:	2010      	movs	r0, #16
2000033c:	f7ff ff26 	bl	2000018c <select_controller>
		graphic_wait_ready();
20000340:	f7ff ff55 	bl	200001ee <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000344:	4b06      	ldr	r3, [pc, #24]	; (20000360 <graphic_write+0x7c>)
20000346:	2200      	movs	r2, #0
20000348:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000034a:	2040      	movs	r0, #64	; 0x40
2000034c:	f7ff fedd 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller(0);
20000350:	2000      	movs	r0, #0
20000352:	f7ff ff1b 	bl	2000018c <select_controller>
}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	46bd      	mov	sp, r7
2000035a:	b002      	add	sp, #8
2000035c:	bd80      	pop	{r7, pc}
2000035e:	46c0      	nop			; (mov r8, r8)
20000360:	40021015 	andmi	r1, r2, r5, lsl r0

20000364 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
20000370:	1dbb      	adds	r3, r7, #6
20000372:	1c0a      	adds	r2, r1, #0
20000374:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000376:	2040      	movs	r0, #64	; 0x40
20000378:	f7ff feea 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	781b      	ldrb	r3, [r3, #0]
20000380:	0018      	movs	r0, r3
20000382:	f7ff ff03 	bl	2000018c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000386:	2003      	movs	r0, #3
20000388:	f7ff fee2 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	781a      	ldrb	r2, [r3, #0]
20000390:	1dfb      	adds	r3, r7, #7
20000392:	781b      	ldrb	r3, [r3, #0]
20000394:	0011      	movs	r1, r2
20000396:	0018      	movs	r0, r3
20000398:	f7ff ffa4 	bl	200002e4 <graphic_write>
}
2000039c:	46c0      	nop			; (mov r8, r8)
2000039e:	46bd      	mov	sp, r7
200003a0:	b002      	add	sp, #8
200003a2:	bd80      	pop	{r7, pc}

200003a4 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003a4:	b580      	push	{r7, lr}
200003a6:	b082      	sub	sp, #8
200003a8:	af00      	add	r7, sp, #0
200003aa:	0002      	movs	r2, r0
200003ac:	1dfb      	adds	r3, r7, #7
200003ae:	701a      	strb	r2, [r3, #0]
200003b0:	1dbb      	adds	r3, r7, #6
200003b2:	1c0a      	adds	r2, r1, #0
200003b4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003b6:	2040      	movs	r0, #64	; 0x40
200003b8:	f7ff feca 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003bc:	1dbb      	adds	r3, r7, #6
200003be:	781b      	ldrb	r3, [r3, #0]
200003c0:	0018      	movs	r0, r3
200003c2:	f7ff fee3 	bl	2000018c <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003c6:	2001      	movs	r0, #1
200003c8:	f7ff fe9f 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003cc:	2002      	movs	r0, #2
200003ce:	f7ff febf 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003d2:	1dbb      	adds	r3, r7, #6
200003d4:	781a      	ldrb	r2, [r3, #0]
200003d6:	1dfb      	adds	r3, r7, #7
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	0011      	movs	r1, r2
200003dc:	0018      	movs	r0, r3
200003de:	f7ff ff81 	bl	200002e4 <graphic_write>
}
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	46bd      	mov	sp, r7
200003e6:	b002      	add	sp, #8
200003e8:	bd80      	pop	{r7, pc}

200003ea <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003ea:	b580      	push	{r7, lr}
200003ec:	b082      	sub	sp, #8
200003ee:	af00      	add	r7, sp, #0
200003f0:	0002      	movs	r2, r0
200003f2:	1dfb      	adds	r3, r7, #7
200003f4:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	0018      	movs	r0, r3
200003fc:	f7ff ff2a 	bl	20000254 <graphic_read>
	return graphic_read(controller);
20000400:	1dfb      	adds	r3, r7, #7
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	0018      	movs	r0, r3
20000406:	f7ff ff25 	bl	20000254 <graphic_read>
2000040a:	0003      	movs	r3, r0
}
2000040c:	0018      	movs	r0, r3
2000040e:	46bd      	mov	sp, r7
20000410:	b002      	add	sp, #8
20000412:	bd80      	pop	{r7, pc}

20000414 <graphic_initialize>:

void graphic_initialize(){
20000414:	b580      	push	{r7, lr}
20000416:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff fe76 	bl	2000010a <graphic_ctrl_bit_set>
	delay_mikro(10);
2000041e:	200a      	movs	r0, #10
20000420:	f7ff fe26 	bl	20000070 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000424:	2078      	movs	r0, #120	; 0x78
20000426:	f7ff fe93 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000042a:	201e      	movs	r0, #30
2000042c:	f7ff fe41 	bl	200000b2 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000430:	2020      	movs	r0, #32
20000432:	f7ff fe6a 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203e      	movs	r0, #62	; 0x3e
2000043a:	f7ff ff93 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	203f      	movs	r0, #63	; 0x3f
20000442:	f7ff ff8f 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	20c0      	movs	r0, #192	; 0xc0
2000044a:	f7ff ff8b 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	2040      	movs	r0, #64	; 0x40
20000452:	f7ff ff87 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000456:	2118      	movs	r1, #24
20000458:	20b8      	movs	r0, #184	; 0xb8
2000045a:	f7ff ff83 	bl	20000364 <graphic_write_command>
	select_controller(0);
2000045e:	2000      	movs	r0, #0
20000460:	f7ff fe94 	bl	2000018c <select_controller>
}
20000464:	46c0      	nop			; (mov r8, r8)
20000466:	46bd      	mov	sp, r7
20000468:	bd80      	pop	{r7, pc}

2000046a <graphic_clear_screen>:

void graphic_clear_screen(){
2000046a:	b580      	push	{r7, lr}
2000046c:	b082      	sub	sp, #8
2000046e:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000470:	1dfb      	adds	r3, r7, #7
20000472:	2200      	movs	r2, #0
20000474:	701a      	strb	r2, [r3, #0]
20000476:	e023      	b.n	200004c0 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000478:	1dfb      	adds	r3, r7, #7
2000047a:	781b      	ldrb	r3, [r3, #0]
2000047c:	2248      	movs	r2, #72	; 0x48
2000047e:	4252      	negs	r2, r2
20000480:	4313      	orrs	r3, r2
20000482:	b2db      	uxtb	r3, r3
20000484:	2118      	movs	r1, #24
20000486:	0018      	movs	r0, r3
20000488:	f7ff ff6c 	bl	20000364 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000048c:	2118      	movs	r1, #24
2000048e:	2040      	movs	r0, #64	; 0x40
20000490:	f7ff ff68 	bl	20000364 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
20000494:	1dbb      	adds	r3, r7, #6
20000496:	2200      	movs	r2, #0
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	e008      	b.n	200004ae <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
2000049c:	2118      	movs	r1, #24
2000049e:	2000      	movs	r0, #0
200004a0:	f7ff ff80 	bl	200003a4 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
200004a4:	1dbb      	adds	r3, r7, #6
200004a6:	781a      	ldrb	r2, [r3, #0]
200004a8:	1dbb      	adds	r3, r7, #6
200004aa:	3201      	adds	r2, #1
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	1dbb      	adds	r3, r7, #6
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	2b3f      	cmp	r3, #63	; 0x3f
200004b4:	d9f2      	bls.n	2000049c <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004b6:	1dfb      	adds	r3, r7, #7
200004b8:	781a      	ldrb	r2, [r3, #0]
200004ba:	1dfb      	adds	r3, r7, #7
200004bc:	3201      	adds	r2, #1
200004be:	701a      	strb	r2, [r3, #0]
200004c0:	1dfb      	adds	r3, r7, #7
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	2b07      	cmp	r3, #7
200004c6:	d9d7      	bls.n	20000478 <graphic_clear_screen+0xe>
		}
	}
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46c0      	nop			; (mov r8, r8)
200004cc:	46bd      	mov	sp, r7
200004ce:	b002      	add	sp, #8
200004d0:	bd80      	pop	{r7, pc}

200004d2 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004d2:	b5f0      	push	{r4, r5, r6, r7, lr}
200004d4:	b085      	sub	sp, #20
200004d6:	af00      	add	r7, sp, #0
200004d8:	0004      	movs	r4, r0
200004da:	0008      	movs	r0, r1
200004dc:	0011      	movs	r1, r2
200004de:	1dfb      	adds	r3, r7, #7
200004e0:	1c22      	adds	r2, r4, #0
200004e2:	701a      	strb	r2, [r3, #0]
200004e4:	1dbb      	adds	r3, r7, #6
200004e6:	1c02      	adds	r2, r0, #0
200004e8:	701a      	strb	r2, [r3, #0]
200004ea:	1d7b      	adds	r3, r7, #5
200004ec:	1c0a      	adds	r2, r1, #0
200004ee:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)){return;}
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	2b80      	cmp	r3, #128	; 0x80
200004f6:	d900      	bls.n	200004fa <pixel+0x28>
200004f8:	e0bd      	b.n	20000676 <pixel+0x1a4>
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	2b40      	cmp	r3, #64	; 0x40
20000500:	d900      	bls.n	20000504 <pixel+0x32>
20000502:	e0b8      	b.n	20000676 <pixel+0x1a4>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000504:	1dbb      	adds	r3, r7, #6
20000506:	781b      	ldrb	r3, [r3, #0]
20000508:	3b01      	subs	r3, #1
2000050a:	2b00      	cmp	r3, #0
2000050c:	da00      	bge.n	20000510 <pixel+0x3e>
2000050e:	3307      	adds	r3, #7
20000510:	10db      	asrs	r3, r3, #3
20000512:	001a      	movs	r2, r3
20000514:	230c      	movs	r3, #12
20000516:	18fb      	adds	r3, r7, r3
20000518:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
2000051a:	1dbb      	adds	r3, r7, #6
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	3b01      	subs	r3, #1
20000520:	4a57      	ldr	r2, [pc, #348]	; (20000680 <pixel+0x1ae>)
20000522:	4013      	ands	r3, r2
20000524:	d504      	bpl.n	20000530 <pixel+0x5e>
20000526:	3b01      	subs	r3, #1
20000528:	2208      	movs	r2, #8
2000052a:	4252      	negs	r2, r2
2000052c:	4313      	orrs	r3, r2
2000052e:	3301      	adds	r3, #1
20000530:	2b07      	cmp	r3, #7
20000532:	d82c      	bhi.n	2000058e <pixel+0xbc>
20000534:	009a      	lsls	r2, r3, #2
20000536:	4b53      	ldr	r3, [pc, #332]	; (20000684 <pixel+0x1b2>)
20000538:	18d3      	adds	r3, r2, r3
2000053a:	681b      	ldr	r3, [r3, #0]
2000053c:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000053e:	230f      	movs	r3, #15
20000540:	18fb      	adds	r3, r7, r3
20000542:	2201      	movs	r2, #1
20000544:	701a      	strb	r2, [r3, #0]
20000546:	e023      	b.n	20000590 <pixel+0xbe>
		case 1: mask = 2; break;
20000548:	230f      	movs	r3, #15
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	2202      	movs	r2, #2
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	e01e      	b.n	20000590 <pixel+0xbe>
		case 2: mask = 4; break;
20000552:	230f      	movs	r3, #15
20000554:	18fb      	adds	r3, r7, r3
20000556:	2204      	movs	r2, #4
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	e019      	b.n	20000590 <pixel+0xbe>
		case 3: mask = 8; break;
2000055c:	230f      	movs	r3, #15
2000055e:	18fb      	adds	r3, r7, r3
20000560:	2208      	movs	r2, #8
20000562:	701a      	strb	r2, [r3, #0]
20000564:	e014      	b.n	20000590 <pixel+0xbe>
		case 4: mask = 0x10; break;
20000566:	230f      	movs	r3, #15
20000568:	18fb      	adds	r3, r7, r3
2000056a:	2210      	movs	r2, #16
2000056c:	701a      	strb	r2, [r3, #0]
2000056e:	e00f      	b.n	20000590 <pixel+0xbe>
		case 5: mask = 0x20; break;
20000570:	230f      	movs	r3, #15
20000572:	18fb      	adds	r3, r7, r3
20000574:	2220      	movs	r2, #32
20000576:	701a      	strb	r2, [r3, #0]
20000578:	e00a      	b.n	20000590 <pixel+0xbe>
		case 6: mask = 0x40; break;
2000057a:	230f      	movs	r3, #15
2000057c:	18fb      	adds	r3, r7, r3
2000057e:	2240      	movs	r2, #64	; 0x40
20000580:	701a      	strb	r2, [r3, #0]
20000582:	e005      	b.n	20000590 <pixel+0xbe>
		case 7: mask = 0x80; break;
20000584:	230f      	movs	r3, #15
20000586:	18fb      	adds	r3, r7, r3
20000588:	2280      	movs	r2, #128	; 0x80
2000058a:	701a      	strb	r2, [r3, #0]
2000058c:	e000      	b.n	20000590 <pixel+0xbe>
		default: break;
2000058e:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
20000590:	1d7b      	adds	r3, r7, #5
20000592:	781b      	ldrb	r3, [r3, #0]
20000594:	2b00      	cmp	r3, #0
20000596:	d105      	bne.n	200005a4 <pixel+0xd2>
		mask = ~mask;
20000598:	220f      	movs	r2, #15
2000059a:	18bb      	adds	r3, r7, r2
2000059c:	18ba      	adds	r2, r7, r2
2000059e:	7812      	ldrb	r2, [r2, #0]
200005a0:	43d2      	mvns	r2, r2
200005a2:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005a4:	1dfb      	adds	r3, r7, #7
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	2b40      	cmp	r3, #64	; 0x40
200005aa:	d90a      	bls.n	200005c2 <pixel+0xf0>
		controller = B_CS2;
200005ac:	230e      	movs	r3, #14
200005ae:	18fb      	adds	r3, r7, r3
200005b0:	2210      	movs	r2, #16
200005b2:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005b4:	230d      	movs	r3, #13
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	1dfa      	adds	r2, r7, #7
200005ba:	7812      	ldrb	r2, [r2, #0]
200005bc:	3a41      	subs	r2, #65	; 0x41
200005be:	701a      	strb	r2, [r3, #0]
200005c0:	e009      	b.n	200005d6 <pixel+0x104>
	}else{
		controller = B_CS1;
200005c2:	230e      	movs	r3, #14
200005c4:	18fb      	adds	r3, r7, r3
200005c6:	2208      	movs	r2, #8
200005c8:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005ca:	230d      	movs	r3, #13
200005cc:	18fb      	adds	r3, r7, r3
200005ce:	1dfa      	adds	r2, r7, #7
200005d0:	7812      	ldrb	r2, [r2, #0]
200005d2:	3a01      	subs	r2, #1
200005d4:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005d6:	260d      	movs	r6, #13
200005d8:	19bb      	adds	r3, r7, r6
200005da:	781b      	ldrb	r3, [r3, #0]
200005dc:	2240      	movs	r2, #64	; 0x40
200005de:	4313      	orrs	r3, r2
200005e0:	b2da      	uxtb	r2, r3
200005e2:	250e      	movs	r5, #14
200005e4:	197b      	adds	r3, r7, r5
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	0019      	movs	r1, r3
200005ea:	0010      	movs	r0, r2
200005ec:	f7ff feba 	bl	20000364 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005f0:	230c      	movs	r3, #12
200005f2:	18fb      	adds	r3, r7, r3
200005f4:	781b      	ldrb	r3, [r3, #0]
200005f6:	2248      	movs	r2, #72	; 0x48
200005f8:	4252      	negs	r2, r2
200005fa:	4313      	orrs	r3, r2
200005fc:	b2da      	uxtb	r2, r3
200005fe:	197b      	adds	r3, r7, r5
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	0019      	movs	r1, r3
20000604:	0010      	movs	r0, r2
20000606:	f7ff fead 	bl	20000364 <graphic_write_command>
	data_holder = graphic_read_data(controller);
2000060a:	230b      	movs	r3, #11
2000060c:	18fc      	adds	r4, r7, r3
2000060e:	197b      	adds	r3, r7, r5
20000610:	781b      	ldrb	r3, [r3, #0]
20000612:	0018      	movs	r0, r3
20000614:	f7ff fee9 	bl	200003ea <graphic_read_data>
20000618:	0003      	movs	r3, r0
2000061a:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
2000061c:	19bb      	adds	r3, r7, r6
2000061e:	781b      	ldrb	r3, [r3, #0]
20000620:	2240      	movs	r2, #64	; 0x40
20000622:	4313      	orrs	r3, r2
20000624:	b2da      	uxtb	r2, r3
20000626:	197b      	adds	r3, r7, r5
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	0019      	movs	r1, r3
2000062c:	0010      	movs	r0, r2
2000062e:	f7ff fe99 	bl	20000364 <graphic_write_command>
	if(set==1){
20000632:	1d7b      	adds	r3, r7, #5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	2b01      	cmp	r3, #1
20000638:	d109      	bne.n	2000064e <pixel+0x17c>
		mask |= data_holder;
2000063a:	210f      	movs	r1, #15
2000063c:	187b      	adds	r3, r7, r1
2000063e:	1879      	adds	r1, r7, r1
20000640:	220b      	movs	r2, #11
20000642:	18ba      	adds	r2, r7, r2
20000644:	7809      	ldrb	r1, [r1, #0]
20000646:	7812      	ldrb	r2, [r2, #0]
20000648:	430a      	orrs	r2, r1
2000064a:	701a      	strb	r2, [r3, #0]
2000064c:	e008      	b.n	20000660 <pixel+0x18e>
	}else{
		mask &= data_holder;
2000064e:	220f      	movs	r2, #15
20000650:	18bb      	adds	r3, r7, r2
20000652:	18ba      	adds	r2, r7, r2
20000654:	210b      	movs	r1, #11
20000656:	1879      	adds	r1, r7, r1
20000658:	7812      	ldrb	r2, [r2, #0]
2000065a:	7809      	ldrb	r1, [r1, #0]
2000065c:	400a      	ands	r2, r1
2000065e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000660:	230e      	movs	r3, #14
20000662:	18fb      	adds	r3, r7, r3
20000664:	781a      	ldrb	r2, [r3, #0]
20000666:	230f      	movs	r3, #15
20000668:	18fb      	adds	r3, r7, r3
2000066a:	781b      	ldrb	r3, [r3, #0]
2000066c:	0011      	movs	r1, r2
2000066e:	0018      	movs	r0, r3
20000670:	f7ff fe98 	bl	200003a4 <graphic_write_data>
20000674:	e000      	b.n	20000678 <pixel+0x1a6>
	if((x > 128)||(y > 64)){return;}
20000676:	46c0      	nop			; (mov r8, r8)
}
20000678:	46bd      	mov	sp, r7
2000067a:	b005      	add	sp, #20
2000067c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000067e:	46c0      	nop			; (mov r8, r8)
20000680:	80000007 	andhi	r0, r0, r7
20000684:	20000868 	andcs	r0, r0, r8, ror #16

20000688 <main>:

void main(void){
20000688:	b580      	push	{r7, lr}
2000068a:	b082      	sub	sp, #8
2000068c:	af00      	add	r7, sp, #0
	uint8_t i;
	init_app();
2000068e:	f7ff fcbf 	bl	20000010 <init_app>
	graphic_initialize();
20000692:	f7ff febf 	bl	20000414 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	for(i = 0; i < 128; i++){
20000696:	1dfb      	adds	r3, r7, #7
20000698:	2200      	movs	r2, #0
2000069a:	701a      	strb	r2, [r3, #0]
2000069c:	e00b      	b.n	200006b6 <main+0x2e>
		pixel(i, 10, 1);
2000069e:	1dfb      	adds	r3, r7, #7
200006a0:	781b      	ldrb	r3, [r3, #0]
200006a2:	2201      	movs	r2, #1
200006a4:	210a      	movs	r1, #10
200006a6:	0018      	movs	r0, r3
200006a8:	f7ff ff13 	bl	200004d2 <pixel>
	for(i = 0; i < 128; i++){
200006ac:	1dfb      	adds	r3, r7, #7
200006ae:	781a      	ldrb	r2, [r3, #0]
200006b0:	1dfb      	adds	r3, r7, #7
200006b2:	3201      	adds	r2, #1
200006b4:	701a      	strb	r2, [r3, #0]
200006b6:	1dfb      	adds	r3, r7, #7
200006b8:	781b      	ldrb	r3, [r3, #0]
200006ba:	b25b      	sxtb	r3, r3
200006bc:	2b00      	cmp	r3, #0
200006be:	daee      	bge.n	2000069e <main+0x16>
	}
	for(i = 0; i < 64; i++){
200006c0:	1dfb      	adds	r3, r7, #7
200006c2:	2200      	movs	r2, #0
200006c4:	701a      	strb	r2, [r3, #0]
200006c6:	e00b      	b.n	200006e0 <main+0x58>
		pixel(10, i, 1);
200006c8:	1dfb      	adds	r3, r7, #7
200006ca:	781b      	ldrb	r3, [r3, #0]
200006cc:	2201      	movs	r2, #1
200006ce:	0019      	movs	r1, r3
200006d0:	200a      	movs	r0, #10
200006d2:	f7ff fefe 	bl	200004d2 <pixel>
	for(i = 0; i < 64; i++){
200006d6:	1dfb      	adds	r3, r7, #7
200006d8:	781a      	ldrb	r2, [r3, #0]
200006da:	1dfb      	adds	r3, r7, #7
200006dc:	3201      	adds	r2, #1
200006de:	701a      	strb	r2, [r3, #0]
200006e0:	1dfb      	adds	r3, r7, #7
200006e2:	781b      	ldrb	r3, [r3, #0]
200006e4:	2b3f      	cmp	r3, #63	; 0x3f
200006e6:	d9ef      	bls.n	200006c8 <main+0x40>
	}
	delay_milli(500);
200006e8:	23fa      	movs	r3, #250	; 0xfa
200006ea:	005b      	lsls	r3, r3, #1
200006ec:	0018      	movs	r0, r3
200006ee:	f7ff fce0 	bl	200000b2 <delay_milli>
	for(i = 0; i < 128; i++){
200006f2:	1dfb      	adds	r3, r7, #7
200006f4:	2200      	movs	r2, #0
200006f6:	701a      	strb	r2, [r3, #0]
200006f8:	e00b      	b.n	20000712 <main+0x8a>
		pixel(i, 10, 0);
200006fa:	1dfb      	adds	r3, r7, #7
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	2200      	movs	r2, #0
20000700:	210a      	movs	r1, #10
20000702:	0018      	movs	r0, r3
20000704:	f7ff fee5 	bl	200004d2 <pixel>
	for(i = 0; i < 128; i++){
20000708:	1dfb      	adds	r3, r7, #7
2000070a:	781a      	ldrb	r2, [r3, #0]
2000070c:	1dfb      	adds	r3, r7, #7
2000070e:	3201      	adds	r2, #1
20000710:	701a      	strb	r2, [r3, #0]
20000712:	1dfb      	adds	r3, r7, #7
20000714:	781b      	ldrb	r3, [r3, #0]
20000716:	b25b      	sxtb	r3, r3
20000718:	2b00      	cmp	r3, #0
2000071a:	daee      	bge.n	200006fa <main+0x72>
	}
	for(i = 0; i < 64; i++){
2000071c:	1dfb      	adds	r3, r7, #7
2000071e:	2200      	movs	r2, #0
20000720:	701a      	strb	r2, [r3, #0]
20000722:	e00b      	b.n	2000073c <main+0xb4>
		pixel(10, i, 0);
20000724:	1dfb      	adds	r3, r7, #7
20000726:	781b      	ldrb	r3, [r3, #0]
20000728:	2200      	movs	r2, #0
2000072a:	0019      	movs	r1, r3
2000072c:	200a      	movs	r0, #10
2000072e:	f7ff fed0 	bl	200004d2 <pixel>
	for(i = 0; i < 64; i++){
20000732:	1dfb      	adds	r3, r7, #7
20000734:	781a      	ldrb	r2, [r3, #0]
20000736:	1dfb      	adds	r3, r7, #7
20000738:	3201      	adds	r2, #1
2000073a:	701a      	strb	r2, [r3, #0]
2000073c:	1dfb      	adds	r3, r7, #7
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	2b3f      	cmp	r3, #63	; 0x3f
20000742:	d9ef      	bls.n	20000724 <main+0x9c>
	}
}
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46c0      	nop			; (mov r8, r8)
20000748:	46bd      	mov	sp, r7
2000074a:	b002      	add	sp, #8
2000074c:	bd80      	pop	{r7, pc}
2000074e:	46c0      	nop			; (mov r8, r8)

20000750 <__udivsi3>:
20000750:	2200      	movs	r2, #0
20000752:	0843      	lsrs	r3, r0, #1
20000754:	428b      	cmp	r3, r1
20000756:	d374      	bcc.n	20000842 <__udivsi3+0xf2>
20000758:	0903      	lsrs	r3, r0, #4
2000075a:	428b      	cmp	r3, r1
2000075c:	d35f      	bcc.n	2000081e <__udivsi3+0xce>
2000075e:	0a03      	lsrs	r3, r0, #8
20000760:	428b      	cmp	r3, r1
20000762:	d344      	bcc.n	200007ee <__udivsi3+0x9e>
20000764:	0b03      	lsrs	r3, r0, #12
20000766:	428b      	cmp	r3, r1
20000768:	d328      	bcc.n	200007bc <__udivsi3+0x6c>
2000076a:	0c03      	lsrs	r3, r0, #16
2000076c:	428b      	cmp	r3, r1
2000076e:	d30d      	bcc.n	2000078c <__udivsi3+0x3c>
20000770:	22ff      	movs	r2, #255	; 0xff
20000772:	0209      	lsls	r1, r1, #8
20000774:	ba12      	rev	r2, r2
20000776:	0c03      	lsrs	r3, r0, #16
20000778:	428b      	cmp	r3, r1
2000077a:	d302      	bcc.n	20000782 <__udivsi3+0x32>
2000077c:	1212      	asrs	r2, r2, #8
2000077e:	0209      	lsls	r1, r1, #8
20000780:	d065      	beq.n	2000084e <__udivsi3+0xfe>
20000782:	0b03      	lsrs	r3, r0, #12
20000784:	428b      	cmp	r3, r1
20000786:	d319      	bcc.n	200007bc <__udivsi3+0x6c>
20000788:	e000      	b.n	2000078c <__udivsi3+0x3c>
2000078a:	0a09      	lsrs	r1, r1, #8
2000078c:	0bc3      	lsrs	r3, r0, #15
2000078e:	428b      	cmp	r3, r1
20000790:	d301      	bcc.n	20000796 <__udivsi3+0x46>
20000792:	03cb      	lsls	r3, r1, #15
20000794:	1ac0      	subs	r0, r0, r3
20000796:	4152      	adcs	r2, r2
20000798:	0b83      	lsrs	r3, r0, #14
2000079a:	428b      	cmp	r3, r1
2000079c:	d301      	bcc.n	200007a2 <__udivsi3+0x52>
2000079e:	038b      	lsls	r3, r1, #14
200007a0:	1ac0      	subs	r0, r0, r3
200007a2:	4152      	adcs	r2, r2
200007a4:	0b43      	lsrs	r3, r0, #13
200007a6:	428b      	cmp	r3, r1
200007a8:	d301      	bcc.n	200007ae <__udivsi3+0x5e>
200007aa:	034b      	lsls	r3, r1, #13
200007ac:	1ac0      	subs	r0, r0, r3
200007ae:	4152      	adcs	r2, r2
200007b0:	0b03      	lsrs	r3, r0, #12
200007b2:	428b      	cmp	r3, r1
200007b4:	d301      	bcc.n	200007ba <__udivsi3+0x6a>
200007b6:	030b      	lsls	r3, r1, #12
200007b8:	1ac0      	subs	r0, r0, r3
200007ba:	4152      	adcs	r2, r2
200007bc:	0ac3      	lsrs	r3, r0, #11
200007be:	428b      	cmp	r3, r1
200007c0:	d301      	bcc.n	200007c6 <__udivsi3+0x76>
200007c2:	02cb      	lsls	r3, r1, #11
200007c4:	1ac0      	subs	r0, r0, r3
200007c6:	4152      	adcs	r2, r2
200007c8:	0a83      	lsrs	r3, r0, #10
200007ca:	428b      	cmp	r3, r1
200007cc:	d301      	bcc.n	200007d2 <__udivsi3+0x82>
200007ce:	028b      	lsls	r3, r1, #10
200007d0:	1ac0      	subs	r0, r0, r3
200007d2:	4152      	adcs	r2, r2
200007d4:	0a43      	lsrs	r3, r0, #9
200007d6:	428b      	cmp	r3, r1
200007d8:	d301      	bcc.n	200007de <__udivsi3+0x8e>
200007da:	024b      	lsls	r3, r1, #9
200007dc:	1ac0      	subs	r0, r0, r3
200007de:	4152      	adcs	r2, r2
200007e0:	0a03      	lsrs	r3, r0, #8
200007e2:	428b      	cmp	r3, r1
200007e4:	d301      	bcc.n	200007ea <__udivsi3+0x9a>
200007e6:	020b      	lsls	r3, r1, #8
200007e8:	1ac0      	subs	r0, r0, r3
200007ea:	4152      	adcs	r2, r2
200007ec:	d2cd      	bcs.n	2000078a <__udivsi3+0x3a>
200007ee:	09c3      	lsrs	r3, r0, #7
200007f0:	428b      	cmp	r3, r1
200007f2:	d301      	bcc.n	200007f8 <__udivsi3+0xa8>
200007f4:	01cb      	lsls	r3, r1, #7
200007f6:	1ac0      	subs	r0, r0, r3
200007f8:	4152      	adcs	r2, r2
200007fa:	0983      	lsrs	r3, r0, #6
200007fc:	428b      	cmp	r3, r1
200007fe:	d301      	bcc.n	20000804 <__udivsi3+0xb4>
20000800:	018b      	lsls	r3, r1, #6
20000802:	1ac0      	subs	r0, r0, r3
20000804:	4152      	adcs	r2, r2
20000806:	0943      	lsrs	r3, r0, #5
20000808:	428b      	cmp	r3, r1
2000080a:	d301      	bcc.n	20000810 <__udivsi3+0xc0>
2000080c:	014b      	lsls	r3, r1, #5
2000080e:	1ac0      	subs	r0, r0, r3
20000810:	4152      	adcs	r2, r2
20000812:	0903      	lsrs	r3, r0, #4
20000814:	428b      	cmp	r3, r1
20000816:	d301      	bcc.n	2000081c <__udivsi3+0xcc>
20000818:	010b      	lsls	r3, r1, #4
2000081a:	1ac0      	subs	r0, r0, r3
2000081c:	4152      	adcs	r2, r2
2000081e:	08c3      	lsrs	r3, r0, #3
20000820:	428b      	cmp	r3, r1
20000822:	d301      	bcc.n	20000828 <__udivsi3+0xd8>
20000824:	00cb      	lsls	r3, r1, #3
20000826:	1ac0      	subs	r0, r0, r3
20000828:	4152      	adcs	r2, r2
2000082a:	0883      	lsrs	r3, r0, #2
2000082c:	428b      	cmp	r3, r1
2000082e:	d301      	bcc.n	20000834 <__udivsi3+0xe4>
20000830:	008b      	lsls	r3, r1, #2
20000832:	1ac0      	subs	r0, r0, r3
20000834:	4152      	adcs	r2, r2
20000836:	0843      	lsrs	r3, r0, #1
20000838:	428b      	cmp	r3, r1
2000083a:	d301      	bcc.n	20000840 <__udivsi3+0xf0>
2000083c:	004b      	lsls	r3, r1, #1
2000083e:	1ac0      	subs	r0, r0, r3
20000840:	4152      	adcs	r2, r2
20000842:	1a41      	subs	r1, r0, r1
20000844:	d200      	bcs.n	20000848 <__udivsi3+0xf8>
20000846:	4601      	mov	r1, r0
20000848:	4152      	adcs	r2, r2
2000084a:	4610      	mov	r0, r2
2000084c:	4770      	bx	lr
2000084e:	e7ff      	b.n	20000850 <__udivsi3+0x100>
20000850:	b501      	push	{r0, lr}
20000852:	2000      	movs	r0, #0
20000854:	f000 f806 	bl	20000864 <__aeabi_idiv0>
20000858:	bd02      	pop	{r1, pc}
2000085a:	46c0      	nop			; (mov r8, r8)

2000085c <__aeabi_uidivmod>:
2000085c:	2900      	cmp	r1, #0
2000085e:	d0f7      	beq.n	20000850 <__udivsi3+0x100>
20000860:	e776      	b.n	20000750 <__udivsi3>
20000862:	4770      	bx	lr

20000864 <__aeabi_idiv0>:
20000864:	4770      	bx	lr
20000866:	46c0      	nop			; (mov r8, r8)
20000868:	2000053e 	andcs	r0, r0, lr, lsr r5
2000086c:	20000548 	andcs	r0, r0, r8, asr #10
20000870:	20000552 	andcs	r0, r0, r2, asr r5
20000874:	2000055c 	andcs	r0, r0, ip, asr r5
20000878:	20000566 	andcs	r0, r0, r6, ror #10
2000087c:	20000570 	andcs	r0, r0, r0, ror r5
20000880:	2000057a 	andcs	r0, r0, sl, ror r5
20000884:	20000584 	andcs	r0, r0, r4, lsl #11

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000004c 	andeq	r0, r0, ip, asr #32
  10:	0001570c 	andeq	r5, r1, ip, lsl #14
  14:	00021000 	andeq	r1, r2, r0
	...
  24:	012c0200 			; <UNDEFINED> instruction: 0x012c0200
  28:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000134 	andeq	r0, r0, r4, lsr r1
  38:	00002f04 	andeq	r2, r0, r4, lsl #30
  3c:	01030100 	mrseq	r0, (UNDEF: 19)
  40:	00068806 	andeq	r8, r6, r6, lsl #16
  44:	0000c620 	andeq	ip, r0, r0, lsr #12
  48:	5e9c0100 	fmlple	f0, f4, f0
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	04010069 	streq	r0, [r1], #-105	; 0xffffff97
  54:	00250a01 	eoreq	r0, r5, r1, lsl #20
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	46060077 			; <UNDEFINED> instruction: 0x46060077
  60:	01000000 	mrseq	r0, (UNDEF: 0)
  64:	04d206dc 	ldrbeq	r0, [r2], #1756	; 0x6dc
  68:	01b62000 			; <UNDEFINED> instruction: 0x01b62000
  6c:	9c010000 	stcls	0, cr0, [r1], {-0}
  70:	000000e9 	andeq	r0, r0, r9, ror #1
  74:	01007807 	tsteq	r0, r7, lsl #16
  78:	002514dc 	ldrdeq	r1, [r5], -ip	; <UNPREDICTABLE>
  7c:	91020000 	mrsls	r0, (UNDEF: 2)
  80:	0079075f 	rsbseq	r0, r9, pc, asr r7
  84:	251fdc01 	ldrcs	sp, [pc, #-3073]	; fffff48b <__aeabi_idiv0+0xdfffec27>
  88:	02000000 	andeq	r0, r0, #0
  8c:	73075e91 	movwvc	r5, #32401	; 0x7e91
  90:	01007465 	tsteq	r0, r5, ror #8
  94:	00252adc 	ldrdeq	r2, [r5], -ip	; <UNPREDICTABLE>
  98:	91020000 	mrsls	r0, (UNDEF: 2)
  9c:	0127085d 			; <UNDEFINED> instruction: 0x0127085d
  a0:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
  a4:	0000250a 	andeq	r2, r0, sl, lsl #10
  a8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
  ac:	0001cd08 	andeq	ip, r1, r8, lsl #26
  b0:	10de0100 	sbcsne	r0, lr, r0, lsl #2
  b4:	00000025 	andeq	r0, r0, r5, lsr #32
  b8:	08669102 	stmdaeq	r6!, {r1, r8, ip, pc}^
  bc:	0000026d 	andeq	r0, r0, sp, ror #4
  c0:	251cde01 	ldrcs	sp, [ip, #-3585]	; 0xfffff1ff
  c4:	02000000 	andeq	r0, r0, #0
  c8:	0a086591 	beq	219714 <startup-0x1fde68ec>
  cc:	01000001 	tsteq	r0, r1
  d0:	002524de 	ldrdeq	r2, [r5], -lr	; <UNPREDICTABLE>
  d4:	91020000 	mrsls	r0, (UNDEF: 2)
  d8:	01d80863 	bicseq	r0, r8, r3, ror #16
  dc:	df010000 	svcle	0x00010000
  e0:	0000250a 	andeq	r2, r0, sl, lsl #10
  e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
  e8:	01de0900 	bicseq	r0, lr, r0, lsl #18
  ec:	d2010000 	andle	r0, r1, #0
  f0:	00046a06 	andeq	r6, r4, r6, lsl #20
  f4:	00006820 	andeq	r6, r0, r0, lsr #16
  f8:	329c0100 	addscc	r0, ip, #0, 2
  fc:	0a000001 	beq	108 <startup-0x1ffffef8>
 100:	20000470 	andcs	r0, r0, r0, ror r4
 104:	00000058 	andeq	r0, r0, r8, asr r0
 108:	00020608 	andeq	r0, r2, r8, lsl #12
 10c:	0fd30100 	svceq	0x00d30100
 110:	00000025 	andeq	r0, r0, r5, lsr #32
 114:	0a779102 	beq	1de4524 <startup-0x1e21badc>
 118:	20000494 	mulcs	r0, r4, r4
 11c:	00000022 	andeq	r0, r0, r2, lsr #32
 120:	6464610b 	strbtvs	r6, [r4], #-267	; 0xfffffef5
 124:	0fd60100 	svceq	0x00d60100
 128:	00000025 	andeq	r0, r0, r5, lsr #32
 12c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 130:	8d0c0000 	stchi	0, cr0, [ip, #-0]
 134:	01000002 	tsteq	r0, r2
 138:	041406c4 	ldreq	r0, [r4], #-1732	; 0xfffff93c
 13c:	00562000 	subseq	r2, r6, r0
 140:	9c010000 	stcls	0, cr0, [r1], {-0}
 144:	0000340d 	andeq	r3, r0, sp, lsl #8
 148:	09bf0100 	ldmibeq	pc!, {r8}	; <UNPREDICTABLE>
 14c:	00000025 	andeq	r0, r0, r5, lsr #32
 150:	200003ea 	andcs	r0, r0, sl, ror #7
 154:	0000002a 	andeq	r0, r0, sl, lsr #32
 158:	016e9c01 	cmneq	lr, r1, lsl #24
 15c:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
 160:	01000001 	tsteq	r0, r1
 164:	002523bf 	strhteq	r2, [r5], -pc
 168:	91020000 	mrsls	r0, (UNDEF: 2)
 16c:	f3060077 	vqadd.u8	q0, q3, <illegal reg q11.5>
 170:	01000001 	tsteq	r0, r1
 174:	03a406b7 			; <UNDEFINED> instruction: 0x03a406b7
 178:	00462000 	subeq	r2, r6, r0
 17c:	9c010000 	stcls	0, cr0, [r1], {-0}
 180:	000001a3 	andeq	r0, r0, r3, lsr #3
 184:	0000410e 	andeq	r4, r0, lr, lsl #2
 188:	21b70100 			; <UNDEFINED> instruction: 0x21b70100
 18c:	00000025 	andeq	r0, r0, r5, lsr #32
 190:	0e779102 	expeqs	f1, f2
 194:	000001cd 	andeq	r0, r0, sp, asr #3
 198:	252fb701 	strcs	fp, [pc, #-1793]!	; fffffa9f <__aeabi_idiv0+0xdffff23b>
 19c:	02000000 	andeq	r0, r0, #0
 1a0:	06007691 			; <UNDEFINED> instruction: 0x06007691
 1a4:	0000000d 	andeq	r0, r0, sp
 1a8:	6406b001 	strvs	fp, [r6], #-1
 1ac:	40200003 	eormi	r0, r0, r3
 1b0:	01000000 	mrseq	r0, (UNDEF: 0)
 1b4:	0001d89c 	muleq	r1, ip, r8
 1b8:	001b0e00 	andseq	r0, fp, r0, lsl #28
 1bc:	b0010000 	andlt	r0, r1, r0
 1c0:	00002524 	andeq	r2, r0, r4, lsr #10
 1c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1c8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
 1cc:	35b00100 	ldrcc	r0, [r0, #256]!	; 0x100
 1d0:	00000025 	andeq	r0, r0, r5, lsr #32
 1d4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 1d8:	0001b806 	andeq	fp, r1, r6, lsl #16
 1dc:	069b0100 	ldreq	r0, [fp], r0, lsl #2
 1e0:	200002e4 	andcs	r0, r0, r4, ror #5
 1e4:	00000080 	andeq	r0, r0, r0, lsl #1
 1e8:	020d9c01 	andeq	r9, sp, #256	; 0x100
 1ec:	670e0000 	strvs	r0, [lr, -r0]
 1f0:	01000002 	tsteq	r0, r2
 1f4:	00251c9b 	mlaeq	r5, fp, ip, r1
 1f8:	91020000 	mrsls	r0, (UNDEF: 2)
 1fc:	01cd0e77 	biceq	r0, sp, r7, ror lr
 200:	9b010000 	blls	40208 <startup-0x1ffbfdf8>
 204:	0000252b 	andeq	r2, r0, fp, lsr #10
 208:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 20c:	00000d00 	andeq	r0, r0, r0, lsl #26
 210:	85010000 	strhi	r0, [r1, #-0]
 214:	00002509 	andeq	r2, r0, r9, lsl #10
 218:	00025400 	andeq	r5, r2, r0, lsl #8
 21c:	00009020 	andeq	r9, r0, r0, lsr #32
 220:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
 224:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 228:	000001cd 	andeq	r0, r0, sp, asr #3
 22c:	251e8501 	ldrcs	r8, [lr, #-1281]	; 0xfffffaff
 230:	02000000 	andeq	r0, r0, #0
 234:	720b6f91 	andvc	r6, fp, #580	; 0x244
 238:	8d010076 	stchi	0, cr0, [r1, #-472]	; 0xfffffe28
 23c:	0000250a 	andeq	r2, r0, sl, lsl #10
 240:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 244:	00f70f00 	rscseq	r0, r7, r0, lsl #30
 248:	72010000 	andvc	r0, r1, #0
 24c:	0001ee06 	andeq	lr, r1, r6, lsl #28
 250:	00006620 	andeq	r6, r0, r0, lsr #12
 254:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 258:	000001c6 	andeq	r0, r0, r6, asr #3
 25c:	8c066501 	cfstr32hi	mvfx6, [r6], {1}
 260:	62200001 	eorvs	r0, r0, #1
 264:	01000000 	mrseq	r0, (UNDEF: 0)
 268:	00028c9c 	muleq	r2, ip, ip
 26c:	01cd0e00 	biceq	r0, sp, r0, lsl #28
 270:	65010000 	strvs	r0, [r1, #-0]
 274:	00002520 	andeq	r2, r0, r0, lsr #10
 278:	6f910200 	svcvs	0x00910200
 27c:	00020b08 	andeq	r0, r2, r8, lsl #22
 280:	0a660100 	beq	1980688 <startup-0x1e67f978>
 284:	00000025 	andeq	r0, r0, r5, lsr #32
 288:	00779102 	rsbseq	r9, r7, r2, lsl #2
 28c:	0000c810 	andeq	ip, r0, r0, lsl r8
 290:	06610100 	strbteq	r0, [r1], -r0, lsl #2
 294:	20000150 	andcs	r0, r0, r0, asr r1
 298:	0000003c 	andeq	r0, r0, ip, lsr r0
 29c:	02b09c01 	adcseq	r9, r0, #256	; 0x100
 2a0:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 2a4:	25610100 	strbcs	r0, [r1, #-256]!	; 0xffffff00
 2a8:	00000025 	andeq	r0, r0, r5, lsr #32
 2ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2b0:	00014210 	andeq	r4, r1, r0, lsl r2
 2b4:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
 2b8:	2000010a 	andcs	r0, r0, sl, lsl #2
 2bc:	00000046 	andeq	r0, r0, r6, asr #32
 2c0:	02d49c01 	sbcseq	r9, r4, #256	; 0x100
 2c4:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
 2c8:	235d0100 	cmpcs	sp, #0, 2
 2cc:	00000025 	andeq	r0, r0, r5, lsr #32
 2d0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2d4:	0000eb0c 	andeq	lr, r0, ip, lsl #22
 2d8:	06560100 	ldrbeq	r0, [r6], -r0, lsl #2
 2dc:	200000f8 	strdcs	r0, [r0], -r8
 2e0:	00000012 	andeq	r0, r0, r2, lsl r0
 2e4:	74069c01 	strvc	r9, [r6], #-3073	; 0xfffff3ff
 2e8:	01000002 	tsteq	r0, r2
 2ec:	00b2064c 	adcseq	r0, r2, ip, asr #12
 2f0:	00462000 	subeq	r2, r6, r0
 2f4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2f8:	00000322 	andeq	r0, r0, r2, lsr #6
 2fc:	00736d07 	rsbseq	r6, r3, r7, lsl #26
 300:	221f4c01 	andscs	r4, pc, #256	; 0x100
 304:	02000003 	andeq	r0, r0, #3
 308:	d00a6c91 	mulle	sl, r1, ip
 30c:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 310:	0b000000 	bleq	318 <startup-0x1ffffce8>
 314:	51010069 	tstpl	r1, r9, rrx
 318:	0003290a 	andeq	r2, r3, sl, lsl #18
 31c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 320:	04030000 	streq	r0, [r3], #-0
 324:	00028007 	andeq	r8, r2, r7
 328:	05041100 	streq	r1, [r4, #-256]	; 0xffffff00
 32c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 330:	00002306 	andeq	r2, r0, r6, lsl #6
 334:	06420100 	strbeq	r0, [r2], -r0, lsl #2
 338:	20000070 	andcs	r0, r0, r0, ror r0
 33c:	00000042 	andeq	r0, r0, r2, asr #32
 340:	036c9c01 	cmneq	ip, #256	; 0x100
 344:	75070000 	strvc	r0, [r7, #-0]
 348:	42010073 	andmi	r0, r1, #115	; 0x73
 34c:	0003221f 	andeq	r2, r3, pc, lsl r2
 350:	6c910200 	lfmvs	f0, 4, [r1], {0}
 354:	00008e0a 	andeq	r8, r0, sl, lsl #28
 358:	00001a20 	andeq	r1, r0, r0, lsr #20
 35c:	00690b00 	rsbeq	r0, r9, r0, lsl #22
 360:	290a4701 	stmdbcs	sl, {r0, r8, r9, sl, lr}
 364:	02000003 	andeq	r0, r0, #3
 368:	00007491 	muleq	r0, r1, r4
 36c:	0000df12 	andeq	sp, r0, r2, lsl pc
 370:	06380100 	ldrteq	r0, [r8], -r0, lsl #2
 374:	20000028 	andcs	r0, r0, r8, lsr #32
 378:	00000048 	andeq	r0, r0, r8, asr #32
 37c:	16129c01 	ldrne	r9, [r2], -r1, lsl #24
 380:	01000001 	tsteq	r0, r1
 384:	00100634 	andseq	r0, r0, r4, lsr r6
 388:	00182000 	andseq	r2, r8, r0
 38c:	9c010000 	stcls	0, cr0, [r1], {-0}
 390:	00011f12 	andeq	r1, r1, r2, lsl pc
 394:	062b0100 	strteq	r0, [fp], -r0, lsl #2
 398:	20000000 	andcs	r0, r0, r0
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	Address 0x000003a0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00340500 	eorseq	r0, r4, r0, lsl #10
  4c:	0b3a0803 	bleq	e82060 <startup-0x1f17dfa0>
  50:	0b39053b 	bleq	e41544 <startup-0x1f1beabc>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
  5c:	03193f01 	tsteq	r9, #1, 30
  60:	3b0b3a0e 	blcc	2ce8a0 <startup-0x1fd31760>
  64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  6c:	96184006 	ldrls	r4, [r8], -r6
  70:	13011942 	movwne	r1, #6466	; 0x1942
  74:	05070000 	streq	r0, [r7, #-0]
  78:	3a080300 	bcc	200c80 <startup-0x1fdff380>
  7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  84:	08000018 	stmdaeq	r0, {r3, r4}
  88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  8c:	0b3b0b3a 	bleq	ec2d7c <startup-0x1f13d284>
  90:	13490b39 	movtne	r0, #39737	; 0x9b39
  94:	00001802 	andeq	r1, r0, r2, lsl #16
  98:	3f012e09 	svccc	0x00012e09
  9c:	3a0e0319 	bcc	380d08 <startup-0x1fc7f2f8>
  a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
  a8:	96184006 	ldrls	r4, [r8], -r6
  ac:	13011942 	movwne	r1, #6466	; 0x1942
  b0:	0b0a0000 	bleq	2800b8 <startup-0x1fd7ff48>
  b4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  b8:	0b000006 	bleq	d8 <startup-0x1fffff28>
  bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	13490b39 	movtne	r0, #39737	; 0x9b39
  c8:	00001802 	andeq	r1, r0, r2, lsl #16
  cc:	3f002e0c 	svccc	0x00002e0c
  d0:	3a0e0319 	bcc	380d3c <startup-0x1fc7f2c4>
  d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
  dc:	96184006 	ldrls	r4, [r8], -r6
  e0:	00001942 	andeq	r1, r0, r2, asr #18
  e4:	3f012e0d 	svccc	0x00012e0d
  e8:	3a0e0319 	bcc	380d54 <startup-0x1fc7f2ac>
  ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  f8:	96184006 	ldrls	r4, [r8], -r6
  fc:	13011942 	movwne	r1, #6466	; 0x1942
 100:	050e0000 	streq	r0, [lr, #-0]
 104:	3a0e0300 	bcc	380d0c <startup-0x1fc7f2f4>
 108:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 10c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 110:	0f000018 	svceq	0x00000018
 114:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 118:	0b3a0e03 	bleq	e8392c <startup-0x1f17c6d4>
 11c:	0b390b3b 	bleq	e42e10 <startup-0x1f1bd1f0>
 120:	01111927 	tsteq	r1, r7, lsr #18
 124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 128:	00194296 	mulseq	r9, r6, r2
 12c:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 130:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 134:	0b3b0b3a 	bleq	ec2e24 <startup-0x1f13d1dc>
 138:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 144:	00130119 	andseq	r0, r3, r9, lsl r1
 148:	00241100 	eoreq	r1, r4, r0, lsl #2
 14c:	0b3e0b0b 	bleq	f82d80 <startup-0x1f07d280>
 150:	00000803 	andeq	r0, r0, r3, lsl #16
 154:	3f002e12 	svccc	0x00002e12
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	1119270b 	tstne	r9, fp, lsl #14
 164:	40061201 	andmi	r1, r6, r1, lsl #4
 168:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 16c:	Address 0x0000016c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000073e 	andeq	r0, r0, lr, lsr r7
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000074e 	andcs	r0, r0, lr, asr #14
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
   4:	00770003 	rsbseq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	734f2f37 	movtvc	r2, #65335	; 0xff37
  58:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  5c:	6262614c 	rsbvs	r6, r2, #76, 2
  60:	672f7261 	strvs	r7, [pc, -r1, ror #4]!
  64:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  68:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  6c:	616c7073 	smcvs	50947	; 0xc703
  70:	73000079 	movwvc	r0, #121	; 0x79
  74:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  78:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	00010500 	andeq	r0, r1, r0, lsl #10
  84:	00000205 	andeq	r0, r0, r5, lsl #4
  88:	2b032000 	blcs	c8090 <startup-0x1ff37f70>
  8c:	21211301 			; <UNDEFINED> instruction: 0x21211301
  90:	0302212f 	movweq	r2, #8495	; 0x212f
  94:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  98:	02050014 	andeq	r0, r5, #20
  9c:	20000010 	andcs	r0, r0, r0, lsl r0
  a0:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
  a4:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
  a8:	2f010520 	svccs	0x00010520
  ac:	05761705 	ldrbeq	r1, [r6, #-1797]!	; 0xfffff8fb
  b0:	0c052f02 	stceq	15, cr2, [r5], {2}
  b4:	2f020520 	svccs	0x00020520
  b8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  bc:	0b052f02 	bleq	14bccc <startup-0x1feb4334>
  c0:	2f020520 	svccs	0x00020520
  c4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  c8:	0a052f07 	beq	14bcec <startup-0x1feb4314>
  cc:	01040200 	mrseq	r0, R12_usr
  d0:	00190520 	andseq	r0, r9, r0, lsr #10
  d4:	3c010402 	cfstrscc	mvf0, [r1], {2}
  d8:	02000705 	andeq	r0, r0, #1310720	; 0x140000
  dc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  e0:	0c052202 	sfmeq	f2, 4, [r5], {2}
  e4:	2f010520 	svccs	0x00010520
  e8:	05ae2205 	streq	r2, [lr, #517]!	; 0x205
  ec:	05834c05 	streq	r4, [r3, #3077]	; 0xc05
  f0:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
  f4:	0003052e 	andeq	r0, r3, lr, lsr #10
  f8:	21030402 	tstcs	r3, r2, lsl #8
  fc:	02001c05 	andeq	r1, r0, #1280	; 0x500
 100:	052d0304 	streq	r0, [sp, #-772]!	; 0xfffffcfc
 104:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 108:	13053c01 	movwne	r3, #23553	; 0x5c01
 10c:	01040200 	mrseq	r0, R12_usr
 110:	0002052e 	andeq	r0, r2, lr, lsr #10
 114:	20010402 	andcs	r0, r1, r2, lsl #8
 118:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
 11c:	06055a22 	streq	r5, [r5], -r2, lsr #20
 120:	0a05834c 	beq	160e58 <startup-0x1fe9f1a8>
 124:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 128:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 12c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 130:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 134:	13055703 	movwne	r5, #22275	; 0x5703
 138:	01040200 	mrseq	r0, R12_usr
 13c:	0002053c 	andeq	r0, r2, ip, lsr r5
 140:	20010402 	andcs	r0, r1, r2, lsl #8
 144:	053f0105 	ldreq	r0, [pc, #-261]!	; 47 <startup-0x1fffffb9>
 148:	02055a13 	andeq	r5, r5, #77824	; 0x13000
 14c:	01052f2f 	tsteq	r5, pc, lsr #30
 150:	4025052f 	eormi	r0, r5, pc, lsr #10
 154:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 158:	0f054a15 	svceq	0x00054a15
 15c:	01055966 	tsteq	r5, r6, ror #18
 160:	67270583 	strvs	r0, [r7, -r3, lsl #11]!
 164:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 168:	05130801 	ldreq	r0, [r3, #-2049]	; 0xfffff7ff
 16c:	0a05762b 	beq	15da20 <startup-0x1fea25e0>
 170:	4b020567 	blmi	81714 <startup-0x1ff7e8ec>
 174:	05c10c05 	strbeq	r0, [r1, #3077]	; 0xc05
 178:	207a030b 	rsbscs	r0, sl, fp, lsl #6
 17c:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 180:	0605210f 	streq	r2, [r5], -pc, lsl #2
 184:	4b0f053d 	blmi	3c1680 <startup-0x1fc3e980>
 188:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 18c:	03054b1b 	movweq	r4, #23323	; 0x5b1b
 190:	210c053c 	tstcs	ip, ip, lsr r5
 194:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 198:	02053e1e 	andeq	r3, r5, #480	; 0x1e0
 19c:	0d053d2f 	stceq	13, cr3, [r5, #-188]	; 0xffffff44
 1a0:	2f020520 	svccs	0x00020520
 1a4:	03053d3d 	movweq	r3, #23869	; 0x5d3d
 1a8:	3d2f3d30 	stccc	13, cr3, [pc, #-192]!	; f0 <startup-0x1fffff10>
 1ac:	052f0705 	streq	r0, [pc, #-1797]!	; fffffaaf <__aeabi_idiv0+0xdffff24b>
 1b0:	05053c21 	streq	r3, [r5, #-3105]	; 0xfffff3df
 1b4:	2a030520 	bcs	c163c <startup-0x1ff3e9c4>
 1b8:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
 1bc:	053d2302 	ldreq	r2, [sp, #-770]!	; 0xfffffcfe
 1c0:	0105200e 	tsteq	r5, lr
 1c4:	ae29052f 	cfsh64ge	mvdx0, mvdx9, #31
 1c8:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 1cc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 1d0:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 1d4:	0f053d2f 	svceq	0x00053d2f
 1d8:	200a052f 	andcs	r0, sl, pc, lsr #10
 1dc:	3d4b0205 	sfmcc	f0, 2, [fp, #-20]	; 0xffffffec
 1e0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1e4:	03052f04 	movweq	r2, #24324	; 0x5f04
 1e8:	04053d4b 	streq	r3, [r5], #-3403	; 0xfffff2b5
 1ec:	4b030530 	blmi	c16b4 <startup-0x1ff3e94c>
 1f0:	3009053d 	andcc	r0, r9, sp, lsr r5
 1f4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 1f8:	0205ca36 	andeq	ip, r5, #221184	; 0x36000
 1fc:	20100591 	mulscs	r0, r1, r5
 200:	593d0205 	ldmdbpl	sp!, {r0, r2, r9}
 204:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffff4dd <__aeabi_idiv0+0xdfffec79>
 208:	04053e10 	streq	r3, [r5], #-3600	; 0xfffff1f0
 20c:	2103054a 	tstcs	r3, sl, asr #10
 210:	3010053d 	andscc	r0, r0, sp, lsr r5
 214:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 218:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 21c:	0f053002 	svceq	0x00053002
 220:	2f020520 	svccs	0x00020520
 224:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 228:	05764005 	ldrbeq	r4, [r6, #-5]!
 22c:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 230:	8301053d 	movwhi	r0, #5437	; 0x153d
 234:	054c3a05 	strbeq	r3, [ip, #-2565]	; 0xfffff5fb
 238:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 23c:	01053d3d 	tsteq	r5, sp, lsr sp
 240:	4c2e0583 	cfstr32mi	mvfx0, [lr], #-524	; 0xfffffdf4
 244:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 248:	01055909 	tsteq	r5, r9, lsl #18
 24c:	4c1a0567 	cfldr32mi	mvfx0, [sl], {103}	; 0x67
 250:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 244 <startup-0x1ffffdbc>
 254:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 258:	4b4b4b4b 	blmi	12d2f8c <startup-0x1ed2d074>
 25c:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 260:	053e1c05 	ldreq	r1, [lr, #-3077]!	; 0xfffff3fb
 264:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 268:	2103053c 	tstcs	r3, ip, lsr r5
 26c:	4b0f059f 	blmi	3c18f0 <startup-0x1fc3e710>
 270:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 274:	04020004 	streq	r0, [r2], #-4
 278:	25052103 	strcs	r2, [r5, #-259]	; 0xfffffefd
 27c:	03040200 	movweq	r0, #16896	; 0x4200
 280:	00030549 	andeq	r0, r3, r9, asr #10
 284:	58010402 	stmdapl	r1, {r1, sl}
 288:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 28c:	05470204 	strbeq	r0, [r7, #-516]	; 0xfffffdfc
 290:	04020002 	streq	r0, [r2], #-2
 294:	01055801 	tsteq	r5, r1, lsl #16
 298:	5a2e0551 	bpl	b817e4 <startup-0x1f47e81c>
 29c:	05e50405 	strbeq	r0, [r5, #1029]!	; 0x405
 2a0:	0402000e 	streq	r0, [r2], #-14
 2a4:	14055802 	strne	r5, [r5], #-2050	; 0xfffff7fe
 2a8:	3c18055a 	cfldr32cc	mvfx0, [r8], {90}	; 0x5a
 2ac:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
 2b0:	0f053e0b 	svceq	0x00053e0b
 2b4:	e510053c 	ldr	r0, [r0, #-1340]	; 0xfffffac4
 2b8:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2bc:	03052110 	movweq	r2, #20752	; 0x5110
 2c0:	2110054a 	tstcs	r0, sl, asr #10
 2c4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2c8:	03052110 	movweq	r2, #20752	; 0x5110
 2cc:	2110054a 	tstcs	r0, sl, asr #10
 2d0:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2d4:	03052110 	movweq	r2, #20752	; 0x5110
 2d8:	2110054a 	tstcs	r0, sl, asr #10
 2dc:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2e0:	03052110 	movweq	r2, #20752	; 0x5110
 2e4:	0405214a 	streq	r2, [r5], #-330	; 0xfffffeb6
 2e8:	4b080522 	blmi	201778 <startup-0x1fdfe888>
 2ec:	05690405 	strbeq	r0, [r9, #-1029]!	; 0xfffffbfb
 2f0:	0a054b0e 	beq	152f30 <startup-0x1fead0d0>
 2f4:	760e054b 	strvc	r0, [lr], -fp, asr #10
 2f8:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 2fc:	05c96802 	strbeq	r6, [r9, #2050]	; 0x802
 300:	0205c910 	andeq	ip, r5, #16, 18	; 0x40000
 304:	ad040591 	cfstr32ge	mvfx0, [r4, #-580]	; 0xfffffdbc
 308:	a04b0805 	subge	r0, fp, r5, lsl #16
 30c:	05920205 	ldreq	r0, [r2, #517]	; 0x205
 310:	ac5d031a 	mrrcge	3, 1, r0, sp, cr10
 314:	24030105 	strcs	r0, [r3], #-261	; 0xfffffefb
 318:	84100520 	ldrhi	r0, [r0], #-1312	; 0xfffffae0
 31c:	2f3e0205 	svccs	0x003e0205
 320:	05320805 	ldreq	r0, [r2, #-2053]!	; 0xfffff7fb
 324:	03053c02 	movweq	r3, #23554	; 0x5c02
 328:	03040200 	movweq	r0, #16896	; 0x4200
 32c:	00170521 	andseq	r0, r7, r1, lsr #10
 330:	73030402 	movwvc	r0, #13314	; 0x3402
 334:	02000f05 	andeq	r0, r0, #5, 30
 338:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 33c:	04020002 	streq	r0, [r2], #-2
 340:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
 344:	3c020531 	cfstr32cc	mvfx0, [r2], {49}	; 0x31
 348:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 34c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 350:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 354:	02057303 	andeq	r7, r5, #201326592	; 0xc000000
 358:	01040200 	mrseq	r0, R12_usr
 35c:	08054d58 	stmdaeq	r5, {r3, r4, r6, r8, sl, fp, lr}
 360:	3c020559 	cfstr32cc	mvfx0, [r2], {89}	; 0x59
 364:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 368:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 36c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 370:	0f057303 	svceq	0x00057303
 374:	01040200 	mrseq	r0, R12_usr
 378:	00020558 	andeq	r0, r2, r8, asr r5
 37c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 380:	05310805 	ldreq	r0, [r1, #-2053]!	; 0xfffff7fb
 384:	03053c02 	movweq	r3, #23554	; 0x5c02
 388:	03040200 	movweq	r0, #16896	; 0x4200
 38c:	00160521 	andseq	r0, r6, r1, lsr #10
 390:	73030402 	movwvc	r0, #13314	; 0x3402
 394:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 398:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 39c:	05024d01 	streq	r4, [r2, #-3329]	; 0xfffff2ff
 3a0:	Address 0x000003a0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	70617267 	rsbvc	r7, r1, r7, ror #4
   4:	5f636968 	svcpl	0x00636968
   8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
   c:	61726700 	cmnvs	r2, r0, lsl #14
  10:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  14:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  18:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  1c:	616d6d6f 	cmnvs	sp, pc, ror #26
  20:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
  24:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  28:	6b696d5f 	blvs	1a5b5ac <startup-0x1e5a4a54>
  2c:	6d006f72 	stcvs	15, cr6, [r0, #-456]	; 0xfffffe38
  30:	006e6961 	rsbeq	r6, lr, r1, ror #18
  34:	70617267 	rsbvc	r7, r1, r7, ror #4
  38:	5f636968 	svcpl	0x00636968
  3c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  40:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  44:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  48:	006c6578 	rsbeq	r6, ip, r8, ror r5
  4c:	20554e47 	subscs	r4, r5, r7, asr #28
  50:	20393943 	eorscs	r3, r9, r3, asr #18
  54:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  58:	30322031 	eorscc	r2, r2, r1, lsr r0
  5c:	30313931 	eorscc	r3, r1, r1, lsr r9
  60:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  64:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  68:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  6c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  70:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  74:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  78:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  7c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  80:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  84:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  88:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  8c:	205d3939 	subscs	r3, sp, r9, lsr r9
  90:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  94:	20626d75 	rsbcs	r6, r2, r5, ror sp
  98:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  9c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  a0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  a4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  a8:	616d2d20 	cmnvs	sp, r0, lsr #26
  ac:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  b0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  b4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  b8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  bc:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  c0:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  c4:	00393963 	eorseq	r3, r9, r3, ror #18
  c8:	70617267 	rsbvc	r7, r1, r7, ror #4
  cc:	5f636968 	svcpl	0x00636968
  d0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  d8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  dc:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
  e0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  e4:	3035325f 	eorscc	r3, r5, pc, asr r2
  e8:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
  ec:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  f0:	3030355f 	eorscc	r3, r0, pc, asr r5
  f4:	6700736e 	strvs	r7, [r0, -lr, ror #6]
  f8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  fc:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 100:	5f746961 	svcpl	0x00746961
 104:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 108:	61640079 	smcvs	16393	; 0x4009
 10c:	685f6174 	ldmdavs	pc, {r2, r4, r5, r6, r8, sp, lr}^	; <UNPREDICTABLE>
 110:	65646c6f 	strbvs	r6, [r4, #-3183]!	; 0xfffff391
 114:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
 118:	615f7469 	cmpvs	pc, r9, ror #8
 11c:	73007070 	movwvc	r7, #112	; 0x70
 120:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 124:	6d007075 	stcvs	0, cr7, [r0, #-468]	; 0xfffffe2c
 128:	006b7361 	rsbeq	r7, fp, r1, ror #6
 12c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 130:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 134:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 138:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 13c:	61686320 	cmnvs	r8, r0, lsr #6
 140:	72670072 	rsbvc	r0, r7, #114	; 0x72
 144:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 148:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 14c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 150:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 154:	43007465 	movwmi	r7, #1125	; 0x465
 158:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 15c:	2f737265 	svccs	0x00737265
 160:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
 164:	6f442f6e 	svcvs	0x00442f6e
 168:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 16c:	2f73746e 	svccs	0x0073746e
 170:	50746947 	rsbspl	r6, r4, r7, asr #18
 174:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 178:	2f737463 	svccs	0x00737463
 17c:	6f686353 	svcvs	0x00686353
 180:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 184:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 188:	442f7374 	strtmi	r7, [pc], #-884	; 190 <startup-0x1ffffe70>
 18c:	31305441 	teqcc	r0, r1, asr #8
 190:	734f2f37 	movtvc	r2, #65335	; 0xff37
 194:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
 198:	6262614c 	rsbvs	r6, r2, #76, 2
 19c:	672f7261 	strvs	r7, [pc, -r1, ror #4]!
 1a0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1a4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1a8:	616c7073 	smcvs	50947	; 0xc703
 1ac:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 1b0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1b4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1bc:	5f636968 	svcpl	0x00636968
 1c0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1c4:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 1c8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 1cc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8 <startup-0x1ffffff8>
 1d4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1d8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 1dc:	72670078 	rsbvc	r0, r7, #120	; 0x78
 1e0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 1e8:	5f726165 	svcpl	0x00726165
 1ec:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 1f0:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 1f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1f8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1fc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 200:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 204:	61700061 	cmnvs	r0, r1, rrx
 208:	62006567 	andvs	r6, r0, #432013312	; 0x19c00000
 20c:	0068746f 	rsbeq	r7, r8, pc, ror #8
 210:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 214:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 218:	61736f5c 	cmnvs	r3, ip, asr pc
 21c:	445c6e6e 	ldrbmi	r6, [ip], #-3694	; 0xfffff192
 220:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 224:	73746e65 	cmnvc	r4, #1616	; 0x650
 228:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 22c:	6a6f7250 	bvs	1bdcb74 <startup-0x1e42348c>
 230:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 234:	6863535c 	stmdavs	r3!, {r2, r3, r4, r6, r8, r9, ip, lr}^
 238:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 23c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 240:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 244:	30544144 	subscc	r4, r4, r4, asr #2
 248:	4f5c3731 	svcmi	0x005c3731
 24c:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 250:	62614c73 	rsbvs	r4, r1, #29440	; 0x7300
 254:	5c726162 	ldfple	f6, [r2], #-392	; 0xfffffe78
 258:	70617267 	rsbvc	r7, r1, r7, ror #4
 25c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 260:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 264:	76007961 	strvc	r7, [r0], -r1, ror #18
 268:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 26c:	725f7800 	subsvc	r7, pc, #0, 16
 270:	006c6165 	rsbeq	r6, ip, r5, ror #2
 274:	616c6564 	cmnvs	ip, r4, ror #10
 278:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 27c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 280:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 284:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 288:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 28c:	61726700 	cmnvs	r2, r0, lsl #14
 290:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 294:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 298:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 29c:	00657a69 	rsbeq	r7, r5, r9, ror #20

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000042 	andeq	r0, r0, r2, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000b2 	strhcs	r0, [r0], -r2
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000f8 	strdcs	r0, [r0], -r8
  a4:	00000012 	andeq	r0, r0, r2, lsl r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0000070d 	andeq	r0, r0, sp, lsl #14
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	2000010a 	andcs	r0, r0, sl, lsl #2
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000150 	andcs	r0, r0, r0, asr r1
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000018c 	andcs	r0, r0, ip, lsl #3
 100:	00000062 	andeq	r0, r0, r2, rrx
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001ee 	andcs	r0, r0, lr, ror #3
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000254 	andcs	r0, r0, r4, asr r2
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002e4 	andcs	r0, r0, r4, ror #5
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000364 	andcs	r0, r0, r4, ror #6
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003a4 	andcs	r0, r0, r4, lsr #7
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003ea 	andcs	r0, r0, sl, ror #7
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000414 	andcs	r0, r0, r4, lsl r4
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	2000046a 	andcs	r0, r0, sl, ror #8
 1f8:	00000068 	andeq	r0, r0, r8, rrx
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 208:	00000007 	andeq	r0, r0, r7
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	200004d2 	ldrdcs	r0, [r0], -r2
 218:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 21c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 220:	86048505 	strhi	r8, [r4], -r5, lsl #10
 224:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 228:	280e4101 	stmdacs	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	20000688 	andcs	r0, r0, r8, lsl #13
 23c:	000000c6 	andeq	r0, r0, r6, asr #1
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c010001 	stcvc	0, cr0, [r1], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	0000000c 	andeq	r0, r0, ip
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	20000751 	andcs	r0, r0, r1, asr r7
 26c:	0000010a 	andeq	r0, r0, sl, lsl #2
