
./Debug/ballWithKeypad.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
	void (* set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fcc8 	bl	20000998 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:


void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b07      	ldr	r3, [pc, #28]	; (20000034 <init_app+0x24>)
20000016:	4a08      	ldr	r2, [pc, #32]	; (20000038 <init_app+0x28>)
20000018:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005555;
2000001a:	4b08      	ldr	r3, [pc, #32]	; (2000003c <init_app+0x2c>)
2000001c:	4a08      	ldr	r2, [pc, #32]	; (20000040 <init_app+0x30>)
2000001e:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA0000;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <init_app+0x34>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	0412      	lsls	r2, r2, #16
20000026:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000028:	4b07      	ldr	r3, [pc, #28]	; (20000048 <init_app+0x38>)
2000002a:	2200      	movs	r2, #0
2000002c:	801a      	strh	r2, [r3, #0]
	#ifdef USBDM
	* ((unsigned long *) 0x40023830) = 0x18;
	_asm_ volatile(" LDR R0, =0x08000209\n");
	_asm_ volatile(" BLX R0 \n");
	#endif
}
2000002e:	46c0      	nop			; (mov r8, r8)
20000030:	46bd      	mov	sp, r7
20000032:	bd80      	pop	{r7, pc}
20000034:	40021000 	andmi	r1, r2, r0
20000038:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000003c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000040:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000044:	40020c30 	andmi	r0, r2, r0, lsr ip
20000048:	40020c08 	andmi	r0, r2, r8, lsl #24

2000004c <delay_250ns>:
	// 					DELAYS					//
	
void delay_250ns(void){
2000004c:	b580      	push	{r7, lr}
2000004e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000050:	4b0c      	ldr	r3, [pc, #48]	; (20000084 <delay_250ns+0x38>)
20000052:	2200      	movs	r2, #0
20000054:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000056:	4b0c      	ldr	r3, [pc, #48]	; (20000088 <delay_250ns+0x3c>)
20000058:	2229      	movs	r2, #41	; 0x29
2000005a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000005c:	4b0b      	ldr	r3, [pc, #44]	; (2000008c <delay_250ns+0x40>)
2000005e:	2200      	movs	r2, #0
20000060:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000062:	4b08      	ldr	r3, [pc, #32]	; (20000084 <delay_250ns+0x38>)
20000064:	2205      	movs	r2, #5
20000066:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
20000068:	46c0      	nop			; (mov r8, r8)
2000006a:	4b09      	ldr	r3, [pc, #36]	; (20000090 <delay_250ns+0x44>)
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	b2db      	uxtb	r3, r3
20000070:	001a      	movs	r2, r3
20000072:	2301      	movs	r3, #1
20000074:	4013      	ands	r3, r2
20000076:	d1f8      	bne.n	2000006a <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000078:	4b02      	ldr	r3, [pc, #8]	; (20000084 <delay_250ns+0x38>)
2000007a:	2200      	movs	r2, #0
2000007c:	701a      	strb	r2, [r3, #0]
}
2000007e:	46c0      	nop			; (mov r8, r8)
20000080:	46bd      	mov	sp, r7
20000082:	bd80      	pop	{r7, pc}
20000084:	e000e010 	and	lr, r0, r0, lsl r0
20000088:	e000e014 	and	lr, r0, r4, lsl r0
2000008c:	e000e018 	and	lr, r0, r8, lsl r0
20000090:	e000e012 	and	lr, r0, r2, lsl r0

20000094 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000094:	b580      	push	{r7, lr}
20000096:	b084      	sub	sp, #16
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
2000009c:	687b      	ldr	r3, [r7, #4]
2000009e:	22fa      	movs	r2, #250	; 0xfa
200000a0:	0091      	lsls	r1, r2, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f000 fcbc 	bl	20000a20 <__udivsi3>
200000a8:	0003      	movs	r3, r0
200000aa:	607b      	str	r3, [r7, #4]
	us ++;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	3301      	adds	r3, #1
200000b0:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
200000b2:	2300      	movs	r3, #0
200000b4:	60fb      	str	r3, [r7, #12]
200000b6:	e004      	b.n	200000c2 <delay_mikro+0x2e>
		delay_250ns();
200000b8:	f7ff ffc8 	bl	2000004c <delay_250ns>
	for(int i = 0; i < 4*us; i++){
200000bc:	68fb      	ldr	r3, [r7, #12]
200000be:	3301      	adds	r3, #1
200000c0:	60fb      	str	r3, [r7, #12]
200000c2:	687b      	ldr	r3, [r7, #4]
200000c4:	009a      	lsls	r2, r3, #2
200000c6:	68fb      	ldr	r3, [r7, #12]
200000c8:	429a      	cmp	r2, r3
200000ca:	d8f5      	bhi.n	200000b8 <delay_mikro+0x24>
	}
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46c0      	nop			; (mov r8, r8)
200000d0:	46bd      	mov	sp, r7
200000d2:	b004      	add	sp, #16
200000d4:	bd80      	pop	{r7, pc}

200000d6 <delay_milli>:

void delay_milli(unsigned int ms){
200000d6:	b580      	push	{r7, lr}
200000d8:	b084      	sub	sp, #16
200000da:	af00      	add	r7, sp, #0
200000dc:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000de:	687b      	ldr	r3, [r7, #4]
200000e0:	22fa      	movs	r2, #250	; 0xfa
200000e2:	0091      	lsls	r1, r2, #2
200000e4:	0018      	movs	r0, r3
200000e6:	f000 fc9b 	bl	20000a20 <__udivsi3>
200000ea:	0003      	movs	r3, r0
200000ec:	607b      	str	r3, [r7, #4]
		ms ++;
200000ee:	687b      	ldr	r3, [r7, #4]
200000f0:	3301      	adds	r3, #1
200000f2:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000f4:	2300      	movs	r3, #0
200000f6:	60fb      	str	r3, [r7, #12]
200000f8:	e007      	b.n	2000010a <delay_milli+0x34>
		delay_mikro(1000);
200000fa:	23fa      	movs	r3, #250	; 0xfa
200000fc:	009b      	lsls	r3, r3, #2
200000fe:	0018      	movs	r0, r3
20000100:	f7ff ffc8 	bl	20000094 <delay_mikro>
	for(int i = 0; i < ms; i++){
20000104:	68fb      	ldr	r3, [r7, #12]
20000106:	3301      	adds	r3, #1
20000108:	60fb      	str	r3, [r7, #12]
2000010a:	68fb      	ldr	r3, [r7, #12]
2000010c:	687a      	ldr	r2, [r7, #4]
2000010e:	429a      	cmp	r2, r3
20000110:	d8f3      	bhi.n	200000fa <delay_milli+0x24>
	}
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46c0      	nop			; (mov r8, r8)
20000116:	46bd      	mov	sp, r7
20000118:	b004      	add	sp, #16
2000011a:	bd80      	pop	{r7, pc}

2000011c <delay_500ns>:

void delay_500ns(){
2000011c:	b580      	push	{r7, lr}
2000011e:	af00      	add	r7, sp, #0
	delay_250ns();
20000120:	f7ff ff94 	bl	2000004c <delay_250ns>
	delay_250ns();
20000124:	f7ff ff92 	bl	2000004c <delay_250ns>
}
20000128:	46c0      	nop			; (mov r8, r8)
2000012a:	46bd      	mov	sp, r7
2000012c:	bd80      	pop	{r7, pc}

2000012e <graphic_ctrl_bit_set>:

//						DISPLAY						//

void graphic_ctrl_bit_set(uint8_t x){
2000012e:	b580      	push	{r7, lr}
20000130:	b082      	sub	sp, #8
20000132:	af00      	add	r7, sp, #0
20000134:	0002      	movs	r2, r0
20000136:	1dfb      	adds	r3, r7, #7
20000138:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
2000013a:	4b0d      	ldr	r3, [pc, #52]	; (20000170 <graphic_ctrl_bit_set+0x42>)
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	b2db      	uxtb	r3, r3
20000140:	b25a      	sxtb	r2, r3
20000142:	1dfb      	adds	r3, r7, #7
20000144:	781b      	ldrb	r3, [r3, #0]
20000146:	b25b      	sxtb	r3, r3
20000148:	2104      	movs	r1, #4
2000014a:	438b      	bics	r3, r1
2000014c:	b25b      	sxtb	r3, r3
2000014e:	4313      	orrs	r3, r2
20000150:	b25a      	sxtb	r2, r3
20000152:	4b07      	ldr	r3, [pc, #28]	; (20000170 <graphic_ctrl_bit_set+0x42>)
20000154:	b2d2      	uxtb	r2, r2
20000156:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000158:	4b05      	ldr	r3, [pc, #20]	; (20000170 <graphic_ctrl_bit_set+0x42>)
2000015a:	781b      	ldrb	r3, [r3, #0]
2000015c:	b2db      	uxtb	r3, r3
2000015e:	4a04      	ldr	r2, [pc, #16]	; (20000170 <graphic_ctrl_bit_set+0x42>)
20000160:	2104      	movs	r1, #4
20000162:	438b      	bics	r3, r1
20000164:	b2db      	uxtb	r3, r3
20000166:	7013      	strb	r3, [r2, #0]
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	b002      	add	sp, #8
2000016e:	bd80      	pop	{r7, pc}
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000174:	b580      	push	{r7, lr}
20000176:	b082      	sub	sp, #8
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000180:	4b0a      	ldr	r3, [pc, #40]	; (200001ac <graphic_ctrl_bit_clear+0x38>)
20000182:	781b      	ldrb	r3, [r3, #0]
20000184:	b2db      	uxtb	r3, r3
20000186:	b25b      	sxtb	r3, r3
20000188:	1dfa      	adds	r2, r7, #7
2000018a:	7812      	ldrb	r2, [r2, #0]
2000018c:	2104      	movs	r1, #4
2000018e:	430a      	orrs	r2, r1
20000190:	b2d2      	uxtb	r2, r2
20000192:	b252      	sxtb	r2, r2
20000194:	43d2      	mvns	r2, r2
20000196:	b252      	sxtb	r2, r2
20000198:	4013      	ands	r3, r2
2000019a:	b25a      	sxtb	r2, r3
2000019c:	4b03      	ldr	r3, [pc, #12]	; (200001ac <graphic_ctrl_bit_clear+0x38>)
2000019e:	b2d2      	uxtb	r2, r2
200001a0:	701a      	strb	r2, [r3, #0]
}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	46bd      	mov	sp, r7
200001a6:	b002      	add	sp, #8
200001a8:	bd80      	pop	{r7, pc}
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	40021014 	andmi	r1, r2, r4, lsl r0

200001b0 <select_controller>:

void select_controller(uint8_t controller){
200001b0:	b580      	push	{r7, lr}
200001b2:	b084      	sub	sp, #16
200001b4:	af00      	add	r7, sp, #0
200001b6:	0002      	movs	r2, r0
200001b8:	1dfb      	adds	r3, r7, #7
200001ba:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
200001bc:	230f      	movs	r3, #15
200001be:	18fb      	adds	r3, r7, r3
200001c0:	2200      	movs	r2, #0
200001c2:	701a      	strb	r2, [r3, #0]
	switch(controller){
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	781b      	ldrb	r3, [r3, #0]
200001c8:	2b18      	cmp	r3, #24
200001ca:	d01a      	beq.n	20000202 <select_controller+0x52>
200001cc:	dc1d      	bgt.n	2000020a <select_controller+0x5a>
200001ce:	2b10      	cmp	r3, #16
200001d0:	d010      	beq.n	200001f4 <select_controller+0x44>
200001d2:	dc1a      	bgt.n	2000020a <select_controller+0x5a>
200001d4:	2b00      	cmp	r3, #0
200001d6:	d002      	beq.n	200001de <select_controller+0x2e>
200001d8:	2b08      	cmp	r3, #8
200001da:	d004      	beq.n	200001e6 <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001dc:	e015      	b.n	2000020a <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001de:	2018      	movs	r0, #24
200001e0:	f7ff ffc8 	bl	20000174 <graphic_ctrl_bit_clear>
200001e4:	e012      	b.n	2000020c <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001e6:	2010      	movs	r0, #16
200001e8:	f7ff ffc4 	bl	20000174 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001ec:	2008      	movs	r0, #8
200001ee:	f7ff ff9e 	bl	2000012e <graphic_ctrl_bit_set>
200001f2:	e00b      	b.n	2000020c <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001f4:	2008      	movs	r0, #8
200001f6:	f7ff ffbd 	bl	20000174 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001fa:	2010      	movs	r0, #16
200001fc:	f7ff ff97 	bl	2000012e <graphic_ctrl_bit_set>
20000200:	e004      	b.n	2000020c <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
20000202:	2018      	movs	r0, #24
20000204:	f7ff ff93 	bl	2000012e <graphic_ctrl_bit_set>
20000208:	e000      	b.n	2000020c <select_controller+0x5c>
		default: return;
2000020a:	46c0      	nop			; (mov r8, r8)
	}
}
2000020c:	46bd      	mov	sp, r7
2000020e:	b004      	add	sp, #16
20000210:	bd80      	pop	{r7, pc}

20000212 <graphic_wait_ready>:

void graphic_wait_ready(void){
20000212:	b580      	push	{r7, lr}
20000214:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000216:	2040      	movs	r0, #64	; 0x40
20000218:	f7ff ffac 	bl	20000174 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000021c:	4b12      	ldr	r3, [pc, #72]	; (20000268 <graphic_wait_ready+0x56>)
2000021e:	4a13      	ldr	r2, [pc, #76]	; (2000026c <graphic_wait_ready+0x5a>)
20000220:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
20000222:	2002      	movs	r0, #2
20000224:	f7ff ff83 	bl	2000012e <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000228:	2001      	movs	r0, #1
2000022a:	f7ff ffa3 	bl	20000174 <graphic_ctrl_bit_clear>
	delay_500ns();
2000022e:	f7ff ff75 	bl	2000011c <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
20000232:	2040      	movs	r0, #64	; 0x40
20000234:	f7ff ff7b 	bl	2000012e <graphic_ctrl_bit_set>
		delay_500ns();
20000238:	f7ff ff70 	bl	2000011c <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff99 	bl	20000174 <graphic_ctrl_bit_clear>
		delay_500ns();
20000242:	f7ff ff6b 	bl	2000011c <delay_500ns>
		if((* portIdrHigh & LCD_BUSY) == 0){
20000246:	4b0a      	ldr	r3, [pc, #40]	; (20000270 <graphic_wait_ready+0x5e>)
20000248:	781b      	ldrb	r3, [r3, #0]
2000024a:	b2db      	uxtb	r3, r3
2000024c:	b25b      	sxtb	r3, r3
2000024e:	2b00      	cmp	r3, #0
20000250:	da00      	bge.n	20000254 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
20000252:	e7ee      	b.n	20000232 <graphic_wait_ready+0x20>
			break;
20000254:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000256:	2040      	movs	r0, #64	; 0x40
20000258:	f7ff ff69 	bl	2000012e <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000025c:	4b02      	ldr	r3, [pc, #8]	; (20000268 <graphic_wait_ready+0x56>)
2000025e:	4a05      	ldr	r2, [pc, #20]	; (20000274 <graphic_wait_ready+0x62>)
20000260:	601a      	str	r2, [r3, #0]
}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	46bd      	mov	sp, r7
20000266:	bd80      	pop	{r7, pc}
20000268:	40021000 	andmi	r1, r2, r0
2000026c:	00005555 	andeq	r5, r0, r5, asr r5
20000270:	40021011 	andmi	r1, r2, r1, lsl r0
20000274:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000278 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000278:	b580      	push	{r7, lr}
2000027a:	b084      	sub	sp, #16
2000027c:	af00      	add	r7, sp, #0
2000027e:	0002      	movs	r2, r0
20000280:	1dfb      	adds	r3, r7, #7
20000282:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000284:	2040      	movs	r0, #64	; 0x40
20000286:	f7ff ff75 	bl	20000174 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000028a:	4b1b      	ldr	r3, [pc, #108]	; (200002f8 <graphic_read+0x80>)
2000028c:	4a1b      	ldr	r2, [pc, #108]	; (200002fc <graphic_read+0x84>)
2000028e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000290:	2003      	movs	r0, #3
20000292:	f7ff ff4c 	bl	2000012e <graphic_ctrl_bit_set>
	select_controller(controller);
20000296:	1dfb      	adds	r3, r7, #7
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff88 	bl	200001b0 <select_controller>
	delay_500ns();
200002a0:	f7ff ff3c 	bl	2000011c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002a4:	2040      	movs	r0, #64	; 0x40
200002a6:	f7ff ff42 	bl	2000012e <graphic_ctrl_bit_set>
	delay_500ns();
200002aa:	f7ff ff37 	bl	2000011c <delay_500ns>
	uint8_t rv = * portIdrHigh;
200002ae:	4a14      	ldr	r2, [pc, #80]	; (20000300 <graphic_read+0x88>)
200002b0:	230f      	movs	r3, #15
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	7812      	ldrb	r2, [r2, #0]
200002b6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002b8:	2040      	movs	r0, #64	; 0x40
200002ba:	f7ff ff5b 	bl	20000174 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
200002be:	4b0e      	ldr	r3, [pc, #56]	; (200002f8 <graphic_read+0x80>)
200002c0:	4a10      	ldr	r2, [pc, #64]	; (20000304 <graphic_read+0x8c>)
200002c2:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	2b08      	cmp	r3, #8
200002ca:	d104      	bne.n	200002d6 <graphic_read+0x5e>
		select_controller(B_CS1);
200002cc:	2008      	movs	r0, #8
200002ce:	f7ff ff6f 	bl	200001b0 <select_controller>
		graphic_wait_ready();
200002d2:	f7ff ff9e 	bl	20000212 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002d6:	1dfb      	adds	r3, r7, #7
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2b10      	cmp	r3, #16
200002dc:	d104      	bne.n	200002e8 <graphic_read+0x70>
		select_controller(B_CS2);
200002de:	2010      	movs	r0, #16
200002e0:	f7ff ff66 	bl	200001b0 <select_controller>
		graphic_wait_ready();
200002e4:	f7ff ff95 	bl	20000212 <graphic_wait_ready>
	}
	return rv;
200002e8:	230f      	movs	r3, #15
200002ea:	18fb      	adds	r3, r7, r3
200002ec:	781b      	ldrb	r3, [r3, #0]
}
200002ee:	0018      	movs	r0, r3
200002f0:	46bd      	mov	sp, r7
200002f2:	b004      	add	sp, #16
200002f4:	bd80      	pop	{r7, pc}
200002f6:	46c0      	nop			; (mov r8, r8)
200002f8:	40021000 	andmi	r1, r2, r0
200002fc:	00005555 	andeq	r5, r0, r5, asr r5
20000300:	40021011 	andmi	r1, r2, r1, lsl r0
20000304:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000308 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	0002      	movs	r2, r0
20000310:	1dfb      	adds	r3, r7, #7
20000312:	701a      	strb	r2, [r3, #0]
20000314:	1dbb      	adds	r3, r7, #6
20000316:	1c0a      	adds	r2, r1, #0
20000318:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
2000031a:	4a1a      	ldr	r2, [pc, #104]	; (20000384 <graphic_write+0x7c>)
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000322:	1dbb      	adds	r3, r7, #6
20000324:	781b      	ldrb	r3, [r3, #0]
20000326:	0018      	movs	r0, r3
20000328:	f7ff ff42 	bl	200001b0 <select_controller>
	delay_500ns();
2000032c:	f7ff fef6 	bl	2000011c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff fefc 	bl	2000012e <graphic_ctrl_bit_set>
	delay_500ns();
20000336:	f7ff fef1 	bl	2000011c <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff ff1a 	bl	20000174 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	2208      	movs	r2, #8
20000346:	4013      	ands	r3, r2
20000348:	d004      	beq.n	20000354 <graphic_write+0x4c>
		select_controller(B_CS1);
2000034a:	2008      	movs	r0, #8
2000034c:	f7ff ff30 	bl	200001b0 <select_controller>
		graphic_wait_ready();
20000350:	f7ff ff5f 	bl	20000212 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	2210      	movs	r2, #16
2000035a:	4013      	ands	r3, r2
2000035c:	d004      	beq.n	20000368 <graphic_write+0x60>
		select_controller(B_CS2);
2000035e:	2010      	movs	r0, #16
20000360:	f7ff ff26 	bl	200001b0 <select_controller>
		graphic_wait_ready();
20000364:	f7ff ff55 	bl	20000212 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000368:	4b06      	ldr	r3, [pc, #24]	; (20000384 <graphic_write+0x7c>)
2000036a:	2200      	movs	r2, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fedd 	bl	2000012e <graphic_ctrl_bit_set>
	select_controller(0);
20000374:	2000      	movs	r0, #0
20000376:	f7ff ff1b 	bl	200001b0 <select_controller>
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b002      	add	sp, #8
20000380:	bd80      	pop	{r7, pc}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	40021015 	andmi	r1, r2, r5, lsl r0

20000388 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	0002      	movs	r2, r0
20000390:	1dfb      	adds	r3, r7, #7
20000392:	701a      	strb	r2, [r3, #0]
20000394:	1dbb      	adds	r3, r7, #6
20000396:	1c0a      	adds	r2, r1, #0
20000398:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000039a:	2040      	movs	r0, #64	; 0x40
2000039c:	f7ff feea 	bl	20000174 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003a0:	1dbb      	adds	r3, r7, #6
200003a2:	781b      	ldrb	r3, [r3, #0]
200003a4:	0018      	movs	r0, r3
200003a6:	f7ff ff03 	bl	200001b0 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200003aa:	2003      	movs	r0, #3
200003ac:	f7ff fee2 	bl	20000174 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003b0:	1dbb      	adds	r3, r7, #6
200003b2:	781a      	ldrb	r2, [r3, #0]
200003b4:	1dfb      	adds	r3, r7, #7
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0011      	movs	r1, r2
200003ba:	0018      	movs	r0, r3
200003bc:	f7ff ffa4 	bl	20000308 <graphic_write>
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b002      	add	sp, #8
200003c6:	bd80      	pop	{r7, pc}

200003c8 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200003c8:	b580      	push	{r7, lr}
200003ca:	b082      	sub	sp, #8
200003cc:	af00      	add	r7, sp, #0
200003ce:	0002      	movs	r2, r0
200003d0:	1dfb      	adds	r3, r7, #7
200003d2:	701a      	strb	r2, [r3, #0]
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	1c0a      	adds	r2, r1, #0
200003d8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff feca 	bl	20000174 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003e0:	1dbb      	adds	r3, r7, #6
200003e2:	781b      	ldrb	r3, [r3, #0]
200003e4:	0018      	movs	r0, r3
200003e6:	f7ff fee3 	bl	200001b0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003ea:	2001      	movs	r0, #1
200003ec:	f7ff fe9f 	bl	2000012e <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003f0:	2002      	movs	r0, #2
200003f2:	f7ff febf 	bl	20000174 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003f6:	1dbb      	adds	r3, r7, #6
200003f8:	781a      	ldrb	r2, [r3, #0]
200003fa:	1dfb      	adds	r3, r7, #7
200003fc:	781b      	ldrb	r3, [r3, #0]
200003fe:	0011      	movs	r1, r2
20000400:	0018      	movs	r0, r3
20000402:	f7ff ff81 	bl	20000308 <graphic_write>
}
20000406:	46c0      	nop			; (mov r8, r8)
20000408:	46bd      	mov	sp, r7
2000040a:	b002      	add	sp, #8
2000040c:	bd80      	pop	{r7, pc}

2000040e <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
2000040e:	b580      	push	{r7, lr}
20000410:	b082      	sub	sp, #8
20000412:	af00      	add	r7, sp, #0
20000414:	0002      	movs	r2, r0
20000416:	1dfb      	adds	r3, r7, #7
20000418:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000041a:	1dfb      	adds	r3, r7, #7
2000041c:	781b      	ldrb	r3, [r3, #0]
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ff2a 	bl	20000278 <graphic_read>
	return graphic_read(controller);
20000424:	1dfb      	adds	r3, r7, #7
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	0018      	movs	r0, r3
2000042a:	f7ff ff25 	bl	20000278 <graphic_read>
2000042e:	0003      	movs	r3, r0
}
20000430:	0018      	movs	r0, r3
20000432:	46bd      	mov	sp, r7
20000434:	b002      	add	sp, #8
20000436:	bd80      	pop	{r7, pc}

20000438 <graphic_initialize>:

void graphic_initialize(){
20000438:	b580      	push	{r7, lr}
2000043a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000043c:	2040      	movs	r0, #64	; 0x40
2000043e:	f7ff fe76 	bl	2000012e <graphic_ctrl_bit_set>
	delay_mikro(10);
20000442:	200a      	movs	r0, #10
20000444:	f7ff fe26 	bl	20000094 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000448:	2078      	movs	r0, #120	; 0x78
2000044a:	f7ff fe93 	bl	20000174 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000044e:	201e      	movs	r0, #30
20000450:	f7ff fe41 	bl	200000d6 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000454:	2020      	movs	r0, #32
20000456:	f7ff fe6a 	bl	2000012e <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000045a:	2118      	movs	r1, #24
2000045c:	203e      	movs	r0, #62	; 0x3e
2000045e:	f7ff ff93 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000462:	2118      	movs	r1, #24
20000464:	203f      	movs	r0, #63	; 0x3f
20000466:	f7ff ff8f 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000046a:	2118      	movs	r1, #24
2000046c:	20c0      	movs	r0, #192	; 0xc0
2000046e:	f7ff ff8b 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000472:	2118      	movs	r1, #24
20000474:	2040      	movs	r0, #64	; 0x40
20000476:	f7ff ff87 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000047a:	2118      	movs	r1, #24
2000047c:	20b8      	movs	r0, #184	; 0xb8
2000047e:	f7ff ff83 	bl	20000388 <graphic_write_command>
	select_controller(0);
20000482:	2000      	movs	r0, #0
20000484:	f7ff fe94 	bl	200001b0 <select_controller>
}
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	46bd      	mov	sp, r7
2000048c:	bd80      	pop	{r7, pc}

2000048e <graphic_clear_screen>:

void graphic_clear_screen(){
2000048e:	b580      	push	{r7, lr}
20000490:	b082      	sub	sp, #8
20000492:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000494:	1dfb      	adds	r3, r7, #7
20000496:	2200      	movs	r2, #0
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	e023      	b.n	200004e4 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000049c:	1dfb      	adds	r3, r7, #7
2000049e:	781b      	ldrb	r3, [r3, #0]
200004a0:	2248      	movs	r2, #72	; 0x48
200004a2:	4252      	negs	r2, r2
200004a4:	4313      	orrs	r3, r2
200004a6:	b2db      	uxtb	r3, r3
200004a8:	2118      	movs	r1, #24
200004aa:	0018      	movs	r0, r3
200004ac:	f7ff ff6c 	bl	20000388 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200004b0:	2118      	movs	r1, #24
200004b2:	2040      	movs	r0, #64	; 0x40
200004b4:	f7ff ff68 	bl	20000388 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
200004b8:	1dbb      	adds	r3, r7, #6
200004ba:	2200      	movs	r2, #0
200004bc:	701a      	strb	r2, [r3, #0]
200004be:	e008      	b.n	200004d2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
200004c0:	2118      	movs	r1, #24
200004c2:	2000      	movs	r0, #0
200004c4:	f7ff ff80 	bl	200003c8 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
200004c8:	1dbb      	adds	r3, r7, #6
200004ca:	781a      	ldrb	r2, [r3, #0]
200004cc:	1dbb      	adds	r3, r7, #6
200004ce:	3201      	adds	r2, #1
200004d0:	701a      	strb	r2, [r3, #0]
200004d2:	1dbb      	adds	r3, r7, #6
200004d4:	781b      	ldrb	r3, [r3, #0]
200004d6:	2b3f      	cmp	r3, #63	; 0x3f
200004d8:	d9f2      	bls.n	200004c0 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004da:	1dfb      	adds	r3, r7, #7
200004dc:	781a      	ldrb	r2, [r3, #0]
200004de:	1dfb      	adds	r3, r7, #7
200004e0:	3201      	adds	r2, #1
200004e2:	701a      	strb	r2, [r3, #0]
200004e4:	1dfb      	adds	r3, r7, #7
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	2b07      	cmp	r3, #7
200004ea:	d9d7      	bls.n	2000049c <graphic_clear_screen+0xe>
		}
	}
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	46bd      	mov	sp, r7
200004f2:	b002      	add	sp, #8
200004f4:	bd80      	pop	{r7, pc}

200004f6 <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004f6:	b5f0      	push	{r4, r5, r6, r7, lr}
200004f8:	b085      	sub	sp, #20
200004fa:	af00      	add	r7, sp, #0
200004fc:	0004      	movs	r4, r0
200004fe:	0008      	movs	r0, r1
20000500:	0011      	movs	r1, r2
20000502:	1dfb      	adds	r3, r7, #7
20000504:	1c22      	adds	r2, r4, #0
20000506:	701a      	strb	r2, [r3, #0]
20000508:	1dbb      	adds	r3, r7, #6
2000050a:	1c02      	adds	r2, r0, #0
2000050c:	701a      	strb	r2, [r3, #0]
2000050e:	1d7b      	adds	r3, r7, #5
20000510:	1c0a      	adds	r2, r1, #0
20000512:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)){return;}
20000514:	1dfb      	adds	r3, r7, #7
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	2b80      	cmp	r3, #128	; 0x80
2000051a:	d900      	bls.n	2000051e <pixel+0x28>
2000051c:	e0bd      	b.n	2000069a <pixel+0x1a4>
2000051e:	1dbb      	adds	r3, r7, #6
20000520:	781b      	ldrb	r3, [r3, #0]
20000522:	2b40      	cmp	r3, #64	; 0x40
20000524:	d900      	bls.n	20000528 <pixel+0x32>
20000526:	e0b8      	b.n	2000069a <pixel+0x1a4>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000528:	1dbb      	adds	r3, r7, #6
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	3b01      	subs	r3, #1
2000052e:	2b00      	cmp	r3, #0
20000530:	da00      	bge.n	20000534 <pixel+0x3e>
20000532:	3307      	adds	r3, #7
20000534:	10db      	asrs	r3, r3, #3
20000536:	001a      	movs	r2, r3
20000538:	230c      	movs	r3, #12
2000053a:	18fb      	adds	r3, r7, r3
2000053c:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
2000053e:	1dbb      	adds	r3, r7, #6
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	3b01      	subs	r3, #1
20000544:	4a57      	ldr	r2, [pc, #348]	; (200006a4 <pixel+0x1ae>)
20000546:	4013      	ands	r3, r2
20000548:	d504      	bpl.n	20000554 <pixel+0x5e>
2000054a:	3b01      	subs	r3, #1
2000054c:	2208      	movs	r2, #8
2000054e:	4252      	negs	r2, r2
20000550:	4313      	orrs	r3, r2
20000552:	3301      	adds	r3, #1
20000554:	2b07      	cmp	r3, #7
20000556:	d82c      	bhi.n	200005b2 <pixel+0xbc>
20000558:	009a      	lsls	r2, r3, #2
2000055a:	4b53      	ldr	r3, [pc, #332]	; (200006a8 <pixel+0x1b2>)
2000055c:	18d3      	adds	r3, r2, r3
2000055e:	681b      	ldr	r3, [r3, #0]
20000560:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000562:	230f      	movs	r3, #15
20000564:	18fb      	adds	r3, r7, r3
20000566:	2201      	movs	r2, #1
20000568:	701a      	strb	r2, [r3, #0]
2000056a:	e023      	b.n	200005b4 <pixel+0xbe>
		case 1: mask = 2; break;
2000056c:	230f      	movs	r3, #15
2000056e:	18fb      	adds	r3, r7, r3
20000570:	2202      	movs	r2, #2
20000572:	701a      	strb	r2, [r3, #0]
20000574:	e01e      	b.n	200005b4 <pixel+0xbe>
		case 2: mask = 4; break;
20000576:	230f      	movs	r3, #15
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2204      	movs	r2, #4
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	e019      	b.n	200005b4 <pixel+0xbe>
		case 3: mask = 8; break;
20000580:	230f      	movs	r3, #15
20000582:	18fb      	adds	r3, r7, r3
20000584:	2208      	movs	r2, #8
20000586:	701a      	strb	r2, [r3, #0]
20000588:	e014      	b.n	200005b4 <pixel+0xbe>
		case 4: mask = 0x10; break;
2000058a:	230f      	movs	r3, #15
2000058c:	18fb      	adds	r3, r7, r3
2000058e:	2210      	movs	r2, #16
20000590:	701a      	strb	r2, [r3, #0]
20000592:	e00f      	b.n	200005b4 <pixel+0xbe>
		case 5: mask = 0x20; break;
20000594:	230f      	movs	r3, #15
20000596:	18fb      	adds	r3, r7, r3
20000598:	2220      	movs	r2, #32
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	e00a      	b.n	200005b4 <pixel+0xbe>
		case 6: mask = 0x40; break;
2000059e:	230f      	movs	r3, #15
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	2240      	movs	r2, #64	; 0x40
200005a4:	701a      	strb	r2, [r3, #0]
200005a6:	e005      	b.n	200005b4 <pixel+0xbe>
		case 7: mask = 0x80; break;
200005a8:	230f      	movs	r3, #15
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	2280      	movs	r2, #128	; 0x80
200005ae:	701a      	strb	r2, [r3, #0]
200005b0:	e000      	b.n	200005b4 <pixel+0xbe>
		default: break;
200005b2:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
200005b4:	1d7b      	adds	r3, r7, #5
200005b6:	781b      	ldrb	r3, [r3, #0]
200005b8:	2b00      	cmp	r3, #0
200005ba:	d105      	bne.n	200005c8 <pixel+0xd2>
		mask = ~mask;
200005bc:	220f      	movs	r2, #15
200005be:	18bb      	adds	r3, r7, r2
200005c0:	18ba      	adds	r2, r7, r2
200005c2:	7812      	ldrb	r2, [r2, #0]
200005c4:	43d2      	mvns	r2, r2
200005c6:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005c8:	1dfb      	adds	r3, r7, #7
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	2b40      	cmp	r3, #64	; 0x40
200005ce:	d90a      	bls.n	200005e6 <pixel+0xf0>
		controller = B_CS2;
200005d0:	230e      	movs	r3, #14
200005d2:	18fb      	adds	r3, r7, r3
200005d4:	2210      	movs	r2, #16
200005d6:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005d8:	230d      	movs	r3, #13
200005da:	18fb      	adds	r3, r7, r3
200005dc:	1dfa      	adds	r2, r7, #7
200005de:	7812      	ldrb	r2, [r2, #0]
200005e0:	3a41      	subs	r2, #65	; 0x41
200005e2:	701a      	strb	r2, [r3, #0]
200005e4:	e009      	b.n	200005fa <pixel+0x104>
	}else{
		controller = B_CS1;
200005e6:	230e      	movs	r3, #14
200005e8:	18fb      	adds	r3, r7, r3
200005ea:	2208      	movs	r2, #8
200005ec:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005ee:	230d      	movs	r3, #13
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	1dfa      	adds	r2, r7, #7
200005f4:	7812      	ldrb	r2, [r2, #0]
200005f6:	3a01      	subs	r2, #1
200005f8:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005fa:	260d      	movs	r6, #13
200005fc:	19bb      	adds	r3, r7, r6
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2240      	movs	r2, #64	; 0x40
20000602:	4313      	orrs	r3, r2
20000604:	b2da      	uxtb	r2, r3
20000606:	250e      	movs	r5, #14
20000608:	197b      	adds	r3, r7, r5
2000060a:	781b      	ldrb	r3, [r3, #0]
2000060c:	0019      	movs	r1, r3
2000060e:	0010      	movs	r0, r2
20000610:	f7ff feba 	bl	20000388 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000614:	230c      	movs	r3, #12
20000616:	18fb      	adds	r3, r7, r3
20000618:	781b      	ldrb	r3, [r3, #0]
2000061a:	2248      	movs	r2, #72	; 0x48
2000061c:	4252      	negs	r2, r2
2000061e:	4313      	orrs	r3, r2
20000620:	b2da      	uxtb	r2, r3
20000622:	197b      	adds	r3, r7, r5
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	0019      	movs	r1, r3
20000628:	0010      	movs	r0, r2
2000062a:	f7ff fead 	bl	20000388 <graphic_write_command>
	data_holder = graphic_read_data(controller);
2000062e:	230b      	movs	r3, #11
20000630:	18fc      	adds	r4, r7, r3
20000632:	197b      	adds	r3, r7, r5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	0018      	movs	r0, r3
20000638:	f7ff fee9 	bl	2000040e <graphic_read_data>
2000063c:	0003      	movs	r3, r0
2000063e:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000640:	19bb      	adds	r3, r7, r6
20000642:	781b      	ldrb	r3, [r3, #0]
20000644:	2240      	movs	r2, #64	; 0x40
20000646:	4313      	orrs	r3, r2
20000648:	b2da      	uxtb	r2, r3
2000064a:	197b      	adds	r3, r7, r5
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	0019      	movs	r1, r3
20000650:	0010      	movs	r0, r2
20000652:	f7ff fe99 	bl	20000388 <graphic_write_command>
	if(set==1){
20000656:	1d7b      	adds	r3, r7, #5
20000658:	781b      	ldrb	r3, [r3, #0]
2000065a:	2b01      	cmp	r3, #1
2000065c:	d109      	bne.n	20000672 <pixel+0x17c>
		mask |= data_holder;
2000065e:	210f      	movs	r1, #15
20000660:	187b      	adds	r3, r7, r1
20000662:	1879      	adds	r1, r7, r1
20000664:	220b      	movs	r2, #11
20000666:	18ba      	adds	r2, r7, r2
20000668:	7809      	ldrb	r1, [r1, #0]
2000066a:	7812      	ldrb	r2, [r2, #0]
2000066c:	430a      	orrs	r2, r1
2000066e:	701a      	strb	r2, [r3, #0]
20000670:	e008      	b.n	20000684 <pixel+0x18e>
	}else{
		mask &= data_holder;
20000672:	220f      	movs	r2, #15
20000674:	18bb      	adds	r3, r7, r2
20000676:	18ba      	adds	r2, r7, r2
20000678:	210b      	movs	r1, #11
2000067a:	1879      	adds	r1, r7, r1
2000067c:	7812      	ldrb	r2, [r2, #0]
2000067e:	7809      	ldrb	r1, [r1, #0]
20000680:	400a      	ands	r2, r1
20000682:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000684:	230e      	movs	r3, #14
20000686:	18fb      	adds	r3, r7, r3
20000688:	781a      	ldrb	r2, [r3, #0]
2000068a:	230f      	movs	r3, #15
2000068c:	18fb      	adds	r3, r7, r3
2000068e:	781b      	ldrb	r3, [r3, #0]
20000690:	0011      	movs	r1, r2
20000692:	0018      	movs	r0, r3
20000694:	f7ff fe98 	bl	200003c8 <graphic_write_data>
20000698:	e000      	b.n	2000069c <pixel+0x1a6>
	if((x > 128)||(y > 64)){return;}
2000069a:	46c0      	nop			; (mov r8, r8)
}
2000069c:	46bd      	mov	sp, r7
2000069e:	b005      	add	sp, #20
200006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200006a2:	46c0      	nop			; (mov r8, r8)
200006a4:	80000007 	andhi	r0, r0, r7
200006a8:	20000b90 	mulcs	r0, r0, fp

200006ac <set_object_speed>:

// 					OBJECT FUNCTIONS					//

void set_object_speed(POBJECT o, int speedx, int speedy){
200006ac:	b580      	push	{r7, lr}
200006ae:	b084      	sub	sp, #16
200006b0:	af00      	add	r7, sp, #0
200006b2:	60f8      	str	r0, [r7, #12]
200006b4:	60b9      	str	r1, [r7, #8]
200006b6:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
200006b8:	68fb      	ldr	r3, [r7, #12]
200006ba:	68ba      	ldr	r2, [r7, #8]
200006bc:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
200006be:	68fb      	ldr	r3, [r7, #12]
200006c0:	687a      	ldr	r2, [r7, #4]
200006c2:	609a      	str	r2, [r3, #8]
}
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46bd      	mov	sp, r7
200006c8:	b004      	add	sp, #16
200006ca:	bd80      	pop	{r7, pc}

200006cc <draw_object>:

void draw_object(POBJECT o){
200006cc:	b580      	push	{r7, lr}
200006ce:	b084      	sub	sp, #16
200006d0:	af00      	add	r7, sp, #0
200006d2:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006d4:	2300      	movs	r3, #0
200006d6:	60fb      	str	r3, [r7, #12]
200006d8:	e020      	b.n	2000071c <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	681a      	ldr	r2, [r3, #0]
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3304      	adds	r3, #4
200006e2:	005b      	lsls	r3, r3, #1
200006e4:	18d3      	adds	r3, r2, r3
200006e6:	3304      	adds	r3, #4
200006e8:	781a      	ldrb	r2, [r3, #0]
200006ea:	687b      	ldr	r3, [r7, #4]
200006ec:	68db      	ldr	r3, [r3, #12]
200006ee:	b2db      	uxtb	r3, r3
200006f0:	18d3      	adds	r3, r2, r3
200006f2:	b2d8      	uxtb	r0, r3
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	681a      	ldr	r2, [r3, #0]
200006f8:	68fb      	ldr	r3, [r7, #12]
200006fa:	3304      	adds	r3, #4
200006fc:	005b      	lsls	r3, r3, #1
200006fe:	18d3      	adds	r3, r2, r3
20000700:	3305      	adds	r3, #5
20000702:	781a      	ldrb	r2, [r3, #0]
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	691b      	ldr	r3, [r3, #16]
20000708:	b2db      	uxtb	r3, r3
2000070a:	18d3      	adds	r3, r2, r3
2000070c:	b2db      	uxtb	r3, r3
2000070e:	2201      	movs	r2, #1
20000710:	0019      	movs	r1, r3
20000712:	f7ff fef0 	bl	200004f6 <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000716:	68fb      	ldr	r3, [r7, #12]
20000718:	3301      	adds	r3, #1
2000071a:	60fb      	str	r3, [r7, #12]
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	681b      	ldr	r3, [r3, #0]
20000720:	681b      	ldr	r3, [r3, #0]
20000722:	68fa      	ldr	r2, [r7, #12]
20000724:	429a      	cmp	r2, r3
20000726:	dbd8      	blt.n	200006da <draw_object+0xe>
	}
}
20000728:	46c0      	nop			; (mov r8, r8)
2000072a:	46c0      	nop			; (mov r8, r8)
2000072c:	46bd      	mov	sp, r7
2000072e:	b004      	add	sp, #16
20000730:	bd80      	pop	{r7, pc}

20000732 <clear_object>:

void clear_object(POBJECT o){
20000732:	b580      	push	{r7, lr}
20000734:	b084      	sub	sp, #16
20000736:	af00      	add	r7, sp, #0
20000738:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
2000073a:	2300      	movs	r3, #0
2000073c:	60fb      	str	r3, [r7, #12]
2000073e:	e020      	b.n	20000782 <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	681a      	ldr	r2, [r3, #0]
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	3304      	adds	r3, #4
20000748:	005b      	lsls	r3, r3, #1
2000074a:	18d3      	adds	r3, r2, r3
2000074c:	3304      	adds	r3, #4
2000074e:	781a      	ldrb	r2, [r3, #0]
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	68db      	ldr	r3, [r3, #12]
20000754:	b2db      	uxtb	r3, r3
20000756:	18d3      	adds	r3, r2, r3
20000758:	b2d8      	uxtb	r0, r3
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	681a      	ldr	r2, [r3, #0]
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	3304      	adds	r3, #4
20000762:	005b      	lsls	r3, r3, #1
20000764:	18d3      	adds	r3, r2, r3
20000766:	3305      	adds	r3, #5
20000768:	781a      	ldrb	r2, [r3, #0]
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	691b      	ldr	r3, [r3, #16]
2000076e:	b2db      	uxtb	r3, r3
20000770:	18d3      	adds	r3, r2, r3
20000772:	b2db      	uxtb	r3, r3
20000774:	2200      	movs	r2, #0
20000776:	0019      	movs	r1, r3
20000778:	f7ff febd 	bl	200004f6 <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	3301      	adds	r3, #1
20000780:	60fb      	str	r3, [r7, #12]
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	681b      	ldr	r3, [r3, #0]
20000786:	681b      	ldr	r3, [r3, #0]
20000788:	68fa      	ldr	r2, [r7, #12]
2000078a:	429a      	cmp	r2, r3
2000078c:	dbd8      	blt.n	20000740 <clear_object+0xe>
	}
}
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	46c0      	nop			; (mov r8, r8)
20000792:	46bd      	mov	sp, r7
20000794:	b004      	add	sp, #16
20000796:	bd80      	pop	{r7, pc}

20000798 <move_object>:

void move_object(POBJECT o){
20000798:	b580      	push	{r7, lr}
2000079a:	b084      	sub	sp, #16
2000079c:	af00      	add	r7, sp, #0
2000079e:	6078      	str	r0, [r7, #4]
	clear_object(o);
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	0018      	movs	r0, r3
200007a4:	f7ff ffc5 	bl	20000732 <clear_object>
	int newx = o->posx + o->dx;
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	68da      	ldr	r2, [r3, #12]
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	685b      	ldr	r3, [r3, #4]
200007b0:	18d3      	adds	r3, r2, r3
200007b2:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	691a      	ldr	r2, [r3, #16]
200007b8:	687b      	ldr	r3, [r7, #4]
200007ba:	689b      	ldr	r3, [r3, #8]
200007bc:	18d3      	adds	r3, r2, r3
200007be:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
200007c0:	68fb      	ldr	r3, [r7, #12]
200007c2:	2b00      	cmp	r3, #0
200007c4:	dc08      	bgt.n	200007d8 <move_object+0x40>
		o->dx = -o->dx;
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	685b      	ldr	r3, [r3, #4]
200007ca:	425a      	negs	r2, r3
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	605a      	str	r2, [r3, #4]
		o->posx = 1;
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	2201      	movs	r2, #1
200007d4:	60da      	str	r2, [r3, #12]
200007d6:	e03a      	b.n	2000084e <move_object+0xb6>
	}
	else if((newx + o->geo->sizex) > 128){
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	681b      	ldr	r3, [r3, #0]
200007dc:	685a      	ldr	r2, [r3, #4]
200007de:	68fb      	ldr	r3, [r7, #12]
200007e0:	18d3      	adds	r3, r2, r3
200007e2:	2b80      	cmp	r3, #128	; 0x80
200007e4:	dd0c      	ble.n	20000800 <move_object+0x68>
		o->dx = -o->dx;
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	685b      	ldr	r3, [r3, #4]
200007ea:	425a      	negs	r2, r3
200007ec:	687b      	ldr	r3, [r7, #4]
200007ee:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	681b      	ldr	r3, [r3, #0]
200007f4:	685b      	ldr	r3, [r3, #4]
200007f6:	2280      	movs	r2, #128	; 0x80
200007f8:	1ad2      	subs	r2, r2, r3
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	60da      	str	r2, [r3, #12]
200007fe:	e026      	b.n	2000084e <move_object+0xb6>
	}
	else if(newy < 1){
20000800:	68bb      	ldr	r3, [r7, #8]
20000802:	2b00      	cmp	r3, #0
20000804:	dc08      	bgt.n	20000818 <move_object+0x80>
		o->dy = -o->dy;
20000806:	687b      	ldr	r3, [r7, #4]
20000808:	689b      	ldr	r3, [r3, #8]
2000080a:	425a      	negs	r2, r3
2000080c:	687b      	ldr	r3, [r7, #4]
2000080e:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	2201      	movs	r2, #1
20000814:	611a      	str	r2, [r3, #16]
20000816:	e01a      	b.n	2000084e <move_object+0xb6>
	}
	else if(newy > 64 - o->geo->sizey){
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	681b      	ldr	r3, [r3, #0]
2000081c:	689b      	ldr	r3, [r3, #8]
2000081e:	2240      	movs	r2, #64	; 0x40
20000820:	1ad3      	subs	r3, r2, r3
20000822:	68ba      	ldr	r2, [r7, #8]
20000824:	429a      	cmp	r2, r3
20000826:	dd0c      	ble.n	20000842 <move_object+0xaa>
		o->dy = -o->dy;
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	689b      	ldr	r3, [r3, #8]
2000082c:	425a      	negs	r2, r3
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000832:	687b      	ldr	r3, [r7, #4]
20000834:	681b      	ldr	r3, [r3, #0]
20000836:	689b      	ldr	r3, [r3, #8]
20000838:	2240      	movs	r2, #64	; 0x40
2000083a:	1ad2      	subs	r2, r2, r3
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	611a      	str	r2, [r3, #16]
20000840:	e005      	b.n	2000084e <move_object+0xb6>
	}else{
		o->posx = newx;
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	68fa      	ldr	r2, [r7, #12]
20000846:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	68ba      	ldr	r2, [r7, #8]
2000084c:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
2000084e:	687b      	ldr	r3, [r7, #4]
20000850:	0018      	movs	r0, r3
20000852:	f7ff ff3b 	bl	200006cc <draw_object>
}
20000856:	46c0      	nop			; (mov r8, r8)
20000858:	46bd      	mov	sp, r7
2000085a:	b004      	add	sp, #16
2000085c:	bd80      	pop	{r7, pc}

2000085e <keyb>:

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 1, 1, draw_object, clear_object, move_object, set_object_speed};

unsigned char keyb(){
2000085e:	b580      	push	{r7, lr}
20000860:	b082      	sub	sp, #8
20000862:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000864:	2300      	movs	r3, #0
20000866:	607b      	str	r3, [r7, #4]
20000868:	e019      	b.n	2000089e <keyb+0x40>
		activateRow(row);
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	0018      	movs	r0, r3
2000086e:	f000 f81e 	bl	200008ae <activateRow>
		column = readColumn();
20000872:	f000 f867 	bl	20000944 <readColumn>
20000876:	0002      	movs	r2, r0
20000878:	1cfb      	adds	r3, r7, #3
2000087a:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
2000087c:	1cfb      	adds	r3, r7, #3
2000087e:	781b      	ldrb	r3, [r3, #0]
20000880:	2b04      	cmp	r3, #4
20000882:	d009      	beq.n	20000898 <keyb+0x3a>
			key = getKeyValue(row);
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	0018      	movs	r0, r3
20000888:	f000 f842 	bl	20000910 <getKeyValue>
2000088c:	0002      	movs	r2, r0
2000088e:	1cbb      	adds	r3, r7, #2
20000890:	701a      	strb	r2, [r3, #0]
			return key;
20000892:	1cbb      	adds	r3, r7, #2
20000894:	781b      	ldrb	r3, [r3, #0]
20000896:	e006      	b.n	200008a6 <keyb+0x48>
	for(int row = 0; row < 4; row++){
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	3301      	adds	r3, #1
2000089c:	607b      	str	r3, [r7, #4]
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	2b03      	cmp	r3, #3
200008a2:	dde2      	ble.n	2000086a <keyb+0xc>
		}
	}
	return -1;
200008a4:	23ff      	movs	r3, #255	; 0xff
}
200008a6:	0018      	movs	r0, r3
200008a8:	46bd      	mov	sp, r7
200008aa:	b002      	add	sp, #8
200008ac:	bd80      	pop	{r7, pc}

200008ae <activateRow>:

void activateRow(int row){
200008ae:	b580      	push	{r7, lr}
200008b0:	b082      	sub	sp, #8
200008b2:	af00      	add	r7, sp, #0
200008b4:	6078      	str	r0, [r7, #4]
	switch(row){
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	2b03      	cmp	r3, #3
200008ba:	d01b      	beq.n	200008f4 <activateRow+0x46>
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	2b03      	cmp	r3, #3
200008c0:	dc1c      	bgt.n	200008fc <activateRow+0x4e>
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	2b02      	cmp	r3, #2
200008c6:	d011      	beq.n	200008ec <activateRow+0x3e>
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	2b02      	cmp	r3, #2
200008cc:	dc16      	bgt.n	200008fc <activateRow+0x4e>
200008ce:	687b      	ldr	r3, [r7, #4]
200008d0:	2b00      	cmp	r3, #0
200008d2:	d003      	beq.n	200008dc <activateRow+0x2e>
200008d4:	687b      	ldr	r3, [r7, #4]
200008d6:	2b01      	cmp	r3, #1
200008d8:	d004      	beq.n	200008e4 <activateRow+0x36>
200008da:	e00f      	b.n	200008fc <activateRow+0x4e>
		case 0: * KeypadOut = 0x10; break;
200008dc:	4b0b      	ldr	r3, [pc, #44]	; (2000090c <activateRow+0x5e>)
200008de:	2210      	movs	r2, #16
200008e0:	701a      	strb	r2, [r3, #0]
200008e2:	e00f      	b.n	20000904 <activateRow+0x56>
		case 1: * KeypadOut = 0x20; break;
200008e4:	4b09      	ldr	r3, [pc, #36]	; (2000090c <activateRow+0x5e>)
200008e6:	2220      	movs	r2, #32
200008e8:	701a      	strb	r2, [r3, #0]
200008ea:	e00b      	b.n	20000904 <activateRow+0x56>
		case 2: * KeypadOut = 0x40; break;
200008ec:	4b07      	ldr	r3, [pc, #28]	; (2000090c <activateRow+0x5e>)
200008ee:	2240      	movs	r2, #64	; 0x40
200008f0:	701a      	strb	r2, [r3, #0]
200008f2:	e007      	b.n	20000904 <activateRow+0x56>
		case 3: * KeypadOut = 0x80; break;
200008f4:	4b05      	ldr	r3, [pc, #20]	; (2000090c <activateRow+0x5e>)
200008f6:	2280      	movs	r2, #128	; 0x80
200008f8:	701a      	strb	r2, [r3, #0]
200008fa:	e003      	b.n	20000904 <activateRow+0x56>
		default: * KeypadOut = 0x0;
200008fc:	4b03      	ldr	r3, [pc, #12]	; (2000090c <activateRow+0x5e>)
200008fe:	2200      	movs	r2, #0
20000900:	701a      	strb	r2, [r3, #0]
	}
}
20000902:	46c0      	nop			; (mov r8, r8)
20000904:	46c0      	nop			; (mov r8, r8)
20000906:	46bd      	mov	sp, r7
20000908:	b002      	add	sp, #8
2000090a:	bd80      	pop	{r7, pc}
2000090c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000910 <getKeyValue>:

int getKeyValue(int row){
20000910:	b5b0      	push	{r4, r5, r7, lr}
20000912:	b086      	sub	sp, #24
20000914:	af00      	add	r7, sp, #0
20000916:	6078      	str	r0, [r7, #4]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
20000918:	2408      	movs	r4, #8
2000091a:	193b      	adds	r3, r7, r4
2000091c:	4a08      	ldr	r2, [pc, #32]	; (20000940 <getKeyValue+0x30>)
2000091e:	ca23      	ldmia	r2!, {r0, r1, r5}
20000920:	c323      	stmia	r3!, {r0, r1, r5}
20000922:	6812      	ldr	r2, [r2, #0]
20000924:	601a      	str	r2, [r3, #0]
	return keys[row][readColumn()];
20000926:	f000 f80d 	bl	20000944 <readColumn>
2000092a:	0001      	movs	r1, r0
2000092c:	193a      	adds	r2, r7, r4
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	009b      	lsls	r3, r3, #2
20000932:	18d3      	adds	r3, r2, r3
20000934:	5c5b      	ldrb	r3, [r3, r1]
}
20000936:	0018      	movs	r0, r3
20000938:	46bd      	mov	sp, r7
2000093a:	b006      	add	sp, #24
2000093c:	bdb0      	pop	{r4, r5, r7, pc}
2000093e:	46c0      	nop			; (mov r8, r8)
20000940:	20000bb0 			; <UNDEFINED> instruction: 0x20000bb0

20000944 <readColumn>:

int readColumn(){
20000944:	b580      	push	{r7, lr}
20000946:	b082      	sub	sp, #8
20000948:	af00      	add	r7, sp, #0
	unsigned char c = * KeypadIn;
2000094a:	4a12      	ldr	r2, [pc, #72]	; (20000994 <readColumn+0x50>)
2000094c:	1dfb      	adds	r3, r7, #7
2000094e:	7812      	ldrb	r2, [r2, #0]
20000950:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
20000952:	1dfb      	adds	r3, r7, #7
20000954:	781b      	ldrb	r3, [r3, #0]
20000956:	2208      	movs	r2, #8
20000958:	4013      	ands	r3, r2
2000095a:	d001      	beq.n	20000960 <readColumn+0x1c>
2000095c:	2303      	movs	r3, #3
2000095e:	e015      	b.n	2000098c <readColumn+0x48>
	if(c & 0x4){return 2;}
20000960:	1dfb      	adds	r3, r7, #7
20000962:	781b      	ldrb	r3, [r3, #0]
20000964:	2204      	movs	r2, #4
20000966:	4013      	ands	r3, r2
20000968:	d001      	beq.n	2000096e <readColumn+0x2a>
2000096a:	2302      	movs	r3, #2
2000096c:	e00e      	b.n	2000098c <readColumn+0x48>
	if(c & 0x2){return 1;}
2000096e:	1dfb      	adds	r3, r7, #7
20000970:	781b      	ldrb	r3, [r3, #0]
20000972:	2202      	movs	r2, #2
20000974:	4013      	ands	r3, r2
20000976:	d001      	beq.n	2000097c <readColumn+0x38>
20000978:	2301      	movs	r3, #1
2000097a:	e007      	b.n	2000098c <readColumn+0x48>
	if(c & 0x1){return 0;}
2000097c:	1dfb      	adds	r3, r7, #7
2000097e:	781b      	ldrb	r3, [r3, #0]
20000980:	2201      	movs	r2, #1
20000982:	4013      	ands	r3, r2
20000984:	d001      	beq.n	2000098a <readColumn+0x46>
20000986:	2300      	movs	r3, #0
20000988:	e000      	b.n	2000098c <readColumn+0x48>
	return 4;
2000098a:	2304      	movs	r3, #4
}
2000098c:	0018      	movs	r0, r3
2000098e:	46bd      	mov	sp, r7
20000990:	b002      	add	sp, #8
20000992:	bd80      	pop	{r7, pc}
20000994:	40020c11 	andmi	r0, r2, r1, lsl ip

20000998 <main>:

void main(void){
20000998:	b590      	push	{r4, r7, lr}
2000099a:	b083      	sub	sp, #12
2000099c:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000099e:	4b1f      	ldr	r3, [pc, #124]	; (20000a1c <main+0x84>)
200009a0:	607b      	str	r3, [r7, #4]
	init_app();
200009a2:	f7ff fb35 	bl	20000010 <init_app>
	graphic_initialize();
200009a6:	f7ff fd47 	bl	20000438 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	while(1){
		p->move(p);
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	69db      	ldr	r3, [r3, #28]
200009ae:	687a      	ldr	r2, [r7, #4]
200009b0:	0010      	movs	r0, r2
200009b2:	4798      	blx	r3
		delay_milli(40);
200009b4:	2028      	movs	r0, #40	; 0x28
200009b6:	f7ff fb8e 	bl	200000d6 <delay_milli>
		uint8_t c = keyb();
200009ba:	1cfc      	adds	r4, r7, #3
200009bc:	f7ff ff4f 	bl	2000085e <keyb>
200009c0:	0003      	movs	r3, r0
200009c2:	7023      	strb	r3, [r4, #0]
		switch(c){
200009c4:	1cfb      	adds	r3, r7, #3
200009c6:	781b      	ldrb	r3, [r3, #0]
200009c8:	2b08      	cmp	r3, #8
200009ca:	d01f      	beq.n	20000a0c <main+0x74>
200009cc:	dced      	bgt.n	200009aa <main+0x12>
200009ce:	2b06      	cmp	r3, #6
200009d0:	d005      	beq.n	200009de <main+0x46>
200009d2:	dcea      	bgt.n	200009aa <main+0x12>
200009d4:	2b02      	cmp	r3, #2
200009d6:	d011      	beq.n	200009fc <main+0x64>
200009d8:	2b04      	cmp	r3, #4
200009da:	d007      	beq.n	200009ec <main+0x54>
200009dc:	e01d      	b.n	20000a1a <main+0x82>
			case 6: p->set_speed(p,2,0);break;
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	6a1b      	ldr	r3, [r3, #32]
200009e2:	6878      	ldr	r0, [r7, #4]
200009e4:	2200      	movs	r2, #0
200009e6:	2102      	movs	r1, #2
200009e8:	4798      	blx	r3
200009ea:	e016      	b.n	20000a1a <main+0x82>
			case 4: p->set_speed(p,-2,0);break;
200009ec:	687b      	ldr	r3, [r7, #4]
200009ee:	6a1b      	ldr	r3, [r3, #32]
200009f0:	2202      	movs	r2, #2
200009f2:	4251      	negs	r1, r2
200009f4:	6878      	ldr	r0, [r7, #4]
200009f6:	2200      	movs	r2, #0
200009f8:	4798      	blx	r3
200009fa:	e00e      	b.n	20000a1a <main+0x82>
			case 2: p->set_speed(p,0,-2);break;
200009fc:	687b      	ldr	r3, [r7, #4]
200009fe:	6a1b      	ldr	r3, [r3, #32]
20000a00:	2202      	movs	r2, #2
20000a02:	4252      	negs	r2, r2
20000a04:	6878      	ldr	r0, [r7, #4]
20000a06:	2100      	movs	r1, #0
20000a08:	4798      	blx	r3
20000a0a:	e006      	b.n	20000a1a <main+0x82>
			case 8: p->set_speed(p,0,2);break;
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	6a1b      	ldr	r3, [r3, #32]
20000a10:	6878      	ldr	r0, [r7, #4]
20000a12:	2202      	movs	r2, #2
20000a14:	2100      	movs	r1, #0
20000a16:	4798      	blx	r3
20000a18:	46c0      	nop			; (mov r8, r8)
	while(1){
20000a1a:	e7c6      	b.n	200009aa <main+0x12>
20000a1c:	20000b6c 	andcs	r0, r0, ip, ror #22

20000a20 <__udivsi3>:
20000a20:	2200      	movs	r2, #0
20000a22:	0843      	lsrs	r3, r0, #1
20000a24:	428b      	cmp	r3, r1
20000a26:	d374      	bcc.n	20000b12 <__udivsi3+0xf2>
20000a28:	0903      	lsrs	r3, r0, #4
20000a2a:	428b      	cmp	r3, r1
20000a2c:	d35f      	bcc.n	20000aee <__udivsi3+0xce>
20000a2e:	0a03      	lsrs	r3, r0, #8
20000a30:	428b      	cmp	r3, r1
20000a32:	d344      	bcc.n	20000abe <__udivsi3+0x9e>
20000a34:	0b03      	lsrs	r3, r0, #12
20000a36:	428b      	cmp	r3, r1
20000a38:	d328      	bcc.n	20000a8c <__udivsi3+0x6c>
20000a3a:	0c03      	lsrs	r3, r0, #16
20000a3c:	428b      	cmp	r3, r1
20000a3e:	d30d      	bcc.n	20000a5c <__udivsi3+0x3c>
20000a40:	22ff      	movs	r2, #255	; 0xff
20000a42:	0209      	lsls	r1, r1, #8
20000a44:	ba12      	rev	r2, r2
20000a46:	0c03      	lsrs	r3, r0, #16
20000a48:	428b      	cmp	r3, r1
20000a4a:	d302      	bcc.n	20000a52 <__udivsi3+0x32>
20000a4c:	1212      	asrs	r2, r2, #8
20000a4e:	0209      	lsls	r1, r1, #8
20000a50:	d065      	beq.n	20000b1e <__udivsi3+0xfe>
20000a52:	0b03      	lsrs	r3, r0, #12
20000a54:	428b      	cmp	r3, r1
20000a56:	d319      	bcc.n	20000a8c <__udivsi3+0x6c>
20000a58:	e000      	b.n	20000a5c <__udivsi3+0x3c>
20000a5a:	0a09      	lsrs	r1, r1, #8
20000a5c:	0bc3      	lsrs	r3, r0, #15
20000a5e:	428b      	cmp	r3, r1
20000a60:	d301      	bcc.n	20000a66 <__udivsi3+0x46>
20000a62:	03cb      	lsls	r3, r1, #15
20000a64:	1ac0      	subs	r0, r0, r3
20000a66:	4152      	adcs	r2, r2
20000a68:	0b83      	lsrs	r3, r0, #14
20000a6a:	428b      	cmp	r3, r1
20000a6c:	d301      	bcc.n	20000a72 <__udivsi3+0x52>
20000a6e:	038b      	lsls	r3, r1, #14
20000a70:	1ac0      	subs	r0, r0, r3
20000a72:	4152      	adcs	r2, r2
20000a74:	0b43      	lsrs	r3, r0, #13
20000a76:	428b      	cmp	r3, r1
20000a78:	d301      	bcc.n	20000a7e <__udivsi3+0x5e>
20000a7a:	034b      	lsls	r3, r1, #13
20000a7c:	1ac0      	subs	r0, r0, r3
20000a7e:	4152      	adcs	r2, r2
20000a80:	0b03      	lsrs	r3, r0, #12
20000a82:	428b      	cmp	r3, r1
20000a84:	d301      	bcc.n	20000a8a <__udivsi3+0x6a>
20000a86:	030b      	lsls	r3, r1, #12
20000a88:	1ac0      	subs	r0, r0, r3
20000a8a:	4152      	adcs	r2, r2
20000a8c:	0ac3      	lsrs	r3, r0, #11
20000a8e:	428b      	cmp	r3, r1
20000a90:	d301      	bcc.n	20000a96 <__udivsi3+0x76>
20000a92:	02cb      	lsls	r3, r1, #11
20000a94:	1ac0      	subs	r0, r0, r3
20000a96:	4152      	adcs	r2, r2
20000a98:	0a83      	lsrs	r3, r0, #10
20000a9a:	428b      	cmp	r3, r1
20000a9c:	d301      	bcc.n	20000aa2 <__udivsi3+0x82>
20000a9e:	028b      	lsls	r3, r1, #10
20000aa0:	1ac0      	subs	r0, r0, r3
20000aa2:	4152      	adcs	r2, r2
20000aa4:	0a43      	lsrs	r3, r0, #9
20000aa6:	428b      	cmp	r3, r1
20000aa8:	d301      	bcc.n	20000aae <__udivsi3+0x8e>
20000aaa:	024b      	lsls	r3, r1, #9
20000aac:	1ac0      	subs	r0, r0, r3
20000aae:	4152      	adcs	r2, r2
20000ab0:	0a03      	lsrs	r3, r0, #8
20000ab2:	428b      	cmp	r3, r1
20000ab4:	d301      	bcc.n	20000aba <__udivsi3+0x9a>
20000ab6:	020b      	lsls	r3, r1, #8
20000ab8:	1ac0      	subs	r0, r0, r3
20000aba:	4152      	adcs	r2, r2
20000abc:	d2cd      	bcs.n	20000a5a <__udivsi3+0x3a>
20000abe:	09c3      	lsrs	r3, r0, #7
20000ac0:	428b      	cmp	r3, r1
20000ac2:	d301      	bcc.n	20000ac8 <__udivsi3+0xa8>
20000ac4:	01cb      	lsls	r3, r1, #7
20000ac6:	1ac0      	subs	r0, r0, r3
20000ac8:	4152      	adcs	r2, r2
20000aca:	0983      	lsrs	r3, r0, #6
20000acc:	428b      	cmp	r3, r1
20000ace:	d301      	bcc.n	20000ad4 <__udivsi3+0xb4>
20000ad0:	018b      	lsls	r3, r1, #6
20000ad2:	1ac0      	subs	r0, r0, r3
20000ad4:	4152      	adcs	r2, r2
20000ad6:	0943      	lsrs	r3, r0, #5
20000ad8:	428b      	cmp	r3, r1
20000ada:	d301      	bcc.n	20000ae0 <__udivsi3+0xc0>
20000adc:	014b      	lsls	r3, r1, #5
20000ade:	1ac0      	subs	r0, r0, r3
20000ae0:	4152      	adcs	r2, r2
20000ae2:	0903      	lsrs	r3, r0, #4
20000ae4:	428b      	cmp	r3, r1
20000ae6:	d301      	bcc.n	20000aec <__udivsi3+0xcc>
20000ae8:	010b      	lsls	r3, r1, #4
20000aea:	1ac0      	subs	r0, r0, r3
20000aec:	4152      	adcs	r2, r2
20000aee:	08c3      	lsrs	r3, r0, #3
20000af0:	428b      	cmp	r3, r1
20000af2:	d301      	bcc.n	20000af8 <__udivsi3+0xd8>
20000af4:	00cb      	lsls	r3, r1, #3
20000af6:	1ac0      	subs	r0, r0, r3
20000af8:	4152      	adcs	r2, r2
20000afa:	0883      	lsrs	r3, r0, #2
20000afc:	428b      	cmp	r3, r1
20000afe:	d301      	bcc.n	20000b04 <__udivsi3+0xe4>
20000b00:	008b      	lsls	r3, r1, #2
20000b02:	1ac0      	subs	r0, r0, r3
20000b04:	4152      	adcs	r2, r2
20000b06:	0843      	lsrs	r3, r0, #1
20000b08:	428b      	cmp	r3, r1
20000b0a:	d301      	bcc.n	20000b10 <__udivsi3+0xf0>
20000b0c:	004b      	lsls	r3, r1, #1
20000b0e:	1ac0      	subs	r0, r0, r3
20000b10:	4152      	adcs	r2, r2
20000b12:	1a41      	subs	r1, r0, r1
20000b14:	d200      	bcs.n	20000b18 <__udivsi3+0xf8>
20000b16:	4601      	mov	r1, r0
20000b18:	4152      	adcs	r2, r2
20000b1a:	4610      	mov	r0, r2
20000b1c:	4770      	bx	lr
20000b1e:	e7ff      	b.n	20000b20 <__udivsi3+0x100>
20000b20:	b501      	push	{r0, lr}
20000b22:	2000      	movs	r0, #0
20000b24:	f000 f806 	bl	20000b34 <__aeabi_idiv0>
20000b28:	bd02      	pop	{r1, pc}
20000b2a:	46c0      	nop			; (mov r8, r8)

20000b2c <__aeabi_uidivmod>:
20000b2c:	2900      	cmp	r1, #0
20000b2e:	d0f7      	beq.n	20000b20 <__udivsi3+0x100>
20000b30:	e776      	b.n	20000a20 <__udivsi3>
20000b32:	4770      	bx	lr

20000b34 <__aeabi_idiv0>:
20000b34:	4770      	bx	lr
20000b36:	46c0      	nop			; (mov r8, r8)

20000b38 <ball_geometry>:
20000b38:	0000000c 	andeq	r0, r0, ip
20000b3c:	00000004 	andeq	r0, r0, r4
20000b40:	00000004 	andeq	r0, r0, r4
20000b44:	02000100 	andeq	r0, r0, #0, 2
20000b48:	01010001 	tsteq	r1, r1
20000b4c:	03010201 	movweq	r0, #4609	; 0x1201
20000b50:	01020002 	tsteq	r2, r2
20000b54:	03020202 	movweq	r0, #8706	; 0x2202
20000b58:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000b6c <ball>:
20000b6c:	20000b38 	andcs	r0, r0, r8, lsr fp
	...
20000b78:	00000001 	andeq	r0, r0, r1
20000b7c:	00000001 	andeq	r0, r0, r1
20000b80:	200006cd 	andcs	r0, r0, sp, asr #13
20000b84:	20000733 	andcs	r0, r0, r3, lsr r7
20000b88:	20000799 	mulcs	r0, r9, r7
20000b8c:	200006ad 	andcs	r0, r0, sp, lsr #13
20000b90:	20000562 	andcs	r0, r0, r2, ror #10
20000b94:	2000056c 	andcs	r0, r0, ip, ror #10
20000b98:	20000576 	andcs	r0, r0, r6, ror r5
20000b9c:	20000580 	andcs	r0, r0, r0, lsl #11
20000ba0:	2000058a 	andcs	r0, r0, sl, lsl #11
20000ba4:	20000594 	mulcs	r0, r4, r5
20000ba8:	2000059e 	mulcs	r0, lr, r5
20000bac:	200005a8 	andcs	r0, r0, r8, lsr #11
20000bb0:	0a030201 	beq	200c13bc <ball+0xc0850>
20000bb4:	0b060504 	bleq	20181fcc <ball+0x181460>
20000bb8:	0c090807 	stceq	8, cr0, [r9], {7}
20000bbc:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000018c 	andeq	r0, r0, ip, lsl #3
  10:	0002700c 	andeq	r7, r2, ip
  14:	00031700 	andeq	r1, r3, r0, lsl #14
	...
  24:	016c0200 	cmneq	ip, r0, lsl #4
  28:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000086 	andeq	r0, r0, r6, lsl #1
  38:	00006d04 	andeq	r6, r0, r4, lsl #26
  3c:	3b010200 	blcc	40844 <startup-0x1ffbf7bc>
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a3c01 	strcs	r3, [sl, #-3073]	; 0xfffff3ff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250a3d 	eoreq	r0, r5, sp, lsr sl
  58:	00010000 	andeq	r0, r1, r0
  5c:	00008002 	andeq	r8, r0, r2
  60:	023e0100 	eorseq	r0, lr, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00016204 	andeq	r6, r1, r4, lsl #4
  6c:	40013400 	andmi	r3, r1, r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	030d0600 	movweq	r0, #54784	; 0xd600
  78:	41010000 	mrsmi	r0, (UNDEF: 1)
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	74060000 	strvc	r0, [r6], #-0
  84:	01000001 	tsteq	r0, r1
  88:	00a90642 	adceq	r0, r9, r2, asr #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	0000017a 	andeq	r0, r0, sl, ror r1
  94:	a9064301 	stmdbge	r6, {r0, r8, r9, lr}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0084401 	andlt	r4, r8, r1, lsl #8
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	55070403 	strpl	r0, [r7, #-1027]	; 0xfffffbfd
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68034501 	stmdavs	r3, {r0, r8, sl, lr}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e4501 	svcle	0x000e4501
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02f60400 	rscseq	r0, r6, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	01661047 	cmneq	r6, r7, asr #32
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30c48 	sbcseq	r0, r3, r8, asr #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a90649 	adceq	r0, r9, r9, asr #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90a49 	adceq	r0, r9, r9, asr #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	000002fb 	strdeq	r0, [r0], -fp
 11c:	a9064a01 	stmdbge	r6, {r0, r9, fp, lr}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00009406 	andeq	r9, r0, r6, lsl #8
 128:	0b4a0100 	bleq	1280530 <startup-0x1ed7fad0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02280610 	eoreq	r0, r8, #16, 12	; 0x1000000
 134:	4b010000 	blmi	4013c <startup-0x1ffbfec4>
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	30061400 	andcc	r1, r6, r0, lsl #8
 140:	01000001 	tsteq	r0, r1
 144:	01770a4c 	cmneq	r7, ip, asr #20
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000038 	andeq	r0, r0, r8, lsr r0
 150:	770a4d01 	strvc	r4, [sl, -r1, lsl #26]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00026006 	andeq	r6, r2, r6
 15c:	0a4e0100 	beq	1380564 <startup-0x1ec7fa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	00038202 	andeq	r8, r3, r2, lsl #4
 19c:	034f0100 	movteq	r0, #61696	; 0xf100
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	00038102 	andeq	r8, r3, r2, lsl #2
 1a8:	0c4f0100 	stfeqe	f0, [pc], {-0}
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0000990d 	andeq	r9, r0, sp, lsl #18
 1b4:	01620100 	cmneq	r2, r0, lsl #2
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	38030500 	stmdacc	r3, {r8, sl}
 1c0:	0d20000b 	stceq	0, cr0, [r0, #-44]!	; 0xffffffd4
 1c4:	00000223 	andeq	r0, r0, r3, lsr #4
 1c8:	0f016301 	svceq	0x00016301
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	0b6c0305 	bleq	1b00dec <startup-0x1e4ff214>
 1d4:	eb0e2000 	bl	3881dc <startup-0x1fc77e24>
 1d8:	01000000 	mrseq	r0, (UNDEF: 0)
 1dc:	9806018c 	stmdals	r6, {r2, r3, r7, r8}
 1e0:	88200009 	stmdahi	r0!, {r0, r3}
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0002149c 	muleq	r2, ip, r4
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a018d01 	beq	635fc <startup-0x1ff9ca04>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 1fc:	200009aa 	andcs	r0, r0, sl, lsr #19
 200:	00000070 	andeq	r0, r0, r0, ror r0
 204:	0100630f 	tsteq	r0, pc, lsl #6
 208:	250b0196 	strcs	r0, [fp, #-406]	; 0xfffffe6a
 20c:	02000000 	andeq	r0, r0, #0
 210:	00006b91 	muleq	r0, r1, fp
 214:	0000db11 	andeq	sp, r0, r1, lsl fp
 218:	01830100 	orreq	r0, r3, r0, lsl #2
 21c:	0000a905 	andeq	sl, r0, r5, lsl #18
 220:	00094400 	andeq	r4, r9, r0, lsl #8
 224:	00005420 	andeq	r5, r0, r0, lsr #8
 228:	3e9c0100 	fmlcce	f0, f4, f0
 22c:	0f000002 	svceq	0x00000002
 230:	84010063 	strhi	r0, [r1], #-99	; 0xffffff9d
 234:	00311001 	eorseq	r1, r1, r1
 238:	91020000 	mrsls	r0, (UNDEF: 2)
 23c:	bc120077 	ldclt	0, cr0, [r2], {119}	; 0x77
 240:	01000000 	mrseq	r0, (UNDEF: 0)
 244:	a905017e 	stmdbge	r5, {r1, r2, r3, r4, r5, r6, r8}
 248:	10000000 	andne	r0, r0, r0
 24c:	34200009 	strtcc	r0, [r0], #-9
 250:	01000000 	mrseq	r0, (UNDEF: 0)
 254:	0002899c 	muleq	r2, ip, r9
 258:	6f721300 	svcvs	0x00721300
 25c:	7e010077 	mcrvc	0, 0, r0, cr1, cr7, {3}
 260:	00a91501 	adceq	r1, r9, r1, lsl #10
 264:	91020000 	mrsls	r0, (UNDEF: 2)
 268:	036e0d5c 	cmneq	lr, #92, 26	; 0x1700
 26c:	7f010000 	svcvc	0x00010000
 270:	02891001 	addeq	r1, r9, #1
 274:	91020000 	mrsls	r0, (UNDEF: 2)
 278:	00db1460 	sbcseq	r1, fp, r0, ror #8
 27c:	6a010000 	bvs	40284 <startup-0x1ffbfd7c>
 280:	00a90c01 	adceq	r0, r9, r1, lsl #24
 284:	00150000 	andseq	r0, r5, r0
 288:	00310800 	eorseq	r0, r1, r0, lsl #16
 28c:	029f0000 	addseq	r0, pc, #0
 290:	c0090000 	andgt	r0, r9, r0
 294:	03000000 	movweq	r0, #0
 298:	0000c009 	andeq	ip, r0, r9
 29c:	16000300 	strne	r0, [r0], -r0, lsl #6
 2a0:	000000cf 	andeq	r0, r0, pc, asr #1
 2a4:	06017401 	streq	r7, [r1], -r1, lsl #8
 2a8:	200008ae 	andcs	r0, r0, lr, lsr #17
 2ac:	00000062 	andeq	r0, r0, r2, rrx
 2b0:	02c79c01 	sbceq	r9, r7, #256	; 0x100
 2b4:	72130000 	andsvc	r0, r3, #0
 2b8:	0100776f 	tsteq	r0, pc, ror #14
 2bc:	a9160174 	ldmdbge	r6, {r2, r4, r5, r6, r8}
 2c0:	02000000 	andeq	r0, r0, #0
 2c4:	17007491 			; <UNDEFINED> instruction: 0x17007491
 2c8:	00000232 	andeq	r0, r0, r2, lsr r2
 2cc:	0f016501 	svceq	0x00016501
 2d0:	00000031 	andeq	r0, r0, r1, lsr r0
 2d4:	2000085e 	andcs	r0, r0, lr, asr r8
 2d8:	00000050 	andeq	r0, r0, r0, asr r0
 2dc:	03669c01 	cmneq	r6, #256	; 0x100
 2e0:	b50d0000 	strlt	r0, [sp, #-0]
 2e4:	01000000 	mrseq	r0, (UNDEF: 0)
 2e8:	66070166 	strvs	r0, [r7], -r6, ror #2
 2ec:	02000003 	andeq	r0, r0, #3
 2f0:	6b0f7391 	blvs	3dd13c <startup-0x1fc22ec4>
 2f4:	01007965 	tsteq	r0, r5, ror #18
 2f8:	66070167 	strvs	r0, [r7], -r7, ror #2
 2fc:	02000003 	andeq	r0, r0, #3
 300:	64107291 	ldrvs	r7, [r0], #-657	; 0xfffffd6f
 304:	40200008 	eormi	r0, r0, r8
 308:	0f000000 	svceq	0x00000000
 30c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 310:	0a016801 	beq	5a31c <startup-0x1ffa5ce4>
 314:	000000a9 	andeq	r0, r0, r9, lsr #1
 318:	10749102 	rsbsne	r9, r4, r2, lsl #2
 31c:	2000086a 	andcs	r0, r0, sl, ror #16
 320:	0000002e 	andeq	r0, r0, lr, lsr #32
 324:	0000cf18 	andeq	ip, r0, r8, lsl pc
 328:	01690100 	cmneq	r9, r0, lsl #2
 32c:	0000a903 	andeq	sl, r0, r3, lsl #18
 330:	00033700 	andeq	r3, r3, r0, lsl #14
 334:	18001500 	stmdane	r0, {r8, sl, ip}
 338:	000000db 	ldrdeq	r0, [r0], -fp
 33c:	0c016a01 			; <UNDEFINED> instruction: 0x0c016a01
 340:	000000a9 	andeq	r0, r0, r9, lsr #1
 344:	0000034a 	andeq	r0, r0, sl, asr #6
 348:	84100015 	ldrhi	r0, [r0], #-21	; 0xffffffeb
 34c:	14200008 	strtne	r0, [r0], #-8
 350:	14000000 	strne	r0, [r0], #-0
 354:	000000bc 	strheq	r0, [r0], -ip
 358:	0a016d01 	beq	5b764 <startup-0x1ffa489c>
 35c:	000000a9 	andeq	r0, r0, r9, lsr #1
 360:	00000015 	andeq	r0, r0, r5, lsl r0
 364:	01030000 	mrseq	r0, (UNDEF: 3)
 368:	00008f08 	andeq	r8, r0, r8, lsl #30
 36c:	002c0e00 	eoreq	r0, ip, r0, lsl #28
 370:	47010000 	strmi	r0, [r1, -r0]
 374:	07980601 	ldreq	r0, [r8, r1, lsl #12]
 378:	00c62000 	sbceq	r2, r6, r0
 37c:	9c010000 	stcls	0, cr0, [r1], {-0}
 380:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 384:	01006f13 	tsteq	r0, r3, lsl pc
 388:	a41a0147 	ldrge	r0, [sl], #-327	; 0xfffffeb9
 38c:	02000001 	andeq	r0, r0, #1
 390:	4b0d6c91 	blmi	35b5dc <startup-0x1fca4a24>
 394:	01000001 	tsteq	r0, r1
 398:	a9060149 	stmdbge	r6, {r0, r3, r6, r8}
 39c:	02000000 	andeq	r0, r0, #0
 3a0:	500d7491 	mulpl	sp, r1, r4
 3a4:	01000001 	tsteq	r0, r1
 3a8:	a906014a 	stmdbge	r6, {r1, r3, r6, r8}
 3ac:	02000000 	andeq	r0, r0, #0
 3b0:	0e007091 	mcreq	0, 0, r7, cr0, cr1, {4}
 3b4:	000002d8 	ldrdeq	r0, [r0], -r8
 3b8:	06014101 	streq	r4, [r1], -r1, lsl #2
 3bc:	20000732 	andcs	r0, r0, r2, lsr r7
 3c0:	00000066 	andeq	r0, r0, r6, rrx
 3c4:	03f19c01 	mvnseq	r9, #256	; 0x100
 3c8:	6f130000 	svcvs	0x00130000
 3cc:	01410100 	mrseq	r0, (UNDEF: 81)
 3d0:	0001a41b 	andeq	sl, r1, fp, lsl r4
 3d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3d8:	00073a10 	andeq	r3, r7, r0, lsl sl
 3dc:	00005420 	andeq	r5, r0, r0, lsr #8
 3e0:	00740f00 	rsbseq	r0, r4, r0, lsl #30
 3e4:	0a014201 	beq	50bf0 <startup-0x1ffaf410>
 3e8:	000000a9 	andeq	r0, r0, r9, lsr #1
 3ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3f0:	004f0e00 	subeq	r0, pc, r0, lsl #28
 3f4:	3b010000 	blcc	403fc <startup-0x1ffbfc04>
 3f8:	06cc0601 	strbeq	r0, [ip], r1, lsl #12
 3fc:	00662000 	rsbeq	r2, r6, r0
 400:	9c010000 	stcls	0, cr0, [r1], {-0}
 404:	0000042f 	andeq	r0, r0, pc, lsr #8
 408:	01006f13 	tsteq	r0, r3, lsl pc
 40c:	a41a013b 	ldrge	r0, [sl], #-315	; 0xfffffec5
 410:	02000001 	andeq	r0, r0, #1
 414:	d4106c91 	ldrle	r6, [r0], #-3217	; 0xfffff36f
 418:	54200006 	strtpl	r0, [r0], #-6
 41c:	0f000000 	svceq	0x00000000
 420:	3c010074 	stccc	0, cr0, [r1], {116}	; 0x74
 424:	00a90a01 	adceq	r0, r9, r1, lsl #20
 428:	91020000 	mrsls	r0, (UNDEF: 2)
 42c:	16000074 			; <UNDEFINED> instruction: 0x16000074
 430:	0000024f 	andeq	r0, r0, pc, asr #4
 434:	06013601 	streq	r3, [r1], -r1, lsl #12
 438:	200006ac 	andcs	r0, r0, ip, lsr #13
 43c:	00000020 	andeq	r0, r0, r0, lsr #32
 440:	04759c01 	ldrbteq	r9, [r5], #-3073	; 0xfffff3ff
 444:	6f130000 	svcvs	0x00130000
 448:	01360100 	teqeq	r6, r0, lsl #2
 44c:	0001a41f 	andeq	sl, r1, pc, lsl r4
 450:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 454:	00037319 	andeq	r7, r3, r9, lsl r3
 458:	01360100 	teqeq	r6, r0, lsl #2
 45c:	0000a926 	andeq	sl, r0, r6, lsr #18
 460:	70910200 	addsvc	r0, r1, r0, lsl #4
 464:	00037a19 	andeq	r7, r3, r9, lsl sl
 468:	01360100 	teqeq	r6, r0, lsl #2
 46c:	0000a932 	andeq	sl, r0, r2, lsr r9
 470:	6c910200 	lfmvs	f0, 4, [r1], {0}
 474:	005b0e00 	subseq	r0, fp, r0, lsl #28
 478:	0d010000 	stceq	0, cr0, [r1, #-0]
 47c:	04f60601 	ldrbteq	r0, [r6], #1537	; 0x601
 480:	01b62000 			; <UNDEFINED> instruction: 0x01b62000
 484:	9c010000 	stcls	0, cr0, [r1], {-0}
 488:	00000509 	andeq	r0, r0, r9, lsl #10
 48c:	01007813 	tsteq	r0, r3, lsl r8
 490:	2514010d 	ldrcs	r0, [r4, #-269]	; 0xfffffef3
 494:	02000000 	andeq	r0, r0, #0
 498:	79135f91 	ldmdbvc	r3, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 49c:	010d0100 	mrseq	r0, (UNDEF: 29)
 4a0:	0000251f 	andeq	r2, r0, pc, lsl r5
 4a4:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
 4a8:	74657313 	strbtvc	r7, [r5], #-787	; 0xfffffced
 4ac:	010d0100 	mrseq	r0, (UNDEF: 29)
 4b0:	0000252a 	andeq	r2, r0, sl, lsr #10
 4b4:	5d910200 	lfmpl	f0, 4, [r1]
 4b8:	00022d0d 	andeq	r2, r2, sp, lsl #26
 4bc:	010f0100 	mrseq	r0, (UNDEF: 31)
 4c0:	0000250a 	andeq	r2, r0, sl, lsl #10
 4c4:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 4c8:	0000440d 	andeq	r4, r0, sp, lsl #8
 4cc:	010f0100 	mrseq	r0, (UNDEF: 31)
 4d0:	00002510 	andeq	r2, r0, r0, lsl r5
 4d4:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 4d8:	0000c80d 	andeq	ip, r0, sp, lsl #16
 4dc:	010f0100 	mrseq	r0, (UNDEF: 31)
 4e0:	0000251c 	andeq	r2, r0, ip, lsl r5
 4e4:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 4e8:	0000740d 	andeq	r7, r0, sp, lsl #8
 4ec:	010f0100 	mrseq	r0, (UNDEF: 31)
 4f0:	00002524 	andeq	r2, r0, r4, lsr #10
 4f4:	63910200 	orrsvs	r0, r1, #0, 4
 4f8:	00026a0d 	andeq	r6, r2, sp, lsl #20
 4fc:	01100100 	tsteq	r0, r0, lsl #2
 500:	0000250a 	andeq	r2, r0, sl, lsl #10
 504:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 508:	03891a00 	orreq	r1, r9, #0, 20
 50c:	03010000 	movweq	r0, #4096	; 0x1000
 510:	048e0601 	streq	r0, [lr], #1537	; 0x601
 514:	00682000 	rsbeq	r2, r8, r0
 518:	9c010000 	stcls	0, cr0, [r1], {-0}
 51c:	00000555 	andeq	r0, r0, r5, asr r5
 520:	00049410 	andeq	r9, r4, r0, lsl r4
 524:	00005820 	andeq	r5, r0, r0, lsr #16
 528:	00e60d00 	rsceq	r0, r6, r0, lsl #26
 52c:	04010000 	streq	r0, [r1], #-0
 530:	00250f01 	eoreq	r0, r5, r1, lsl #30
 534:	91020000 	mrsls	r0, (UNDEF: 2)
 538:	04b81077 	ldrteq	r1, [r8], #119	; 0x77
 53c:	00222000 	eoreq	r2, r2, r0
 540:	610f0000 	mrsvs	r0, CPSR
 544:	01006464 	tsteq	r0, r4, ror #8
 548:	250f0107 	strcs	r0, [pc, #-263]	; 449 <startup-0x1ffffbb7>
 54c:	02000000 	andeq	r0, r0, #0
 550:	00007691 	muleq	r0, r1, r6
 554:	010c1b00 	tsteq	ip, r0, lsl #22
 558:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
 55c:	00043806 	andeq	r3, r4, r6, lsl #16
 560:	00005620 	andeq	r5, r0, r0, lsr #12
 564:	1c9c0100 	ldfnes	f0, [ip], {0}
 568:	0000023d 	andeq	r0, r0, sp, lsr r2
 56c:	2509f001 	strcs	pc, [r9, #-1]
 570:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 574:	2a200004 	bcs	80058c <startup-0x1f7ffa74>
 578:	01000000 	mrseq	r0, (UNDEF: 0)
 57c:	0005919c 	muleq	r5, ip, r1
 580:	00441d00 	subeq	r1, r4, r0, lsl #26
 584:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
 588:	00002523 	andeq	r2, r0, r3, lsr #10
 58c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 590:	00f01e00 	rscseq	r1, r0, r0, lsl #28
 594:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
 598:	0003c806 	andeq	ip, r3, r6, lsl #16
 59c:	00004620 	andeq	r4, r0, r0, lsr #12
 5a0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
 5a4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
 5a8:	0000024a 	andeq	r0, r0, sl, asr #4
 5ac:	2521e801 	strcs	lr, [r1, #-2049]!	; 0xfffff7ff
 5b0:	02000000 	andeq	r0, r0, #0
 5b4:	441d7791 	ldrmi	r7, [sp], #-1937	; 0xfffff86f
 5b8:	01000000 	mrseq	r0, (UNDEF: 0)
 5bc:	00252fe8 	eoreq	r2, r5, r8, ror #31
 5c0:	91020000 	mrsls	r0, (UNDEF: 2)
 5c4:	161e0076 			; <UNDEFINED> instruction: 0x161e0076
 5c8:	01000000 	mrseq	r0, (UNDEF: 0)
 5cc:	038806e1 	orreq	r0, r8, #235929600	; 0xe100000
 5d0:	00402000 	subeq	r2, r0, r0
 5d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5d8:	000005fb 	strdeq	r0, [r0], -fp
 5dc:	0000241d 	andeq	r2, r0, sp, lsl r4
 5e0:	24e10100 	strbtcs	r0, [r1], #256	; 0x100
 5e4:	00000025 	andeq	r0, r0, r5, lsr #32
 5e8:	1d779102 	ldfnep	f1, [r7, #-8]!
 5ec:	00000044 	andeq	r0, r0, r4, asr #32
 5f0:	2535e101 	ldrcs	lr, [r5, #-257]!	; 0xfffffeff
 5f4:	02000000 	andeq	r0, r0, #0
 5f8:	1e007691 	mcrne	6, 0, r7, cr0, cr1, {4}
 5fc:	000000a7 	andeq	r0, r0, r7, lsr #1
 600:	0806cc01 	stmdaeq	r6, {r0, sl, fp, lr, pc}
 604:	80200003 	eorhi	r0, r0, r3
 608:	01000000 	mrseq	r0, (UNDEF: 0)
 60c:	0006309c 	muleq	r6, ip, r0
 610:	02371d00 	eorseq	r1, r7, #0, 26
 614:	cc010000 	stcgt	0, cr0, [r1], {-0}
 618:	0000251c 	andeq	r2, r0, ip, lsl r5
 61c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 620:	0000441d 	andeq	r4, r0, sp, lsl r4
 624:	2bcc0100 	blcs	ff300a2c <ball+0xdf2ffec0>
 628:	00000025 	andeq	r0, r0, r5, lsr #32
 62c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 630:	0003001c 	andeq	r0, r3, ip, lsl r0
 634:	09b60100 	ldmibeq	r6!, {r8}
 638:	00000025 	andeq	r0, r0, r5, lsr #32
 63c:	20000278 	andcs	r0, r0, r8, ror r2
 640:	00000090 	muleq	r0, r0, r0
 644:	06689c01 	strbteq	r9, [r8], -r1, lsl #24
 648:	441d0000 	ldrmi	r0, [sp], #-0
 64c:	01000000 	mrseq	r0, (UNDEF: 0)
 650:	00251eb6 	strhteq	r1, [r5], -r6
 654:	91020000 	mrsls	r0, (UNDEF: 2)
 658:	76721f6f 	ldrbtvc	r1, [r2], -pc, ror #30
 65c:	0abe0100 	beq	fef80a64 <ball+0xdef7fef8>
 660:	00000025 	andeq	r0, r0, r5, lsr #32
 664:	00779102 	rsbseq	r9, r7, r2, lsl #2
 668:	00020820 	andeq	r0, r2, r0, lsr #16
 66c:	06a30100 	strteq	r0, [r3], r0, lsl #2
 670:	20000212 	andcs	r0, r0, r2, lsl r2
 674:	00000066 	andeq	r0, r0, r6, rrx
 678:	3d1e9c01 	ldccc	12, cr9, [lr, #-4]
 67c:	01000000 	mrseq	r0, (UNDEF: 0)
 680:	01b00696 	lslseq	r0, r6	; <illegal shifter operand>
 684:	00622000 	rsbeq	r2, r2, r0
 688:	9c010000 	stcls	0, cr0, [r1], {-0}
 68c:	000006af 	andeq	r0, r0, pc, lsr #13
 690:	0000441d 	andeq	r4, r0, sp, lsl r4
 694:	20960100 	addscs	r0, r6, r0, lsl #2
 698:	00000025 	andeq	r0, r0, r5, lsr #32
 69c:	216f9102 	cmncs	pc, r2, lsl #2
 6a0:	000002e5 	andeq	r0, r0, r5, ror #5
 6a4:	250a9701 	strcs	r9, [sl, #-1793]	; 0xfffff8ff
 6a8:	02000000 	andeq	r0, r0, #0
 6ac:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
 6b0:	0000011f 	andeq	r0, r0, pc, lsl r1
 6b4:	74069201 	strvc	r9, [r6], #-513	; 0xfffffdff
 6b8:	3c200001 	stccc	0, cr0, [r0], #-4
 6bc:	01000000 	mrseq	r0, (UNDEF: 0)
 6c0:	0006d39c 	muleq	r6, ip, r3
 6c4:	00782300 	rsbseq	r2, r8, r0, lsl #6
 6c8:	25259201 	strcs	r9, [r5, #-513]!	; 0xfffffdff
 6cc:	02000000 	andeq	r0, r0, #0
 6d0:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
 6d4:	00000136 	andeq	r0, r0, r6, lsr r1
 6d8:	2e068d01 	cdpcs	13, 0, cr8, cr6, cr1, {0}
 6dc:	46200001 	strtmi	r0, [r0], -r1
 6e0:	01000000 	mrseq	r0, (UNDEF: 0)
 6e4:	0006f79c 	muleq	r6, ip, r7
 6e8:	00782300 	rsbseq	r2, r8, r0, lsl #6
 6ec:	25238d01 	strcs	r8, [r3, #-3329]!	; 0xfffff2ff
 6f0:	02000000 	andeq	r0, r0, #0
 6f4:	1b007791 	blne	1e540 <startup-0x1ffe1ac0>
 6f8:	000002ea 	andeq	r0, r0, sl, ror #5
 6fc:	1c068601 	stcne	6, cr8, [r6], {1}
 700:	12200001 	eorne	r0, r0, #1
 704:	01000000 	mrseq	r0, (UNDEF: 0)
 708:	000a1e9c 	muleq	sl, ip, lr
 70c:	7c010000 	stcvc	0, cr0, [r1], {-0}
 710:	0000d606 	andeq	sp, r0, r6, lsl #12
 714:	00004620 	andeq	r4, r0, r0, lsr #12
 718:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
 71c:	23000007 	movwcs	r0, #7
 720:	0100736d 	tsteq	r0, sp, ror #6
 724:	00c01f7c 	sbceq	r1, r0, ip, ror pc
 728:	91020000 	mrsls	r0, (UNDEF: 2)
 72c:	00f4106c 	rscseq	r1, r4, ip, rrx
 730:	001e2000 	andseq	r2, lr, r0
 734:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
 738:	0a810100 	beq	fe040b40 <ball+0xde03ffd4>
 73c:	000000a9 	andeq	r0, r0, r9, lsr #1
 740:	00749102 	rsbseq	r9, r4, r2, lsl #2
 744:	00611e00 	rsbeq	r1, r1, r0, lsl #28
 748:	72010000 	andvc	r0, r1, #0
 74c:	00009406 	andeq	r9, r0, r6, lsl #8
 750:	00004220 	andeq	r4, r0, r0, lsr #4
 754:	819c0100 	orrshi	r0, ip, r0, lsl #2
 758:	23000007 	movwcs	r0, #7
 75c:	01007375 	tsteq	r0, r5, ror r3
 760:	00c01f72 	sbceq	r1, r0, r2, ror pc
 764:	91020000 	mrsls	r0, (UNDEF: 2)
 768:	00b2106c 	adcseq	r1, r2, ip, rrx
 76c:	001a2000 	andseq	r2, sl, r0
 770:	691f0000 	ldmdbvs	pc, {}	; <UNPREDICTABLE>
 774:	0a770100 	beq	1dc0b7c <startup-0x1e23f484>
 778:	000000a9 	andeq	r0, r0, r9, lsr #1
 77c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 780:	01802400 	orreq	r2, r0, r0, lsl #8
 784:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 788:	00004c06 	andeq	r4, r0, r6, lsl #24
 78c:	00004820 	andeq	r4, r0, r0, lsr #16
 790:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 794:	00000103 	andeq	r0, r0, r3, lsl #2
 798:	10065a01 	andne	r5, r6, r1, lsl #20
 79c:	3c200000 	stccc	0, cr0, [r0], #-0
 7a0:	01000000 	mrseq	r0, (UNDEF: 0)
 7a4:	021b249c 	andseq	r2, fp, #156, 8	; 0x9c000000
 7a8:	52010000 	andpl	r0, r1, #0
 7ac:	00000006 	andeq	r0, r0, r6
 7b0:	00000c20 	andeq	r0, r0, r0, lsr #24
 7b4:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 104:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 108:	01111349 	tsteq	r1, r9, asr #6
 10c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 110:	01194296 			; <UNDEFINED> instruction: 0x01194296
 114:	13000013 	movwne	r0, #19
 118:	08030005 	stmdaeq	r3, {r0, r2}
 11c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 120:	13490b39 	movtne	r0, #39737	; 0x9b39
 124:	00001802 	andeq	r1, r0, r2, lsl #16
 128:	3f012e14 	svccc	0x00012e14
 12c:	3a0e0319 	bcc	380d98 <startup-0x1fc7f268>
 130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 134:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 138:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 13c:	00000018 	andeq	r0, r0, r8, lsl r0
 140:	3f012e16 	svccc	0x00012e16
 144:	3a0e0319 	bcc	380db0 <startup-0x1fc7f250>
 148:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 14c:	1119270b 	tstne	r9, fp, lsl #14
 150:	40061201 	andmi	r1, r6, r1, lsl #4
 154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 158:	00001301 	andeq	r1, r0, r1, lsl #6
 15c:	3f012e17 	svccc	0x00012e17
 160:	3a0e0319 	bcc	380dcc <startup-0x1fc7f234>
 164:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 168:	1113490b 	tstne	r3, fp, lsl #18
 16c:	40061201 	andmi	r1, r6, r1, lsl #4
 170:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 174:	00001301 	andeq	r1, r0, r1, lsl #6
 178:	3f012e18 	svccc	0x00012e18
 17c:	3a0e0319 	bcc	380de8 <startup-0x1fc7f218>
 180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 184:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	00051900 	andeq	r1, r5, r0, lsl #18
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b39053b 	bleq	e41688 <startup-0x1f1be978>
 198:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 19c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 1a0:	03193f01 	tsteq	r9, #1, 30
 1a4:	3b0b3a0e 	blcc	2ce9e4 <startup-0x1fd3161c>
 1a8:	110b3905 	tstne	fp, r5, lsl #18
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b4:	00001301 	andeq	r1, r0, r1, lsl #6
 1b8:	3f002e1b 	svccc	0x00002e1b
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	00001942 	andeq	r1, r0, r2, asr #18
 1d0:	3f012e1c 	svccc	0x00012e1c
 1d4:	3a0e0319 	bcc	380e40 <startup-0x1fc7f1c0>
 1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1e4:	96184006 	ldrls	r4, [r8], -r6
 1e8:	13011942 	movwne	r1, #6466	; 0x1942
 1ec:	051d0000 	ldreq	r0, [sp, #-0]
 1f0:	3a0e0300 	bcc	380df8 <startup-0x1fc7f208>
 1f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1fc:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 200:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 204:	0b3a0e03 	bleq	e83a18 <startup-0x1f17c5e8>
 208:	0b390b3b 	bleq	e42efc <startup-0x1f1bd104>
 20c:	01111927 	tsteq	r1, r7, lsr #18
 210:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 214:	01194296 			; <UNDEFINED> instruction: 0x01194296
 218:	1f000013 	svcne	0x00000013
 21c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 220:	0b3b0b3a 	bleq	ec2f10 <startup-0x1f13d0f0>
 224:	13490b39 	movtne	r0, #39737	; 0x9b39
 228:	00001802 	andeq	r1, r0, r2, lsl #16
 22c:	3f002e20 	svccc	0x00002e20
 230:	3a0e0319 	bcc	380e9c <startup-0x1fc7f164>
 234:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 238:	1119270b 	tstne	r9, fp, lsl #14
 23c:	40061201 	andmi	r1, r6, r1, lsl #4
 240:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 244:	34210000 	strtcc	r0, [r1], #-0
 248:	3a0e0300 	bcc	380e50 <startup-0x1fc7f1b0>
 24c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 254:	22000018 	andcs	r0, r0, #24
 258:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 25c:	0b3a0e03 	bleq	e83a70 <startup-0x1f17c590>
 260:	0b390b3b 	bleq	e42f54 <startup-0x1f1bd0ac>
 264:	01111927 	tsteq	r1, r7, lsr #18
 268:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 26c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 270:	23000013 	movwcs	r0, #19
 274:	08030005 	stmdaeq	r3, {r0, r2}
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	13490b39 	movtne	r0, #39737	; 0x9b39
 280:	00001802 	andeq	r1, r0, r2, lsl #16
 284:	3f002e24 	svccc	0x00002e24
 288:	3a0e0319 	bcc	380ef4 <startup-0x1fc7f10c>
 28c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 290:	1119270b 	tstne	r9, fp, lsl #14
 294:	40061201 	andmi	r1, r6, r1, lsl #4
 298:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 29c:	Address 0x0000029c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000a10 	andeq	r0, r0, r0, lsl sl
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000a20 	andcs	r0, r0, r0, lsr #20
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000057d 	andeq	r0, r0, sp, ror r5
   4:	007e0003 	rsbseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	734f2f37 	movtvc	r2, #65335	; 0xff37
  58:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  5c:	6262614c 	rsbvs	r6, r2, #76, 2
  60:	622f7261 	eorvs	r7, pc, #268435462	; 0x10000006
  64:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  68:	4b687469 	blmi	1a1d214 <startup-0x1e5e2dec>
  6c:	61707965 	cmnvs	r0, r5, ror #18
  70:	62000064 	andvs	r0, r0, #100	; 0x64
  74:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  78:	4b687469 	blmi	1a1d224 <startup-0x1e5e2ddc>
  7c:	61707965 	cmnvs	r0, r5, ror #18
  80:	00632e64 	rsbeq	r2, r3, r4, ror #28
  84:	00000001 	andeq	r0, r0, r1
  88:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
  8c:	00000002 	andeq	r0, r0, r2
  90:	00d10320 	sbcseq	r0, r1, r0, lsr #6
  94:	13010501 	movwne	r0, #5377	; 0x1501
  98:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  9c:	01000302 	tsteq	r0, r2, lsl #6
  a0:	00140501 	andseq	r0, r4, r1, lsl #10
  a4:	00100205 	andseq	r0, r0, r5, lsl #4
  a8:	d9032000 	stmdble	r3, {sp}
  ac:	02050100 	andeq	r0, r5, #0, 2
  b0:	200e052f 	andcs	r0, lr, pc, lsr #10
  b4:	052f0205 	streq	r0, [pc, #-517]!	; fffffeb7 <ball+0xdffff34b>
  b8:	02052010 	andeq	r2, r5, #16
  bc:	2010052f 	andscs	r0, r0, pc, lsr #10
  c0:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
  c4:	01052011 	tsteq	r5, r1, lsl r0
  c8:	e7170535 			; <UNDEFINED> instruction: 0xe7170535
  cc:	052f0205 	streq	r0, [pc, #-517]!	; fffffecf <ball+0xdffff363>
  d0:	0205200c 	andeq	r2, r5, #12
  d4:	200c052f 	andcs	r0, ip, pc, lsr #10
  d8:	052f0205 	streq	r0, [pc, #-517]!	; fffffedb <ball+0xdffff36f>
  dc:	0205200b 	andeq	r2, r5, #11
  e0:	200c052f 	andcs	r0, ip, pc, lsr #10
  e4:	052f0705 	streq	r0, [pc, #-1797]!	; fffff9e7 <ball+0xdfffee7b>
  e8:	0402000a 	streq	r0, [r2], #-10
  ec:	19052001 	stmdbne	r5, {r0, sp}
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	0007053c 	andeq	r0, r7, ip, lsr r5
  f8:	3c010402 	cfstrscc	mvf0, [r1], {2}
  fc:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 100:	0105200c 	tsteq	r5, ip
 104:	ae22052f 	cfsh64ge	mvdx0, mvdx2, #31
 108:	834c0505 	movthi	r0, #50437	; 0xc505
 10c:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 110:	03052e02 	movweq	r2, #24066	; 0x5e02
 114:	03040200 	movweq	r0, #16896	; 0x4200
 118:	001c0521 	andseq	r0, ip, r1, lsr #10
 11c:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 120:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 124:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 128:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 12c:	02052e01 	andeq	r2, r5, #1, 28
 130:	01040200 	mrseq	r0, R12_usr
 134:	31010520 	tstcc	r1, r0, lsr #10
 138:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 13c:	05834c06 	streq	r4, [r3, #3078]	; 0xc06
 140:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 144:	0003052e 	andeq	r0, r3, lr, lsr #10
 148:	21030402 	tstcs	r3, r2, lsl #8
 14c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 150:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 154:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 158:	02053c01 	andeq	r3, r5, #256	; 0x100
 15c:	01040200 	mrseq	r0, R12_usr
 160:	3f010520 	svccc	0x00010520
 164:	055a1305 	ldrbeq	r1, [sl, #-773]	; 0xfffffcfb
 168:	052f2f02 	streq	r2, [pc, #-3842]!	; fffff26e <ball+0xdfffe702>
 16c:	25052f01 	strcs	r2, [r5, #-3841]	; 0xfffff0ff
 170:	670f0540 	strvs	r0, [pc, -r0, asr #10]
 174:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
 178:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 17c:	27058301 	strcs	r8, [r5, -r1, lsl #6]
 180:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 184:	13080105 	movwne	r0, #33029	; 0x8105
 188:	05762b05 	ldrbeq	r2, [r6, #-2821]!	; 0xfffff4fb
 18c:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 190:	c10c054b 	tstgt	ip, fp, asr #10
 194:	7a030b05 	bvc	c2db0 <startup-0x1ff3d250>
 198:	3c030520 	cfstr32cc	mvfx0, [r3], {32}
 19c:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 1a0:	0f053d06 	svceq	0x00053d06
 1a4:	3d06054b 	cfstr32cc	mvfx0, [r6, #-300]	; 0xfffffed4
 1a8:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
 1ac:	0c053c03 	stceq	12, cr3, [r5], {3}
 1b0:	22010521 	andcs	r0, r1, #138412032	; 0x8400000
 1b4:	053e1e05 	ldreq	r1, [lr, #-3589]!	; 0xfffff1fb
 1b8:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 1bc:	0205200d 	andeq	r2, r5, #13
 1c0:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 1c4:	2f3d3003 	svccs	0x003d3003
 1c8:	2f07053d 	svccs	0x0007053d
 1cc:	053c2105 	ldreq	r2, [ip, #-261]!	; 0xfffffefb
 1d0:	03052005 	movweq	r2, #20485	; 0x5005
 1d4:	2504052a 	strcs	r0, [r4, #-1322]	; 0xfffffad6
 1d8:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 1dc:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1e0:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 1e4:	670205ae 	strvs	r0, [r2, -lr, lsr #11]
 1e8:	200d053d 	andcs	r0, sp, sp, lsr r5
 1ec:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1e0 <startup-0x1ffffe20>
 1f0:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 1f4:	0a052f0f 	beq	14be38 <startup-0x1feb41c8>
 1f8:	4b020520 	blmi	81680 <startup-0x1ff7e980>
 1fc:	200e053d 	andcs	r0, lr, sp, lsr r5
 200:	052f0405 	streq	r0, [pc, #-1029]!	; fffffe03 <ball+0xdffff297>
 204:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 208:	03053004 	movweq	r3, #20484	; 0x5004
 20c:	09053d4b 	stmdbeq	r5, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 210:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 214:	05ca3605 	strbeq	r3, [sl, #1541]	; 0x605
 218:	10059102 	andne	r9, r5, r2, lsl #2
 21c:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 220:	2f3d2f59 	svccs	0x003d2f59
 224:	053e1005 	ldreq	r1, [lr, #-5]!
 228:	03054a04 	movweq	r4, #23044	; 0x5a04
 22c:	10053d21 	andne	r3, r5, r1, lsr #26
 230:	4a040530 	bmi	1016f8 <startup-0x1fefe908>
 234:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 238:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 23c:	0205200f 	andeq	r2, r5, #15
 240:	01053d2f 	tsteq	r5, pc, lsr #26
 244:	7640053d 			; <UNDEFINED> instruction: 0x7640053d
 248:	3d910205 	lfmcc	f0, 4, [r1, #20]
 24c:	01053d59 	tsteq	r5, r9, asr sp
 250:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 254:	3d910205 	lfmcc	f0, 4, [r1, #20]
 258:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 25c:	2e058301 	cdpcs	3, 0, cr8, cr5, cr1, {0}
 260:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 264:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 268:	1a056701 	bne	159e74 <startup-0x1fea618c>
 26c:	2f02054c 	svccs	0x0002054c
 270:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 274:	4b4b4b3d 	blmi	12d2f70 <startup-0x1ed2d090>
 278:	01054b4b 	tsteq	r5, fp, asr #22
 27c:	3e1c053d 	mrccc	5, 0, r0, cr12, cr13, {1}
 280:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 284:	03053c02 	movweq	r3, #23554	; 0x5c02
 288:	0f059f21 	svceq	0x00059f21
 28c:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 290:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 294:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 298:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 29c:	03054903 	movweq	r4, #22787	; 0x5903
 2a0:	01040200 	mrseq	r0, R12_usr
 2a4:	00270558 	eoreq	r0, r7, r8, asr r5
 2a8:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 2ac:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 2b0:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 2b4:	2e055101 	adfcss	f5, f5, f1
 2b8:	e504055a 	str	r0, [r4, #-1370]	; 0xfffffaa6
 2bc:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 2c0:	05580204 	ldrbeq	r0, [r8, #-516]	; 0xfffffdfc
 2c4:	18055a14 	stmdane	r5, {r2, r4, r9, fp, ip, lr}
 2c8:	580a053c 	stmdapl	sl, {r2, r3, r4, r5, r8, sl}
 2cc:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
 2d0:	10053c0f 	andne	r3, r5, pc, lsl #24
 2d4:	4a0305e5 	bmi	c1a70 <startup-0x1ff3e590>
 2d8:	05211005 	streq	r1, [r1, #-5]!
 2dc:	10054a03 	andne	r4, r5, r3, lsl #20
 2e0:	4a030521 	bmi	c176c <startup-0x1ff3e894>
 2e4:	05211005 	streq	r1, [r1, #-5]!
 2e8:	10054a03 	andne	r4, r5, r3, lsl #20
 2ec:	4a030521 	bmi	c1778 <startup-0x1ff3e888>
 2f0:	05211005 	streq	r1, [r1, #-5]!
 2f4:	10054a03 	andne	r4, r5, r3, lsl #20
 2f8:	4a030521 	bmi	c1784 <startup-0x1ff3e87c>
 2fc:	05211005 	streq	r1, [r1, #-5]!
 300:	05214a03 	streq	r4, [r1, #-2563]!	; 0xfffff5fd
 304:	08052204 	stmdaeq	r5, {r2, r9, sp}
 308:	6904054b 	stmdbvs	r4, {r0, r1, r3, r6, r8, sl}
 30c:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 310:	0e054b0a 	vmlaeq.f64	d4, d5, d10
 314:	4b0a0576 	blmi	2818f4 <startup-0x1fd7e70c>
 318:	c9680205 	stmdbgt	r8!, {r0, r2, r9}^
 31c:	05c91005 	strbeq	r1, [r9, #5]
 320:	04059102 	streq	r9, [r5], #-258	; 0xfffffefe
 324:	4b0805ad 	blmi	2019e0 <startup-0x1fdfe620>
 328:	920205a0 	andls	r0, r2, #160, 10	; 0x28000000
 32c:	5d031a05 	vstrpl	s2, [r3, #-20]	; 0xffffffec
 330:	030105ac 	movweq	r0, #5548	; 0x15ac
 334:	39052024 	stmdbcc	r5, {r2, r5, sp}
 338:	67080586 	strvs	r0, [r8, -r6, lsl #11]
 33c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 340:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 344:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 348:	000a052e 	andeq	r0, sl, lr, lsr #10
 34c:	21030402 	tstcs	r3, r2, lsl #8
 350:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 354:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 358:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 35c:	03056603 	movweq	r6, #22019	; 0x5603
 360:	03040200 	movweq	r0, #16896	; 0x4200
 364:	0025052e 	eoreq	r0, r5, lr, lsr #10
 368:	3c030402 	cfstrscc	mvf0, [r3], {2}
 36c:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 370:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 374:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 378:	03056603 	movweq	r6, #22019	; 0x5603
 37c:	03040200 	movweq	r0, #16896	; 0x4200
 380:	002c052e 	eoreq	r0, ip, lr, lsr #10
 384:	73030402 	movwvc	r0, #13314	; 0x3402
 388:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 38c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 390:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 394:	02052e01 	andeq	r2, r5, #1, 28
 398:	01040200 	mrseq	r0, R12_usr
 39c:	3f010520 	svccc	0x00010520
 3a0:	055a1d05 	ldrbeq	r1, [sl, #-3333]	; 0xfffff2fb
 3a4:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 3a8:	000a052e 	andeq	r0, sl, lr, lsr #10
 3ac:	21030402 	tstcs	r3, r2, lsl #8
 3b0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3b4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3b8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 3bc:	03056603 	movweq	r6, #22019	; 0x5603
 3c0:	03040200 	movweq	r0, #16896	; 0x4200
 3c4:	0025052e 	eoreq	r0, r5, lr, lsr #10
 3c8:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3cc:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 3d0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3d4:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 3d8:	03056603 	movweq	r6, #22019	; 0x5603
 3dc:	03040200 	movweq	r0, #16896	; 0x4200
 3e0:	0029052e 	eoreq	r0, r9, lr, lsr #10
 3e4:	73030402 	movwvc	r0, #13314	; 0x3402
 3e8:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3ec:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3f0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 3f4:	02052e01 	andeq	r2, r5, #1, 28
 3f8:	01040200 	mrseq	r0, R12_usr
 3fc:	3f010520 	svccc	0x00010520
 400:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 404:	0e054b02 	vmlaeq.f64	d4, d5, d2
 408:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 40c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 410:	18052f0e 	stmdane	r5, {r1, r2, r3, r8, r9, sl, fp, sp}
 414:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 418:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 41c:	0b053d0d 	bleq	14f858 <startup-0x1feb07a8>
 420:	2009052e 	andcs	r0, r9, lr, lsr #10
 424:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff927 <ball+0xdfffedbb>
 428:	18054c13 	stmdane	r5, {r0, r1, r4, sl, fp, lr}
 42c:	2010052e 	andscs	r0, r0, lr, lsr #10
 430:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 434:	0b052f0d 	bleq	14c070 <startup-0x1feb3f90>
 438:	2009052e 	andcs	r0, r9, lr, lsr #10
 43c:	052f1405 	streq	r1, [pc, #-1029]!	; 3f <startup-0x1fffffc1>
 440:	11052e19 	tstne	r5, r9, lsl lr
 444:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 448:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
 44c:	0b053d0d 	bleq	14f888 <startup-0x1feb0778>
 450:	2009052e 	andcs	r0, r9, lr, lsr #10
 454:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff957 <ball+0xdfffedeb>
 458:	1c054c17 	stcne	12, cr4, [r5], {23}
 45c:	2014052e 	andscs	r0, r4, lr, lsr #10
 460:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 464:	0b053d0d 	bleq	14f8a0 <startup-0x1feb0760>
 468:	2009052e 	andcs	r0, r9, lr, lsr #10
 46c:	052f1305 	streq	r1, [pc, #-773]!	; 16f <startup-0x1ffffe91>
 470:	10052e18 	andne	r2, r5, r8, lsl lr
 474:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 478:	02053d3e 	andeq	r3, r5, #3968	; 0xf80
 47c:	4b01053e 	blmi	4197c <startup-0x1ffbe684>
 480:	054f1505 	strbeq	r1, [pc, #-1285]	; ffffff83 <ball+0xdffff417>
 484:	02053f0a 	andeq	r3, r5, #10, 30	; 0x28
 488:	2103052e 	tstcs	r3, lr, lsr #10
 48c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 490:	06053c0a 	streq	r3, [r5], -sl, lsl #24
 494:	4b0a0530 	blmi	28195c <startup-0x1fd7e6a4>
 498:	05580805 	ldrbeq	r0, [r8, #-2053]	; 0xfffff7fb
 49c:	1f052f0b 	svcne	0x00052f0b
 4a0:	02040200 	andeq	r0, r4, #0, 4
 4a4:	053c7a03 	ldreq	r7, [ip, #-2563]!	; 0xfffff5fd
 4a8:	04020002 	streq	r0, [r2], #-2
 4ac:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 4b0:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 4b4:	1a052101 	bne	1488c0 <startup-0x1feb7740>
 4b8:	4b02054c 	blmi	819f0 <startup-0x1ff7e610>
 4bc:	2f080b05 	svccs	0x00080b05
 4c0:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 4c4:	0b052e03 	bleq	14bcd8 <startup-0x1feb4328>
 4c8:	20170521 	andscs	r0, r7, r1, lsr #10
 4cc:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 4d0:	1705210b 	strne	r2, [r5, -fp, lsl #2]
 4d4:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 4d8:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 4dc:	03052017 	movweq	r2, #20503	; 0x5017
 4e0:	210c052e 	tstcs	ip, lr, lsr #10
 4e4:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
 4e8:	19053001 	stmdbne	r5, {r0, ip, sp}
 4ec:	4b100576 	blmi	401acc <startup-0x1fbfe534>
 4f0:	05751305 	ldrbeq	r1, [r5, #-773]!	; 0xfffffcfb
 4f4:	01053c12 	tsteq	r5, r2, lsl ip
 4f8:	76110559 			; <UNDEFINED> instruction: 0x76110559
 4fc:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
 500:	07052010 	smladeq	r5, r0, r0, r2
 504:	4a04053d 	bmi	101a00 <startup-0x1fefe600>
 508:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 50c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 510:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 514:	0015054a 	andseq	r0, r5, sl, asr #10
 518:	20010402 	andcs	r0, r1, r2, lsl #8
 51c:	052f0705 	streq	r0, [pc, #-1797]!	; fffffe1f <ball+0xdffff2b3>
 520:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 524:	01040200 	mrseq	r0, R12_usr
 528:	2f070520 	svccs	0x00070520
 52c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 530:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 534:	09052001 	stmdbeq	r5, {r0, sp}
 538:	2101052f 	tstcs	r1, pc, lsr #10
 53c:	05681005 	strbeq	r1, [r8, #-5]!
 540:	02053d0a 	andeq	r3, r5, #640	; 0x280
 544:	04052f2f 	streq	r2, [r5], #-3887	; 0xfffff0d1
 548:	2e030533 	mcrcs	5, 0, r0, cr3, cr3, {1}
 54c:	3d0f053d 	cfstr32cc	mvfx0, [pc, #-244]	; 460 <startup-0x1ffffba0>
 550:	05590305 	ldrbeq	r0, [r9, #-773]	; 0xfffffcfb
 554:	0c05c90d 			; <UNDEFINED> instruction: 0x0c05c90d
 558:	4a04052e 	bmi	101a18 <startup-0x1fefe5e8>
 55c:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 560:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 564:	210d0558 	tstcs	sp, r8, asr r5
 568:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 56c:	0d055804 	stceq	8, cr5, [r5, #-16]
 570:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
 574:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 578:	2078030a 	rsbscs	r0, r8, sl, lsl #6
 57c:	01000302 	tsteq	r0, r2, lsl #6
 580:	Address 0x00000580 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  14:	72670069 	rsbvc	r0, r7, #105	; 0x69
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  20:	5f657469 	svcpl	0x00657469
  24:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  28:	00646e61 	rsbeq	r6, r4, r1, ror #28
  2c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  30:	6a626f5f 	bvs	189bdb4 <startup-0x1e76424c>
  34:	00746365 	rsbseq	r6, r4, r5, ror #6
  38:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  3c:	6c657300 	stclvs	3, cr7, [r5], #-0
  40:	5f746365 	svcpl	0x00746365
  44:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  48:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  4c:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
  50:	5f776172 	svcpl	0x00776172
  54:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
  58:	70007463 	andvc	r7, r0, r3, ror #8
  5c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
  60:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  64:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffffaa <ball+0xdffff43e>	; <UNPREDICTABLE>
  68:	6f726b69 	svcvs	0x00726b69
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	61746164 	cmnvs	r4, r4, ror #2
  78:	6c6f685f 	stclvs	8, cr6, [pc], #-380	; ffffff04 <ball+0xdffff398>
  7c:	00726564 	rsbseq	r6, r2, r4, ror #10
  80:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  84:	6e750054 	mrcvs	0, 3, r0, cr5, cr4, {2}
  88:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  8c:	63206465 			; <UNDEFINED> instruction: 0x63206465
  90:	00726168 	rsbseq	r6, r2, r8, ror #2
  94:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  98:	6c616200 	sfmvs	f6, 2, [r1], #-0
  9c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
  a0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  a4:	67007972 	smlsdxvs	r0, r2, r9, r7
  a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  ac:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  b0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  b4:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; bc <startup-0x1fffff44>
  b8:	006e6d75 	rsbeq	r6, lr, r5, ror sp
  bc:	4b746567 	blmi	1d19660 <startup-0x1e2e69a0>
  c0:	61567965 	cmpvs	r6, r5, ror #18
  c4:	0065756c 	rsbeq	r7, r5, ip, ror #10
  c8:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
  cc:	61006c61 	tstvs	r0, r1, ror #24
  d0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
  d4:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
  d8:	7200776f 	andvc	r7, r0, #29097984	; 0x1bc0000
  dc:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
  e0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
  e4:	6170006e 	cmnvs	r0, lr, rrx
  e8:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
  ec:	006e6961 	rsbeq	r6, lr, r1, ror #18
  f0:	70617267 	rsbvc	r7, r1, r7, ror #4
  f4:	5f636968 	svcpl	0x00636968
  f8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  fc:	61645f65 	cmnvs	r4, r5, ror #30
 100:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
 104:	5f74696e 	svcpl	0x0074696e
 108:	00707061 	rsbseq	r7, r0, r1, rrx
 10c:	70617267 	rsbvc	r7, r1, r7, ror #4
 110:	5f636968 	svcpl	0x00636968
 114:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 118:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 11c:	6700657a 	smlsdxvs	r0, sl, r5, r6
 120:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 124:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 128:	5f6c7274 	svcpl	0x006c7274
 12c:	5f746962 	svcpl	0x00746962
 130:	61656c63 	cmnvs	r5, r3, ror #24
 134:	72670072 	rsbvc	r0, r7, #114	; 0x72
 138:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 13c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 140:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 144:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 148:	6e007465 	cdpvs	4, 0, cr7, cr0, cr5, {3}
 14c:	00787765 	rsbseq	r7, r8, r5, ror #14
 150:	7977656e 	ldmdbvc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 154:	736e7500 	cmnvc	lr, #0, 10
 158:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 15c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 160:	47740074 			; <UNDEFINED> instruction: 0x47740074
 164:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 168:	00797274 	rsbseq	r7, r9, r4, ror r2
 16c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 170:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 174:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 178:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 17c:	0079657a 	rsbseq	r6, r9, sl, ror r5
 180:	616c6564 	cmnvs	ip, r4, ror #10
 184:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 188:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 18c:	20554e47 	subscs	r4, r5, r7, asr #28
 190:	20393943 	eorscs	r3, r9, r3, asr #18
 194:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 198:	30322031 	eorscc	r2, r2, r1, lsr r0
 19c:	30313931 	eorscc	r3, r1, r1, lsr r9
 1a0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 1a4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 1a8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1ac:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 1b0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 1b4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 1b8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 1bc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 1c0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 1c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 1c8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 1cc:	205d3939 	subscs	r3, sp, r9, lsr r9
 1d0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 1d4:	20626d75 	rsbcs	r6, r2, r5, ror sp
 1d8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 1dc:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 1e0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 1e4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 1e8:	616d2d20 	cmnvs	sp, r0, lsr #26
 1ec:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 1f0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 1f4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 1f8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1fc:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 200:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 204:	00393963 	eorseq	r3, r9, r3, ror #18
 208:	70617267 	rsbvc	r7, r1, r7, ror #4
 20c:	5f636968 	svcpl	0x00636968
 210:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 214:	6165725f 	cmnvs	r5, pc, asr r2
 218:	73007964 	movwvc	r7, #2404	; 0x964
 21c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 220:	62007075 	andvs	r7, r0, #117	; 0x75
 224:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 228:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 22c:	73616d00 	cmnvc	r1, #0, 26
 230:	656b006b 	strbvs	r0, [fp, #-107]!	; 0xffffff95
 234:	76006279 			; <UNDEFINED> instruction: 0x76006279
 238:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 23c:	61726700 	cmnvs	r2, r0, lsl #14
 240:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 244:	6165725f 	cmnvs	r5, pc, asr r2
 248:	61645f64 	cmnvs	r4, r4, ror #30
 24c:	73006174 	movwvc	r6, #372	; 0x174
 250:	6f5f7465 	svcvs	0x005f7465
 254:	63656a62 	cmnvs	r5, #401408	; 0x62000
 258:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 25c:	00646565 	rsbeq	r6, r4, r5, ror #10
 260:	5f746573 	svcpl	0x00746573
 264:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 268:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
 26c:	00786564 	rsbseq	r6, r8, r4, ror #10
 270:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff835 <ball+0xdfffecc9>
 274:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 278:	61736f2f 	cmnvs	r3, pc, lsr #30
 27c:	442f6e6e 	strtmi	r6, [pc], #-3694	; 284 <startup-0x1ffffd7c>
 280:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 284:	73746e65 	cmnvc	r4, #1616	; 0x650
 288:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 28c:	6a6f7250 	bvs	1bdcbd4 <startup-0x1e42342c>
 290:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 294:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 298:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 29c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 2a0:	2f737463 	svccs	0x00737463
 2a4:	30544144 	subscc	r4, r4, r4, asr #2
 2a8:	4f2f3731 	svcmi	0x002f3731
 2ac:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 2b0:	62614c73 	rsbvs	r4, r1, #29440	; 0x7300
 2b4:	2f726162 	svccs	0x00726162
 2b8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2bc:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 2c0:	7079654b 	rsbsvc	r6, r9, fp, asr #10
 2c4:	622f6461 	eorvs	r6, pc, #1627389952	; 0x61000000
 2c8:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
 2cc:	4b687469 	blmi	1a1d478 <startup-0x1e5e2b88>
 2d0:	61707965 	cmnvs	r0, r5, ror #18
 2d4:	00632e64 	rsbeq	r2, r3, r4, ror #28
 2d8:	61656c63 	cmnvs	r5, r3, ror #24
 2dc:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2e0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2e4:	746f6200 	strbtvc	r6, [pc], #-512	; 2ec <startup-0x1ffffd14>
 2e8:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
 2ec:	5f79616c 	svcpl	0x0079616c
 2f0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2f4:	4f740073 	svcmi	0x00740073
 2f8:	70006a62 	andvc	r6, r0, r2, ror #20
 2fc:	0078736f 	rsbseq	r7, r8, pc, ror #6
 300:	70617267 	rsbvc	r7, r1, r7, ror #4
 304:	5f636968 	svcpl	0x00636968
 308:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 30c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 310:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 314:	43007374 	movwmi	r7, #884	; 0x374
 318:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 31c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 320:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
 324:	6f445c6e 	svcvs	0x00445c6e
 328:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 32c:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
 330:	50746947 	rsbspl	r6, r4, r7, asr #18
 334:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 338:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 33c:	6f686353 	svcvs	0x00686353
 340:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 344:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 348:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 34c:	31305441 	teqcc	r0, r1, asr #8
 350:	734f5c37 	movtvc	r5, #64567	; 0xfc37
 354:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
 358:	6262614c 	rsbvs	r6, r2, #76, 2
 35c:	625c7261 	subsvs	r7, ip, #268435462	; 0x10000006
 360:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
 364:	4b687469 	blmi	1a1d510 <startup-0x1e5e2af0>
 368:	61707965 	cmnvs	r0, r5, ror #18
 36c:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 370:	73007379 	movwvc	r7, #889	; 0x379
 374:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 378:	70730078 	rsbsvc	r0, r3, r8, ror r0
 37c:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 380:	424f5000 	submi	r5, pc, #0
 384:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 388:	61726700 	cmnvs	r2, r0, lsl #14
 38c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 390:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 394:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 398:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 39c:	Address 0x0000039c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000003c 	andeq	r0, r0, ip, lsr r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000004c 	andcs	r0, r0, ip, asr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000094 	mulcs	r0, r4, r0
  64:	00000042 	andeq	r0, r0, r2, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000d6 	ldrdcs	r0, [r0], -r6
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	2000011c 	andcs	r0, r0, ip, lsl r1
  a4:	00000012 	andeq	r0, r0, r2, lsl r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0000070d 	andeq	r0, r0, sp, lsl #14
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	2000012e 	andcs	r0, r0, lr, lsr #2
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000174 	andcs	r0, r0, r4, ror r1
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
 100:	00000062 	andeq	r0, r0, r2, rrx
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000212 	andcs	r0, r0, r2, lsl r2
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000278 	andcs	r0, r0, r8, ror r2
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000308 	andcs	r0, r0, r8, lsl #6
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000388 	andcs	r0, r0, r8, lsl #7
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003c8 	andcs	r0, r0, r8, asr #7
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	2000040e 	andcs	r0, r0, lr, lsl #8
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000438 	andcs	r0, r0, r8, lsr r4
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	2000048e 	andcs	r0, r0, lr, lsl #9
 1f8:	00000068 	andeq	r0, r0, r8, rrx
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 208:	00000007 	andeq	r0, r0, r7
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	200004f6 	strdcs	r0, [r0], -r6
 218:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 21c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 220:	86048505 	strhi	r8, [r4], -r5, lsl #10
 224:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 228:	280e4101 	stmdacs	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200006ac 	andcs	r0, r0, ip, lsr #13
 23c:	00000020 	andeq	r0, r0, r0, lsr #32
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	200006cc 	andcs	r0, r0, ip, asr #13
 25c:	00000066 	andeq	r0, r0, r6, rrx
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000732 	andcs	r0, r0, r2, lsr r7
 27c:	00000066 	andeq	r0, r0, r6, rrx
 280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 284:	41018e02 	tstmi	r1, r2, lsl #28
 288:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 28c:	00000007 	andeq	r0, r0, r7
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	00000000 	andeq	r0, r0, r0
 298:	20000798 	mulcs	r0, r8, r7
 29c:	000000c6 	andeq	r0, r0, r6, asr #1
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	2000085e 	andcs	r0, r0, lr, asr r8
 2bc:	00000050 	andeq	r0, r0, r0, asr r0
 2c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c4:	41018e02 	tstmi	r1, r2, lsl #28
 2c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2cc:	00000007 	andeq	r0, r0, r7
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	200008ae 	andcs	r0, r0, lr, lsr #17
 2dc:	00000062 	andeq	r0, r0, r2, rrx
 2e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e4:	41018e02 	tstmi	r1, r2, lsl #28
 2e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2ec:	00000007 	andeq	r0, r0, r7
 2f0:	00000020 	andeq	r0, r0, r0, lsr #32
 2f4:	00000000 	andeq	r0, r0, r0
 2f8:	20000910 	andcs	r0, r0, r0, lsl r9
 2fc:	00000034 	andeq	r0, r0, r4, lsr r0
 300:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 304:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 308:	41018e02 	tstmi	r1, r2, lsl #28
 30c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 310:	00000007 	andeq	r0, r0, r7
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000000 	andeq	r0, r0, r0
 31c:	20000944 	andcs	r0, r0, r4, asr #18
 320:	00000054 	andeq	r0, r0, r4, asr r0
 324:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 328:	41018e02 	tstmi	r1, r2, lsl #28
 32c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 330:	00000007 	andeq	r0, r0, r7
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000000 	andeq	r0, r0, r0
 33c:	20000998 	mulcs	r0, r8, r9
 340:	00000088 	andeq	r0, r0, r8, lsl #1
 344:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 348:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 34c:	180e4101 	stmdane	lr, {r0, r8, lr}
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000000c 	andeq	r0, r0, ip
 358:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 35c:	7c010001 	stcvc	0, cr0, [r1], {1}
 360:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 364:	0000000c 	andeq	r0, r0, ip
 368:	00000354 	andeq	r0, r0, r4, asr r3
 36c:	20000a21 	andcs	r0, r0, r1, lsr #20
 370:	0000010a 	andeq	r0, r0, sl, lsl #2
