
./Debug/ballWithKeypad.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
	void (* set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fcd0 	bl	200009a8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

	// 					DELAYS					//
	
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
	us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
20000060:	2300      	movs	r3, #0
20000062:	60fb      	str	r3, [r7, #12]
20000064:	e004      	b.n	20000070 <delay_mikro+0x18>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	3301      	adds	r3, #1
2000006e:	60fb      	str	r3, [r7, #12]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	009a      	lsls	r2, r3, #2
20000074:	68fb      	ldr	r3, [r7, #12]
20000076:	429a      	cmp	r2, r3
20000078:	d8f5      	bhi.n	20000066 <delay_mikro+0xe>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	b004      	add	sp, #16
20000082:	bd80      	pop	{r7, pc}

20000084 <delay_milli>:

void delay_milli(unsigned int ms){
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
2000008c:	2300      	movs	r3, #0
2000008e:	60fb      	str	r3, [r7, #12]
20000090:	e007      	b.n	200000a2 <delay_milli+0x1e>
		delay_mikro(1000);
20000092:	23fa      	movs	r3, #250	; 0xfa
20000094:	009b      	lsls	r3, r3, #2
20000096:	0018      	movs	r0, r3
20000098:	f7ff ffde 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	3301      	adds	r3, #1
200000a0:	60fb      	str	r3, [r7, #12]
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	687a      	ldr	r2, [r7, #4]
200000a6:	429a      	cmp	r2, r3
200000a8:	d8f3      	bhi.n	20000092 <delay_milli+0xe>
	}
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b004      	add	sp, #16
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(){
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
	delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
	delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

//						DISPLAY						//

void graphic_ctrl_bit_set(uint8_t x){
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000d2:	4b0d      	ldr	r3, [pc, #52]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	b25a      	sxtb	r2, r3
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	b25b      	sxtb	r3, r3
200000e0:	2104      	movs	r1, #4
200000e2:	438b      	bics	r3, r1
200000e4:	b25b      	sxtb	r3, r3
200000e6:	4313      	orrs	r3, r2
200000e8:	b25a      	sxtb	r2, r3
200000ea:	4b07      	ldr	r3, [pc, #28]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000ec:	b2d2      	uxtb	r2, r2
200000ee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
200000f0:	4b05      	ldr	r3, [pc, #20]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	b2db      	uxtb	r3, r3
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f8:	2104      	movs	r1, #4
200000fa:	438b      	bics	r3, r1
200000fc:	b2db      	uxtb	r3, r3
200000fe:	7013      	strb	r3, [r2, #0]
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b002      	add	sp, #8
20000106:	bd80      	pop	{r7, pc}
20000108:	40021014 	andmi	r1, r2, r4, lsl r0

2000010c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
2000010c:	b580      	push	{r7, lr}
2000010e:	b082      	sub	sp, #8
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000118:	4b0a      	ldr	r3, [pc, #40]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	b2db      	uxtb	r3, r3
2000011e:	b25b      	sxtb	r3, r3
20000120:	1dfa      	adds	r2, r7, #7
20000122:	7812      	ldrb	r2, [r2, #0]
20000124:	2104      	movs	r1, #4
20000126:	430a      	orrs	r2, r1
20000128:	b2d2      	uxtb	r2, r2
2000012a:	b252      	sxtb	r2, r2
2000012c:	43d2      	mvns	r2, r2
2000012e:	b252      	sxtb	r2, r2
20000130:	4013      	ands	r3, r2
20000132:	b25a      	sxtb	r2, r3
20000134:	4b03      	ldr	r3, [pc, #12]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
20000136:	b2d2      	uxtb	r2, r2
20000138:	701a      	strb	r2, [r3, #0]
}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	b002      	add	sp, #8
20000140:	bd80      	pop	{r7, pc}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	40021014 	andmi	r1, r2, r4, lsl r0

20000148 <select_controller>:

void select_controller(uint8_t controller){
20000148:	b580      	push	{r7, lr}
2000014a:	b084      	sub	sp, #16
2000014c:	af00      	add	r7, sp, #0
2000014e:	0002      	movs	r2, r0
20000150:	1dfb      	adds	r3, r7, #7
20000152:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000154:	230f      	movs	r3, #15
20000156:	18fb      	adds	r3, r7, r3
20000158:	2200      	movs	r2, #0
2000015a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	2b18      	cmp	r3, #24
20000162:	d01a      	beq.n	2000019a <select_controller+0x52>
20000164:	dc1d      	bgt.n	200001a2 <select_controller+0x5a>
20000166:	2b10      	cmp	r3, #16
20000168:	d010      	beq.n	2000018c <select_controller+0x44>
2000016a:	dc1a      	bgt.n	200001a2 <select_controller+0x5a>
2000016c:	2b00      	cmp	r3, #0
2000016e:	d002      	beq.n	20000176 <select_controller+0x2e>
20000170:	2b08      	cmp	r3, #8
20000172:	d004      	beq.n	2000017e <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
20000174:	e015      	b.n	200001a2 <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000176:	2018      	movs	r0, #24
20000178:	f7ff ffc8 	bl	2000010c <graphic_ctrl_bit_clear>
2000017c:	e012      	b.n	200001a4 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
2000017e:	2010      	movs	r0, #16
20000180:	f7ff ffc4 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
20000184:	2008      	movs	r0, #8
20000186:	f7ff ff9e 	bl	200000c6 <graphic_ctrl_bit_set>
2000018a:	e00b      	b.n	200001a4 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
2000018c:	2008      	movs	r0, #8
2000018e:	f7ff ffbd 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
20000192:	2010      	movs	r0, #16
20000194:	f7ff ff97 	bl	200000c6 <graphic_ctrl_bit_set>
20000198:	e004      	b.n	200001a4 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
2000019a:	2018      	movs	r0, #24
2000019c:	f7ff ff93 	bl	200000c6 <graphic_ctrl_bit_set>
200001a0:	e000      	b.n	200001a4 <select_controller+0x5c>
		default: return;
200001a2:	46c0      	nop			; (mov r8, r8)
	}
}
200001a4:	46bd      	mov	sp, r7
200001a6:	b004      	add	sp, #16
200001a8:	bd80      	pop	{r7, pc}

200001aa <graphic_wait_ready>:

void graphic_wait_ready(void){
200001aa:	b580      	push	{r7, lr}
200001ac:	b082      	sub	sp, #8
200001ae:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001b0:	2040      	movs	r0, #64	; 0x40
200001b2:	f7ff ffab 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001b6:	4b16      	ldr	r3, [pc, #88]	; (20000210 <graphic_wait_ready+0x66>)
200001b8:	4a16      	ldr	r2, [pc, #88]	; (20000214 <graphic_wait_ready+0x6a>)
200001ba:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001bc:	2002      	movs	r0, #2
200001be:	f7ff ff82 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001c2:	2001      	movs	r0, #1
200001c4:	f7ff ffa2 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_500ns();
200001c8:	f7ff ff74 	bl	200000b4 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001cc:	2040      	movs	r0, #64	; 0x40
200001ce:	f7ff ff7a 	bl	200000c6 <graphic_ctrl_bit_set>
		delay_500ns();
200001d2:	f7ff ff6f 	bl	200000b4 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
200001d6:	4b10      	ldr	r3, [pc, #64]	; (20000218 <graphic_wait_ready+0x6e>)
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	b2da      	uxtb	r2, r3
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	217f      	movs	r1, #127	; 0x7f
200001e0:	438a      	bics	r2, r1
200001e2:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001e4:	2040      	movs	r0, #64	; 0x40
200001e6:	f7ff ff91 	bl	2000010c <graphic_ctrl_bit_clear>
		delay_500ns();
200001ea:	f7ff ff63 	bl	200000b4 <delay_500ns>
		if(c == 0){
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	2b00      	cmp	r3, #0
200001f4:	d000      	beq.n	200001f8 <graphic_wait_ready+0x4e>
	while(1){
200001f6:	e7e9      	b.n	200001cc <graphic_wait_ready+0x22>
			break;
200001f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001fa:	2040      	movs	r0, #64	; 0x40
200001fc:	f7ff ff63 	bl	200000c6 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000200:	4b03      	ldr	r3, [pc, #12]	; (20000210 <graphic_wait_ready+0x66>)
20000202:	4a06      	ldr	r2, [pc, #24]	; (2000021c <graphic_wait_ready+0x72>)
20000204:	601a      	str	r2, [r3, #0]
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	40021000 	andmi	r1, r2, r0
20000214:	00005555 	andeq	r5, r0, r5, asr r5
20000218:	40021011 	andmi	r1, r2, r1, lsl r0
2000021c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000220 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000220:	b580      	push	{r7, lr}
20000222:	b084      	sub	sp, #16
20000224:	af00      	add	r7, sp, #0
20000226:	0002      	movs	r2, r0
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff6d 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000232:	4b1b      	ldr	r3, [pc, #108]	; (200002a0 <graphic_read+0x80>)
20000234:	4a1b      	ldr	r2, [pc, #108]	; (200002a4 <graphic_read+0x84>)
20000236:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000238:	2003      	movs	r0, #3
2000023a:	f7ff ff44 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(controller);
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	0018      	movs	r0, r3
20000244:	f7ff ff80 	bl	20000148 <select_controller>
	delay_500ns();
20000248:	f7ff ff34 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000024c:	2040      	movs	r0, #64	; 0x40
2000024e:	f7ff ff3a 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
20000252:	f7ff ff2f 	bl	200000b4 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000256:	4a14      	ldr	r2, [pc, #80]	; (200002a8 <graphic_read+0x88>)
20000258:	230f      	movs	r3, #15
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff53 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000266:	4b0e      	ldr	r3, [pc, #56]	; (200002a0 <graphic_read+0x80>)
20000268:	4a10      	ldr	r2, [pc, #64]	; (200002ac <graphic_read+0x8c>)
2000026a:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2b08      	cmp	r3, #8
20000272:	d104      	bne.n	2000027e <graphic_read+0x5e>
		select_controller(B_CS1);
20000274:	2008      	movs	r0, #8
20000276:	f7ff ff67 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000027a:	f7ff ff96 	bl	200001aa <graphic_wait_ready>
	}
	if(controller == B_CS2){
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	2b10      	cmp	r3, #16
20000284:	d104      	bne.n	20000290 <graphic_read+0x70>
		select_controller(B_CS2);
20000286:	2010      	movs	r0, #16
20000288:	f7ff ff5e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000028c:	f7ff ff8d 	bl	200001aa <graphic_wait_ready>
	}
	return rv;
20000290:	230f      	movs	r3, #15
20000292:	18fb      	adds	r3, r7, r3
20000294:	781b      	ldrb	r3, [r3, #0]
}
20000296:	0018      	movs	r0, r3
20000298:	46bd      	mov	sp, r7
2000029a:	b004      	add	sp, #16
2000029c:	bd80      	pop	{r7, pc}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	40021000 	andmi	r1, r2, r0
200002a4:	00005555 	andeq	r5, r0, r5, asr r5
200002a8:	40021011 	andmi	r1, r2, r1, lsl r0
200002ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
200002bc:	1dbb      	adds	r3, r7, #6
200002be:	1c0a      	adds	r2, r1, #0
200002c0:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002c2:	4a1a      	ldr	r2, [pc, #104]	; (2000032c <graphic_write+0x7c>)
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002ca:	1dbb      	adds	r3, r7, #6
200002cc:	781b      	ldrb	r3, [r3, #0]
200002ce:	0018      	movs	r0, r3
200002d0:	f7ff ff3a 	bl	20000148 <select_controller>
	delay_500ns();
200002d4:	f7ff feee 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff fef4 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
200002de:	f7ff fee9 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff ff12 	bl	2000010c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2208      	movs	r2, #8
200002ee:	4013      	ands	r3, r2
200002f0:	d004      	beq.n	200002fc <graphic_write+0x4c>
		select_controller(B_CS1);
200002f2:	2008      	movs	r0, #8
200002f4:	f7ff ff28 	bl	20000148 <select_controller>
		graphic_wait_ready();
200002f8:	f7ff ff57 	bl	200001aa <graphic_wait_ready>
	}
	if(controller & B_CS2){
200002fc:	1dbb      	adds	r3, r7, #6
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2210      	movs	r2, #16
20000302:	4013      	ands	r3, r2
20000304:	d004      	beq.n	20000310 <graphic_write+0x60>
		select_controller(B_CS2);
20000306:	2010      	movs	r0, #16
20000308:	f7ff ff1e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000030c:	f7ff ff4d 	bl	200001aa <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000310:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7c>)
20000312:	2200      	movs	r2, #0
20000314:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff fed5 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(0);
2000031c:	2000      	movs	r0, #0
2000031e:	f7ff ff13 	bl	20000148 <select_controller>
}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}
2000032a:	46c0      	nop			; (mov r8, r8)
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fee2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff fefb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000352:	2003      	movs	r0, #3
20000354:	f7ff feda 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa4 	bl	200002b0 <graphic_write>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff fec2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fedb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000392:	2001      	movs	r0, #1
20000394:	f7ff fe97 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000398:	2002      	movs	r0, #2
2000039a:	f7ff feb7 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff81 	bl	200002b0 <graphic_write>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
200003bc:	0002      	movs	r2, r0
200003be:	1dfb      	adds	r3, r7, #7
200003c0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	0018      	movs	r0, r3
200003c8:	f7ff ff2a 	bl	20000220 <graphic_read>
	return graphic_read(controller);
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff25 	bl	20000220 <graphic_read>
200003d6:	0003      	movs	r3, r0
}
200003d8:	0018      	movs	r0, r3
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <graphic_initialize>:

void graphic_initialize(){
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff fe6e 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ea:	200a      	movs	r0, #10
200003ec:	f7ff fe34 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003f0:	2078      	movs	r0, #120	; 0x78
200003f2:	f7ff fe8b 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_milli(30);
200003f6:	201e      	movs	r0, #30
200003f8:	f7ff fe44 	bl	20000084 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003fc:	2020      	movs	r0, #32
200003fe:	f7ff fe62 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000402:	2118      	movs	r1, #24
20000404:	203e      	movs	r0, #62	; 0x3e
20000406:	f7ff ff93 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	203f      	movs	r0, #63	; 0x3f
2000040e:	f7ff ff8f 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000412:	2118      	movs	r1, #24
20000414:	20c0      	movs	r0, #192	; 0xc0
20000416:	f7ff ff8b 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	2040      	movs	r0, #64	; 0x40
2000041e:	f7ff ff87 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000422:	2118      	movs	r1, #24
20000424:	20b8      	movs	r0, #184	; 0xb8
20000426:	f7ff ff83 	bl	20000330 <graphic_write_command>
	select_controller(0);
2000042a:	2000      	movs	r0, #0
2000042c:	f7ff fe8c 	bl	20000148 <select_controller>
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	bd80      	pop	{r7, pc}

20000436 <graphic_clear_screen>:

void graphic_clear_screen(){
20000436:	b580      	push	{r7, lr}
20000438:	b082      	sub	sp, #8
2000043a:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	2200      	movs	r2, #0
20000440:	701a      	strb	r2, [r3, #0]
20000442:	e023      	b.n	2000048c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2248      	movs	r2, #72	; 0x48
2000044a:	4252      	negs	r2, r2
2000044c:	4313      	orrs	r3, r2
2000044e:	b2db      	uxtb	r3, r3
20000450:	2118      	movs	r1, #24
20000452:	0018      	movs	r0, r3
20000454:	f7ff ff6c 	bl	20000330 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000458:	2118      	movs	r1, #24
2000045a:	2040      	movs	r0, #64	; 0x40
2000045c:	f7ff ff68 	bl	20000330 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
20000460:	1dbb      	adds	r3, r7, #6
20000462:	2200      	movs	r2, #0
20000464:	701a      	strb	r2, [r3, #0]
20000466:	e008      	b.n	2000047a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000468:	2118      	movs	r1, #24
2000046a:	2000      	movs	r0, #0
2000046c:	f7ff ff80 	bl	20000370 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000470:	1dbb      	adds	r3, r7, #6
20000472:	781a      	ldrb	r2, [r3, #0]
20000474:	1dbb      	adds	r3, r7, #6
20000476:	3201      	adds	r2, #1
20000478:	701a      	strb	r2, [r3, #0]
2000047a:	1dbb      	adds	r3, r7, #6
2000047c:	781b      	ldrb	r3, [r3, #0]
2000047e:	2b3f      	cmp	r3, #63	; 0x3f
20000480:	d9f2      	bls.n	20000468 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781a      	ldrb	r2, [r3, #0]
20000486:	1dfb      	adds	r3, r7, #7
20000488:	3201      	adds	r2, #1
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dfb      	adds	r3, r7, #7
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	2b07      	cmp	r3, #7
20000492:	d9d7      	bls.n	20000444 <graphic_clear_screen+0xe>
		}
	}
}
20000494:	46c0      	nop			; (mov r8, r8)
20000496:	46c0      	nop			; (mov r8, r8)
20000498:	46bd      	mov	sp, r7
2000049a:	b002      	add	sp, #8
2000049c:	bd80      	pop	{r7, pc}

2000049e <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
2000049e:	b5f0      	push	{r4, r5, r6, r7, lr}
200004a0:	b085      	sub	sp, #20
200004a2:	af00      	add	r7, sp, #0
200004a4:	0004      	movs	r4, r0
200004a6:	0008      	movs	r0, r1
200004a8:	0011      	movs	r1, r2
200004aa:	1dfb      	adds	r3, r7, #7
200004ac:	1c22      	adds	r2, r4, #0
200004ae:	701a      	strb	r2, [r3, #0]
200004b0:	1dbb      	adds	r3, r7, #6
200004b2:	1c02      	adds	r2, r0, #0
200004b4:	701a      	strb	r2, [r3, #0]
200004b6:	1d7b      	adds	r3, r7, #5
200004b8:	1c0a      	adds	r2, r1, #0
200004ba:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
200004bc:	1dfb      	adds	r3, r7, #7
200004be:	781b      	ldrb	r3, [r3, #0]
200004c0:	2b80      	cmp	r3, #128	; 0x80
200004c2:	d900      	bls.n	200004c6 <pixel+0x28>
200004c4:	e0c7      	b.n	20000656 <pixel+0x1b8>
200004c6:	1dbb      	adds	r3, r7, #6
200004c8:	781b      	ldrb	r3, [r3, #0]
200004ca:	2b40      	cmp	r3, #64	; 0x40
200004cc:	d900      	bls.n	200004d0 <pixel+0x32>
200004ce:	e0c2      	b.n	20000656 <pixel+0x1b8>
200004d0:	1dfb      	adds	r3, r7, #7
200004d2:	781b      	ldrb	r3, [r3, #0]
200004d4:	2b00      	cmp	r3, #0
200004d6:	d100      	bne.n	200004da <pixel+0x3c>
200004d8:	e0bd      	b.n	20000656 <pixel+0x1b8>
200004da:	1dbb      	adds	r3, r7, #6
200004dc:	781b      	ldrb	r3, [r3, #0]
200004de:	2b00      	cmp	r3, #0
200004e0:	d100      	bne.n	200004e4 <pixel+0x46>
200004e2:	e0b8      	b.n	20000656 <pixel+0x1b8>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
200004e4:	1dbb      	adds	r3, r7, #6
200004e6:	781b      	ldrb	r3, [r3, #0]
200004e8:	3b01      	subs	r3, #1
200004ea:	2b00      	cmp	r3, #0
200004ec:	da00      	bge.n	200004f0 <pixel+0x52>
200004ee:	3307      	adds	r3, #7
200004f0:	10db      	asrs	r3, r3, #3
200004f2:	001a      	movs	r2, r3
200004f4:	230c      	movs	r3, #12
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
200004fa:	1dbb      	adds	r3, r7, #6
200004fc:	781b      	ldrb	r3, [r3, #0]
200004fe:	3b01      	subs	r3, #1
20000500:	4a57      	ldr	r2, [pc, #348]	; (20000660 <pixel+0x1c2>)
20000502:	4013      	ands	r3, r2
20000504:	d504      	bpl.n	20000510 <pixel+0x72>
20000506:	3b01      	subs	r3, #1
20000508:	2208      	movs	r2, #8
2000050a:	4252      	negs	r2, r2
2000050c:	4313      	orrs	r3, r2
2000050e:	3301      	adds	r3, #1
20000510:	2b07      	cmp	r3, #7
20000512:	d82c      	bhi.n	2000056e <pixel+0xd0>
20000514:	009a      	lsls	r2, r3, #2
20000516:	4b53      	ldr	r3, [pc, #332]	; (20000664 <pixel+0x1c6>)
20000518:	18d3      	adds	r3, r2, r3
2000051a:	681b      	ldr	r3, [r3, #0]
2000051c:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000051e:	230f      	movs	r3, #15
20000520:	18fb      	adds	r3, r7, r3
20000522:	2201      	movs	r2, #1
20000524:	701a      	strb	r2, [r3, #0]
20000526:	e023      	b.n	20000570 <pixel+0xd2>
		case 1: mask = 2; break;
20000528:	230f      	movs	r3, #15
2000052a:	18fb      	adds	r3, r7, r3
2000052c:	2202      	movs	r2, #2
2000052e:	701a      	strb	r2, [r3, #0]
20000530:	e01e      	b.n	20000570 <pixel+0xd2>
		case 2: mask = 4; break;
20000532:	230f      	movs	r3, #15
20000534:	18fb      	adds	r3, r7, r3
20000536:	2204      	movs	r2, #4
20000538:	701a      	strb	r2, [r3, #0]
2000053a:	e019      	b.n	20000570 <pixel+0xd2>
		case 3: mask = 8; break;
2000053c:	230f      	movs	r3, #15
2000053e:	18fb      	adds	r3, r7, r3
20000540:	2208      	movs	r2, #8
20000542:	701a      	strb	r2, [r3, #0]
20000544:	e014      	b.n	20000570 <pixel+0xd2>
		case 4: mask = 0x10; break;
20000546:	230f      	movs	r3, #15
20000548:	18fb      	adds	r3, r7, r3
2000054a:	2210      	movs	r2, #16
2000054c:	701a      	strb	r2, [r3, #0]
2000054e:	e00f      	b.n	20000570 <pixel+0xd2>
		case 5: mask = 0x20; break;
20000550:	230f      	movs	r3, #15
20000552:	18fb      	adds	r3, r7, r3
20000554:	2220      	movs	r2, #32
20000556:	701a      	strb	r2, [r3, #0]
20000558:	e00a      	b.n	20000570 <pixel+0xd2>
		case 6: mask = 0x40; break;
2000055a:	230f      	movs	r3, #15
2000055c:	18fb      	adds	r3, r7, r3
2000055e:	2240      	movs	r2, #64	; 0x40
20000560:	701a      	strb	r2, [r3, #0]
20000562:	e005      	b.n	20000570 <pixel+0xd2>
		case 7: mask = 0x80; break;
20000564:	230f      	movs	r3, #15
20000566:	18fb      	adds	r3, r7, r3
20000568:	2280      	movs	r2, #128	; 0x80
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	e000      	b.n	20000570 <pixel+0xd2>
		default: break;
2000056e:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
20000570:	1d7b      	adds	r3, r7, #5
20000572:	781b      	ldrb	r3, [r3, #0]
20000574:	2b00      	cmp	r3, #0
20000576:	d105      	bne.n	20000584 <pixel+0xe6>
		mask = ~mask;
20000578:	220f      	movs	r2, #15
2000057a:	18bb      	adds	r3, r7, r2
2000057c:	18ba      	adds	r2, r7, r2
2000057e:	7812      	ldrb	r2, [r2, #0]
20000580:	43d2      	mvns	r2, r2
20000582:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
20000584:	1dfb      	adds	r3, r7, #7
20000586:	781b      	ldrb	r3, [r3, #0]
20000588:	2b40      	cmp	r3, #64	; 0x40
2000058a:	d90a      	bls.n	200005a2 <pixel+0x104>
		controller = B_CS2;
2000058c:	230e      	movs	r3, #14
2000058e:	18fb      	adds	r3, r7, r3
20000590:	2210      	movs	r2, #16
20000592:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
20000594:	230d      	movs	r3, #13
20000596:	18fb      	adds	r3, r7, r3
20000598:	1dfa      	adds	r2, r7, #7
2000059a:	7812      	ldrb	r2, [r2, #0]
2000059c:	3a41      	subs	r2, #65	; 0x41
2000059e:	701a      	strb	r2, [r3, #0]
200005a0:	e009      	b.n	200005b6 <pixel+0x118>
	}else{
		controller = B_CS1;
200005a2:	230e      	movs	r3, #14
200005a4:	18fb      	adds	r3, r7, r3
200005a6:	2208      	movs	r2, #8
200005a8:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005aa:	230d      	movs	r3, #13
200005ac:	18fb      	adds	r3, r7, r3
200005ae:	1dfa      	adds	r2, r7, #7
200005b0:	7812      	ldrb	r2, [r2, #0]
200005b2:	3a01      	subs	r2, #1
200005b4:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005b6:	260d      	movs	r6, #13
200005b8:	19bb      	adds	r3, r7, r6
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	2240      	movs	r2, #64	; 0x40
200005be:	4313      	orrs	r3, r2
200005c0:	b2da      	uxtb	r2, r3
200005c2:	250e      	movs	r5, #14
200005c4:	197b      	adds	r3, r7, r5
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0019      	movs	r1, r3
200005ca:	0010      	movs	r0, r2
200005cc:	f7ff feb0 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005d0:	230c      	movs	r3, #12
200005d2:	18fb      	adds	r3, r7, r3
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	2248      	movs	r2, #72	; 0x48
200005d8:	4252      	negs	r2, r2
200005da:	4313      	orrs	r3, r2
200005dc:	b2da      	uxtb	r2, r3
200005de:	197b      	adds	r3, r7, r5
200005e0:	781b      	ldrb	r3, [r3, #0]
200005e2:	0019      	movs	r1, r3
200005e4:	0010      	movs	r0, r2
200005e6:	f7ff fea3 	bl	20000330 <graphic_write_command>
	data_holder = graphic_read_data(controller);
200005ea:	230b      	movs	r3, #11
200005ec:	18fc      	adds	r4, r7, r3
200005ee:	197b      	adds	r3, r7, r5
200005f0:	781b      	ldrb	r3, [r3, #0]
200005f2:	0018      	movs	r0, r3
200005f4:	f7ff fedf 	bl	200003b6 <graphic_read_data>
200005f8:	0003      	movs	r3, r0
200005fa:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005fc:	19bb      	adds	r3, r7, r6
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2240      	movs	r2, #64	; 0x40
20000602:	4313      	orrs	r3, r2
20000604:	b2da      	uxtb	r2, r3
20000606:	197b      	adds	r3, r7, r5
20000608:	781b      	ldrb	r3, [r3, #0]
2000060a:	0019      	movs	r1, r3
2000060c:	0010      	movs	r0, r2
2000060e:	f7ff fe8f 	bl	20000330 <graphic_write_command>
	if(set==1){
20000612:	1d7b      	adds	r3, r7, #5
20000614:	781b      	ldrb	r3, [r3, #0]
20000616:	2b01      	cmp	r3, #1
20000618:	d109      	bne.n	2000062e <pixel+0x190>
		mask |= data_holder;
2000061a:	210f      	movs	r1, #15
2000061c:	187b      	adds	r3, r7, r1
2000061e:	1879      	adds	r1, r7, r1
20000620:	220b      	movs	r2, #11
20000622:	18ba      	adds	r2, r7, r2
20000624:	7809      	ldrb	r1, [r1, #0]
20000626:	7812      	ldrb	r2, [r2, #0]
20000628:	430a      	orrs	r2, r1
2000062a:	701a      	strb	r2, [r3, #0]
2000062c:	e008      	b.n	20000640 <pixel+0x1a2>
	}else{
		mask &= data_holder;
2000062e:	220f      	movs	r2, #15
20000630:	18bb      	adds	r3, r7, r2
20000632:	18ba      	adds	r2, r7, r2
20000634:	210b      	movs	r1, #11
20000636:	1879      	adds	r1, r7, r1
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	7809      	ldrb	r1, [r1, #0]
2000063c:	400a      	ands	r2, r1
2000063e:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000640:	230e      	movs	r3, #14
20000642:	18fb      	adds	r3, r7, r3
20000644:	781a      	ldrb	r2, [r3, #0]
20000646:	230f      	movs	r3, #15
20000648:	18fb      	adds	r3, r7, r3
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	0011      	movs	r1, r2
2000064e:	0018      	movs	r0, r3
20000650:	f7ff fe8e 	bl	20000370 <graphic_write_data>
20000654:	e000      	b.n	20000658 <pixel+0x1ba>
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
20000656:	46c0      	nop			; (mov r8, r8)
}
20000658:	46bd      	mov	sp, r7
2000065a:	b005      	add	sp, #20
2000065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	80000007 	andhi	r0, r0, r7
20000664:	20000a90 	mulcs	r0, r0, sl

20000668 <set_object_speed>:

// 					OBJECT FUNCTIONS					//

void set_object_speed(POBJECT o, int speedx, int speedy){
20000668:	b580      	push	{r7, lr}
2000066a:	b084      	sub	sp, #16
2000066c:	af00      	add	r7, sp, #0
2000066e:	60f8      	str	r0, [r7, #12]
20000670:	60b9      	str	r1, [r7, #8]
20000672:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000674:	68fb      	ldr	r3, [r7, #12]
20000676:	68ba      	ldr	r2, [r7, #8]
20000678:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
2000067a:	68fb      	ldr	r3, [r7, #12]
2000067c:	687a      	ldr	r2, [r7, #4]
2000067e:	609a      	str	r2, [r3, #8]
}
20000680:	46c0      	nop			; (mov r8, r8)
20000682:	46bd      	mov	sp, r7
20000684:	b004      	add	sp, #16
20000686:	bd80      	pop	{r7, pc}

20000688 <draw_object>:

void draw_object(POBJECT o){
20000688:	b580      	push	{r7, lr}
2000068a:	b084      	sub	sp, #16
2000068c:	af00      	add	r7, sp, #0
2000068e:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000690:	2300      	movs	r3, #0
20000692:	60fb      	str	r3, [r7, #12]
20000694:	e020      	b.n	200006d8 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
20000696:	687b      	ldr	r3, [r7, #4]
20000698:	681a      	ldr	r2, [r3, #0]
2000069a:	68fb      	ldr	r3, [r7, #12]
2000069c:	3304      	adds	r3, #4
2000069e:	005b      	lsls	r3, r3, #1
200006a0:	18d3      	adds	r3, r2, r3
200006a2:	3304      	adds	r3, #4
200006a4:	781a      	ldrb	r2, [r3, #0]
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	68db      	ldr	r3, [r3, #12]
200006aa:	b2db      	uxtb	r3, r3
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	b2d8      	uxtb	r0, r3
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	681a      	ldr	r2, [r3, #0]
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	3304      	adds	r3, #4
200006b8:	005b      	lsls	r3, r3, #1
200006ba:	18d3      	adds	r3, r2, r3
200006bc:	3305      	adds	r3, #5
200006be:	781a      	ldrb	r2, [r3, #0]
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	691b      	ldr	r3, [r3, #16]
200006c4:	b2db      	uxtb	r3, r3
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	b2db      	uxtb	r3, r3
200006ca:	2201      	movs	r2, #1
200006cc:	0019      	movs	r1, r3
200006ce:	f7ff fee6 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006d2:	68fb      	ldr	r3, [r7, #12]
200006d4:	3301      	adds	r3, #1
200006d6:	60fb      	str	r3, [r7, #12]
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	68fa      	ldr	r2, [r7, #12]
200006e0:	429a      	cmp	r2, r3
200006e2:	dbd8      	blt.n	20000696 <draw_object+0xe>
	}
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	46bd      	mov	sp, r7
200006ea:	b004      	add	sp, #16
200006ec:	bd80      	pop	{r7, pc}

200006ee <clear_object>:

void clear_object(POBJECT o){
200006ee:	b580      	push	{r7, lr}
200006f0:	b084      	sub	sp, #16
200006f2:	af00      	add	r7, sp, #0
200006f4:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
200006f6:	2300      	movs	r3, #0
200006f8:	60fb      	str	r3, [r7, #12]
200006fa:	e020      	b.n	2000073e <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	681a      	ldr	r2, [r3, #0]
20000700:	68fb      	ldr	r3, [r7, #12]
20000702:	3304      	adds	r3, #4
20000704:	005b      	lsls	r3, r3, #1
20000706:	18d3      	adds	r3, r2, r3
20000708:	3304      	adds	r3, #4
2000070a:	781a      	ldrb	r2, [r3, #0]
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	68db      	ldr	r3, [r3, #12]
20000710:	b2db      	uxtb	r3, r3
20000712:	18d3      	adds	r3, r2, r3
20000714:	b2d8      	uxtb	r0, r3
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	681a      	ldr	r2, [r3, #0]
2000071a:	68fb      	ldr	r3, [r7, #12]
2000071c:	3304      	adds	r3, #4
2000071e:	005b      	lsls	r3, r3, #1
20000720:	18d3      	adds	r3, r2, r3
20000722:	3305      	adds	r3, #5
20000724:	781a      	ldrb	r2, [r3, #0]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	691b      	ldr	r3, [r3, #16]
2000072a:	b2db      	uxtb	r3, r3
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	b2db      	uxtb	r3, r3
20000730:	2200      	movs	r2, #0
20000732:	0019      	movs	r1, r3
20000734:	f7ff feb3 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000738:	68fb      	ldr	r3, [r7, #12]
2000073a:	3301      	adds	r3, #1
2000073c:	60fb      	str	r3, [r7, #12]
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	681b      	ldr	r3, [r3, #0]
20000742:	681b      	ldr	r3, [r3, #0]
20000744:	68fa      	ldr	r2, [r7, #12]
20000746:	429a      	cmp	r2, r3
20000748:	dbd8      	blt.n	200006fc <clear_object+0xe>
	}
}
2000074a:	46c0      	nop			; (mov r8, r8)
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	b004      	add	sp, #16
20000752:	bd80      	pop	{r7, pc}

20000754 <move_object>:

void move_object(POBJECT o){
20000754:	b580      	push	{r7, lr}
20000756:	b084      	sub	sp, #16
20000758:	af00      	add	r7, sp, #0
2000075a:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	0018      	movs	r0, r3
20000760:	f7ff ffc5 	bl	200006ee <clear_object>
	int newx = o->posx + o->dx;
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	68da      	ldr	r2, [r3, #12]
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	685b      	ldr	r3, [r3, #4]
2000076c:	18d3      	adds	r3, r2, r3
2000076e:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	691a      	ldr	r2, [r3, #16]
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	689b      	ldr	r3, [r3, #8]
20000778:	18d3      	adds	r3, r2, r3
2000077a:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	2b00      	cmp	r3, #0
20000780:	dc08      	bgt.n	20000794 <move_object+0x40>
		o->dx = -o->dx;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	685b      	ldr	r3, [r3, #4]
20000786:	425a      	negs	r2, r3
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	605a      	str	r2, [r3, #4]
		o->posx = 1;
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	2201      	movs	r2, #1
20000790:	60da      	str	r2, [r3, #12]
20000792:	e03a      	b.n	2000080a <move_object+0xb6>
	}
	else if((newx + o->geo->sizex) > 128){
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	681b      	ldr	r3, [r3, #0]
20000798:	685a      	ldr	r2, [r3, #4]
2000079a:	68fb      	ldr	r3, [r7, #12]
2000079c:	18d3      	adds	r3, r2, r3
2000079e:	2b80      	cmp	r3, #128	; 0x80
200007a0:	dd0c      	ble.n	200007bc <move_object+0x68>
		o->dx = -o->dx;
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	685b      	ldr	r3, [r3, #4]
200007a6:	425a      	negs	r2, r3
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	685b      	ldr	r3, [r3, #4]
200007b2:	2280      	movs	r2, #128	; 0x80
200007b4:	1ad2      	subs	r2, r2, r3
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	60da      	str	r2, [r3, #12]
200007ba:	e026      	b.n	2000080a <move_object+0xb6>
	}
	else if(newy < 1){
200007bc:	68bb      	ldr	r3, [r7, #8]
200007be:	2b00      	cmp	r3, #0
200007c0:	dc08      	bgt.n	200007d4 <move_object+0x80>
		o->dy = -o->dy;
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	689b      	ldr	r3, [r3, #8]
200007c6:	425a      	negs	r2, r3
200007c8:	687b      	ldr	r3, [r7, #4]
200007ca:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	2201      	movs	r2, #1
200007d0:	611a      	str	r2, [r3, #16]
200007d2:	e01a      	b.n	2000080a <move_object+0xb6>
	}
	else if(newy > 64 - o->geo->sizey){
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	681b      	ldr	r3, [r3, #0]
200007d8:	689b      	ldr	r3, [r3, #8]
200007da:	2240      	movs	r2, #64	; 0x40
200007dc:	1ad3      	subs	r3, r2, r3
200007de:	68ba      	ldr	r2, [r7, #8]
200007e0:	429a      	cmp	r2, r3
200007e2:	dd0c      	ble.n	200007fe <move_object+0xaa>
		o->dy = -o->dy;
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	689b      	ldr	r3, [r3, #8]
200007e8:	425a      	negs	r2, r3
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
200007ee:	687b      	ldr	r3, [r7, #4]
200007f0:	681b      	ldr	r3, [r3, #0]
200007f2:	689b      	ldr	r3, [r3, #8]
200007f4:	2240      	movs	r2, #64	; 0x40
200007f6:	1ad2      	subs	r2, r2, r3
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	611a      	str	r2, [r3, #16]
200007fc:	e005      	b.n	2000080a <move_object+0xb6>
	}else{
		o->posx = newx;
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	68fa      	ldr	r2, [r7, #12]
20000802:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000804:	687b      	ldr	r3, [r7, #4]
20000806:	68ba      	ldr	r2, [r7, #8]
20000808:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	0018      	movs	r0, r3
2000080e:	f7ff ff3b 	bl	20000688 <draw_object>
}
20000812:	46c0      	nop			; (mov r8, r8)
20000814:	46bd      	mov	sp, r7
20000816:	b004      	add	sp, #16
20000818:	bd80      	pop	{r7, pc}

2000081a <keyb>:

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 1, 1, draw_object, clear_object, move_object, set_object_speed};

unsigned char keyb(){
2000081a:	b580      	push	{r7, lr}
2000081c:	b082      	sub	sp, #8
2000081e:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000820:	2300      	movs	r3, #0
20000822:	607b      	str	r3, [r7, #4]
20000824:	e01c      	b.n	20000860 <keyb+0x46>
		activateRow(row);
20000826:	687b      	ldr	r3, [r7, #4]
20000828:	0018      	movs	r0, r3
2000082a:	f000 f821 	bl	20000870 <activateRow>
		column = readColumn();
2000082e:	f000 f86b 	bl	20000908 <readColumn>
20000832:	0002      	movs	r2, r0
20000834:	1cfb      	adds	r3, r7, #3
20000836:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000838:	1cfb      	adds	r3, r7, #3
2000083a:	781b      	ldrb	r3, [r3, #0]
2000083c:	2b04      	cmp	r3, #4
2000083e:	d00c      	beq.n	2000085a <keyb+0x40>
			key = getKeyValue(row, column);
20000840:	1cfb      	adds	r3, r7, #3
20000842:	781a      	ldrb	r2, [r3, #0]
20000844:	687b      	ldr	r3, [r7, #4]
20000846:	0011      	movs	r1, r2
20000848:	0018      	movs	r0, r3
2000084a:	f000 f843 	bl	200008d4 <getKeyValue>
2000084e:	0002      	movs	r2, r0
20000850:	1cbb      	adds	r3, r7, #2
20000852:	701a      	strb	r2, [r3, #0]
			return key;
20000854:	1cbb      	adds	r3, r7, #2
20000856:	781b      	ldrb	r3, [r3, #0]
20000858:	e006      	b.n	20000868 <keyb+0x4e>
	for(int row = 0; row < 4; row++){
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	3301      	adds	r3, #1
2000085e:	607b      	str	r3, [r7, #4]
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	2b03      	cmp	r3, #3
20000864:	dddf      	ble.n	20000826 <keyb+0xc>
		}
	}
	return -1;
20000866:	23ff      	movs	r3, #255	; 0xff
}
20000868:	0018      	movs	r0, r3
2000086a:	46bd      	mov	sp, r7
2000086c:	b002      	add	sp, #8
2000086e:	bd80      	pop	{r7, pc}

20000870 <activateRow>:

void activateRow(int row){
20000870:	b580      	push	{r7, lr}
20000872:	b082      	sub	sp, #8
20000874:	af00      	add	r7, sp, #0
20000876:	6078      	str	r0, [r7, #4]
	switch(row){
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	2b03      	cmp	r3, #3
2000087c:	d01b      	beq.n	200008b6 <activateRow+0x46>
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	2b03      	cmp	r3, #3
20000882:	dc1c      	bgt.n	200008be <activateRow+0x4e>
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	2b02      	cmp	r3, #2
20000888:	d011      	beq.n	200008ae <activateRow+0x3e>
2000088a:	687b      	ldr	r3, [r7, #4]
2000088c:	2b02      	cmp	r3, #2
2000088e:	dc16      	bgt.n	200008be <activateRow+0x4e>
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	2b00      	cmp	r3, #0
20000894:	d003      	beq.n	2000089e <activateRow+0x2e>
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	2b01      	cmp	r3, #1
2000089a:	d004      	beq.n	200008a6 <activateRow+0x36>
2000089c:	e00f      	b.n	200008be <activateRow+0x4e>
		case 0: * KeypadOut = 0x10; break;
2000089e:	4b0c      	ldr	r3, [pc, #48]	; (200008d0 <activateRow+0x60>)
200008a0:	2210      	movs	r2, #16
200008a2:	701a      	strb	r2, [r3, #0]
200008a4:	e00f      	b.n	200008c6 <activateRow+0x56>
		case 1: * KeypadOut = 0x20; break;
200008a6:	4b0a      	ldr	r3, [pc, #40]	; (200008d0 <activateRow+0x60>)
200008a8:	2220      	movs	r2, #32
200008aa:	701a      	strb	r2, [r3, #0]
200008ac:	e00b      	b.n	200008c6 <activateRow+0x56>
		case 2: * KeypadOut = 0x40; break;
200008ae:	4b08      	ldr	r3, [pc, #32]	; (200008d0 <activateRow+0x60>)
200008b0:	2240      	movs	r2, #64	; 0x40
200008b2:	701a      	strb	r2, [r3, #0]
200008b4:	e007      	b.n	200008c6 <activateRow+0x56>
		case 3: * KeypadOut = 0x80; break;
200008b6:	4b06      	ldr	r3, [pc, #24]	; (200008d0 <activateRow+0x60>)
200008b8:	2280      	movs	r2, #128	; 0x80
200008ba:	701a      	strb	r2, [r3, #0]
200008bc:	e003      	b.n	200008c6 <activateRow+0x56>
		default: * KeypadOut = 0x0;
200008be:	4b04      	ldr	r3, [pc, #16]	; (200008d0 <activateRow+0x60>)
200008c0:	2200      	movs	r2, #0
200008c2:	701a      	strb	r2, [r3, #0]
	}
}
200008c4:	46c0      	nop			; (mov r8, r8)
200008c6:	46c0      	nop			; (mov r8, r8)
200008c8:	46bd      	mov	sp, r7
200008ca:	b002      	add	sp, #8
200008cc:	bd80      	pop	{r7, pc}
200008ce:	46c0      	nop			; (mov r8, r8)
200008d0:	40020c15 	andmi	r0, r2, r5, lsl ip

200008d4 <getKeyValue>:

int getKeyValue(int row, int column){
200008d4:	b5b0      	push	{r4, r5, r7, lr}
200008d6:	b086      	sub	sp, #24
200008d8:	af00      	add	r7, sp, #0
200008da:	6078      	str	r0, [r7, #4]
200008dc:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
200008de:	2108      	movs	r1, #8
200008e0:	187b      	adds	r3, r7, r1
200008e2:	4a08      	ldr	r2, [pc, #32]	; (20000904 <getKeyValue+0x30>)
200008e4:	ca31      	ldmia	r2!, {r0, r4, r5}
200008e6:	c331      	stmia	r3!, {r0, r4, r5}
200008e8:	6812      	ldr	r2, [r2, #0]
200008ea:	601a      	str	r2, [r3, #0]
	return keys[row][column];
200008ec:	187a      	adds	r2, r7, r1
200008ee:	687b      	ldr	r3, [r7, #4]
200008f0:	009b      	lsls	r3, r3, #2
200008f2:	18d2      	adds	r2, r2, r3
200008f4:	683b      	ldr	r3, [r7, #0]
200008f6:	18d3      	adds	r3, r2, r3
200008f8:	781b      	ldrb	r3, [r3, #0]
}
200008fa:	0018      	movs	r0, r3
200008fc:	46bd      	mov	sp, r7
200008fe:	b006      	add	sp, #24
20000900:	bdb0      	pop	{r4, r5, r7, pc}
20000902:	46c0      	nop			; (mov r8, r8)
20000904:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0

20000908 <readColumn>:

int readColumn(){
20000908:	b580      	push	{r7, lr}
2000090a:	b082      	sub	sp, #8
2000090c:	af00      	add	r7, sp, #0
	unsigned char c = * KeypadIn;
2000090e:	4a12      	ldr	r2, [pc, #72]	; (20000958 <readColumn+0x50>)
20000910:	1dfb      	adds	r3, r7, #7
20000912:	7812      	ldrb	r2, [r2, #0]
20000914:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
20000916:	1dfb      	adds	r3, r7, #7
20000918:	781b      	ldrb	r3, [r3, #0]
2000091a:	2208      	movs	r2, #8
2000091c:	4013      	ands	r3, r2
2000091e:	d001      	beq.n	20000924 <readColumn+0x1c>
20000920:	2303      	movs	r3, #3
20000922:	e015      	b.n	20000950 <readColumn+0x48>
	if(c & 0x4){return 2;}
20000924:	1dfb      	adds	r3, r7, #7
20000926:	781b      	ldrb	r3, [r3, #0]
20000928:	2204      	movs	r2, #4
2000092a:	4013      	ands	r3, r2
2000092c:	d001      	beq.n	20000932 <readColumn+0x2a>
2000092e:	2302      	movs	r3, #2
20000930:	e00e      	b.n	20000950 <readColumn+0x48>
	if(c & 0x2){return 1;}
20000932:	1dfb      	adds	r3, r7, #7
20000934:	781b      	ldrb	r3, [r3, #0]
20000936:	2202      	movs	r2, #2
20000938:	4013      	ands	r3, r2
2000093a:	d001      	beq.n	20000940 <readColumn+0x38>
2000093c:	2301      	movs	r3, #1
2000093e:	e007      	b.n	20000950 <readColumn+0x48>
	if(c & 0x1){return 0;}
20000940:	1dfb      	adds	r3, r7, #7
20000942:	781b      	ldrb	r3, [r3, #0]
20000944:	2201      	movs	r2, #1
20000946:	4013      	ands	r3, r2
20000948:	d001      	beq.n	2000094e <readColumn+0x46>
2000094a:	2300      	movs	r3, #0
2000094c:	e000      	b.n	20000950 <readColumn+0x48>
	return 4;
2000094e:	2304      	movs	r3, #4
}
20000950:	0018      	movs	r0, r3
20000952:	46bd      	mov	sp, r7
20000954:	b002      	add	sp, #8
20000956:	bd80      	pop	{r7, pc}
20000958:	40020c11 	andmi	r0, r2, r1, lsl ip

2000095c <init_app>:

void init_app(void){
2000095c:	b580      	push	{r7, lr}
2000095e:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000960:	4b0a      	ldr	r3, [pc, #40]	; (2000098c <init_app+0x30>)
20000962:	4a0b      	ldr	r2, [pc, #44]	; (20000990 <init_app+0x34>)
20000964:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005555;
20000966:	4b0b      	ldr	r3, [pc, #44]	; (20000994 <init_app+0x38>)
20000968:	4a0b      	ldr	r2, [pc, #44]	; (20000998 <init_app+0x3c>)
2000096a:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA0000;
2000096c:	4b0b      	ldr	r3, [pc, #44]	; (2000099c <init_app+0x40>)
2000096e:	22aa      	movs	r2, #170	; 0xaa
20000970:	0412      	lsls	r2, r2, #16
20000972:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000974:	4b0a      	ldr	r3, [pc, #40]	; (200009a0 <init_app+0x44>)
20000976:	2200      	movs	r2, #0
20000978:	801a      	strh	r2, [r3, #0]
	
	#ifdef USBDM
	* ((unsigned long *) 0x40023830) = 0x18;
2000097a:	4b0a      	ldr	r3, [pc, #40]	; (200009a4 <init_app+0x48>)
2000097c:	2218      	movs	r2, #24
2000097e:	601a      	str	r2, [r3, #0]
	__asm__ volatile(" LDR R0, =0x08000209\n");
20000980:	482c      	ldr	r0, [pc, #176]	; (20000a34 <main+0x8c>)
	__asm__ volatile(" BLX R0 \n");
20000982:	4780      	blx	r0
	#endif
}
20000984:	46c0      	nop			; (mov r8, r8)
20000986:	46bd      	mov	sp, r7
20000988:	bd80      	pop	{r7, pc}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	40021000 	andmi	r1, r2, r0
20000990:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000994:	40020c00 	andmi	r0, r2, r0, lsl #24
20000998:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
2000099c:	40020c30 	andmi	r0, r2, r0, lsr ip
200009a0:	40020c08 	andmi	r0, r2, r8, lsl #24
200009a4:	40023830 	andmi	r3, r2, r0, lsr r8

200009a8 <main>:

void main(void){
200009a8:	b590      	push	{r4, r7, lr}
200009aa:	b083      	sub	sp, #12
200009ac:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200009ae:	4b20      	ldr	r3, [pc, #128]	; (20000a30 <main+0x88>)
200009b0:	607b      	str	r3, [r7, #4]
	init_app();
200009b2:	f7ff ffd3 	bl	2000095c <init_app>
	graphic_initialize();
200009b6:	f7ff fd13 	bl	200003e0 <graphic_initialize>
#ifndef SIMULATOR
	graphic_clear_screen();
200009ba:	f7ff fd3c 	bl	20000436 <graphic_clear_screen>
#endif
	while(1){
		p->move(p);
200009be:	687b      	ldr	r3, [r7, #4]
200009c0:	69db      	ldr	r3, [r3, #28]
200009c2:	687a      	ldr	r2, [r7, #4]
200009c4:	0010      	movs	r0, r2
200009c6:	4798      	blx	r3
		delay_milli(40);
200009c8:	2028      	movs	r0, #40	; 0x28
200009ca:	f7ff fb5b 	bl	20000084 <delay_milli>
		uint8_t c = keyb();
200009ce:	1cfc      	adds	r4, r7, #3
200009d0:	f7ff ff23 	bl	2000081a <keyb>
200009d4:	0003      	movs	r3, r0
200009d6:	7023      	strb	r3, [r4, #0]
		switch(c){
200009d8:	1cfb      	adds	r3, r7, #3
200009da:	781b      	ldrb	r3, [r3, #0]
200009dc:	2b08      	cmp	r3, #8
200009de:	d01f      	beq.n	20000a20 <main+0x78>
200009e0:	dced      	bgt.n	200009be <main+0x16>
200009e2:	2b06      	cmp	r3, #6
200009e4:	d005      	beq.n	200009f2 <main+0x4a>
200009e6:	dcea      	bgt.n	200009be <main+0x16>
200009e8:	2b02      	cmp	r3, #2
200009ea:	d011      	beq.n	20000a10 <main+0x68>
200009ec:	2b04      	cmp	r3, #4
200009ee:	d007      	beq.n	20000a00 <main+0x58>
200009f0:	e01d      	b.n	20000a2e <main+0x86>
			case 6: p->set_speed(p,2,0);break;
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	6a1b      	ldr	r3, [r3, #32]
200009f6:	6878      	ldr	r0, [r7, #4]
200009f8:	2200      	movs	r2, #0
200009fa:	2102      	movs	r1, #2
200009fc:	4798      	blx	r3
200009fe:	e016      	b.n	20000a2e <main+0x86>
			case 4: p->set_speed(p,-2,0);break;
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	6a1b      	ldr	r3, [r3, #32]
20000a04:	2202      	movs	r2, #2
20000a06:	4251      	negs	r1, r2
20000a08:	6878      	ldr	r0, [r7, #4]
20000a0a:	2200      	movs	r2, #0
20000a0c:	4798      	blx	r3
20000a0e:	e00e      	b.n	20000a2e <main+0x86>
			case 2: p->set_speed(p,0,-2);break;
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	6a1b      	ldr	r3, [r3, #32]
20000a14:	2202      	movs	r2, #2
20000a16:	4252      	negs	r2, r2
20000a18:	6878      	ldr	r0, [r7, #4]
20000a1a:	2100      	movs	r1, #0
20000a1c:	4798      	blx	r3
20000a1e:	e006      	b.n	20000a2e <main+0x86>
			case 8: p->set_speed(p,0,2);break;
20000a20:	687b      	ldr	r3, [r7, #4]
20000a22:	6a1b      	ldr	r3, [r3, #32]
20000a24:	6878      	ldr	r0, [r7, #4]
20000a26:	2202      	movs	r2, #2
20000a28:	2100      	movs	r1, #0
20000a2a:	4798      	blx	r3
20000a2c:	46c0      	nop			; (mov r8, r8)
	while(1){
20000a2e:	e7c6      	b.n	200009be <main+0x16>
20000a30:	20000a6c 	andcs	r0, r0, ip, ror #20
20000a34:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000a38 <ball_geometry>:
20000a38:	0000000c 	andeq	r0, r0, ip
20000a3c:	00000004 	andeq	r0, r0, r4
20000a40:	00000004 	andeq	r0, r0, r4
20000a44:	02000100 	andeq	r0, r0, #0, 2
20000a48:	01010001 	tsteq	r1, r1
20000a4c:	03010201 	movweq	r0, #4609	; 0x1201
20000a50:	01020002 	tsteq	r2, r2
20000a54:	03020202 	movweq	r0, #8706	; 0x2202
20000a58:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000a6c <ball>:
20000a6c:	20000a38 	andcs	r0, r0, r8, lsr sl
	...
20000a78:	00000001 	andeq	r0, r0, r1
20000a7c:	00000001 	andeq	r0, r0, r1
20000a80:	20000689 	andcs	r0, r0, r9, lsl #13
20000a84:	200006ef 	andcs	r0, r0, pc, ror #13
20000a88:	20000755 	andcs	r0, r0, r5, asr r7
20000a8c:	20000669 	andcs	r0, r0, r9, ror #12
20000a90:	2000051e 	andcs	r0, r0, lr, lsl r5
20000a94:	20000528 	andcs	r0, r0, r8, lsr #10
20000a98:	20000532 	andcs	r0, r0, r2, lsr r5
20000a9c:	2000053c 	andcs	r0, r0, ip, lsr r5
20000aa0:	20000546 	andcs	r0, r0, r6, asr #10
20000aa4:	20000550 	andcs	r0, r0, r0, asr r5
20000aa8:	2000055a 	andcs	r0, r0, sl, asr r5
20000aac:	20000564 	andcs	r0, r0, r4, ror #10
20000ab0:	0a030201 	beq	200c12bc <ball+0xc0850>
20000ab4:	0b060504 	bleq	20181ecc <ball+0x181460>
20000ab8:	0c090807 	stceq	8, cr0, [r9], {7}
20000abc:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000007cb 	andeq	r0, r0, fp, asr #15
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000191 	muleq	r0, r1, r1
  10:	0002700c 	andeq	r7, r2, ip
  14:	00031700 	andeq	r1, r3, r0, lsl #14
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	01710200 	cmneq	r1, r0, lsl #4
  28:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000086 	andeq	r0, r0, r6, lsl #1
  38:	00006d04 	andeq	r6, r0, r4, lsl #26
  3c:	3c010200 	sfmcc	f0, 4, [r1], {-0}
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a3d01 	strcs	r3, [sl, #-3329]	; 0xfffff2ff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250a3e 	eoreq	r0, r5, lr, lsr sl
  58:	00010000 	andeq	r0, r1, r0
  5c:	00008002 	andeq	r8, r0, r2
  60:	023f0100 	eorseq	r0, pc, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00015e04 	andeq	r5, r1, r4, lsl #28
  6c:	41013400 	tstmi	r1, r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	030d0600 	movweq	r0, #54784	; 0xd600
  78:	42010000 	andmi	r0, r1, #0
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
  84:	01000001 	tsteq	r0, r1
  88:	00a90643 	adceq	r0, r9, r3, asr #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	0000017f 	andeq	r0, r0, pc, ror r1
  94:	a9064401 	stmdbge	r6, {r0, sl, lr}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0084501 	andlt	r4, r8, r1, lsl #10
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	51070403 	tstpl	r7, r3, lsl #8
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68034601 	stmdavs	r3, {r0, r9, sl, lr}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e4601 	svcle	0x000e4601
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02f60400 	rscseq	r0, r6, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	01661048 	cmneq	r6, r8, asr #32
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30c49 	sbcseq	r0, r3, r9, asr #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a9064a 	adceq	r0, r9, sl, asr #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90a4a 	adceq	r0, r9, sl, asr #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	000002fb 	strdeq	r0, [r0], -fp
 11c:	a9064b01 	stmdbge	r6, {r0, r8, r9, fp, lr}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00009406 	andeq	r9, r0, r6, lsl #8
 128:	0b4b0100 	bleq	12c0530 <startup-0x1ed3fad0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	022d0610 	eoreq	r0, sp, #16, 12	; 0x1000000
 134:	4c010000 	stcmi	0, cr0, [r1], {-0}
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	2c061400 	cfstrscs	mvf1, [r6], {-0}
 140:	01000001 	tsteq	r0, r1
 144:	01770a4d 	cmneq	r7, sp, asr #20
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000038 	andeq	r0, r0, r8, lsr r0
 150:	770a4e01 	strvc	r4, [sl, -r1, lsl #28]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00026006 	andeq	r6, r2, r6
 15c:	0a4f0100 	beq	13c0564 <startup-0x1ec3fa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	00038202 	andeq	r8, r3, r2, lsl #4
 19c:	03500100 	cmpeq	r0, #0, 2
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	00038102 	andeq	r8, r3, r2, lsl #2
 1a8:	0c500100 	ldfeqe	f0, [r0], {-0}
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0000990d 	andeq	r9, r0, sp, lsl #18
 1b4:	01570100 	cmpeq	r7, r0, lsl #2
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	38030500 	stmdacc	r3, {r8, sl}
 1c0:	0d20000a 	stceq	0, cr0, [r0, #-40]!	; 0xffffffd8
 1c4:	00000228 	andeq	r0, r0, r8, lsr #4
 1c8:	0f015801 	svceq	0x00015801
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	0a6c0305 	beq	1b00dec <startup-0x1e4ff214>
 1d4:	eb0e2000 	bl	3881dc <startup-0x1fc77e24>
 1d8:	01000000 	mrseq	r0, (UNDEF: 0)
 1dc:	a806018e 	stmdage	r6, {r1, r2, r3, r7, r8}
 1e0:	8c200009 	stchi	0, cr0, [r0], #-36	; 0xffffffdc
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0002149c 	muleq	r2, ip, r4
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a018f01 	beq	63dfc <startup-0x1ff9c204>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 1fc:	200009be 			; <UNDEFINED> instruction: 0x200009be
 200:	00000070 	andeq	r0, r0, r0, ror r0
 204:	0100630f 	tsteq	r0, pc, lsl #6
 208:	250b0198 	strcs	r0, [fp, #-408]	; 0xfffffe68
 20c:	02000000 	andeq	r0, r0, #0
 210:	00006b91 	muleq	r0, r1, fp
 214:	00016811 	andeq	r6, r1, r1, lsl r8
 218:	01810100 	orreq	r0, r1, r0, lsl #2
 21c:	00095c06 	andeq	r5, r9, r6, lsl #24
 220:	00004c20 	andeq	r4, r0, r0, lsr #24
 224:	129c0100 	addsne	r0, ip, #0, 2
 228:	000000db 	ldrdeq	r0, [r0], -fp
 22c:	05017801 	streq	r7, [r1, #-2049]	; 0xfffff7ff
 230:	000000a9 	andeq	r0, r0, r9, lsr #1
 234:	20000908 	andcs	r0, r0, r8, lsl #18
 238:	00000054 	andeq	r0, r0, r4, asr r0
 23c:	02519c01 	subseq	r9, r1, #256	; 0x100
 240:	630f0000 	movwvs	r0, #61440	; 0xf000
 244:	01790100 	cmneq	r9, r0, lsl #2
 248:	00003110 	andeq	r3, r0, r0, lsl r1
 24c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 250:	00bc1300 	adcseq	r1, ip, r0, lsl #6
 254:	73010000 	movwvc	r0, #4096	; 0x1000
 258:	00a90501 	adceq	r0, r9, r1, lsl #10
 25c:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
 260:	00342000 	eorseq	r2, r4, r0
 264:	9c010000 	stcls	0, cr0, [r1], {-0}
 268:	0000029d 	muleq	r0, sp, r2
 26c:	776f7214 			; <UNDEFINED> instruction: 0x776f7214
 270:	01730100 	cmneq	r3, r0, lsl #2
 274:	0000a915 	andeq	sl, r0, r5, lsl r9
 278:	5c910200 	lfmpl	f0, 4, [r1], {0}
 27c:	0000b515 	andeq	fp, r0, r5, lsl r5
 280:	01730100 	cmneq	r3, r0, lsl #2
 284:	0000a91e 	andeq	sl, r0, lr, lsl r9
 288:	58910200 	ldmpl	r1, {r9}
 28c:	00036e0d 	andeq	r6, r3, sp, lsl #28
 290:	01740100 	cmneq	r4, r0, lsl #2
 294:	00029d10 	andeq	r9, r2, r0, lsl sp
 298:	60910200 	addsvs	r0, r1, r0, lsl #4
 29c:	00310800 	eorseq	r0, r1, r0, lsl #16
 2a0:	02b30000 	adcseq	r0, r3, #0
 2a4:	c0090000 	andgt	r0, r9, r0
 2a8:	03000000 	movweq	r0, #0
 2ac:	0000c009 	andeq	ip, r0, r9
 2b0:	16000300 	strne	r0, [r0], -r0, lsl #6
 2b4:	000000cf 	andeq	r0, r0, pc, asr #1
 2b8:	06016901 	streq	r6, [r1], -r1, lsl #18
 2bc:	20000870 	andcs	r0, r0, r0, ror r8
 2c0:	00000064 	andeq	r0, r0, r4, rrx
 2c4:	02db9c01 	sbcseq	r9, fp, #256	; 0x100
 2c8:	72140000 	andsvc	r0, r4, #0
 2cc:	0100776f 	tsteq	r0, pc, ror #14
 2d0:	a9160169 	ldmdbge	r6, {r0, r3, r5, r6, r8}
 2d4:	02000000 	andeq	r0, r0, #0
 2d8:	17007491 			; <UNDEFINED> instruction: 0x17007491
 2dc:	00000232 	andeq	r0, r0, r2, lsr r2
 2e0:	0f015a01 	svceq	0x00015a01
 2e4:	00000031 	andeq	r0, r0, r1, lsr r0
 2e8:	2000081a 	andcs	r0, r0, sl, lsl r8
 2ec:	00000056 	andeq	r0, r0, r6, asr r0
 2f0:	037a9c01 	cmneq	sl, #256	; 0x100
 2f4:	b50d0000 	strlt	r0, [sp, #-0]
 2f8:	01000000 	mrseq	r0, (UNDEF: 0)
 2fc:	7a07015b 	bvc	1c0870 <startup-0x1fe3f790>
 300:	02000003 	andeq	r0, r0, #3
 304:	6b0f7391 	blvs	3dd150 <startup-0x1fc22eb0>
 308:	01007965 	tsteq	r0, r5, ror #18
 30c:	7a07015c 	bvc	1c0884 <startup-0x1fe3f77c>
 310:	02000003 	andeq	r0, r0, #3
 314:	20107291 	mulscs	r0, r1, r2
 318:	46200008 	strtmi	r0, [r0], -r8
 31c:	0f000000 	svceq	0x00000000
 320:	00776f72 	rsbseq	r6, r7, r2, ror pc
 324:	0a015d01 	beq	57730 <startup-0x1ffa88d0>
 328:	000000a9 	andeq	r0, r0, r9, lsr #1
 32c:	10749102 	rsbsne	r9, r4, r2, lsl #2
 330:	20000826 	andcs	r0, r0, r6, lsr #16
 334:	00000034 	andeq	r0, r0, r4, lsr r0
 338:	0000cf18 	andeq	ip, r0, r8, lsl pc
 33c:	015e0100 	cmpeq	lr, r0, lsl #2
 340:	0000a903 	andeq	sl, r0, r3, lsl #18
 344:	00034b00 	andeq	r4, r3, r0, lsl #22
 348:	18001900 	stmdane	r0, {r8, fp, ip}
 34c:	000000db 	ldrdeq	r0, [r0], -fp
 350:	0c015f01 	stceq	15, cr5, [r1], {1}
 354:	000000a9 	andeq	r0, r0, r9, lsr #1
 358:	0000035e 	andeq	r0, r0, lr, asr r3
 35c:	40100019 	andsmi	r0, r0, r9, lsl r0
 360:	1a200008 	bne	800388 <startup-0x1f7ffc78>
 364:	1a000000 	bne	36c <startup-0x1ffffc94>
 368:	000000bc 	strheq	r0, [r0], -ip
 36c:	0a016201 	beq	58b78 <startup-0x1ffa7488>
 370:	000000a9 	andeq	r0, r0, r9, lsr #1
 374:	00000019 	andeq	r0, r0, r9, lsl r0
 378:	01030000 	mrseq	r0, (UNDEF: 3)
 37c:	00008f08 	andeq	r8, r0, r8, lsl #30
 380:	002c0e00 	eoreq	r0, ip, r0, lsl #28
 384:	3c010000 	stccc	0, cr0, [r1], {-0}
 388:	07540601 	ldrbeq	r0, [r4, -r1, lsl #12]
 38c:	00c62000 	sbceq	r2, r6, r0
 390:	9c010000 	stcls	0, cr0, [r1], {-0}
 394:	000003c7 	andeq	r0, r0, r7, asr #7
 398:	01006f14 	tsteq	r0, r4, lsl pc
 39c:	a41a013c 	ldrge	r0, [sl], #-316	; 0xfffffec4
 3a0:	02000001 	andeq	r0, r0, #1
 3a4:	470d6c91 			; <UNDEFINED> instruction: 0x470d6c91
 3a8:	01000001 	tsteq	r0, r1
 3ac:	a906013e 	stmdbge	r6, {r1, r2, r3, r4, r5, r8}
 3b0:	02000000 	andeq	r0, r0, #0
 3b4:	4c0d7491 	cfstrsmi	mvf7, [sp], {145}	; 0x91
 3b8:	01000001 	tsteq	r0, r1
 3bc:	a906013f 	stmdbge	r6, {r0, r1, r2, r3, r4, r5, r8}
 3c0:	02000000 	andeq	r0, r0, #0
 3c4:	0e007091 	mcreq	0, 0, r7, cr0, cr1, {4}
 3c8:	000002d8 	ldrdeq	r0, [r0], -r8
 3cc:	06013601 	streq	r3, [r1], -r1, lsl #12
 3d0:	200006ee 	andcs	r0, r0, lr, ror #13
 3d4:	00000066 	andeq	r0, r0, r6, rrx
 3d8:	04059c01 	streq	r9, [r5], #-3073	; 0xfffff3ff
 3dc:	6f140000 	svcvs	0x00140000
 3e0:	01360100 	teqeq	r6, r0, lsl #2
 3e4:	0001a41b 	andeq	sl, r1, fp, lsl r4
 3e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3ec:	0006f610 	andeq	pc, r6, r0, lsl r6	; <UNPREDICTABLE>
 3f0:	00005420 	andeq	r5, r0, r0, lsr #8
 3f4:	00740f00 	rsbseq	r0, r4, r0, lsl #30
 3f8:	0a013701 	beq	4e004 <startup-0x1ffb1ffc>
 3fc:	000000a9 	andeq	r0, r0, r9, lsr #1
 400:	00749102 	rsbseq	r9, r4, r2, lsl #2
 404:	004f0e00 	subeq	r0, pc, r0, lsl #28
 408:	30010000 	andcc	r0, r1, r0
 40c:	06880601 	streq	r0, [r8], r1, lsl #12
 410:	00662000 	rsbeq	r2, r6, r0
 414:	9c010000 	stcls	0, cr0, [r1], {-0}
 418:	00000443 	andeq	r0, r0, r3, asr #8
 41c:	01006f14 	tsteq	r0, r4, lsl pc
 420:	a41a0130 	ldrge	r0, [sl], #-304	; 0xfffffed0
 424:	02000001 	andeq	r0, r0, #1
 428:	90106c91 	mulsls	r0, r1, ip
 42c:	54200006 	strtpl	r0, [r0], #-6
 430:	0f000000 	svceq	0x00000000
 434:	31010074 	tstcc	r1, r4, ror r0
 438:	00a90a01 	adceq	r0, r9, r1, lsl #20
 43c:	91020000 	mrsls	r0, (UNDEF: 2)
 440:	16000074 			; <UNDEFINED> instruction: 0x16000074
 444:	0000024f 	andeq	r0, r0, pc, asr #4
 448:	06012b01 	streq	r2, [r1], -r1, lsl #22
 44c:	20000668 	andcs	r0, r0, r8, ror #12
 450:	00000020 	andeq	r0, r0, r0, lsr #32
 454:	04899c01 	streq	r9, [r9], #3073	; 0xc01
 458:	6f140000 	svcvs	0x00140000
 45c:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
 460:	0001a41f 	andeq	sl, r1, pc, lsl r4
 464:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 468:	00037315 	andeq	r7, r3, r5, lsl r3
 46c:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
 470:	0000a926 	andeq	sl, r0, r6, lsr #18
 474:	70910200 	addsvc	r0, r1, r0, lsl #4
 478:	00037a15 	andeq	r7, r3, r5, lsl sl
 47c:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
 480:	0000a932 	andeq	sl, r0, r2, lsr r9
 484:	6c910200 	lfmvs	f0, 4, [r1], {0}
 488:	005b0e00 	subseq	r0, fp, r0, lsl #28
 48c:	02010000 	andeq	r0, r1, #0
 490:	049e0601 	ldreq	r0, [lr], #1537	; 0x601
 494:	01ca2000 	biceq	r2, sl, r0
 498:	9c010000 	stcls	0, cr0, [r1], {-0}
 49c:	0000051d 	andeq	r0, r0, sp, lsl r5
 4a0:	01007814 	tsteq	r0, r4, lsl r8
 4a4:	25140102 	ldrcs	r0, [r4, #-258]	; 0xfffffefe
 4a8:	02000000 	andeq	r0, r0, #0
 4ac:	79145f91 	ldmdbvc	r4, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 4b0:	01020100 	mrseq	r0, (UNDEF: 18)
 4b4:	0000251f 	andeq	r2, r0, pc, lsl r5
 4b8:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
 4bc:	74657314 	strbtvc	r7, [r5], #-788	; 0xfffffcec
 4c0:	01020100 	mrseq	r0, (UNDEF: 18)
 4c4:	0000252a 	andeq	r2, r0, sl, lsr #10
 4c8:	5d910200 	lfmpl	f0, 4, [r1]
 4cc:	0001030d 	andeq	r0, r1, sp, lsl #6
 4d0:	01040100 	mrseq	r0, (UNDEF: 20)
 4d4:	0000250a 	andeq	r2, r0, sl, lsl #10
 4d8:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 4dc:	0000440d 	andeq	r4, r0, sp, lsl #8
 4e0:	01040100 	mrseq	r0, (UNDEF: 20)
 4e4:	00002510 	andeq	r2, r0, r0, lsl r5
 4e8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 4ec:	0000c80d 	andeq	ip, r0, sp, lsl #16
 4f0:	01040100 	mrseq	r0, (UNDEF: 20)
 4f4:	0000251c 	andeq	r2, r0, ip, lsl r5
 4f8:	65910200 	ldrvs	r0, [r1, #512]	; 0x200
 4fc:	0000740d 	andeq	r7, r0, sp, lsl #8
 500:	01040100 	mrseq	r0, (UNDEF: 20)
 504:	00002524 	andeq	r2, r0, r4, lsr #10
 508:	63910200 	orrsvs	r0, r1, #0, 4
 50c:	00026a0d 	andeq	r6, r2, sp, lsl #20
 510:	01050100 	mrseq	r0, (UNDEF: 21)
 514:	0000250a 	andeq	r2, r0, sl, lsl #10
 518:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 51c:	03891b00 	orreq	r1, r9, #0, 22
 520:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
 524:	00043606 	andeq	r3, r4, r6, lsl #12
 528:	00006820 	andeq	r6, r0, r0, lsr #16
 52c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
 530:	10000005 	andne	r0, r0, r5
 534:	2000043c 	andcs	r0, r0, ip, lsr r4
 538:	00000058 	andeq	r0, r0, r8, asr r0
 53c:	0000e61c 	andeq	lr, r0, ip, lsl r6
 540:	0ff90100 	svceq	0x00f90100
 544:	00000025 	andeq	r0, r0, r5, lsr #32
 548:	10779102 	rsbsne	r9, r7, r2, lsl #2
 54c:	20000460 	andcs	r0, r0, r0, ror #8
 550:	00000022 	andeq	r0, r0, r2, lsr #32
 554:	6464611d 	strbtvs	r6, [r4], #-285	; 0xfffffee3
 558:	0ffc0100 	svceq	0x00fc0100
 55c:	00000025 	andeq	r0, r0, r5, lsr #32
 560:	00769102 	rsbseq	r9, r6, r2, lsl #2
 564:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
 568:	01000001 	tsteq	r0, r1
 56c:	03e006ea 	mvneq	r0, #245366784	; 0xea00000
 570:	00562000 	subseq	r2, r6, r0
 574:	9c010000 	stcls	0, cr0, [r1], {-0}
 578:	00023d1f 	andeq	r3, r2, pc, lsl sp
 57c:	09e50100 	stmibeq	r5!, {r8}^
 580:	00000025 	andeq	r0, r0, r5, lsr #32
 584:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 588:	0000002a 	andeq	r0, r0, sl, lsr #32
 58c:	05a29c01 	streq	r9, [r2, #3073]!	; 0xc01
 590:	44200000 	strtmi	r0, [r0], #-0
 594:	01000000 	mrseq	r0, (UNDEF: 0)
 598:	002523e5 	eoreq	r2, r5, r5, ror #7
 59c:	91020000 	mrsls	r0, (UNDEF: 2)
 5a0:	f0210077 			; <UNDEFINED> instruction: 0xf0210077
 5a4:	01000000 	mrseq	r0, (UNDEF: 0)
 5a8:	037006dd 	cmneq	r0, #231735296	; 0xdd00000
 5ac:	00462000 	subeq	r2, r6, r0
 5b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b4:	000005d7 	ldrdeq	r0, [r0], -r7
 5b8:	00024a20 	andeq	r4, r2, r0, lsr #20
 5bc:	21dd0100 	bicscs	r0, sp, r0, lsl #2
 5c0:	00000025 	andeq	r0, r0, r5, lsr #32
 5c4:	20779102 	rsbscs	r9, r7, r2, lsl #2
 5c8:	00000044 	andeq	r0, r0, r4, asr #32
 5cc:	252fdd01 	strcs	sp, [pc, #-3329]!	; fffff8d3 <ball+0xdfffee67>
 5d0:	02000000 	andeq	r0, r0, #0
 5d4:	21007691 			; <UNDEFINED> instruction: 0x21007691
 5d8:	00000016 	andeq	r0, r0, r6, lsl r0
 5dc:	3006d601 	andcc	sp, r6, r1, lsl #12
 5e0:	40200003 	eormi	r0, r0, r3
 5e4:	01000000 	mrseq	r0, (UNDEF: 0)
 5e8:	00060c9c 	muleq	r6, ip, ip
 5ec:	00242000 	eoreq	r2, r4, r0
 5f0:	d6010000 	strle	r0, [r1], -r0
 5f4:	00002524 	andeq	r2, r0, r4, lsr #10
 5f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5fc:	00004420 	andeq	r4, r0, r0, lsr #8
 600:	35d60100 	ldrbcc	r0, [r6, #256]	; 0x100
 604:	00000025 	andeq	r0, r0, r5, lsr #32
 608:	00769102 	rsbseq	r9, r6, r2, lsl #2
 60c:	0000a721 	andeq	sl, r0, r1, lsr #14
 610:	06c10100 	strbeq	r0, [r1], r0, lsl #2
 614:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 618:	00000080 	andeq	r0, r0, r0, lsl #1
 61c:	06419c01 	strbeq	r9, [r1], -r1, lsl #24
 620:	37200000 	strcc	r0, [r0, -r0]!
 624:	01000002 	tsteq	r0, r2
 628:	00251cc1 	eoreq	r1, r5, r1, asr #25
 62c:	91020000 	mrsls	r0, (UNDEF: 2)
 630:	00442077 	subeq	r2, r4, r7, ror r0
 634:	c1010000 	mrsgt	r0, (UNDEF: 1)
 638:	0000252b 	andeq	r2, r0, fp, lsr #10
 63c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 640:	03001f00 	movweq	r1, #3840	; 0xf00
 644:	ab010000 	blge	4064c <startup-0x1ffbf9b4>
 648:	00002509 	andeq	r2, r0, r9, lsl #10
 64c:	00022000 	andeq	r2, r2, r0
 650:	00009020 	andeq	r9, r0, r0, lsr #32
 654:	799c0100 	ldmibvc	ip, {r8}
 658:	20000006 	andcs	r0, r0, r6
 65c:	00000044 	andeq	r0, r0, r4, asr #32
 660:	251eab01 	ldrcs	sl, [lr, #-2817]	; 0xfffff4ff
 664:	02000000 	andeq	r0, r0, #0
 668:	721d6f91 	andsvc	r6, sp, #580	; 0x244
 66c:	b3010076 	movwlt	r0, #4214	; 0x1076
 670:	0000250a 	andeq	r2, r0, sl, lsl #10
 674:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 678:	020d2100 	andeq	r2, sp, #0, 2
 67c:	97010000 	strls	r0, [r1, -r0]
 680:	0001aa06 	andeq	sl, r1, r6, lsl #20
 684:	00007620 	andeq	r7, r0, r0, lsr #12
 688:	a39c0100 	orrsge	r0, ip, #0, 2
 68c:	22000006 	andcs	r0, r0, #6
 690:	00000000 	andeq	r0, r0, r0
 694:	0100631d 	tsteq	r0, sp, lsl r3
 698:	00250ba0 	eoreq	r0, r5, r0, lsr #23
 69c:	91020000 	mrsls	r0, (UNDEF: 2)
 6a0:	21000077 	tstcs	r0, r7, ror r0
 6a4:	0000003d 	andeq	r0, r0, sp, lsr r0
 6a8:	48068a01 	stmdami	r6, {r0, r9, fp, pc}
 6ac:	62200001 	eorvs	r0, r0, #1
 6b0:	01000000 	mrseq	r0, (UNDEF: 0)
 6b4:	0006d89c 	muleq	r6, ip, r8
 6b8:	00442000 	subeq	r2, r4, r0
 6bc:	8a010000 	bhi	406c4 <startup-0x1ffbf93c>
 6c0:	00002520 	andeq	r2, r0, r0, lsr #10
 6c4:	6f910200 	svcvs	0x00910200
 6c8:	0002e51c 	andeq	lr, r2, ip, lsl r5
 6cc:	0a8b0100 	beq	fe2c0ad4 <ball+0xde2c0068>
 6d0:	00000025 	andeq	r0, r0, r5, lsr #32
 6d4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6d8:	00011b23 	andeq	r1, r1, r3, lsr #22
 6dc:	06860100 	streq	r0, [r6], r0, lsl #2
 6e0:	2000010c 	andcs	r0, r0, ip, lsl #2
 6e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 6e8:	06fc9c01 	ldrbteq	r9, [ip], r1, lsl #24
 6ec:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
 6f0:	25860100 	strcs	r0, [r6, #256]	; 0x100
 6f4:	00000025 	andeq	r0, r0, r5, lsr #32
 6f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6fc:	00013223 	andeq	r3, r1, r3, lsr #4
 700:	06810100 	streq	r0, [r1], r0, lsl #2
 704:	200000c6 	andcs	r0, r0, r6, asr #1
 708:	00000046 	andeq	r0, r0, r6, asr #32
 70c:	07209c01 	streq	r9, [r0, -r1, lsl #24]!
 710:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
 714:	23810100 	orrcs	r0, r1, #0, 2
 718:	00000025 	andeq	r0, r0, r5, lsr #32
 71c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 720:	0002ea1e 	andeq	lr, r2, lr, lsl sl
 724:	067a0100 	ldrbteq	r0, [sl], -r0, lsl #2
 728:	200000b4 	strhcs	r0, [r0], -r4
 72c:	00000012 	andeq	r0, r0, r2, lsl r0
 730:	0a219c01 	beq	86773c <startup-0x1f7988c4>
 734:	01000000 	mrseq	r0, (UNDEF: 0)
 738:	00840670 	addeq	r0, r4, r0, ror r6
 73c:	00302000 	eorseq	r2, r0, r0
 740:	9c010000 	stcls	0, cr0, [r1], {-0}
 744:	0000076e 	andeq	r0, r0, lr, ror #14
 748:	00736d24 	rsbseq	r6, r3, r4, lsr #26
 74c:	c01f7001 	andsgt	r7, pc, r1
 750:	02000000 	andeq	r0, r0, #0
 754:	8c106c91 	ldchi	12, cr6, [r0], {145}	; 0x91
 758:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 75c:	1d000000 	stcne	0, cr0, [r0, #-0]
 760:	75010069 	strvc	r0, [r1, #-105]	; 0xffffff97
 764:	0000a90a 	andeq	sl, r0, sl, lsl #18
 768:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 76c:	61210000 			; <UNDEFINED> instruction: 0x61210000
 770:	01000000 	mrseq	r0, (UNDEF: 0)
 774:	00580666 	subseq	r0, r8, r6, ror #12
 778:	002c2000 	eoreq	r2, ip, r0
 77c:	9c010000 	stcls	0, cr0, [r1], {-0}
 780:	000007aa 	andeq	r0, r0, sl, lsr #15
 784:	00737524 	rsbseq	r7, r3, r4, lsr #10
 788:	c01f6601 	andsgt	r6, pc, r1, lsl #12
 78c:	02000000 	andeq	r0, r0, #0
 790:	60106c91 	mulsvs	r0, r1, ip
 794:	1a200000 	bne	80079c <startup-0x1f7ff864>
 798:	1d000000 	stcne	0, cr0, [r0, #-0]
 79c:	6b010069 	blvs	40948 <startup-0x1ffbf6b8>
 7a0:	0000a90a 	andeq	sl, r0, sl, lsl #18
 7a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7a8:	85250000 	strhi	r0, [r5, #-0]!
 7ac:	01000001 	tsteq	r0, r1
 7b0:	0010065c 	andseq	r0, r0, ip, asr r6
 7b4:	00482000 	subeq	r2, r8, r0
 7b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7bc:	00022025 	andeq	r2, r2, r5, lsr #32
 7c0:	06530100 	ldrbeq	r0, [r3], -r0, lsl #2
 7c4:	20000000 	andcs	r0, r0, r0
 7c8:	0000000c 	andeq	r0, r0, ip
 7cc:	Address 0x000007cc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	12000019 	andne	r0, r0, #25
  f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	0b39053b 	bleq	e415f4 <startup-0x1f1bea0c>
 104:	01111349 	tsteq	r1, r9, asr #6
 108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 10c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 110:	13000013 	movwne	r0, #19
 114:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 118:	0b3a0e03 	bleq	e8392c <startup-0x1f17c6d4>
 11c:	0b39053b 	bleq	e41610 <startup-0x1f1be9f0>
 120:	13491927 	movtne	r1, #39207	; 0x9927
 124:	06120111 			; <UNDEFINED> instruction: 0x06120111
 128:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 12c:	00130119 	andseq	r0, r3, r9, lsl r1
 130:	00051400 	andeq	r1, r5, r0, lsl #8
 134:	0b3a0803 	bleq	e82148 <startup-0x1f17deb8>
 138:	0b39053b 	bleq	e4162c <startup-0x1f1be9d4>
 13c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 140:	05150000 	ldreq	r0, [r5, #-0]
 144:	3a0e0300 	bcc	380d4c <startup-0x1fc7f2b4>
 148:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 14c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 150:	16000018 			; <UNDEFINED> instruction: 0x16000018
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <startup-0x1f17c694>
 15c:	0b39053b 	bleq	e41650 <startup-0x1f1be9b0>
 160:	01111927 	tsteq	r1, r7, lsr #18
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194297 			; <UNDEFINED> instruction: 0x01194297
 16c:	17000013 	smladne	r0, r3, r0, r0
 170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b39053b 	bleq	e4166c <startup-0x1f1be994>
 17c:	01111349 	tsteq	r1, r9, asr #6
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	01194296 			; <UNDEFINED> instruction: 0x01194296
 188:	18000013 	stmdane	r0, {r0, r1, r4}
 18c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b39053b 	bleq	e41688 <startup-0x1f1be978>
 198:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 19c:	00001301 	andeq	r1, r0, r1, lsl #6
 1a0:	00001819 	andeq	r1, r0, r9, lsl r8
 1a4:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 1a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1b0:	13490b39 	movtne	r0, #39737	; 0x9b39
 1b4:	0000193c 	andeq	r1, r0, ip, lsr r9
 1b8:	3f012e1b 	svccc	0x00012e1b
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	341c0000 	ldrcc	r0, [ip], #-0
 1d4:	3a0e0300 	bcc	380ddc <startup-0x1fc7f224>
 1d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e0:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 1e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1e8:	0b3b0b3a 	bleq	ec2ed8 <startup-0x1f13d128>
 1ec:	13490b39 	movtne	r0, #39737	; 0x9b39
 1f0:	00001802 	andeq	r1, r0, r2, lsl #16
 1f4:	3f002e1e 	svccc	0x00002e1e
 1f8:	3a0e0319 	bcc	380e64 <startup-0x1fc7f19c>
 1fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 200:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 204:	96184006 	ldrls	r4, [r8], -r6
 208:	00001942 	andeq	r1, r0, r2, asr #18
 20c:	3f012e1f 	svccc	0x00012e1f
 210:	3a0e0319 	bcc	380e7c <startup-0x1fc7f184>
 214:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 218:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 21c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 220:	96184006 	ldrls	r4, [r8], -r6
 224:	13011942 	movwne	r1, #6466	; 0x1942
 228:	05200000 	streq	r0, [r0, #-0]!
 22c:	3a0e0300 	bcc	380e34 <startup-0x1fc7f1cc>
 230:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 238:	21000018 	tstcs	r0, r8, lsl r0
 23c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 240:	0b3a0e03 	bleq	e83a54 <startup-0x1f17c5ac>
 244:	0b390b3b 	bleq	e42f38 <startup-0x1f1bd0c8>
 248:	01111927 	tsteq	r1, r7, lsr #18
 24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 250:	01194296 			; <UNDEFINED> instruction: 0x01194296
 254:	22000013 	andcs	r0, r0, #19
 258:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 25c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 260:	03193f01 	tsteq	r9, #1, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 26c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 270:	97184006 	ldrls	r4, [r8, -r6]
 274:	13011942 	movwne	r1, #6466	; 0x1942
 278:	05240000 	streq	r0, [r4, #-0]!
 27c:	3a080300 	bcc	200e84 <startup-0x1fdff17c>
 280:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 288:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
 28c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 290:	0b3a0e03 	bleq	e83aa4 <startup-0x1f17c55c>
 294:	0b390b3b 	bleq	e42f88 <startup-0x1f1bd078>
 298:	01111927 	tsteq	r1, r7, lsr #18
 29c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a0:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000a24 	andeq	r0, r0, r4, lsr #20
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001cc 	andcs	r0, r0, ip, asr #3
   4:	200001f6 	strdcs	r0, [r0], -r6
   8:	200001f8 	strdcs	r0, [r0], -r8
   c:	200001fa 	strdcs	r0, [r0], -sl
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20000a34 	andcs	r0, r0, r4, lsr sl
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000590 	muleq	r0, r0, r5
   4:	007e0003 	rsbseq	r0, lr, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	734f2f37 	movtvc	r2, #65335	; 0xff37
  58:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
  5c:	6262614c 	rsbvs	r6, r2, #76, 2
  60:	622f7261 	eorvs	r7, pc, #268435462	; 0x10000006
  64:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  68:	4b687469 	blmi	1a1d214 <startup-0x1e5e2dec>
  6c:	61707965 	cmnvs	r0, r5, ror #18
  70:	62000064 	andvs	r0, r0, #100	; 0x64
  74:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  78:	4b687469 	blmi	1a1d224 <startup-0x1e5e2ddc>
  7c:	61707965 	cmnvs	r0, r5, ror #18
  80:	00632e64 	rsbeq	r2, r3, r4, ror #28
  84:	00000001 	andeq	r0, r0, r1
  88:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
  8c:	00000002 	andeq	r0, r0, r2
  90:	00d20320 	sbcseq	r0, r2, r0, lsr #6
  94:	13010501 	movwne	r0, #5377	; 0x1501
  98:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  9c:	01000302 	tsteq	r0, r2, lsl #6
  a0:	00170501 	andseq	r0, r7, r1, lsl #10
  a4:	00100205 	andseq	r0, r0, r5, lsl #4
  a8:	db032000 	blle	c80b0 <startup-0x1ff37f50>
  ac:	02050100 	andeq	r0, r5, #0, 2
  b0:	200c052f 	andcs	r0, ip, pc, lsr #10
  b4:	052f0205 	streq	r0, [pc, #-517]!	; fffffeb7 <ball+0xdffff44b>
  b8:	0205200c 	andeq	r2, r5, #12
  bc:	200b052f 	andcs	r0, fp, pc, lsr #10
  c0:	052f0205 	streq	r0, [pc, #-517]!	; fffffec3 <ball+0xdffff457>
  c4:	0705200c 	streq	r2, [r5, -ip]
  c8:	000a052f 	andeq	r0, sl, pc, lsr #10
  cc:	20010402 	andcs	r0, r1, r2, lsl #8
  d0:	02001905 	andeq	r1, r0, #81920	; 0x14000
  d4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  d8:	04020007 	streq	r0, [r2], #-7
  dc:	02053c01 	andeq	r3, r5, #256	; 0x100
  e0:	200c0522 	andcs	r0, ip, r2, lsr #10
  e4:	052f0105 	streq	r0, [pc, #-261]!	; ffffffe7 <ball+0xdffff57b>
  e8:	0a05ae22 	beq	16b978 <startup-0x1fe94688>
  ec:	2e02054f 	cfsh32cs	mvfx0, mvfx2, #47
  f0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
  f4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
  f8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
  fc:	16052d03 	strne	r2, [r5], -r3, lsl #26
 100:	01040200 	mrseq	r0, R12_usr
 104:	0013053c 	andseq	r0, r3, ip, lsr r5
 108:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 10c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 110:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 114:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 118:	4f0a055a 	svcmi	0x000a055a
 11c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 120:	04020003 	streq	r0, [r2], #-3
 124:	1a052103 	bne	148538 <startup-0x1feb7ac8>
 128:	03040200 	movweq	r0, #16896	; 0x4200
 12c:	00130557 	andseq	r0, r3, r7, asr r5
 130:	3c010402 	cfstrscc	mvf0, [r1], {2}
 134:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 138:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 13c:	13053f01 	movwne	r3, #24321	; 0x5f01
 140:	2f02055a 	svccs	0x0002055a
 144:	2f01052f 	svccs	0x0001052f
 148:	05402505 	strbeq	r2, [r0, #-1285]	; 0xfffffafb
 14c:	1505670f 	strne	r6, [r5, #-1807]	; 0xfffff8f1
 150:	660f054a 	strvs	r0, [pc], -sl, asr #10
 154:	83010559 	movwhi	r0, #5465	; 0x1559
 158:	05682705 	strbeq	r2, [r8, #-1797]!	; 0xfffff8fb
 15c:	0105670f 	tsteq	r5, pc, lsl #14
 160:	2b051308 	blcs	144d88 <startup-0x1febb278>
 164:	670a0576 	smlsdxvs	sl, r6, r5, r0
 168:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 16c:	0b05c10c 	bleq	1705a4 <startup-0x1fe8fa5c>
 170:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
 174:	0f053c03 	svceq	0x00053c03
 178:	3d060521 	cfstr32cc	mvfx0, [r6, #-132]	; 0xffffff7c
 17c:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 180:	1b053d06 	blne	14f5a0 <startup-0x1feb0a60>
 184:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 188:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 18c:	1e052201 	cdpne	2, 0, cr2, cr5, cr1, {0}
 190:	3d02053e 	cfstr32cc	mvfx0, [r2, #-248]	; 0xffffff08
 194:	200d053d 	andcs	r0, sp, sp, lsr r5
 198:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 18c <startup-0x1ffffe74>
 19c:	3003053d 	andcc	r0, r3, sp, lsr r5
 1a0:	2f1d053d 	svccs	0x001d053d
 1a4:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
 1a8:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 1ac:	0a052f05 	beq	14bdc8 <startup-0x1feb4238>
 1b0:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 1b4:	02052704 	andeq	r2, r5, #4, 14	; 0x100000
 1b8:	0e053d23 	cdpeq	13, 0, cr3, cr5, cr3, {1}
 1bc:	2f010520 	svccs	0x00010520
 1c0:	05ca2905 	strbeq	r2, [sl, #2309]	; 0x905
 1c4:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 1c8:	0205200d 	andeq	r2, r5, #13
 1cc:	2f593d2f 	svccs	0x00593d2f
 1d0:	2f0f053d 	svccs	0x000f053d
 1d4:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 1d8:	053d4b02 	ldreq	r4, [sp, #-2818]!	; 0xfffff4fe
 1dc:	0405200e 	streq	r2, [r5], #-14
 1e0:	4b03052f 	blmi	c16a4 <startup-0x1ff3e95c>
 1e4:	3004053d 	andcc	r0, r4, sp, lsr r5
 1e8:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 1ec:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 1f0:	36053d01 	strcc	r3, [r5], -r1, lsl #26
 1f4:	910205ca 	smlabtls	r2, sl, r5, r0
 1f8:	05201005 	streq	r1, [r0, #-5]!
 1fc:	2f593d02 	svccs	0x00593d02
 200:	10052f3d 	andne	r2, r5, sp, lsr pc
 204:	4a04053e 	bmi	101704 <startup-0x1fefe8fc>
 208:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 20c:	05301005 	ldreq	r1, [r0, #-5]!
 210:	03054a04 	movweq	r4, #23044	; 0x5a04
 214:	02053d21 	andeq	r3, r5, #2112	; 0x840
 218:	200f0530 	andcs	r0, pc, r0, lsr r5	; <UNPREDICTABLE>
 21c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 210 <startup-0x1ffffdf0>
 220:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 224:	02057640 	andeq	r7, r5, #64, 12	; 0x4000000
 228:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 22c:	05830105 	streq	r0, [r3, #261]	; 0x105
 230:	02054c3a 	andeq	r4, r5, #14848	; 0x3a00
 234:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 238:	8301053d 	movwhi	r0, #5437	; 0x153d
 23c:	054c2e05 	strbeq	r2, [ip, #-3589]	; 0xfffff1fb
 240:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 244:	67010559 	smlsdvs	r1, r9, r5, r0
 248:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
 24c:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 250:	4b3d3d3d 	blmi	f4f74c <startup-0x1f0b08b4>
 254:	4b4b4b4b 	blmi	12d2f88 <startup-0x1ed2d078>
 258:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 25c:	0f053e1c 	svceq	0x00053e1c
 260:	3c02053d 	cfstr32cc	mvfx0, [r2], {61}	; 0x3d
 264:	9f210305 	svcls	0x00210305
 268:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 26c:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
 270:	03040200 	movweq	r0, #16896	; 0x4200
 274:	00250521 	eoreq	r0, r5, r1, lsr #10
 278:	49030402 	stmdbmi	r3, {r1, sl}
 27c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 280:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 284:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 288:	02054702 	andeq	r4, r5, #524288	; 0x80000
 28c:	01040200 	mrseq	r0, R12_usr
 290:	51010558 	tstpl	r1, r8, asr r5
 294:	055a2e05 	ldrbeq	r2, [sl, #-3589]	; 0xfffff1fb
 298:	0e05e504 	cfsh32eq	mvfx14, mvfx5, #4
 29c:	02040200 	andeq	r0, r4, #0, 4
 2a0:	00180558 	andseq	r0, r8, r8, asr r5
 2a4:	58040402 	stmdapl	r4, {r1, sl}
 2a8:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 2ac:	05580604 	ldrbeq	r0, [r8, #-1540]	; 0xfffff9fc
 2b0:	18055a14 	stmdane	r5, {r2, r4, r9, fp, ip, lr}
 2b4:	580a053c 	stmdapl	sl, {r2, r3, r4, r5, r8, sl}
 2b8:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
 2bc:	10053c0f 	andne	r3, r5, pc, lsl #24
 2c0:	4a0305e5 	bmi	c1a5c <startup-0x1ff3e5a4>
 2c4:	05211005 	streq	r1, [r1, #-5]!
 2c8:	10054a03 	andne	r4, r5, r3, lsl #20
 2cc:	4a030521 	bmi	c1758 <startup-0x1ff3e8a8>
 2d0:	05211005 	streq	r1, [r1, #-5]!
 2d4:	10054a03 	andne	r4, r5, r3, lsl #20
 2d8:	4a030521 	bmi	c1764 <startup-0x1ff3e89c>
 2dc:	05211005 	streq	r1, [r1, #-5]!
 2e0:	10054a03 	andne	r4, r5, r3, lsl #20
 2e4:	4a030521 	bmi	c1770 <startup-0x1ff3e890>
 2e8:	05211005 	streq	r1, [r1, #-5]!
 2ec:	05214a03 	streq	r4, [r1, #-2563]!	; 0xfffff5fd
 2f0:	08052204 	stmdaeq	r5, {r2, r9, sp}
 2f4:	6904054b 	stmdbvs	r4, {r0, r1, r3, r6, r8, sl}
 2f8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 2fc:	0e054b0a 	vmlaeq.f64	d4, d5, d10
 300:	4b0a0576 	blmi	2818e0 <startup-0x1fd7e720>
 304:	c9680205 	stmdbgt	r8!, {r0, r2, r9}^
 308:	05c91005 	strbeq	r1, [r9, #5]
 30c:	04059102 	streq	r9, [r5], #-258	; 0xfffffefe
 310:	4b0805ad 	blmi	2019cc <startup-0x1fdfe634>
 314:	920205a0 	andls	r0, r2, #160, 10	; 0x28000000
 318:	5d032c05 	stcpl	12, cr2, [r3, #-20]	; 0xffffffec
 31c:	030105ac 	movweq	r0, #5548	; 0x15ac
 320:	39052024 	stmdbcc	r5, {r2, r5, sp}
 324:	67080586 	strvs	r0, [r8, -r6, lsl #11]
 328:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 32c:	054c1c05 	strbeq	r1, [ip, #-3077]	; 0xfffff3fb
 330:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 334:	000a052e 	andeq	r0, sl, lr, lsr #10
 338:	21030402 	tstcs	r3, r2, lsl #8
 33c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 340:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 344:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 348:	03056603 	movweq	r6, #22019	; 0x5603
 34c:	03040200 	movweq	r0, #16896	; 0x4200
 350:	0025052e 	eoreq	r0, r5, lr, lsr #10
 354:	3c030402 	cfstrscc	mvf0, [r3], {2}
 358:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 35c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 360:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 364:	03056603 	movweq	r6, #22019	; 0x5603
 368:	03040200 	movweq	r0, #16896	; 0x4200
 36c:	002c052e 	eoreq	r0, ip, lr, lsr #10
 370:	73030402 	movwvc	r0, #13314	; 0x3402
 374:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 378:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 37c:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 380:	02052e01 	andeq	r2, r5, #1, 28
 384:	01040200 	mrseq	r0, R12_usr
 388:	3f010520 	svccc	0x00010520
 38c:	055a1d05 	ldrbeq	r1, [sl, #-3333]	; 0xfffff2fb
 390:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 394:	000a052e 	andeq	r0, sl, lr, lsr #10
 398:	21030402 	tstcs	r3, r2, lsl #8
 39c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3a0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3a4:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 3a8:	03056603 	movweq	r6, #22019	; 0x5603
 3ac:	03040200 	movweq	r0, #16896	; 0x4200
 3b0:	0025052e 	eoreq	r0, r5, lr, lsr #10
 3b4:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3b8:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 3bc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3c0:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 3c4:	03056603 	movweq	r6, #22019	; 0x5603
 3c8:	03040200 	movweq	r0, #16896	; 0x4200
 3cc:	0029052e 	eoreq	r0, r9, lr, lsr #10
 3d0:	73030402 	movwvc	r0, #13314	; 0x3402
 3d4:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3d8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3dc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 3e0:	02052e01 	andeq	r2, r5, #1, 28
 3e4:	01040200 	mrseq	r0, R12_usr
 3e8:	3f010520 	svccc	0x00010520
 3ec:	055a1c05 	ldrbeq	r1, [sl, #-3077]	; 0xfffff3fb
 3f0:	0e054b02 	vmlaeq.f64	d4, d5, d2
 3f4:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 3f8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 3fc:	18052f0e 	stmdane	r5, {r1, r2, r3, r8, r9, sl, fp, sp}
 400:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 404:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 408:	0b053d0d 	bleq	14f844 <startup-0x1feb07bc>
 40c:	2009052e 	andcs	r0, r9, lr, lsr #10
 410:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff913 <ball+0xdfffeea7>
 414:	18054c13 	stmdane	r5, {r0, r1, r4, sl, fp, lr}
 418:	2010052e 	andscs	r0, r0, lr, lsr #10
 41c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 420:	0b052f0d 	bleq	14c05c <startup-0x1feb3fa4>
 424:	2009052e 	andcs	r0, r9, lr, lsr #10
 428:	052f1405 	streq	r1, [pc, #-1029]!	; 2b <startup-0x1fffffd5>
 42c:	11052e19 	tstne	r5, r9, lsl lr
 430:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 434:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
 438:	0b053d0d 	bleq	14f874 <startup-0x1feb078c>
 43c:	2009052e 	andcs	r0, r9, lr, lsr #10
 440:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff943 <ball+0xdfffeed7>
 444:	1c054c17 	stcne	12, cr4, [r5], {23}
 448:	2014052e 	andscs	r0, r4, lr, lsr #10
 44c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 450:	0b053d0d 	bleq	14f88c <startup-0x1feb0774>
 454:	2009052e 	andcs	r0, r9, lr, lsr #10
 458:	052f1305 	streq	r1, [pc, #-773]!	; 15b <startup-0x1ffffea5>
 45c:	10052e18 	andne	r2, r5, r8, lsl lr
 460:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 464:	02053d3e 	andeq	r3, r5, #3968	; 0xf80
 468:	4b01053e 	blmi	41968 <startup-0x1ffbe698>
 46c:	054f1505 	strbeq	r1, [pc, #-1285]	; ffffff6f <ball+0xdffff503>
 470:	02053f0a 	andeq	r3, r5, #10, 30	; 0x28
 474:	2103052e 	tstcs	r3, lr, lsr #10
 478:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 47c:	06053c0a 	streq	r3, [r5], -sl, lsl #24
 480:	4b0a0530 	blmi	281948 <startup-0x1fd7e6b8>
 484:	05820805 	streq	r0, [r2, #2053]	; 0x805
 488:	1f052f0b 	svcne	0x00052f0b
 48c:	02040200 	andeq	r0, r4, #0, 4
 490:	053c7a03 	ldreq	r7, [ip, #-2563]!	; 0xfffff5fd
 494:	04020002 	streq	r0, [r2], #-2
 498:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 49c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 4a0:	1a052101 	bne	1488ac <startup-0x1feb7754>
 4a4:	4b02054c 	blmi	819dc <startup-0x1ff7e624>
 4a8:	2f080b05 	svccs	0x00080b05
 4ac:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 4b0:	0b052e03 	bleq	14bcc4 <startup-0x1feb433c>
 4b4:	20170521 	andscs	r0, r7, r1, lsr #10
 4b8:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 4bc:	1705210b 	strne	r2, [r5, -fp, lsl #2]
 4c0:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 4c4:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 4c8:	03052017 	movweq	r2, #20503	; 0x5017
 4cc:	210c052e 	tstcs	ip, lr, lsr #10
 4d0:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
 4d4:	25053001 	strcs	r3, [r5, #-1]
 4d8:	59100584 	ldmdbpl	r0, {r2, r7, r8, sl}
 4dc:	05751205 	ldrbeq	r1, [r5, #-517]!	; 0xfffffdfb
 4e0:	11057501 	tstne	r5, r1, lsl #10
 4e4:	3d140576 	cfldr32cc	mvfx0, [r4, #-472]	; 0xfffffe28
 4e8:	05201005 	streq	r1, [r0, #-5]!
 4ec:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 4f0:	0015054a 	andseq	r0, r5, sl, asr #10
 4f4:	20010402 	andcs	r0, r1, r2, lsl #8
 4f8:	052f0705 	streq	r0, [pc, #-1797]!	; fffffdfb <ball+0xdffff38f>
 4fc:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 500:	01040200 	mrseq	r0, R12_usr
 504:	2f070520 	svccs	0x00070520
 508:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 50c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 510:	07052001 	streq	r2, [r5, -r1]
 514:	4a04052f 	bmi	1019d8 <startup-0x1fefe628>
 518:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 51c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 520:	01052f09 	tsteq	r5, r9, lsl #30
 524:	68140521 	ldmdavs	r4, {r0, r5, r8, sl}
 528:	052f0205 	streq	r0, [pc, #-517]!	; 32b <startup-0x1ffffcd5>
 52c:	0205200e 	andeq	r2, r5, #14
 530:	2010052f 	andscs	r0, r0, pc, lsr #10
 534:	052f0205 	streq	r0, [pc, #-517]!	; 337 <startup-0x1ffffcc9>
 538:	02052010 	andeq	r2, r5, #16
 53c:	2011053d 	andscs	r0, r1, sp, lsr r5
 540:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
 544:	02052023 	andeq	r2, r5, #35	; 0x23
 548:	0105212f 	tsteq	r5, pc, lsr #2
 54c:	08100522 	ldmdaeq	r0, {r1, r5, r8, sl}
 550:	3d0a0522 	cfstr32cc	mvfx0, [sl, #-136]	; 0xffffff78
 554:	2f2f0205 	svccs	0x002f0205
 558:	31040530 	tstcc	r4, r0, lsr r5
 55c:	3d2e0305 	stccc	3, cr0, [lr, #-20]!	; 0xffffffec
 560:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 564:	0d055903 	vstreq.16	s10, [r5, #-6]	; <UNPREDICTABLE>
 568:	2e0c05c9 	cfsh32cs	mvfx0, mvfx12, #-23
 56c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 570:	0c05210d 	stfeqs	f2, [r5], {13}
 574:	5804052e 	stmdapl	r4, {r1, r2, r3, r5, r8, sl}
 578:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 57c:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 580:	210d0558 	tstcs	sp, r8, asr r5
 584:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 588:	0a054a04 	beq	152da0 <startup-0x1fead260>
 58c:	02207803 	eoreq	r7, r0, #196608	; 0x30000
 590:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  14:	72670069 	rsbvc	r0, r7, #105	; 0x69
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  20:	5f657469 	svcpl	0x00657469
  24:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  28:	00646e61 	rsbeq	r6, r4, r1, ror #28
  2c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  30:	6a626f5f 	bvs	189bdb4 <startup-0x1e76424c>
  34:	00746365 	rsbseq	r6, r4, r5, ror #6
  38:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  3c:	6c657300 	stclvs	3, cr7, [r5], #-0
  40:	5f746365 	svcpl	0x00746365
  44:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  48:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
  4c:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
  50:	5f776172 	svcpl	0x00776172
  54:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
  58:	70007463 	andvc	r7, r0, r3, ror #8
  5c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
  60:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  64:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffffaa <ball+0xdffff53e>	; <UNPREDICTABLE>
  68:	6f726b69 	svcvs	0x00726b69
  6c:	6f507400 	svcvs	0x00507400
  70:	00746e69 	rsbseq	r6, r4, r9, ror #28
  74:	61746164 	cmnvs	r4, r4, ror #2
  78:	6c6f685f 	stclvs	8, cr6, [pc], #-380	; ffffff04 <ball+0xdffff498>
  7c:	00726564 	rsbseq	r6, r2, r4, ror #10
  80:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  84:	6e750054 	mrcvs	0, 3, r0, cr5, cr4, {2}
  88:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  8c:	63206465 			; <UNDEFINED> instruction: 0x63206465
  90:	00726168 	rsbseq	r6, r2, r8, ror #2
  94:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  98:	6c616200 	sfmvs	f6, 2, [r1], #-0
  9c:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
  a0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  a4:	67007972 	smlsdxvs	r0, r2, r9, r7
  a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  ac:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  b0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  b4:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; bc <startup-0x1fffff44>
  b8:	006e6d75 	rsbeq	r6, lr, r5, ror sp
  bc:	4b746567 	blmi	1d19660 <startup-0x1e2e69a0>
  c0:	61567965 	cmpvs	r6, r5, ror #18
  c4:	0065756c 	rsbeq	r7, r5, ip, ror #10
  c8:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
  cc:	61006c61 	tstvs	r0, r1, ror #24
  d0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
  d4:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
  d8:	7200776f 	andvc	r7, r0, #29097984	; 0x1bc0000
  dc:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
  e0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
  e4:	6170006e 	cmnvs	r0, lr, rrx
  e8:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
  ec:	006e6961 	rsbeq	r6, lr, r1, ror #18
  f0:	70617267 	rsbvc	r7, r1, r7, ror #4
  f4:	5f636968 	svcpl	0x00636968
  f8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  fc:	61645f65 	cmnvs	r4, r5, ror #30
 100:	6d006174 	stfvss	f6, [r0, #-464]	; 0xfffffe30
 104:	006b7361 	rsbeq	r7, fp, r1, ror #6
 108:	70617267 	rsbvc	r7, r1, r7, ror #4
 10c:	5f636968 	svcpl	0x00636968
 110:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 114:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 118:	6700657a 	smlsdxvs	r0, sl, r5, r6
 11c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 120:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 124:	5f6c7274 	svcpl	0x006c7274
 128:	5f746962 	svcpl	0x00746962
 12c:	61656c63 	cmnvs	r5, r3, ror #24
 130:	72670072 	rsbvc	r0, r7, #114	; 0x72
 134:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 138:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 13c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 140:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 144:	6e007465 	cdpvs	4, 0, cr7, cr0, cr5, {3}
 148:	00787765 	rsbseq	r7, r8, r5, ror #14
 14c:	7977656e 	ldmdbvc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 150:	736e7500 	cmnvc	lr, #0, 10
 154:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 158:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 15c:	47740074 			; <UNDEFINED> instruction: 0x47740074
 160:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 164:	00797274 	rsbseq	r7, r9, r4, ror r2
 168:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 16c:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 170:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 174:	745f3874 	ldrbvc	r3, [pc], #-2164	; 17c <startup-0x1ffffe84>
 178:	7a697300 	bvc	1a5cd80 <startup-0x1e5a3280>
 17c:	73007865 	movwvc	r7, #2149	; 0x865
 180:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 184:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 188:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 18c:	736e3035 	cmnvc	lr, #53	; 0x35
 190:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 194:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 198:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 19c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 1a0:	31393130 	teqcc	r9, r0, lsr r1
 1a4:	20353230 	eorscs	r3, r5, r0, lsr r2
 1a8:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 1ac:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 1b0:	415b2029 	cmpmi	fp, r9, lsr #32
 1b4:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 1b8:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 1bc:	6172622d 	cmnvs	r2, sp, lsr #4
 1c0:	2068636e 	rsbcs	r6, r8, lr, ror #6
 1c4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 1c8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 1cc:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 1d0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 1d4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 1d8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 1dc:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 1e0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 1e4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 1e8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 1ec:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 1f0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 1f4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 1f8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1fc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 200:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 204:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 208:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 20c:	61726700 	cmnvs	r2, r0, lsl #14
 210:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 214:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 218:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 21c:	00796461 	rsbseq	r6, r9, r1, ror #8
 220:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 224:	00707574 	rsbseq	r7, r0, r4, ror r5
 228:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 22c:	61726400 	cmnvs	r2, r0, lsl #8
 230:	656b0077 	strbvs	r0, [fp, #-119]!	; 0xffffff89
 234:	76006279 			; <UNDEFINED> instruction: 0x76006279
 238:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 23c:	61726700 	cmnvs	r2, r0, lsl #14
 240:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 244:	6165725f 	cmnvs	r5, pc, asr r2
 248:	61645f64 	cmnvs	r4, r4, ror #30
 24c:	73006174 	movwvc	r6, #372	; 0x174
 250:	6f5f7465 	svcvs	0x005f7465
 254:	63656a62 	cmnvs	r5, #401408	; 0x62000
 258:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 25c:	00646565 	rsbeq	r6, r4, r5, ror #10
 260:	5f746573 	svcpl	0x00746573
 264:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 268:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
 26c:	00786564 	rsbseq	r6, r8, r4, ror #10
 270:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff835 <ball+0xdfffedc9>
 274:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 278:	61736f2f 	cmnvs	r3, pc, lsr #30
 27c:	442f6e6e 	strtmi	r6, [pc], #-3694	; 284 <startup-0x1ffffd7c>
 280:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 284:	73746e65 	cmnvc	r4, #1616	; 0x650
 288:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 28c:	6a6f7250 	bvs	1bdcbd4 <startup-0x1e42342c>
 290:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 294:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 298:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 29c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 2a0:	2f737463 	svccs	0x00737463
 2a4:	30544144 	subscc	r4, r4, r4, asr #2
 2a8:	4f2f3731 	svcmi	0x002f3731
 2ac:	72616373 	rsbvc	r6, r1, #-872415231	; 0xcc000001
 2b0:	62614c73 	rsbvs	r4, r1, #29440	; 0x7300
 2b4:	2f726162 	svccs	0x00726162
 2b8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2bc:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 2c0:	7079654b 	rsbsvc	r6, r9, fp, asr #10
 2c4:	622f6461 	eorvs	r6, pc, #1627389952	; 0x61000000
 2c8:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
 2cc:	4b687469 	blmi	1a1d478 <startup-0x1e5e2b88>
 2d0:	61707965 	cmnvs	r0, r5, ror #18
 2d4:	00632e64 	rsbeq	r2, r3, r4, ror #28
 2d8:	61656c63 	cmnvs	r5, r3, ror #24
 2dc:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2e0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2e4:	746f6200 	strbtvc	r6, [pc], #-512	; 2ec <startup-0x1ffffd14>
 2e8:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
 2ec:	5f79616c 	svcpl	0x0079616c
 2f0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2f4:	4f740073 	svcmi	0x00740073
 2f8:	70006a62 	andvc	r6, r0, r2, ror #20
 2fc:	0078736f 	rsbseq	r7, r8, pc, ror #6
 300:	70617267 	rsbvc	r7, r1, r7, ror #4
 304:	5f636968 	svcpl	0x00636968
 308:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 30c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 310:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 314:	43007374 	movwmi	r7, #884	; 0x374
 318:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 31c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 320:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
 324:	6f445c6e 	svcvs	0x00445c6e
 328:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 32c:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
 330:	50746947 	rsbspl	r6, r4, r7, asr #18
 334:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 338:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 33c:	6f686353 	svcvs	0x00686353
 340:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 344:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 348:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 34c:	31305441 	teqcc	r0, r1, asr #8
 350:	734f5c37 	movtvc	r5, #64567	; 0xfc37
 354:	73726163 	cmnvc	r2, #-1073741800	; 0xc0000018
 358:	6262614c 	rsbvs	r6, r2, #76, 2
 35c:	625c7261 	subsvs	r7, ip, #268435462	; 0x10000006
 360:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
 364:	4b687469 	blmi	1a1d510 <startup-0x1e5e2af0>
 368:	61707965 	cmnvs	r0, r5, ror #18
 36c:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 370:	73007379 	movwvc	r7, #889	; 0x379
 374:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 378:	70730078 	rsbsvc	r0, r3, r8, ror r0
 37c:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 380:	424f5000 	submi	r5, pc, #0
 384:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 388:	61726700 	cmnvs	r2, r0, lsl #14
 38c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 390:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 394:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 398:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 39c:	Address 0x0000039c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	0000002c 	andeq	r0, r0, ip, lsr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000084 	andcs	r0, r0, r4, lsl #1
  68:	00000030 	andeq	r0, r0, r0, lsr r0
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000b4 	strhcs	r0, [r0], -r4
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000046 	andeq	r0, r0, r6, asr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000010c 	andcs	r0, r0, ip, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000148 	andcs	r0, r0, r8, asr #2
  e4:	00000062 	andeq	r0, r0, r2, rrx
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001aa 	andcs	r0, r0, sl, lsr #3
 104:	00000076 	andeq	r0, r0, r6, ror r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000220 	andcs	r0, r0, r0, lsr #4
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000330 	andcs	r0, r0, r0, lsr r3
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000370 	andcs	r0, r0, r0, ror r3
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003e0 	andcs	r0, r0, r0, ror #7
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000436 	andcs	r0, r0, r6, lsr r4
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	2000049e 	mulcs	r0, lr, r4
 200:	000001ca 	andeq	r0, r0, sl, asr #3
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	280e4101 	stmdacs	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000668 	andcs	r0, r0, r8, ror #12
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000688 	andcs	r0, r0, r8, lsl #13
 244:	00000066 	andeq	r0, r0, r6, rrx
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006ee 	andcs	r0, r0, lr, ror #13
 264:	00000066 	andeq	r0, r0, r6, rrx
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000754 	andcs	r0, r0, r4, asr r7
 284:	000000c6 	andeq	r0, r0, r6, asr #1
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	2000081a 	andcs	r0, r0, sl, lsl r8
 2a4:	00000056 	andeq	r0, r0, r6, asr r0
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b4:	00000007 	andeq	r0, r0, r7
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	20000870 	andcs	r0, r0, r0, ror r8
 2c4:	00000064 	andeq	r0, r0, r4, rrx
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	00000020 	andeq	r0, r0, r0, lsr #32
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	200008d4 	ldrdcs	r0, [r0], -r4
 2e4:	00000034 	andeq	r0, r0, r4, lsr r0
 2e8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2ec:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2f8:	00000007 	andeq	r0, r0, r7
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	00000000 	andeq	r0, r0, r0
 304:	20000908 	andcs	r0, r0, r8, lsl #18
 308:	00000054 	andeq	r0, r0, r4, asr r0
 30c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 310:	41018e02 	tstmi	r1, r2, lsl #28
 314:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 318:	00000007 	andeq	r0, r0, r7
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	00000000 	andeq	r0, r0, r0
 324:	2000095c 	andcs	r0, r0, ip, asr r9
 328:	0000004c 	andeq	r0, r0, ip, asr #32
 32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 330:	41018e02 	tstmi	r1, r2, lsl #28
 334:	0000070d 	andeq	r0, r0, sp, lsl #14
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000000 	andeq	r0, r0, r0
 340:	200009a8 	andcs	r0, r0, r8, lsr #19
 344:	0000008c 	andeq	r0, r0, ip, lsl #1
 348:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 34c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 350:	180e4101 	stmdane	lr, {r0, r8, lr}
 354:	00070d41 	andeq	r0, r7, r1, asr #26
