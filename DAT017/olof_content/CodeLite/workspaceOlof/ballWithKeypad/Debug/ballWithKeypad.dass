
./Debug/ballWithKeypad.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 } OBJECT, *POBJECT;

  // --------------------------- STARTUP --------------------------------
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ) {
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fce2 	bl	200009cc <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


 // --------------------------- DELAY --------------------------------

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x1) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_500ns>:

void delay_500ns(void){
20000058:	b580      	push	{r7, lr}
2000005a:	af00      	add	r7, sp, #0
	delay_250ns();
2000005c:	f7ff ffd8 	bl	20000010 <delay_250ns>
	delay_250ns();
20000060:	f7ff ffd6 	bl	20000010 <delay_250ns>
	}
20000064:	46c0      	nop			; (mov r8, r8)
20000066:	46bd      	mov	sp, r7
20000068:	bd80      	pop	{r7, pc}

2000006a <delay_mikro>:

void delay_mikro(unsigned int us){	
2000006a:	b580      	push	{r7, lr}
2000006c:	b084      	sub	sp, #16
2000006e:	af00      	add	r7, sp, #0
20000070:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
		us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
20000072:	2300      	movs	r3, #0
20000074:	60fb      	str	r3, [r7, #12]
20000076:	e004      	b.n	20000082 <delay_mikro+0x18>
		delay_250ns();
20000078:	f7ff ffca 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
2000007c:	68fb      	ldr	r3, [r7, #12]
2000007e:	3301      	adds	r3, #1
20000080:	60fb      	str	r3, [r7, #12]
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	009a      	lsls	r2, r3, #2
20000086:	68fb      	ldr	r3, [r7, #12]
20000088:	429a      	cmp	r2, r3
2000008a:	d8f5      	bhi.n	20000078 <delay_mikro+0xe>
	}
}
2000008c:	46c0      	nop			; (mov r8, r8)
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	46bd      	mov	sp, r7
20000092:	b004      	add	sp, #16
20000094:	bd80      	pop	{r7, pc}

20000096 <delay_milli>:

void delay_milli(unsigned int ms){
20000096:	b580      	push	{r7, lr}
20000098:	b084      	sub	sp, #16
2000009a:	af00      	add	r7, sp, #0
2000009c:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
2000009e:	2300      	movs	r3, #0
200000a0:	60fb      	str	r3, [r7, #12]
200000a2:	e007      	b.n	200000b4 <delay_milli+0x1e>
		delay_mikro(1000);
200000a4:	23fa      	movs	r3, #250	; 0xfa
200000a6:	009b      	lsls	r3, r3, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f7ff ffde 	bl	2000006a <delay_mikro>
	for(int i = 0; i < ms; i++){
200000ae:	68fb      	ldr	r3, [r7, #12]
200000b0:	3301      	adds	r3, #1
200000b2:	60fb      	str	r3, [r7, #12]
200000b4:	68fb      	ldr	r3, [r7, #12]
200000b6:	687a      	ldr	r2, [r7, #4]
200000b8:	429a      	cmp	r2, r3
200000ba:	d8f3      	bhi.n	200000a4 <delay_milli+0xe>
	}
}
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	46bd      	mov	sp, r7
200000c2:	b004      	add	sp, #16
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

// ------------------------------ DISPLAY ----------------------------

void graphic_ctrl_bit_set (uint_8t x) {
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= ( x & ~B_SELECT );
200000d2:	4b0d      	ldr	r3, [pc, #52]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	b25a      	sxtb	r2, r3
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	b25b      	sxtb	r3, r3
200000e0:	2104      	movs	r1, #4
200000e2:	438b      	bics	r3, r1
200000e4:	b25b      	sxtb	r3, r3
200000e6:	4313      	orrs	r3, r2
200000e8:	b25a      	sxtb	r2, r3
200000ea:	4b07      	ldr	r3, [pc, #28]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000ec:	b2d2      	uxtb	r2, r2
200000ee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
200000f0:	4b05      	ldr	r3, [pc, #20]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	b2db      	uxtb	r3, r3
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f8:	2104      	movs	r1, #4
200000fa:	438b      	bics	r3, r1
200000fc:	b2db      	uxtb	r3, r3
200000fe:	7013      	strb	r3, [r2, #0]
	}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b002      	add	sp, #8
20000106:	bd80      	pop	{r7, pc}
20000108:	40021014 	andmi	r1, r2, r4, lsl r0

2000010c <graphic_ctrl_bit_clear>:
	
void graphic_ctrl_bit_clear (uint_8t x) {
2000010c:	b580      	push	{r7, lr}
2000010e:	b082      	sub	sp, #8
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~( x | B_SELECT );
20000118:	4b0a      	ldr	r3, [pc, #40]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	b2db      	uxtb	r3, r3
2000011e:	b25b      	sxtb	r3, r3
20000120:	1dfa      	adds	r2, r7, #7
20000122:	7812      	ldrb	r2, [r2, #0]
20000124:	2104      	movs	r1, #4
20000126:	430a      	orrs	r2, r1
20000128:	b2d2      	uxtb	r2, r2
2000012a:	b252      	sxtb	r2, r2
2000012c:	43d2      	mvns	r2, r2
2000012e:	b252      	sxtb	r2, r2
20000130:	4013      	ands	r3, r2
20000132:	b25a      	sxtb	r2, r3
20000134:	4b03      	ldr	r3, [pc, #12]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
20000136:	b2d2      	uxtb	r2, r2
20000138:	701a      	strb	r2, [r3, #0]
			//	* portOdrLow &= ~x;
			//	* portOdrLow &= ~B_SELECT;
	}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	b002      	add	sp, #8
20000140:	bd80      	pop	{r7, pc}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	40021014 	andmi	r1, r2, r4, lsl r0

20000148 <select_controller>:

void select_controller (uint_8t controller ) {
20000148:	b580      	push	{r7, lr}
2000014a:	b082      	sub	sp, #8
2000014c:	af00      	add	r7, sp, #0
2000014e:	0002      	movs	r2, r0
20000150:	1dfb      	adds	r3, r7, #7
20000152:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20000154:	1dfb      	adds	r3, r7, #7
20000156:	781b      	ldrb	r3, [r3, #0]
20000158:	2b18      	cmp	r3, #24
2000015a:	d01a      	beq.n	20000192 <select_controller+0x4a>
2000015c:	dc1d      	bgt.n	2000019a <select_controller+0x52>
2000015e:	2b10      	cmp	r3, #16
20000160:	d010      	beq.n	20000184 <select_controller+0x3c>
20000162:	dc1a      	bgt.n	2000019a <select_controller+0x52>
20000164:	2b00      	cmp	r3, #0
20000166:	d002      	beq.n	2000016e <select_controller+0x26>
20000168:	2b08      	cmp	r3, #8
2000016a:	d004      	beq.n	20000176 <select_controller+0x2e>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
								graphic_ctrl_bit_set( B_CS1 ); break;
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
								graphic_ctrl_bit_set( B_CS2 ); break;
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
		default: return 0;
2000016c:	e015      	b.n	2000019a <select_controller+0x52>
		case 0:  graphic_ctrl_bit_clear( B_CS1 | B_CS2 ); break;
2000016e:	2018      	movs	r0, #24
20000170:	f7ff ffcc 	bl	2000010c <graphic_ctrl_bit_clear>
20000174:	e012      	b.n	2000019c <select_controller+0x54>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
20000176:	2010      	movs	r0, #16
20000178:	f7ff ffc8 	bl	2000010c <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS1 ); break;
2000017c:	2008      	movs	r0, #8
2000017e:	f7ff ffa2 	bl	200000c6 <graphic_ctrl_bit_set>
20000182:	e00b      	b.n	2000019c <select_controller+0x54>
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
20000184:	2008      	movs	r0, #8
20000186:	f7ff ffc1 	bl	2000010c <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS2 ); break;
2000018a:	2010      	movs	r0, #16
2000018c:	f7ff ff9b 	bl	200000c6 <graphic_ctrl_bit_set>
20000190:	e004      	b.n	2000019c <select_controller+0x54>
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
20000192:	2018      	movs	r0, #24
20000194:	f7ff ff97 	bl	200000c6 <graphic_ctrl_bit_set>
20000198:	e000      	b.n	2000019c <select_controller+0x54>
		default: return 0;
2000019a:	46c0      	nop			; (mov r8, r8)
	}
}
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}

200001a2 <graphic_wait_ready>:

void graphic_wait_ready (void) {
200001a2:	b580      	push	{r7, lr}
200001a4:	b082      	sub	sp, #8
200001a6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001a8:	2040      	movs	r0, #64	; 0x40
200001aa:	f7ff ffaf 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
200001ae:	4b16      	ldr	r3, [pc, #88]	; (20000208 <graphic_wait_ready+0x66>)
200001b0:	4a16      	ldr	r2, [pc, #88]	; (2000020c <graphic_wait_ready+0x6a>)
200001b2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001b4:	2002      	movs	r0, #2
200001b6:	f7ff ff86 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ba:	2001      	movs	r0, #1
200001bc:	f7ff ffa6 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_500ns();
200001c0:	f7ff ff4a 	bl	20000058 <delay_500ns>
	while (1) {
		graphic_ctrl_bit_set(B_E);
200001c4:	2040      	movs	r0, #64	; 0x40
200001c6:	f7ff ff7e 	bl	200000c6 <graphic_ctrl_bit_set>
		delay_500ns();
200001ca:	f7ff ff45 	bl	20000058 <delay_500ns>
		uint_8t c = * portIdrHigh & LCD_BUSY;
200001ce:	4b10      	ldr	r3, [pc, #64]	; (20000210 <graphic_wait_ready+0x6e>)
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	b2da      	uxtb	r2, r3
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	217f      	movs	r1, #127	; 0x7f
200001d8:	438a      	bics	r2, r1
200001da:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ff95 	bl	2000010c <graphic_ctrl_bit_clear>
		delay_500ns();
200001e2:	f7ff ff39 	bl	20000058 <delay_500ns>
		if ( c == 0 ) {
200001e6:	1dfb      	adds	r3, r7, #7
200001e8:	781b      	ldrb	r3, [r3, #0]
200001ea:	2b00      	cmp	r3, #0
200001ec:	d000      	beq.n	200001f0 <graphic_wait_ready+0x4e>
	while (1) {
200001ee:	e7e9      	b.n	200001c4 <graphic_wait_ready+0x22>
			break;
200001f0:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001f2:	2040      	movs	r0, #64	; 0x40
200001f4:	f7ff ff67 	bl	200000c6 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
200001f8:	4b03      	ldr	r3, [pc, #12]	; (20000208 <graphic_wait_ready+0x66>)
200001fa:	4a06      	ldr	r2, [pc, #24]	; (20000214 <graphic_wait_ready+0x72>)
200001fc:	601a      	str	r2, [r3, #0]
}
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	46bd      	mov	sp, r7
20000202:	b002      	add	sp, #8
20000204:	bd80      	pop	{r7, pc}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	40021000 	andmi	r1, r2, r0
2000020c:	00005555 	andeq	r5, r0, r5, asr r5
20000210:	40021011 	andmi	r1, r2, r1, lsl r0
20000214:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000218 <graphic_read>:

uint_8t graphic_read (uint_8t controller) {
20000218:	b580      	push	{r7, lr}
2000021a:	b084      	sub	sp, #16
2000021c:	af00      	add	r7, sp, #0
2000021e:	0002      	movs	r2, r0
20000220:	1dfb      	adds	r3, r7, #7
20000222:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear (B_E);
20000224:	2040      	movs	r0, #64	; 0x40
20000226:	f7ff ff71 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
2000022a:	4b1b      	ldr	r3, [pc, #108]	; (20000298 <graphic_read+0x80>)
2000022c:	4a1b      	ldr	r2, [pc, #108]	; (2000029c <graphic_read+0x84>)
2000022e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set (B_RS | B_RW);
20000230:	2003      	movs	r0, #3
20000232:	f7ff ff48 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller (controller);
20000236:	1dfb      	adds	r3, r7, #7
20000238:	781b      	ldrb	r3, [r3, #0]
2000023a:	0018      	movs	r0, r3
2000023c:	f7ff ff84 	bl	20000148 <select_controller>
	delay_500ns();
20000240:	f7ff ff0a 	bl	20000058 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000244:	2040      	movs	r0, #64	; 0x40
20000246:	f7ff ff3e 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
2000024a:	f7ff ff05 	bl	20000058 <delay_500ns>
	uint_8t returnValue = * portIdrHigh;
2000024e:	4a14      	ldr	r2, [pc, #80]	; (200002a0 <graphic_read+0x88>)
20000250:	230f      	movs	r3, #15
20000252:	18fb      	adds	r3, r7, r3
20000254:	7812      	ldrb	r2, [r2, #0]
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff57 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;
2000025e:	4b0e      	ldr	r3, [pc, #56]	; (20000298 <graphic_read+0x80>)
20000260:	4a10      	ldr	r2, [pc, #64]	; (200002a4 <graphic_read+0x8c>)
20000262:	601a      	str	r2, [r3, #0]
	if (controller == B_CS1) {
20000264:	1dfb      	adds	r3, r7, #7
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	2b08      	cmp	r3, #8
2000026a:	d104      	bne.n	20000276 <graphic_read+0x5e>
		select_controller(B_CS1);
2000026c:	2008      	movs	r0, #8
2000026e:	f7ff ff6b 	bl	20000148 <select_controller>
		graphic_wait_ready();
20000272:	f7ff ff96 	bl	200001a2 <graphic_wait_ready>
	}
	if (controller == B_CS2) {
20000276:	1dfb      	adds	r3, r7, #7
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	2b10      	cmp	r3, #16
2000027c:	d104      	bne.n	20000288 <graphic_read+0x70>
		select_controller(B_CS2);
2000027e:	2010      	movs	r0, #16
20000280:	f7ff ff62 	bl	20000148 <select_controller>
		graphic_wait_ready();
20000284:	f7ff ff8d 	bl	200001a2 <graphic_wait_ready>
	}
	return returnValue;
20000288:	230f      	movs	r3, #15
2000028a:	18fb      	adds	r3, r7, r3
2000028c:	781b      	ldrb	r3, [r3, #0]
}
2000028e:	0018      	movs	r0, r3
20000290:	46bd      	mov	sp, r7
20000292:	b004      	add	sp, #16
20000294:	bd80      	pop	{r7, pc}
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	40021000 	andmi	r1, r2, r0
2000029c:	00005555 	andeq	r5, r0, r5, asr r5
200002a0:	40021011 	andmi	r1, r2, r1, lsl r0
200002a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a8 <graphic_write>:

void graphic_write (uint_8t value, uint_8t controller) {
200002a8:	b580      	push	{r7, lr}
200002aa:	b082      	sub	sp, #8
200002ac:	af00      	add	r7, sp, #0
200002ae:	0002      	movs	r2, r0
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	701a      	strb	r2, [r3, #0]
200002b4:	1dbb      	adds	r3, r7, #6
200002b6:	1c0a      	adds	r2, r1, #0
200002b8:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ba:	4a1a      	ldr	r2, [pc, #104]	; (20000324 <graphic_write+0x7c>)
200002bc:	1dfb      	adds	r3, r7, #7
200002be:	781b      	ldrb	r3, [r3, #0]
200002c0:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002c2:	1dbb      	adds	r3, r7, #6
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	0018      	movs	r0, r3
200002c8:	f7ff ff3e 	bl	20000148 <select_controller>
	delay_500ns();
200002cc:	f7ff fec4 	bl	20000058 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d0:	2040      	movs	r0, #64	; 0x40
200002d2:	f7ff fef8 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
200002d6:	f7ff febf 	bl	20000058 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f7ff ff16 	bl	2000010c <graphic_ctrl_bit_clear>
	if (controller & B_CS1) {
200002e0:	1dbb      	adds	r3, r7, #6
200002e2:	781b      	ldrb	r3, [r3, #0]
200002e4:	2208      	movs	r2, #8
200002e6:	4013      	ands	r3, r2
200002e8:	d004      	beq.n	200002f4 <graphic_write+0x4c>
		select_controller(B_CS1);
200002ea:	2008      	movs	r0, #8
200002ec:	f7ff ff2c 	bl	20000148 <select_controller>
		graphic_wait_ready();
200002f0:	f7ff ff57 	bl	200001a2 <graphic_wait_ready>
	}
	if (controller & B_CS2) {
200002f4:	1dbb      	adds	r3, r7, #6
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2210      	movs	r2, #16
200002fa:	4013      	ands	r3, r2
200002fc:	d004      	beq.n	20000308 <graphic_write+0x60>
		select_controller(B_CS2);
200002fe:	2010      	movs	r0, #16
20000300:	f7ff ff22 	bl	20000148 <select_controller>
		graphic_wait_ready();
20000304:	f7ff ff4d 	bl	200001a2 <graphic_wait_ready>
	}
	* portOdrHigh = 0;
20000308:	4b06      	ldr	r3, [pc, #24]	; (20000324 <graphic_write+0x7c>)
2000030a:	2200      	movs	r2, #0
2000030c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff fed9 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(0);
20000314:	2000      	movs	r0, #0
20000316:	f7ff ff17 	bl	20000148 <select_controller>
}
2000031a:	46c0      	nop			; (mov r8, r8)
2000031c:	46bd      	mov	sp, r7
2000031e:	b002      	add	sp, #8
20000320:	bd80      	pop	{r7, pc}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	40021015 	andmi	r1, r2, r5, lsl r0

20000328 <graphic_write_command>:

void graphic_write_command (uint_8t command, uint_8t controller) {
20000328:	b580      	push	{r7, lr}
2000032a:	b082      	sub	sp, #8
2000032c:	af00      	add	r7, sp, #0
2000032e:	0002      	movs	r2, r0
20000330:	1dfb      	adds	r3, r7, #7
20000332:	701a      	strb	r2, [r3, #0]
20000334:	1dbb      	adds	r3, r7, #6
20000336:	1c0a      	adds	r2, r1, #0
20000338:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff fee6 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	0018      	movs	r0, r3
20000346:	f7ff feff 	bl	20000148 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000034a:	2003      	movs	r0, #3
2000034c:	f7ff fede 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000350:	1dbb      	adds	r3, r7, #6
20000352:	781a      	ldrb	r2, [r3, #0]
20000354:	1dfb      	adds	r3, r7, #7
20000356:	781b      	ldrb	r3, [r3, #0]
20000358:	0011      	movs	r1, r2
2000035a:	0018      	movs	r0, r3
2000035c:	f7ff ffa4 	bl	200002a8 <graphic_write>
	}
20000360:	46c0      	nop			; (mov r8, r8)
20000362:	46bd      	mov	sp, r7
20000364:	b002      	add	sp, #8
20000366:	bd80      	pop	{r7, pc}

20000368 <graphic_write_data>:
	
void graphic_write_data (uint_8t data, uint_8t controller) {
20000368:	b580      	push	{r7, lr}
2000036a:	b082      	sub	sp, #8
2000036c:	af00      	add	r7, sp, #0
2000036e:	0002      	movs	r2, r0
20000370:	1dfb      	adds	r3, r7, #7
20000372:	701a      	strb	r2, [r3, #0]
20000374:	1dbb      	adds	r3, r7, #6
20000376:	1c0a      	adds	r2, r1, #0
20000378:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000037a:	2040      	movs	r0, #64	; 0x40
2000037c:	f7ff fec6 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000380:	1dbb      	adds	r3, r7, #6
20000382:	781b      	ldrb	r3, [r3, #0]
20000384:	0018      	movs	r0, r3
20000386:	f7ff fedf 	bl	20000148 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000038a:	2001      	movs	r0, #1
2000038c:	f7ff fe9b 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000390:	2002      	movs	r0, #2
20000392:	f7ff febb 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000396:	1dbb      	adds	r3, r7, #6
20000398:	781a      	ldrb	r2, [r3, #0]
2000039a:	1dfb      	adds	r3, r7, #7
2000039c:	781b      	ldrb	r3, [r3, #0]
2000039e:	0011      	movs	r1, r2
200003a0:	0018      	movs	r0, r3
200003a2:	f7ff ff81 	bl	200002a8 <graphic_write>
	}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	46bd      	mov	sp, r7
200003aa:	b002      	add	sp, #8
200003ac:	bd80      	pop	{r7, pc}

200003ae <graphic_read_data>:
	
uint_8t graphic_read_data (uint_8t controller) {
200003ae:	b580      	push	{r7, lr}
200003b0:	b082      	sub	sp, #8
200003b2:	af00      	add	r7, sp, #0
200003b4:	0002      	movs	r2, r0
200003b6:	1dfb      	adds	r3, r7, #7
200003b8:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ba:	1dfb      	adds	r3, r7, #7
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f7ff ff2a 	bl	20000218 <graphic_read>
	return graphic_read(controller);
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	0018      	movs	r0, r3
200003ca:	f7ff ff25 	bl	20000218 <graphic_read>
200003ce:	0003      	movs	r3, r0
	}
200003d0:	0018      	movs	r0, r3
200003d2:	46bd      	mov	sp, r7
200003d4:	b002      	add	sp, #8
200003d6:	bd80      	pop	{r7, pc}

200003d8 <graphic_initalize>:

void graphic_initalize (void) {
200003d8:	b580      	push	{r7, lr}
200003da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff fe72 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003e2:	200a      	movs	r0, #10
200003e4:	f7ff fe41 	bl	2000006a <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003e8:	2078      	movs	r0, #120	; 0x78
200003ea:	f7ff fe8f 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_milli(30);
200003ee:	201e      	movs	r0, #30
200003f0:	f7ff fe51 	bl	20000096 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003f4:	2020      	movs	r0, #32
200003f6:	f7ff fe66 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003fa:	2118      	movs	r1, #24
200003fc:	203e      	movs	r0, #62	; 0x3e
200003fe:	f7ff ff93 	bl	20000328 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000402:	2118      	movs	r1, #24
20000404:	203f      	movs	r0, #63	; 0x3f
20000406:	f7ff ff8f 	bl	20000328 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	20c0      	movs	r0, #192	; 0xc0
2000040e:	f7ff ff8b 	bl	20000328 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000412:	2118      	movs	r1, #24
20000414:	2040      	movs	r0, #64	; 0x40
20000416:	f7ff ff87 	bl	20000328 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	20b8      	movs	r0, #184	; 0xb8
2000041e:	f7ff ff83 	bl	20000328 <graphic_write_command>
	select_controller(0);
20000422:	2000      	movs	r0, #0
20000424:	f7ff fe90 	bl	20000148 <select_controller>
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	bd80      	pop	{r7, pc}

2000042e <graphic_clear_screen>:

void graphic_clear_screen (void) {
2000042e:	b580      	push	{r7, lr}
20000430:	b082      	sub	sp, #8
20000432:	af00      	add	r7, sp, #0
	for (uint_8t page = 0; page < 8; page++) {
20000434:	1dfb      	adds	r3, r7, #7
20000436:	2200      	movs	r2, #0
20000438:	701a      	strb	r2, [r3, #0]
2000043a:	e023      	b.n	20000484 <graphic_clear_screen+0x56>
		graphic_write_command (LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	781b      	ldrb	r3, [r3, #0]
20000440:	2248      	movs	r2, #72	; 0x48
20000442:	4252      	negs	r2, r2
20000444:	4313      	orrs	r3, r2
20000446:	b2db      	uxtb	r3, r3
20000448:	2118      	movs	r1, #24
2000044a:	0018      	movs	r0, r3
2000044c:	f7ff ff6c 	bl	20000328 <graphic_write_command>
		graphic_write_command (LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000450:	2118      	movs	r1, #24
20000452:	2040      	movs	r0, #64	; 0x40
20000454:	f7ff ff68 	bl	20000328 <graphic_write_command>
		for (uint_8t address = 0; address < 64; address++) {
20000458:	1dbb      	adds	r3, r7, #6
2000045a:	2200      	movs	r2, #0
2000045c:	701a      	strb	r2, [r3, #0]
2000045e:	e008      	b.n	20000472 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000460:	2118      	movs	r1, #24
20000462:	2000      	movs	r0, #0
20000464:	f7ff ff80 	bl	20000368 <graphic_write_data>
		for (uint_8t address = 0; address < 64; address++) {
20000468:	1dbb      	adds	r3, r7, #6
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	1dbb      	adds	r3, r7, #6
2000046e:	3201      	adds	r2, #1
20000470:	701a      	strb	r2, [r3, #0]
20000472:	1dbb      	adds	r3, r7, #6
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	2b3f      	cmp	r3, #63	; 0x3f
20000478:	d9f2      	bls.n	20000460 <graphic_clear_screen+0x32>
	for (uint_8t page = 0; page < 8; page++) {
2000047a:	1dfb      	adds	r3, r7, #7
2000047c:	781a      	ldrb	r2, [r3, #0]
2000047e:	1dfb      	adds	r3, r7, #7
20000480:	3201      	adds	r2, #1
20000482:	701a      	strb	r2, [r3, #0]
20000484:	1dfb      	adds	r3, r7, #7
20000486:	781b      	ldrb	r3, [r3, #0]
20000488:	2b07      	cmp	r3, #7
2000048a:	d9d7      	bls.n	2000043c <graphic_clear_screen+0xe>
		}
	}
}
2000048c:	46c0      	nop			; (mov r8, r8)
2000048e:	46c0      	nop			; (mov r8, r8)
20000490:	46bd      	mov	sp, r7
20000492:	b002      	add	sp, #8
20000494:	bd80      	pop	{r7, pc}

20000496 <pixel>:

void pixel (uint_8t x, uint_8t y, uint_8t set) {
20000496:	b5f0      	push	{r4, r5, r6, r7, lr}
20000498:	b085      	sub	sp, #20
2000049a:	af00      	add	r7, sp, #0
2000049c:	0004      	movs	r4, r0
2000049e:	0008      	movs	r0, r1
200004a0:	0011      	movs	r1, r2
200004a2:	1dfb      	adds	r3, r7, #7
200004a4:	1c22      	adds	r2, r4, #0
200004a6:	701a      	strb	r2, [r3, #0]
200004a8:	1dbb      	adds	r3, r7, #6
200004aa:	1c02      	adds	r2, r0, #0
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	1d7b      	adds	r3, r7, #5
200004b0:	1c0a      	adds	r2, r1, #0
200004b2:	701a      	strb	r2, [r3, #0]
	if ((x > 128) || (y > 64)||(x < 1) || (y < 1)) {return;}
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	781b      	ldrb	r3, [r3, #0]
200004b8:	2b80      	cmp	r3, #128	; 0x80
200004ba:	d900      	bls.n	200004be <pixel+0x28>
200004bc:	e0c7      	b.n	2000064e <pixel+0x1b8>
200004be:	1dbb      	adds	r3, r7, #6
200004c0:	781b      	ldrb	r3, [r3, #0]
200004c2:	2b40      	cmp	r3, #64	; 0x40
200004c4:	d900      	bls.n	200004c8 <pixel+0x32>
200004c6:	e0c2      	b.n	2000064e <pixel+0x1b8>
200004c8:	1dfb      	adds	r3, r7, #7
200004ca:	781b      	ldrb	r3, [r3, #0]
200004cc:	2b00      	cmp	r3, #0
200004ce:	d100      	bne.n	200004d2 <pixel+0x3c>
200004d0:	e0bd      	b.n	2000064e <pixel+0x1b8>
200004d2:	1dbb      	adds	r3, r7, #6
200004d4:	781b      	ldrb	r3, [r3, #0]
200004d6:	2b00      	cmp	r3, #0
200004d8:	d100      	bne.n	200004dc <pixel+0x46>
200004da:	e0b8      	b.n	2000064e <pixel+0x1b8>
	uint_8t mask, controller, x_real, data_holder;
	uint_8t index = (y - 1) / 8;
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	781b      	ldrb	r3, [r3, #0]
200004e0:	3b01      	subs	r3, #1
200004e2:	2b00      	cmp	r3, #0
200004e4:	da00      	bge.n	200004e8 <pixel+0x52>
200004e6:	3307      	adds	r3, #7
200004e8:	10db      	asrs	r3, r3, #3
200004ea:	001a      	movs	r2, r3
200004ec:	230c      	movs	r3, #12
200004ee:	18fb      	adds	r3, r7, r3
200004f0:	701a      	strb	r2, [r3, #0]

	switch ((y-1) % 8) {
200004f2:	1dbb      	adds	r3, r7, #6
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	3b01      	subs	r3, #1
200004f8:	4a57      	ldr	r2, [pc, #348]	; (20000658 <pixel+0x1c2>)
200004fa:	4013      	ands	r3, r2
200004fc:	d504      	bpl.n	20000508 <pixel+0x72>
200004fe:	3b01      	subs	r3, #1
20000500:	2208      	movs	r2, #8
20000502:	4252      	negs	r2, r2
20000504:	4313      	orrs	r3, r2
20000506:	3301      	adds	r3, #1
20000508:	2b07      	cmp	r3, #7
2000050a:	d82c      	bhi.n	20000566 <pixel+0xd0>
2000050c:	009a      	lsls	r2, r3, #2
2000050e:	4b53      	ldr	r3, [pc, #332]	; (2000065c <pixel+0x1c6>)
20000510:	18d3      	adds	r3, r2, r3
20000512:	681b      	ldr	r3, [r3, #0]
20000514:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000516:	230f      	movs	r3, #15
20000518:	18fb      	adds	r3, r7, r3
2000051a:	2201      	movs	r2, #1
2000051c:	701a      	strb	r2, [r3, #0]
2000051e:	e023      	b.n	20000568 <pixel+0xd2>
		case 1: mask = 2; break;
20000520:	230f      	movs	r3, #15
20000522:	18fb      	adds	r3, r7, r3
20000524:	2202      	movs	r2, #2
20000526:	701a      	strb	r2, [r3, #0]
20000528:	e01e      	b.n	20000568 <pixel+0xd2>
		case 2: mask = 4; break;
2000052a:	230f      	movs	r3, #15
2000052c:	18fb      	adds	r3, r7, r3
2000052e:	2204      	movs	r2, #4
20000530:	701a      	strb	r2, [r3, #0]
20000532:	e019      	b.n	20000568 <pixel+0xd2>
		case 3: mask = 8; break;
20000534:	230f      	movs	r3, #15
20000536:	18fb      	adds	r3, r7, r3
20000538:	2208      	movs	r2, #8
2000053a:	701a      	strb	r2, [r3, #0]
2000053c:	e014      	b.n	20000568 <pixel+0xd2>
		case 4: mask = 0x10; break;
2000053e:	230f      	movs	r3, #15
20000540:	18fb      	adds	r3, r7, r3
20000542:	2210      	movs	r2, #16
20000544:	701a      	strb	r2, [r3, #0]
20000546:	e00f      	b.n	20000568 <pixel+0xd2>
		case 5: mask = 0x20; break;
20000548:	230f      	movs	r3, #15
2000054a:	18fb      	adds	r3, r7, r3
2000054c:	2220      	movs	r2, #32
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	e00a      	b.n	20000568 <pixel+0xd2>
		case 6: mask = 0x40; break;
20000552:	230f      	movs	r3, #15
20000554:	18fb      	adds	r3, r7, r3
20000556:	2240      	movs	r2, #64	; 0x40
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	e005      	b.n	20000568 <pixel+0xd2>
		case 7: mask = 0x80; break;
2000055c:	230f      	movs	r3, #15
2000055e:	18fb      	adds	r3, r7, r3
20000560:	2280      	movs	r2, #128	; 0x80
20000562:	701a      	strb	r2, [r3, #0]
20000564:	e000      	b.n	20000568 <pixel+0xd2>
		default: break;
20000566:	46c0      	nop			; (mov r8, r8)
	}
	if (set == 0) {
20000568:	1d7b      	adds	r3, r7, #5
2000056a:	781b      	ldrb	r3, [r3, #0]
2000056c:	2b00      	cmp	r3, #0
2000056e:	d105      	bne.n	2000057c <pixel+0xe6>
		mask = ~mask;
20000570:	220f      	movs	r2, #15
20000572:	18bb      	adds	r3, r7, r2
20000574:	18ba      	adds	r2, r7, r2
20000576:	7812      	ldrb	r2, [r2, #0]
20000578:	43d2      	mvns	r2, r2
2000057a:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
2000057c:	1dfb      	adds	r3, r7, #7
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	2b40      	cmp	r3, #64	; 0x40
20000582:	d90a      	bls.n	2000059a <pixel+0x104>
		controller = B_CS2;
20000584:	230e      	movs	r3, #14
20000586:	18fb      	adds	r3, r7, r3
20000588:	2210      	movs	r2, #16
2000058a:	701a      	strb	r2, [r3, #0]
		x_real = x - 65;
2000058c:	230d      	movs	r3, #13
2000058e:	18fb      	adds	r3, r7, r3
20000590:	1dfa      	adds	r2, r7, #7
20000592:	7812      	ldrb	r2, [r2, #0]
20000594:	3a41      	subs	r2, #65	; 0x41
20000596:	701a      	strb	r2, [r3, #0]
20000598:	e009      	b.n	200005ae <pixel+0x118>
	} else {
		controller = B_CS1;
2000059a:	230e      	movs	r3, #14
2000059c:	18fb      	adds	r3, r7, r3
2000059e:	2208      	movs	r2, #8
200005a0:	701a      	strb	r2, [r3, #0]
		x_real = x - 1;
200005a2:	230d      	movs	r3, #13
200005a4:	18fb      	adds	r3, r7, r3
200005a6:	1dfa      	adds	r2, r7, #7
200005a8:	7812      	ldrb	r2, [r2, #0]
200005aa:	3a01      	subs	r2, #1
200005ac:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005ae:	260d      	movs	r6, #13
200005b0:	19bb      	adds	r3, r7, r6
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	2240      	movs	r2, #64	; 0x40
200005b6:	4313      	orrs	r3, r2
200005b8:	b2da      	uxtb	r2, r3
200005ba:	250e      	movs	r5, #14
200005bc:	197b      	adds	r3, r7, r5
200005be:	781b      	ldrb	r3, [r3, #0]
200005c0:	0019      	movs	r1, r3
200005c2:	0010      	movs	r0, r2
200005c4:	f7ff feb0 	bl	20000328 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005c8:	230c      	movs	r3, #12
200005ca:	18fb      	adds	r3, r7, r3
200005cc:	781b      	ldrb	r3, [r3, #0]
200005ce:	2248      	movs	r2, #72	; 0x48
200005d0:	4252      	negs	r2, r2
200005d2:	4313      	orrs	r3, r2
200005d4:	b2da      	uxtb	r2, r3
200005d6:	197b      	adds	r3, r7, r5
200005d8:	781b      	ldrb	r3, [r3, #0]
200005da:	0019      	movs	r1, r3
200005dc:	0010      	movs	r0, r2
200005de:	f7ff fea3 	bl	20000328 <graphic_write_command>
	data_holder = graphic_read_data(controller);
200005e2:	230b      	movs	r3, #11
200005e4:	18fc      	adds	r4, r7, r3
200005e6:	197b      	adds	r3, r7, r5
200005e8:	781b      	ldrb	r3, [r3, #0]
200005ea:	0018      	movs	r0, r3
200005ec:	f7ff fedf 	bl	200003ae <graphic_read_data>
200005f0:	0003      	movs	r3, r0
200005f2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005f4:	19bb      	adds	r3, r7, r6
200005f6:	781b      	ldrb	r3, [r3, #0]
200005f8:	2240      	movs	r2, #64	; 0x40
200005fa:	4313      	orrs	r3, r2
200005fc:	b2da      	uxtb	r2, r3
200005fe:	197b      	adds	r3, r7, r5
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	0019      	movs	r1, r3
20000604:	0010      	movs	r0, r2
20000606:	f7ff fe8f 	bl	20000328 <graphic_write_command>
	if (set == 1) {
2000060a:	1d7b      	adds	r3, r7, #5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	2b01      	cmp	r3, #1
20000610:	d109      	bne.n	20000626 <pixel+0x190>
		mask |= data_holder;
20000612:	210f      	movs	r1, #15
20000614:	187b      	adds	r3, r7, r1
20000616:	1879      	adds	r1, r7, r1
20000618:	220b      	movs	r2, #11
2000061a:	18ba      	adds	r2, r7, r2
2000061c:	7809      	ldrb	r1, [r1, #0]
2000061e:	7812      	ldrb	r2, [r2, #0]
20000620:	430a      	orrs	r2, r1
20000622:	701a      	strb	r2, [r3, #0]
20000624:	e008      	b.n	20000638 <pixel+0x1a2>
	} else {
		mask &= data_holder;
20000626:	220f      	movs	r2, #15
20000628:	18bb      	adds	r3, r7, r2
2000062a:	18ba      	adds	r2, r7, r2
2000062c:	210b      	movs	r1, #11
2000062e:	1879      	adds	r1, r7, r1
20000630:	7812      	ldrb	r2, [r2, #0]
20000632:	7809      	ldrb	r1, [r1, #0]
20000634:	400a      	ands	r2, r1
20000636:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000638:	230e      	movs	r3, #14
2000063a:	18fb      	adds	r3, r7, r3
2000063c:	781a      	ldrb	r2, [r3, #0]
2000063e:	230f      	movs	r3, #15
20000640:	18fb      	adds	r3, r7, r3
20000642:	781b      	ldrb	r3, [r3, #0]
20000644:	0011      	movs	r1, r2
20000646:	0018      	movs	r0, r3
20000648:	f7ff fe8e 	bl	20000368 <graphic_write_data>
2000064c:	e000      	b.n	20000650 <pixel+0x1ba>
	if ((x > 128) || (y > 64)||(x < 1) || (y < 1)) {return;}
2000064e:	46c0      	nop			; (mov r8, r8)
}
20000650:	46bd      	mov	sp, r7
20000652:	b005      	add	sp, #20
20000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	80000007 	andhi	r0, r0, r7
2000065c:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4

20000660 <set_object_speed>:

// ------------------------------ OBJECT_FUNCTIONS ----------------------------

void set_object_speed (POBJECT o, int speedx, int speedy) {
20000660:	b580      	push	{r7, lr}
20000662:	b084      	sub	sp, #16
20000664:	af00      	add	r7, sp, #0
20000666:	60f8      	str	r0, [r7, #12]
20000668:	60b9      	str	r1, [r7, #8]
2000066a:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
2000066c:	68fb      	ldr	r3, [r7, #12]
2000066e:	68ba      	ldr	r2, [r7, #8]
20000670:	605a      	str	r2, [r3, #4]
	o->dy = speedy;	
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	687a      	ldr	r2, [r7, #4]
20000676:	609a      	str	r2, [r3, #8]
}
20000678:	46c0      	nop			; (mov r8, r8)
2000067a:	46bd      	mov	sp, r7
2000067c:	b004      	add	sp, #16
2000067e:	bd80      	pop	{r7, pc}

20000680 <draw_object>:

void draw_object (POBJECT o) {
20000680:	b580      	push	{r7, lr}
20000682:	b084      	sub	sp, #16
20000684:	af00      	add	r7, sp, #0
20000686:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
20000688:	2300      	movs	r3, #0
2000068a:	60fb      	str	r3, [r7, #12]
2000068c:	e020      	b.n	200006d0 <draw_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 1);
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	681a      	ldr	r2, [r3, #0]
20000692:	68fb      	ldr	r3, [r7, #12]
20000694:	3304      	adds	r3, #4
20000696:	005b      	lsls	r3, r3, #1
20000698:	18d3      	adds	r3, r2, r3
2000069a:	3304      	adds	r3, #4
2000069c:	781a      	ldrb	r2, [r3, #0]
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	68db      	ldr	r3, [r3, #12]
200006a2:	b2db      	uxtb	r3, r3
200006a4:	18d3      	adds	r3, r2, r3
200006a6:	b2d8      	uxtb	r0, r3
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	681a      	ldr	r2, [r3, #0]
200006ac:	68fb      	ldr	r3, [r7, #12]
200006ae:	3304      	adds	r3, #4
200006b0:	005b      	lsls	r3, r3, #1
200006b2:	18d3      	adds	r3, r2, r3
200006b4:	3305      	adds	r3, #5
200006b6:	781a      	ldrb	r2, [r3, #0]
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	691b      	ldr	r3, [r3, #16]
200006bc:	b2db      	uxtb	r3, r3
200006be:	18d3      	adds	r3, r2, r3
200006c0:	b2db      	uxtb	r3, r3
200006c2:	2201      	movs	r2, #1
200006c4:	0019      	movs	r1, r3
200006c6:	f7ff fee6 	bl	20000496 <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
200006ca:	68fb      	ldr	r3, [r7, #12]
200006cc:	3301      	adds	r3, #1
200006ce:	60fb      	str	r3, [r7, #12]
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	681b      	ldr	r3, [r3, #0]
200006d4:	681b      	ldr	r3, [r3, #0]
200006d6:	68fa      	ldr	r2, [r7, #12]
200006d8:	429a      	cmp	r2, r3
200006da:	dbd8      	blt.n	2000068e <draw_object+0xe>
	}
}
200006dc:	46c0      	nop			; (mov r8, r8)
200006de:	46c0      	nop			; (mov r8, r8)
200006e0:	46bd      	mov	sp, r7
200006e2:	b004      	add	sp, #16
200006e4:	bd80      	pop	{r7, pc}

200006e6 <clear_object>:

void clear_object (POBJECT o) {
200006e6:	b580      	push	{r7, lr}
200006e8:	b084      	sub	sp, #16
200006ea:	af00      	add	r7, sp, #0
200006ec:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
200006ee:	2300      	movs	r3, #0
200006f0:	60fb      	str	r3, [r7, #12]
200006f2:	e020      	b.n	20000736 <clear_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 0);
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	681a      	ldr	r2, [r3, #0]
200006f8:	68fb      	ldr	r3, [r7, #12]
200006fa:	3304      	adds	r3, #4
200006fc:	005b      	lsls	r3, r3, #1
200006fe:	18d3      	adds	r3, r2, r3
20000700:	3304      	adds	r3, #4
20000702:	781a      	ldrb	r2, [r3, #0]
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	68db      	ldr	r3, [r3, #12]
20000708:	b2db      	uxtb	r3, r3
2000070a:	18d3      	adds	r3, r2, r3
2000070c:	b2d8      	uxtb	r0, r3
2000070e:	687b      	ldr	r3, [r7, #4]
20000710:	681a      	ldr	r2, [r3, #0]
20000712:	68fb      	ldr	r3, [r7, #12]
20000714:	3304      	adds	r3, #4
20000716:	005b      	lsls	r3, r3, #1
20000718:	18d3      	adds	r3, r2, r3
2000071a:	3305      	adds	r3, #5
2000071c:	781a      	ldrb	r2, [r3, #0]
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	691b      	ldr	r3, [r3, #16]
20000722:	b2db      	uxtb	r3, r3
20000724:	18d3      	adds	r3, r2, r3
20000726:	b2db      	uxtb	r3, r3
20000728:	2200      	movs	r2, #0
2000072a:	0019      	movs	r1, r3
2000072c:	f7ff feb3 	bl	20000496 <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
20000730:	68fb      	ldr	r3, [r7, #12]
20000732:	3301      	adds	r3, #1
20000734:	60fb      	str	r3, [r7, #12]
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	681b      	ldr	r3, [r3, #0]
2000073a:	681b      	ldr	r3, [r3, #0]
2000073c:	68fa      	ldr	r2, [r7, #12]
2000073e:	429a      	cmp	r2, r3
20000740:	dbd8      	blt.n	200006f4 <clear_object+0xe>
	}
}
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	46c0      	nop			; (mov r8, r8)
20000746:	46bd      	mov	sp, r7
20000748:	b004      	add	sp, #16
2000074a:	bd80      	pop	{r7, pc}

2000074c <move_object>:

void move_object (POBJECT o) {
2000074c:	b580      	push	{r7, lr}
2000074e:	b084      	sub	sp, #16
20000750:	af00      	add	r7, sp, #0
20000752:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	0018      	movs	r0, r3
20000758:	f7ff ffc5 	bl	200006e6 <clear_object>
	int newx = o->posx + o->dx;
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	68da      	ldr	r2, [r3, #12]
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	685b      	ldr	r3, [r3, #4]
20000764:	18d3      	adds	r3, r2, r3
20000766:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	691a      	ldr	r2, [r3, #16]
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	689b      	ldr	r3, [r3, #8]
20000770:	18d3      	adds	r3, r2, r3
20000772:	60bb      	str	r3, [r7, #8]
	
	if (newx < 1) {
20000774:	68fb      	ldr	r3, [r7, #12]
20000776:	2b00      	cmp	r3, #0
20000778:	dc08      	bgt.n	2000078c <move_object+0x40>
		o->dx =(o->dx)*(-1);
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	685b      	ldr	r3, [r3, #4]
2000077e:	425a      	negs	r2, r3
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	605a      	str	r2, [r3, #4]
		o->posx = 1;
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	2201      	movs	r2, #1
20000788:	60da      	str	r2, [r3, #12]
2000078a:	e016      	b.n	200007ba <move_object+0x6e>
	}
	else if ((newx + o->geo->sizex)  > 128) {
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	681b      	ldr	r3, [r3, #0]
20000790:	685a      	ldr	r2, [r3, #4]
20000792:	68fb      	ldr	r3, [r7, #12]
20000794:	18d3      	adds	r3, r2, r3
20000796:	2b80      	cmp	r3, #128	; 0x80
20000798:	dd0c      	ble.n	200007b4 <move_object+0x68>
		o->dx = (o->dx)*(-1);
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	685b      	ldr	r3, [r3, #4]
2000079e:	425a      	negs	r2, r3
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	681b      	ldr	r3, [r3, #0]
200007a8:	685b      	ldr	r3, [r3, #4]
200007aa:	2280      	movs	r2, #128	; 0x80
200007ac:	1ad2      	subs	r2, r2, r3
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	60da      	str	r2, [r3, #12]
200007b2:	e002      	b.n	200007ba <move_object+0x6e>
	} else {
		o->posx = newx;
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	68fa      	ldr	r2, [r7, #12]
200007b8:	60da      	str	r2, [r3, #12]
	}
	if (newy < 1) {
200007ba:	68bb      	ldr	r3, [r7, #8]
200007bc:	2b00      	cmp	r3, #0
200007be:	dc08      	bgt.n	200007d2 <move_object+0x86>
		o->dy = (o->dy)*(-1);
200007c0:	687b      	ldr	r3, [r7, #4]
200007c2:	689b      	ldr	r3, [r3, #8]
200007c4:	425a      	negs	r2, r3
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200007ca:	687b      	ldr	r3, [r7, #4]
200007cc:	2201      	movs	r2, #1
200007ce:	611a      	str	r2, [r3, #16]
200007d0:	e016      	b.n	20000800 <move_object+0xb4>
	}
	else if ((newy + o->geo->sizey) > 64) {
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	681b      	ldr	r3, [r3, #0]
200007d6:	689a      	ldr	r2, [r3, #8]
200007d8:	68bb      	ldr	r3, [r7, #8]
200007da:	18d3      	adds	r3, r2, r3
200007dc:	2b40      	cmp	r3, #64	; 0x40
200007de:	dd0c      	ble.n	200007fa <move_object+0xae>
		o->dy = (o->dy)*(-1);
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	689b      	ldr	r3, [r3, #8]
200007e4:	425a      	negs	r2, r3
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	681b      	ldr	r3, [r3, #0]
200007ee:	689b      	ldr	r3, [r3, #8]
200007f0:	2240      	movs	r2, #64	; 0x40
200007f2:	1ad2      	subs	r2, r2, r3
200007f4:	687b      	ldr	r3, [r7, #4]
200007f6:	611a      	str	r2, [r3, #16]
200007f8:	e002      	b.n	20000800 <move_object+0xb4>
	} else {
		o->posy = newy;
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	68ba      	ldr	r2, [r7, #8]
200007fe:	611a      	str	r2, [r3, #16]
	}

	draw_object(o);
20000800:	687b      	ldr	r3, [r7, #4]
20000802:	0018      	movs	r0, r3
20000804:	f7ff ff3c 	bl	20000680 <draw_object>
}
20000808:	46c0      	nop			; (mov r8, r8)
2000080a:	46bd      	mov	sp, r7
2000080c:	b004      	add	sp, #16
2000080e:	bd80      	pop	{r7, pc}

20000810 <keybActivate>:

// ------------------------------ KEYPAD ----------------------------

void keybActivate (unsigned int row) {
20000810:	b580      	push	{r7, lr}
20000812:	b082      	sub	sp, #8
20000814:	af00      	add	r7, sp, #0
20000816:	6078      	str	r0, [r7, #4]
	// Kollar vilken rad som knappen är itryckt på och sparar detta i D-portens HÖGA BYTE (inget kopplat hit).				VARFÖR SPARAR MAN DET HÄR????
	switch(row) {
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	2b04      	cmp	r3, #4
2000081c:	d01b      	beq.n	20000856 <keybActivate+0x46>
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	2b04      	cmp	r3, #4
20000822:	d81c      	bhi.n	2000085e <keybActivate+0x4e>
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	2b03      	cmp	r3, #3
20000828:	d011      	beq.n	2000084e <keybActivate+0x3e>
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	2b03      	cmp	r3, #3
2000082e:	d816      	bhi.n	2000085e <keybActivate+0x4e>
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	2b01      	cmp	r3, #1
20000834:	d003      	beq.n	2000083e <keybActivate+0x2e>
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	2b02      	cmp	r3, #2
2000083a:	d004      	beq.n	20000846 <keybActivate+0x36>
2000083c:	e00f      	b.n	2000085e <keybActivate+0x4e>
		case 1: * GPIO_ODR_HIGH = 0x10; break;
2000083e:	4b0c      	ldr	r3, [pc, #48]	; (20000870 <keybActivate+0x60>)
20000840:	2210      	movs	r2, #16
20000842:	701a      	strb	r2, [r3, #0]
20000844:	e00f      	b.n	20000866 <keybActivate+0x56>
		case 2: * GPIO_ODR_HIGH = 0x20; break;
20000846:	4b0a      	ldr	r3, [pc, #40]	; (20000870 <keybActivate+0x60>)
20000848:	2220      	movs	r2, #32
2000084a:	701a      	strb	r2, [r3, #0]
2000084c:	e00b      	b.n	20000866 <keybActivate+0x56>
		case 3: * GPIO_ODR_HIGH = 0x40; break;
2000084e:	4b08      	ldr	r3, [pc, #32]	; (20000870 <keybActivate+0x60>)
20000850:	2240      	movs	r2, #64	; 0x40
20000852:	701a      	strb	r2, [r3, #0]
20000854:	e007      	b.n	20000866 <keybActivate+0x56>
		case 4: * GPIO_ODR_HIGH = 0x80; break;
20000856:	4b06      	ldr	r3, [pc, #24]	; (20000870 <keybActivate+0x60>)
20000858:	2280      	movs	r2, #128	; 0x80
2000085a:	701a      	strb	r2, [r3, #0]
2000085c:	e003      	b.n	20000866 <keybActivate+0x56>
		default: * GPIO_ODR_HIGH = 0;
2000085e:	4b04      	ldr	r3, [pc, #16]	; (20000870 <keybActivate+0x60>)
20000860:	2200      	movs	r2, #0
20000862:	701a      	strb	r2, [r3, #0]
	}
}
20000864:	46c0      	nop			; (mov r8, r8)
20000866:	46c0      	nop			; (mov r8, r8)
20000868:	46bd      	mov	sp, r7
2000086a:	b002      	add	sp, #8
2000086c:	bd80      	pop	{r7, pc}
2000086e:	46c0      	nop			; (mov r8, r8)
20000870:	40020c15 	andmi	r0, r2, r5, lsl ip

20000874 <keybGetCol>:

int keybGetCol (void) {
20000874:	b580      	push	{r7, lr}
20000876:	b082      	sub	sp, #8
20000878:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	 * är nedtryckt, returnera dess kolumnnummer,
	 * annars, returnera 0 */
	unsigned char rowFromRegister;
	rowFromRegister = * GPIO_IDR_HIGH;
2000087a:	4a12      	ldr	r2, [pc, #72]	; (200008c4 <keybGetCol+0x50>)
2000087c:	1dfb      	adds	r3, r7, #7
2000087e:	7812      	ldrb	r2, [r2, #0]
20000880:	701a      	strb	r2, [r3, #0]
	if (rowFromRegister & 8) return 4;
20000882:	1dfb      	adds	r3, r7, #7
20000884:	781b      	ldrb	r3, [r3, #0]
20000886:	2208      	movs	r2, #8
20000888:	4013      	ands	r3, r2
2000088a:	d001      	beq.n	20000890 <keybGetCol+0x1c>
2000088c:	2304      	movs	r3, #4
2000088e:	e015      	b.n	200008bc <keybGetCol+0x48>
	if (rowFromRegister & 4) return 3;
20000890:	1dfb      	adds	r3, r7, #7
20000892:	781b      	ldrb	r3, [r3, #0]
20000894:	2204      	movs	r2, #4
20000896:	4013      	ands	r3, r2
20000898:	d001      	beq.n	2000089e <keybGetCol+0x2a>
2000089a:	2303      	movs	r3, #3
2000089c:	e00e      	b.n	200008bc <keybGetCol+0x48>
	if (rowFromRegister & 2) return 2;
2000089e:	1dfb      	adds	r3, r7, #7
200008a0:	781b      	ldrb	r3, [r3, #0]
200008a2:	2202      	movs	r2, #2
200008a4:	4013      	ands	r3, r2
200008a6:	d001      	beq.n	200008ac <keybGetCol+0x38>
200008a8:	2302      	movs	r3, #2
200008aa:	e007      	b.n	200008bc <keybGetCol+0x48>
	if (rowFromRegister & 1) return 1;
200008ac:	1dfb      	adds	r3, r7, #7
200008ae:	781b      	ldrb	r3, [r3, #0]
200008b0:	2201      	movs	r2, #1
200008b2:	4013      	ands	r3, r2
200008b4:	d001      	beq.n	200008ba <keybGetCol+0x46>
200008b6:	2301      	movs	r3, #1
200008b8:	e000      	b.n	200008bc <keybGetCol+0x48>
	return 0;
200008ba:	2300      	movs	r3, #0
}
200008bc:	0018      	movs	r0, r3
200008be:	46bd      	mov	sp, r7
200008c0:	b002      	add	sp, #8
200008c2:	bd80      	pop	{r7, pc}
200008c4:	40020c11 	andmi	r0, r2, r1, lsl ip

200008c8 <keyb>:

unsigned char keyb (void) {
200008c8:	b590      	push	{r4, r7, lr}
200008ca:	b087      	sub	sp, #28
200008cc:	af00      	add	r7, sp, #0
	unsigned char key[4][4] = { {1, 2, 3, 10},			// Matris som representerar alla knappar på 16-tangenbord ( OBS i decimalt för att kunna använda som index i hexArrayen i metoden ovan.
200008ce:	1d3b      	adds	r3, r7, #4
200008d0:	4a1d      	ldr	r2, [pc, #116]	; (20000948 <keyb+0x80>)
200008d2:	ca13      	ldmia	r2!, {r0, r1, r4}
200008d4:	c313      	stmia	r3!, {r0, r1, r4}
200008d6:	6812      	ldr	r2, [r2, #0]
200008d8:	601a      	str	r2, [r3, #0]
											    {4, 5, 6, 11},
											    {7, 8, 9, 12},
										     	{14, 0, 15, 13} };
	unsigned char col = 0;
200008da:	2316      	movs	r3, #22
200008dc:	18fb      	adds	r3, r7, r3
200008de:	2200      	movs	r2, #0
200008e0:	701a      	strb	r2, [r3, #0]
	for (unsigned char row = 1; row <= 4; row++) {		// Loopar igenom alla rader
200008e2:	2317      	movs	r3, #23
200008e4:	18fb      	adds	r3, r7, r3
200008e6:	2201      	movs	r2, #1
200008e8:	701a      	strb	r2, [r3, #0]
200008ea:	e020      	b.n	2000092e <keyb+0x66>
		keybActivate(row);													// Om en knapp på raden är ifylld, spara dess RAD (se metoden ovan).
200008ec:	2417      	movs	r4, #23
200008ee:	193b      	adds	r3, r7, r4
200008f0:	781b      	ldrb	r3, [r3, #0]
200008f2:	0018      	movs	r0, r3
200008f4:	f7ff ff8c 	bl	20000810 <keybActivate>
		col = keybGetCol();													// Om en knapp på raden (infon hämtas från HÖGA BYTEN i ODR) är ifylld, spara dess KOLUMN (se metoden ovan). 
200008f8:	f7ff ffbc 	bl	20000874 <keybGetCol>
200008fc:	0002      	movs	r2, r0
200008fe:	2116      	movs	r1, #22
20000900:	187b      	adds	r3, r7, r1
20000902:	701a      	strb	r2, [r3, #0]
		if ( col != 0 ) {															// Om kolumnen inte är 0, dvs en rad har hämtats från HÖGA BYTEN i ODR och kolumnen för knappen på raden har sparats....
20000904:	187b      	adds	r3, r7, r1
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	2b00      	cmp	r3, #0
2000090a:	d00a      	beq.n	20000922 <keyb+0x5a>
			return key[row-1][col-1];										// retunera då knappens värde i matrisen, alltså det nummer som står på knappen.
2000090c:	193b      	adds	r3, r7, r4
2000090e:	781b      	ldrb	r3, [r3, #0]
20000910:	1e5a      	subs	r2, r3, #1
20000912:	187b      	adds	r3, r7, r1
20000914:	781b      	ldrb	r3, [r3, #0]
20000916:	3b01      	subs	r3, #1
20000918:	1d39      	adds	r1, r7, #4
2000091a:	0092      	lsls	r2, r2, #2
2000091c:	188a      	adds	r2, r1, r2
2000091e:	5cd3      	ldrb	r3, [r2, r3]
20000920:	e00e      	b.n	20000940 <keyb+0x78>
	for (unsigned char row = 1; row <= 4; row++) {		// Loopar igenom alla rader
20000922:	2117      	movs	r1, #23
20000924:	187b      	adds	r3, r7, r1
20000926:	781a      	ldrb	r2, [r3, #0]
20000928:	187b      	adds	r3, r7, r1
2000092a:	3201      	adds	r2, #1
2000092c:	701a      	strb	r2, [r3, #0]
2000092e:	2317      	movs	r3, #23
20000930:	18fb      	adds	r3, r7, r3
20000932:	781b      	ldrb	r3, [r3, #0]
20000934:	2b04      	cmp	r3, #4
20000936:	d9d9      	bls.n	200008ec <keyb+0x24>
		}
	}
	keybActivate(0);
20000938:	2000      	movs	r0, #0
2000093a:	f7ff ff69 	bl	20000810 <keybActivate>
	return 0xFF;							// Kommer att stänga av displayen då ( FF > 15 )
2000093e:	23ff      	movs	r3, #255	; 0xff
}
20000940:	0018      	movs	r0, r3
20000942:	46bd      	mov	sp, r7
20000944:	b007      	add	sp, #28
20000946:	bd90      	pop	{r4, r7, pc}
20000948:	20000ad4 	ldrdcs	r0, [r0], -r4

2000094c <init_app>:

static GEOMETRY ball_geometry = {12, 4, 4, {{0,1}, {0,2}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,1}, {3,2} }};

static OBJECT ball = {&ball_geometry, 0,0, 0,0, draw_object, clear_object, move_object, set_object_speed};

void init_app(void){
2000094c:	b580      	push	{r7, lr}
2000094e:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000950:	4b18      	ldr	r3, [pc, #96]	; (200009b4 <init_app+0x68>)
20000952:	4a19      	ldr	r2, [pc, #100]	; (200009b8 <init_app+0x6c>)
20000954:	601a      	str	r2, [r3, #0]
	* GPIO_D_MODER &= 0x0000FFFF;				// Nollställer de 2 höga bytesen i MODER-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
20000956:	4b19      	ldr	r3, [pc, #100]	; (200009bc <init_app+0x70>)
20000958:	681a      	ldr	r2, [r3, #0]
2000095a:	4b18      	ldr	r3, [pc, #96]	; (200009bc <init_app+0x70>)
2000095c:	0412      	lsls	r2, r2, #16
2000095e:	0c12      	lsrs	r2, r2, #16
20000960:	601a      	str	r2, [r3, #0]
	* GPIO_D_MODER |= 0x55000000;					// 0101 0101 den högsta byten vilket gör porten till en utport och 0000 0000 den näst högsta porten vilket gör den till en inport. Har samtidigt kvar eventuella bitar på de låga bytesen.
20000962:	4b16      	ldr	r3, [pc, #88]	; (200009bc <init_app+0x70>)
20000964:	681a      	ldr	r2, [r3, #0]
20000966:	4b15      	ldr	r3, [pc, #84]	; (200009bc <init_app+0x70>)
20000968:	21aa      	movs	r1, #170	; 0xaa
2000096a:	05c9      	lsls	r1, r1, #23
2000096c:	430a      	orrs	r2, r1
2000096e:	601a      	str	r2, [r3, #0]
	
	* GPIO_D_OTYPER &= 0x00FF;						// Nollställer den höga byten i OTYPER-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
20000970:	4b13      	ldr	r3, [pc, #76]	; (200009c0 <init_app+0x74>)
20000972:	881b      	ldrh	r3, [r3, #0]
20000974:	b29b      	uxth	r3, r3
20000976:	4a12      	ldr	r2, [pc, #72]	; (200009c0 <init_app+0x74>)
20000978:	21ff      	movs	r1, #255	; 0xff
2000097a:	400b      	ands	r3, r1
2000097c:	b29b      	uxth	r3, r3
2000097e:	8013      	strh	r3, [r2, #0]
	* GPIO_D_OTYPER |= 0x0000;							// 0000 0000 på den  höga byten i registrert vilket sätter dessa portpinnar till PUSH-PULL. Har samtidigt kvar eventuella bitar på de låga bytesen.		(onödig kanske?)
20000980:	4a0f      	ldr	r2, [pc, #60]	; (200009c0 <init_app+0x74>)
20000982:	4b0f      	ldr	r3, [pc, #60]	; (200009c0 <init_app+0x74>)
20000984:	8812      	ldrh	r2, [r2, #0]
20000986:	b292      	uxth	r2, r2
20000988:	801a      	strh	r2, [r3, #0]
	
	* GPIO_D_PUPDR &= 0x0000FFFF;					// Nollställer de 2 höga bytesen i PUPDR-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
2000098a:	4b0e      	ldr	r3, [pc, #56]	; (200009c4 <init_app+0x78>)
2000098c:	681a      	ldr	r2, [r3, #0]
2000098e:	4b0d      	ldr	r3, [pc, #52]	; (200009c4 <init_app+0x78>)
20000990:	0412      	lsls	r2, r2, #16
20000992:	0c12      	lsrs	r2, r2, #16
20000994:	601a      	str	r2, [r3, #0]
	* GPIO_D_PUPDR |= 0x00AA0000;					// 0000 0000 den högsta byten vilket konfigurerar motsvarande 4 port-pinnar till FLOATING och 0101 0101 den näst högsta porten konfigurerar motsvarande 4 port-pinnar till PULL-DOWN. Har samtidigt kvar eventuella bitar på de låga bytesen.
20000996:	4b0b      	ldr	r3, [pc, #44]	; (200009c4 <init_app+0x78>)
20000998:	681a      	ldr	r2, [r3, #0]
2000099a:	4b0a      	ldr	r3, [pc, #40]	; (200009c4 <init_app+0x78>)
2000099c:	21aa      	movs	r1, #170	; 0xaa
2000099e:	0409      	lsls	r1, r1, #16
200009a0:	430a      	orrs	r2, r1
200009a2:	601a      	str	r2, [r3, #0]
	
	#ifdef USBDM
		* ((unsigned long *) 0x40023830) = 0x18;
200009a4:	4b08      	ldr	r3, [pc, #32]	; (200009c8 <init_app+0x7c>)
200009a6:	2218      	movs	r2, #24
200009a8:	601a      	str	r2, [r3, #0]
		__asm__ volatile(" LDR R0, =0x08000209\n");
200009aa:	482b      	ldr	r0, [pc, #172]	; (20000a58 <main+0x8c>)
		__asm__ volatile(" BLX R0 \n");
200009ac:	4780      	blx	r0
	#endif
}
200009ae:	46c0      	nop			; (mov r8, r8)
200009b0:	46bd      	mov	sp, r7
200009b2:	bd80      	pop	{r7, pc}
200009b4:	40021000 	andmi	r1, r2, r0
200009b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200009bc:	40020c00 	andmi	r0, r2, r0, lsl #24
200009c0:	40020c04 	andmi	r0, r2, r4, lsl #24
200009c4:	40020c0c 	andmi	r0, r2, ip, lsl #24
200009c8:	40023830 	andmi	r3, r2, r0, lsr r8

200009cc <main>:

void main(void) {
200009cc:	b590      	push	{r4, r7, lr}
200009ce:	b083      	sub	sp, #12
200009d0:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200009d2:	4b20      	ldr	r3, [pc, #128]	; (20000a54 <main+0x88>)
200009d4:	607b      	str	r3, [r7, #4]
	init_app();
200009d6:	f7ff ffb9 	bl	2000094c <init_app>
	graphic_initalize();
200009da:	f7ff fcfd 	bl	200003d8 <graphic_initalize>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
200009de:	f7ff fd26 	bl	2000042e <graphic_clear_screen>
	#endif
	
	while(1) {
		p->move(p);
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	69db      	ldr	r3, [r3, #28]
200009e6:	687a      	ldr	r2, [r7, #4]
200009e8:	0010      	movs	r0, r2
200009ea:	4798      	blx	r3
		delay_milli(40);
200009ec:	2028      	movs	r0, #40	; 0x28
200009ee:	f7ff fb52 	bl	20000096 <delay_milli>
		uint_8t c = keyb();
200009f2:	1cfc      	adds	r4, r7, #3
200009f4:	f7ff ff68 	bl	200008c8 <keyb>
200009f8:	0003      	movs	r3, r0
200009fa:	7023      	strb	r3, [r4, #0]
		switch (c) {
200009fc:	1cfb      	adds	r3, r7, #3
200009fe:	781b      	ldrb	r3, [r3, #0]
20000a00:	2b08      	cmp	r3, #8
20000a02:	d01f      	beq.n	20000a44 <main+0x78>
20000a04:	dced      	bgt.n	200009e2 <main+0x16>
20000a06:	2b06      	cmp	r3, #6
20000a08:	d005      	beq.n	20000a16 <main+0x4a>
20000a0a:	dcea      	bgt.n	200009e2 <main+0x16>
20000a0c:	2b02      	cmp	r3, #2
20000a0e:	d011      	beq.n	20000a34 <main+0x68>
20000a10:	2b04      	cmp	r3, #4
20000a12:	d007      	beq.n	20000a24 <main+0x58>
20000a14:	e01d      	b.n	20000a52 <main+0x86>
			case 6: p->set_speed (p, 2, 0); break;
20000a16:	687b      	ldr	r3, [r7, #4]
20000a18:	6a1b      	ldr	r3, [r3, #32]
20000a1a:	6878      	ldr	r0, [r7, #4]
20000a1c:	2200      	movs	r2, #0
20000a1e:	2102      	movs	r1, #2
20000a20:	4798      	blx	r3
20000a22:	e016      	b.n	20000a52 <main+0x86>
			case 4: p->set_speed (p, -2, 0); break;
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	6a1b      	ldr	r3, [r3, #32]
20000a28:	2202      	movs	r2, #2
20000a2a:	4251      	negs	r1, r2
20000a2c:	6878      	ldr	r0, [r7, #4]
20000a2e:	2200      	movs	r2, #0
20000a30:	4798      	blx	r3
20000a32:	e00e      	b.n	20000a52 <main+0x86>
			case 2: p->set_speed (p, 2, -2); break;
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	6a1b      	ldr	r3, [r3, #32]
20000a38:	2202      	movs	r2, #2
20000a3a:	4252      	negs	r2, r2
20000a3c:	6878      	ldr	r0, [r7, #4]
20000a3e:	2102      	movs	r1, #2
20000a40:	4798      	blx	r3
20000a42:	e006      	b.n	20000a52 <main+0x86>
			case 8: p->set_speed (p, 2, 2); break;
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	6a1b      	ldr	r3, [r3, #32]
20000a48:	6878      	ldr	r0, [r7, #4]
20000a4a:	2202      	movs	r2, #2
20000a4c:	2102      	movs	r1, #2
20000a4e:	4798      	blx	r3
20000a50:	46c0      	nop			; (mov r8, r8)
	while(1) {
20000a52:	e7c6      	b.n	200009e2 <main+0x16>
20000a54:	20000a90 	mulcs	r0, r0, sl
20000a58:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000a5c <ball_geometry>:
20000a5c:	0000000c 	andeq	r0, r0, ip
20000a60:	00000004 	andeq	r0, r0, r4
20000a64:	00000004 	andeq	r0, r0, r4
20000a68:	02000100 	andeq	r0, r0, #0, 2
20000a6c:	01010001 	tsteq	r1, r1
20000a70:	03010201 	movweq	r0, #4609	; 0x1201
20000a74:	01020002 	tsteq	r2, r2
20000a78:	03020202 	movweq	r0, #8706	; 0x2202
20000a7c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000a90 <ball>:
20000a90:	20000a5c 	andcs	r0, r0, ip, asr sl
	...
20000aa4:	20000681 	andcs	r0, r0, r1, lsl #13
20000aa8:	200006e7 	andcs	r0, r0, r7, ror #13
20000aac:	2000074d 	andcs	r0, r0, sp, asr #14
20000ab0:	20000661 	andcs	r0, r0, r1, ror #12
20000ab4:	20000516 	andcs	r0, r0, r6, lsl r5
20000ab8:	20000520 	andcs	r0, r0, r0, lsr #10
20000abc:	2000052a 	andcs	r0, r0, sl, lsr #10
20000ac0:	20000534 	andcs	r0, r0, r4, lsr r5
20000ac4:	2000053e 	andcs	r0, r0, lr, lsr r5
20000ac8:	20000548 	andcs	r0, r0, r8, asr #10
20000acc:	20000552 	andcs	r0, r0, r2, asr r5
20000ad0:	2000055c 	andcs	r0, r0, ip, asr r5
20000ad4:	0a030201 	beq	200c12e0 <ball+0xc0850>
20000ad8:	0b060504 	bleq	20181ef0 <ball+0x181460>
20000adc:	0c090807 	stceq	8, cr0, [r9], {7}
20000ae0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000ab0 <ball+0x20>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000726 	andeq	r0, r0, r6, lsr #14
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000200 	andeq	r0, r0, r0, lsl #4
  10:	0002cb0c 	andeq	ip, r2, ip, lsl #22
  14:	00002b00 	andeq	r2, r0, r0, lsl #22
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
  28:	45010000 	strmi	r0, [r1, #-0]
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000108 	andeq	r0, r0, r8, lsl #2
  38:	0000df04 	andeq	sp, r0, r4, lsl #30
  3c:	47010200 	strmi	r0, [r1, -r0, lsl #4]
  40:	00005c12 	andeq	r5, r0, r2, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250b4801 	strcs	r4, [fp, #-2049]	; 0xfffff7ff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250b49 	eoreq	r0, r5, r9, asr #22
  58:	00010000 	andeq	r0, r1, r0
  5c:	0000f202 	andeq	pc, r0, r2, lsl #4
  60:	044a0100 	strbeq	r0, [sl], #-256	; 0xffffff00
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	0001cd04 	andeq	ip, r1, r4, lsl #26
  6c:	4c013400 	cfstrsmi	mvf3, [r1], {-0}
  70:	0000a911 	andeq	sl, r0, r1, lsl r9
  74:	03920600 	orrseq	r0, r2, #0, 12
  78:	4d010000 	stcmi	0, cr0, [r1, #-0]
  7c:	0000a907 	andeq	sl, r0, r7, lsl #18
  80:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
  84:	01000001 	tsteq	r0, r1
  88:	00a9074e 	adceq	r0, r9, lr, asr #14
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000001ee 	andeq	r0, r0, lr, ror #3
  94:	a9074f01 	stmdbge	r7, {r0, r8, r9, sl, fp, lr}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0095001 	andlt	r5, r9, r1
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	c0070403 	andgt	r0, r7, r3, lsl #8
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68045101 	stmdavs	r4, {r0, r8, ip, lr}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0f5101 	svcle	0x000f5101
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	037b0400 	cmneq	fp, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	01661153 	cmneq	r6, r3, asr r1
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30d54 	sbcseq	r0, r3, r4, asr sp
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a90755 	adceq	r0, r9, r5, asr r7
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90b55 	adceq	r0, r9, r5, asr fp
 114:	06080000 	streq	r0, [r8], -r0
 118:	00000380 	andeq	r0, r0, r0, lsl #7
 11c:	a9075601 	stmdbge	r7, {r0, r9, sl, ip, lr}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00011606 	andeq	r1, r1, r6, lsl #12
 128:	0d560100 	ldfeqe	f0, [r6, #-0]
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02890610 	addeq	r0, r9, #16, 12	; 0x1000000
 134:	57010000 	strpl	r0, [r1, -r0]
 138:	0001770b 	andeq	r7, r1, fp, lsl #14
 13c:	80061400 	andhi	r1, r6, r0, lsl #8
 140:	01000001 	tsteq	r0, r1
 144:	01770b58 	cmneq	r7, r8, asr fp
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	000000bc 	strheq	r0, [r0], -ip
 150:	770b5901 	strvc	r5, [fp, -r1, lsl #18]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	0002c106 	andeq	ip, r2, r6, lsl #2
 15c:	0b5a0100 	bleq	1680564 <startup-0x1e97fa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	0003b702 	andeq	fp, r3, r2, lsl #14
 19c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0xffffff00
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	0003b602 	andeq	fp, r3, r2, lsl #12
 1a8:	0d5b0100 	ldfeqe	f0, [fp, #-0]
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	00011b0d 	andeq	r1, r1, sp, lsl #22
 1b4:	01940100 	orrseq	r0, r4, r0, lsl #2
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
 1c0:	0d20000a 	stceq	0, cr0, [r0, #-40]!	; 0xffffffd8
 1c4:	00000284 	andeq	r0, r0, r4, lsl #5
 1c8:	0f019601 	svceq	0x00019601
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	0a900305 	beq	fe400dec <ball+0xde40035c>
 1d4:	8b0e2000 	blhi	3881dc <startup-0x1fc77e24>
 1d8:	01000001 	tsteq	r0, r1
 1dc:	cc0601aa 	stfgts	f0, [r6], {170}	; 0xaa
 1e0:	8c200009 	stchi	0, cr0, [r0], #-36	; 0xffffffdc
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0002149c 	muleq	r2, ip, r4
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a01ab01 	beq	6adfc <startup-0x1ff95204>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 1fc:	200009e2 	andcs	r0, r0, r2, ror #19
 200:	00000070 	andeq	r0, r0, r0, ror r0
 204:	0100630f 	tsteq	r0, pc, lsl #6
 208:	250b01b6 	strcs	r0, [fp, #-438]	; 0xfffffe4a
 20c:	02000000 	andeq	r0, r0, #0
 210:	00006b91 	muleq	r0, r1, fp
 214:	0001df11 	andeq	sp, r1, r1, lsl pc
 218:	01980100 	orrseq	r0, r8, r0, lsl #2
 21c:	00094c06 	andeq	r4, r9, r6, lsl #24
 220:	00008020 	andeq	r8, r0, r0, lsr #32
 224:	129c0100 	addsne	r0, ip, #0, 2
 228:	00000293 	muleq	r0, r3, r2
 22c:	0f018001 	svceq	0x00018001
 230:	00000031 	andeq	r0, r0, r1, lsr r0
 234:	200008c8 	andcs	r0, r0, r8, asr #17
 238:	00000084 	andeq	r0, r0, r4, lsl #1
 23c:	027d9c01 	rsbseq	r9, sp, #256	; 0x100
 240:	6b0f0000 	blvs	3c0248 <startup-0x1fc3fdb8>
 244:	01007965 	tsteq	r0, r5, ror #18
 248:	7d100181 	ldfvcs	f0, [r0, #-516]	; 0xfffffdfc
 24c:	02000002 	andeq	r0, r0, #2
 250:	630f5c91 	movwvs	r5, #64657	; 0xfc91
 254:	01006c6f 	tsteq	r0, pc, ror #24
 258:	31100185 	tstcc	r0, r5, lsl #3
 25c:	02000000 	andeq	r0, r0, #0
 260:	e2106e91 	ands	r6, r0, #2320	; 0x910
 264:	56200008 	strtpl	r0, [r0], -r8
 268:	0f000000 	svceq	0x00000000
 26c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 270:	15018601 	strne	r8, [r1, #-1537]	; 0xfffff9ff
 274:	00000031 	andeq	r0, r0, r1, lsr r0
 278:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 27c:	00310800 	eorseq	r0, r1, r0, lsl #16
 280:	02930000 	addseq	r0, r3, #0
 284:	c0090000 	andgt	r0, r9, r0
 288:	03000000 	movweq	r0, #0
 28c:	0000c009 	andeq	ip, r0, r9
 290:	13000300 	movwne	r0, #768	; 0x300
 294:	000001a3 	andeq	r0, r0, r3, lsr #3
 298:	05017301 	streq	r7, [r1, #-769]	; 0xfffffcff
 29c:	000000a9 	andeq	r0, r0, r9, lsr #1
 2a0:	20000874 	andcs	r0, r0, r4, ror r8
 2a4:	00000054 	andeq	r0, r0, r4, asr r0
 2a8:	02bf9c01 	adcseq	r9, pc, #256	; 0x100
 2ac:	f80d0000 			; <UNDEFINED> instruction: 0xf80d0000
 2b0:	01000000 	mrseq	r0, (UNDEF: 0)
 2b4:	31100177 	tstcc	r0, r7, ror r1
 2b8:	02000000 	andeq	r0, r0, #0
 2bc:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
 2c0:	000000af 	andeq	r0, r0, pc, lsr #1
 2c4:	06016801 	streq	r6, [r1], -r1, lsl #16
 2c8:	20000810 	andcs	r0, r0, r0, lsl r8
 2cc:	00000064 	andeq	r0, r0, r4, rrx
 2d0:	02e79c01 	rsceq	r9, r7, #256	; 0x100
 2d4:	72150000 	andsvc	r0, r5, #0
 2d8:	0100776f 	tsteq	r0, pc, ror #14
 2dc:	c0210168 	eorgt	r0, r1, r8, ror #2
 2e0:	02000000 	andeq	r0, r0, #0
 2e4:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
 2e8:	0000039c 	muleq	r0, ip, r3
 2ec:	06014901 	streq	r4, [r1], -r1, lsl #18
 2f0:	2000074c 	andcs	r0, r0, ip, asr #14
 2f4:	000000c4 	andeq	r0, r0, r4, asr #1
 2f8:	032d9c01 			; <UNDEFINED> instruction: 0x032d9c01
 2fc:	6f150000 	svcvs	0x00150000
 300:	01490100 	mrseq	r0, (UNDEF: 89)
 304:	0001a41b 	andeq	sl, r1, fp, lsl r4
 308:	6c910200 	lfmvs	f0, 4, [r1], {0}
 30c:	0001b60d 	andeq	fp, r1, sp, lsl #12
 310:	014b0100 	mrseq	r0, (UNDEF: 91)
 314:	0000a906 	andeq	sl, r0, r6, lsl #18
 318:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 31c:	0001bb0d 	andeq	fp, r1, sp, lsl #22
 320:	014c0100 	mrseq	r0, (UNDEF: 92)
 324:	0000a906 	andeq	sl, r0, r6, lsl #18
 328:	70910200 	addsvc	r0, r1, r0, lsl #4
 32c:	03500e00 	cmpeq	r0, #0, 28
 330:	43010000 	movwmi	r0, #4096	; 0x1000
 334:	06e60601 	strbteq	r0, [r6], r1, lsl #12
 338:	00662000 	rsbeq	r2, r6, r0
 33c:	9c010000 	stcls	0, cr0, [r1], {-0}
 340:	0000036b 	andeq	r0, r0, fp, ror #6
 344:	01006f15 	tsteq	r0, r5, lsl pc
 348:	a41c0143 	ldrge	r0, [ip], #-323	; 0xfffffebd
 34c:	02000001 	andeq	r0, r0, #1
 350:	ee106c91 	mrc	12, 0, r6, cr0, cr1, {4}
 354:	54200006 	strtpl	r0, [r0], #-6
 358:	0f000000 	svceq	0x00000000
 35c:	44010074 	strmi	r0, [r1], #-116	; 0xffffff8c
 360:	00a90b01 	adceq	r0, r9, r1, lsl #22
 364:	91020000 	mrsls	r0, (UNDEF: 2)
 368:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
 36c:	000000c1 	andeq	r0, r0, r1, asr #1
 370:	06013d01 	streq	r3, [r1], -r1, lsl #26
 374:	20000680 	andcs	r0, r0, r0, lsl #13
 378:	00000066 	andeq	r0, r0, r6, rrx
 37c:	03a99c01 			; <UNDEFINED> instruction: 0x03a99c01
 380:	6f150000 	svcvs	0x00150000
 384:	013d0100 	teqeq	sp, r0, lsl #2
 388:	0001a41b 	andeq	sl, r1, fp, lsl r4
 38c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 390:	00068810 	andeq	r8, r6, r0, lsl r8
 394:	00005420 	andeq	r5, r0, r0, lsr #8
 398:	00740f00 	rsbseq	r0, r4, r0, lsl #30
 39c:	0b013e01 	bleq	4fba8 <startup-0x1ffb0458>
 3a0:	000000a9 	andeq	r0, r0, r9, lsr #1
 3a4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3a8:	02b01400 	adcseq	r1, r0, #0, 8
 3ac:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
 3b0:	06600601 	strbteq	r0, [r0], -r1, lsl #12
 3b4:	00202000 	eoreq	r2, r0, r0
 3b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3bc:	000003ef 	andeq	r0, r0, pc, ror #7
 3c0:	01006f15 	tsteq	r0, r5, lsl pc
 3c4:	a4200138 	strtge	r0, [r0], #-312	; 0xfffffec8
 3c8:	02000001 	andeq	r0, r0, #1
 3cc:	a8167491 	ldmdage	r6, {r0, r4, r7, sl, ip, sp, lr}
 3d0:	01000003 	tsteq	r0, r3
 3d4:	a9270138 	stmdbge	r7!, {r3, r4, r5, r8}
 3d8:	02000000 	andeq	r0, r0, #0
 3dc:	af167091 	svcge	0x00167091
 3e0:	01000003 	tsteq	r0, r3
 3e4:	a9330138 	ldmdbge	r3!, {r3, r4, r5, r8}
 3e8:	02000000 	andeq	r0, r0, #0
 3ec:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 3f0:	000000cd 	andeq	r0, r0, sp, asr #1
 3f4:	06010f01 	streq	r0, [r1], -r1, lsl #30
 3f8:	20000496 	mulcs	r0, r6, r4
 3fc:	000001ca 	andeq	r0, r0, sl, asr #3
 400:	04839c01 	streq	r9, [r3], #3073	; 0xc01
 404:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
 408:	010f0100 	mrseq	r0, (UNDEF: 31)
 40c:	00002515 	andeq	r2, r0, r5, lsl r5
 410:	5f910200 	svcpl	0x00910200
 414:	01007915 	tsteq	r0, r5, lsl r9
 418:	2520010f 	strcs	r0, [r0, #-271]!	; 0xfffffef1
 41c:	02000000 	andeq	r0, r0, #0
 420:	73155e91 	tstvc	r5, #2320	; 0x910
 424:	01007465 	tsteq	r0, r5, ror #8
 428:	252b010f 	strcs	r0, [fp, #-271]!	; 0xfffffef1
 42c:	02000000 	andeq	r0, r0, #0
 430:	8e0d5d91 	mcrhi	13, 0, r5, cr13, cr1, {4}
 434:	01000002 	tsteq	r0, r2
 438:	250a0111 	strcs	r0, [sl, #-273]	; 0xfffffeef
 43c:	02000000 	andeq	r0, r0, #0
 440:	510d6791 			; <UNDEFINED> instruction: 0x510d6791
 444:	01000001 	tsteq	r0, r1
 448:	25100111 	ldrcs	r0, [r0, #-273]	; 0xfffffeef
 44c:	02000000 	andeq	r0, r0, #0
 450:	680d6691 	stmdavs	sp, {r0, r4, r7, r9, sl, sp, lr}
 454:	01000001 	tsteq	r0, r1
 458:	251c0111 	ldrcs	r0, [ip, #-273]	; 0xfffffeef
 45c:	02000000 	andeq	r0, r0, #0
 460:	e60d6591 			; <UNDEFINED> instruction: 0xe60d6591
 464:	01000000 	mrseq	r0, (UNDEF: 0)
 468:	25240111 	strcs	r0, [r4, #-273]!	; 0xfffffeef
 46c:	02000000 	andeq	r0, r0, #0
 470:	4a0d6391 	bmi	3592bc <startup-0x1fca6d44>
 474:	01000003 	tsteq	r0, r3
 478:	250a0112 	strcs	r0, [sl, #-274]	; 0xfffffeee
 47c:	02000000 	andeq	r0, r0, #0
 480:	0e006491 	mcreq	4, 0, r6, cr0, cr1, {4}
 484:	000003be 			; <UNDEFINED> instruction: 0x000003be
 488:	06010501 	streq	r0, [r1], -r1, lsl #10
 48c:	2000042e 	andcs	r0, r0, lr, lsr #8
 490:	00000068 	andeq	r0, r0, r8, rrx
 494:	04cf9c01 	strbeq	r9, [pc], #3073	; 49c <startup-0x1ffffb64>
 498:	34100000 	ldrcc	r0, [r0], #-0
 49c:	58200004 	stmdapl	r0!, {r2}
 4a0:	0d000000 	stceq	0, cr0, [r0, #-0]
 4a4:	00000186 	andeq	r0, r0, r6, lsl #3
 4a8:	0f010601 	svceq	0x00010601
 4ac:	00000025 	andeq	r0, r0, r5, lsr #32
 4b0:	10779102 	rsbsne	r9, r7, r2, lsl #2
 4b4:	20000458 	andcs	r0, r0, r8, asr r4
 4b8:	00000022 	andeq	r0, r0, r2, lsr #32
 4bc:	0001d70d 	andeq	sp, r1, sp, lsl #14
 4c0:	01090100 	mrseq	r0, (UNDEF: 25)
 4c4:	00002510 	andeq	r2, r0, r0, lsl r5
 4c8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 4cc:	17000000 	strne	r0, [r0, -r0]
 4d0:	0000035d 	andeq	r0, r0, sp, asr r3
 4d4:	d806f701 	stmdale	r6, {r0, r8, r9, sl, ip, sp, lr, pc}
 4d8:	56200003 	strtpl	r0, [r0], -r3
 4dc:	01000000 	mrseq	r0, (UNDEF: 0)
 4e0:	029e189c 	addseq	r1, lr, #156, 16	; 0x9c0000
 4e4:	f2010000 	vhadd.s8	d0, d1, d0
 4e8:	00002509 	andeq	r2, r0, r9, lsl #10
 4ec:	0003ae00 	andeq	sl, r3, r0, lsl #28
 4f0:	00002a20 	andeq	r2, r0, r0, lsr #20
 4f4:	0b9c0100 	bleq	fe7008fc <ball+0xde6ffe6c>
 4f8:	19000005 	stmdbne	r0, {r0, r2}
 4fc:	00000151 	andeq	r0, r0, r1, asr r1
 500:	2524f201 	strcs	pc, [r4, #-513]!	; 0xfffffdff
 504:	02000000 	andeq	r0, r0, #0
 508:	1a007791 	bne	1e354 <startup-0x1ffe1cac>
 50c:	00000190 	muleq	r0, r0, r1
 510:	6806ea01 	stmdavs	r6, {r0, r9, fp, sp, lr, pc}
 514:	46200003 	strtmi	r0, [r0], -r3
 518:	01000000 	mrseq	r0, (UNDEF: 0)
 51c:	0005409c 	muleq	r5, ip, r0
 520:	02ab1900 	adceq	r1, fp, #0, 18
 524:	ea010000 	b	4052c <startup-0x1ffbfad4>
 528:	00002522 	andeq	r2, r0, r2, lsr #10
 52c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 530:	00015119 	andeq	r5, r1, r9, lsl r1
 534:	30ea0100 	rsccc	r0, sl, r0, lsl #2
 538:	00000025 	andeq	r0, r0, r5, lsr #32
 53c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 540:	0000991a 	andeq	r9, r0, sl, lsl r9
 544:	06e30100 	strbteq	r0, [r3], r0, lsl #2
 548:	20000328 	andcs	r0, r0, r8, lsr #6
 54c:	00000040 	andeq	r0, r0, r0, asr #32
 550:	05759c01 	ldrbeq	r9, [r5, #-3073]!	; 0xfffff3ff
 554:	a7190000 	ldrge	r0, [r9, -r0]
 558:	01000000 	mrseq	r0, (UNDEF: 0)
 55c:	002525e3 	eoreq	r2, r5, r3, ror #11
 560:	91020000 	mrsls	r0, (UNDEF: 2)
 564:	01511977 	cmpeq	r1, r7, ror r9
 568:	e3010000 	movw	r0, #4096	; 0x1000
 56c:	00002536 	andeq	r2, r0, r6, lsr r5
 570:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 574:	01291a00 			; <UNDEFINED> instruction: 0x01291a00
 578:	cf010000 	svcgt	0x00010000
 57c:	0002a806 	andeq	sl, r2, r6, lsl #16
 580:	00008020 	andeq	r8, r0, r0, lsr #32
 584:	aa9c0100 	bge	fe70098c <ball+0xde6ffefc>
 588:	19000005 	stmdbne	r0, {r0, r2}
 58c:	00000298 	muleq	r0, r8, r2
 590:	251dcf01 	ldrcs	ip, [sp, #-3841]	; 0xfffff0ff
 594:	02000000 	andeq	r0, r0, #0
 598:	51197791 			; <UNDEFINED> instruction: 0x51197791
 59c:	01000001 	tsteq	r0, r1
 5a0:	00252ccf 	eoreq	r2, r5, pc, asr #25
 5a4:	91020000 	mrsls	r0, (UNDEF: 2)
 5a8:	85180076 	ldrhi	r0, [r8, #-118]	; 0xffffff8a
 5ac:	01000003 	tsteq	r0, r3
 5b0:	002509b9 	strhteq	r0, [r5], -r9
 5b4:	02180000 	andseq	r0, r8, #0
 5b8:	00902000 	addseq	r2, r0, r0
 5bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 5c0:	000005e3 	andeq	r0, r0, r3, ror #11
 5c4:	00015119 	andeq	r5, r1, r9, lsl r1
 5c8:	1fb90100 	svcne	0x00b90100
 5cc:	00000025 	andeq	r0, r0, r5, lsr #32
 5d0:	1b6f9102 	blne	1be49e0 <startup-0x1e41b620>
 5d4:	0000015c 	andeq	r0, r0, ip, asr r1
 5d8:	250ac101 	strcs	ip, [sl, #-257]	; 0xfffffeff
 5dc:	02000000 	andeq	r0, r0, #0
 5e0:	1a007791 	bne	1e42c <startup-0x1ffe1bd4>
 5e4:	00000137 	andeq	r0, r0, r7, lsr r1
 5e8:	a206a501 	andge	sl, r6, #4194304	; 0x400000
 5ec:	76200001 	strtvc	r0, [r0], -r1
 5f0:	01000000 	mrseq	r0, (UNDEF: 0)
 5f4:	00060d9c 	muleq	r6, ip, sp
 5f8:	00001c00 	andeq	r1, r0, r0, lsl #24
 5fc:	631d0000 	tstvs	sp, #0
 600:	0bae0100 	bleq	feb80a08 <ball+0xdeb7ff78>
 604:	00000025 	andeq	r0, r0, r5, lsr #32
 608:	00779102 	rsbseq	r9, r7, r2, lsl #2
 60c:	014a1a00 	cmpeq	sl, r0, lsl #20
 610:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 614:	00014806 	andeq	r4, r1, r6, lsl #16
 618:	00005a20 	andeq	r5, r0, r0, lsr #20
 61c:	339c0100 	orrscc	r0, ip, #0, 2
 620:	19000006 	stmdbne	r0, {r1, r2}
 624:	00000151 	andeq	r0, r0, r1, asr r1
 628:	25219901 	strcs	r9, [r1, #-2305]!	; 0xfffff6ff
 62c:	02000000 	andeq	r0, r0, #0
 630:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
 634:	0000016f 	andeq	r0, r0, pc, ror #2
 638:	0c069301 	stceq	3, cr9, [r6], {1}
 63c:	3c200001 	stccc	0, cr0, [r0], #-4
 640:	01000000 	mrseq	r0, (UNDEF: 0)
 644:	0006579c 	muleq	r6, ip, r7
 648:	00781f00 	rsbseq	r1, r8, r0, lsl #30
 64c:	25269301 	strcs	r9, [r6, #-769]!	; 0xfffffcff
 650:	02000000 	andeq	r0, r0, #0
 654:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
 658:	00000016 	andeq	r0, r0, r6, lsl r0
 65c:	c6068e01 	strgt	r8, [r6], -r1, lsl #28
 660:	46200000 	strtmi	r0, [r0], -r0
 664:	01000000 	mrseq	r0, (UNDEF: 0)
 668:	00067b9c 	muleq	r6, ip, fp
 66c:	00781f00 	rsbseq	r1, r8, r0, lsl #30
 670:	25248e01 	strcs	r8, [r4, #-3585]!	; 0xfffff1ff
 674:	02000000 	andeq	r0, r0, #0
 678:	1a007791 	bne	1e4c4 <startup-0x1ffe1b3c>
 67c:	0000000a 	andeq	r0, r0, sl
 680:	96068201 	strls	r8, [r6], -r1, lsl #4
 684:	30200000 	eorcc	r0, r0, r0
 688:	01000000 	mrseq	r0, (UNDEF: 0)
 68c:	0006b79c 	muleq	r6, ip, r7
 690:	736d1f00 	cmnvc	sp, #0, 30
 694:	1f820100 	svcne	0x00820100
 698:	000000c0 	andeq	r0, r0, r0, asr #1
 69c:	106c9102 	rsbne	r9, ip, r2, lsl #2
 6a0:	2000009e 	mulcs	r0, lr, r0
 6a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6a8:	0100691d 	tsteq	r0, sp, lsl r9
 6ac:	00a90a87 	adceq	r0, r9, r7, lsl #21
 6b0:	91020000 	mrsls	r0, (UNDEF: 2)
 6b4:	1a000074 	bne	88c <startup-0x1ffff774>
 6b8:	000000d3 	ldrdeq	r0, [r0], -r3
 6bc:	6a067801 	bvs	19e6c8 <startup-0x1fe61938>
 6c0:	2c200000 	stccs	0, cr0, [r0], #-0
 6c4:	01000000 	mrseq	r0, (UNDEF: 0)
 6c8:	0006f39c 	muleq	r6, ip, r3
 6cc:	73751f00 	cmnvc	r5, #0, 30
 6d0:	1f780100 	svcne	0x00780100
 6d4:	000000c0 	andeq	r0, r0, r0, asr #1
 6d8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 6dc:	20000072 	andcs	r0, r0, r2, ror r0
 6e0:	0000001a 	andeq	r0, r0, sl, lsl r0
 6e4:	0100691d 	tsteq	r0, sp, lsl r9
 6e8:	00a90a7d 	adceq	r0, r9, sp, ror sl
 6ec:	91020000 	mrsls	r0, (UNDEF: 2)
 6f0:	17000074 	smlsdxne	r0, r4, r0, r0
 6f4:	0000036f 	andeq	r0, r0, pc, ror #6
 6f8:	58067301 	stmdapl	r6, {r0, r8, r9, ip, sp, lr}
 6fc:	12200000 	eorne	r0, r0, #0
 700:	01000000 	mrseq	r0, (UNDEF: 0)
 704:	01f4209c 			; <UNDEFINED> instruction: 0x01f4209c
 708:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 70c:	00001006 	andeq	r1, r0, r6
 710:	00004820 	andeq	r4, r0, r0, lsr #16
 714:	209c0100 	addscs	r0, ip, r0, lsl #2
 718:	0000027c 	andeq	r0, r0, ip, ror r2
 71c:	00065f01 	andeq	r5, r6, r1, lsl #30
 720:	0c200000 	stceq	0, cr0, [r0], #-0
 724:	01000000 	mrseq	r0, (UNDEF: 0)
 728:	Address 0x00000728 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	12000019 	andne	r0, r0, #25
  f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	0b39053b 	bleq	e415f4 <startup-0x1f1bea0c>
 104:	13491927 	movtne	r1, #39207	; 0x9927
 108:	06120111 			; <UNDEFINED> instruction: 0x06120111
 10c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 110:	00130119 	andseq	r0, r3, r9, lsl r1
 114:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 118:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 11c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 120:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 124:	01111349 	tsteq	r1, r9, asr #6
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 130:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	0b39053b 	bleq	e41630 <startup-0x1f1be9d0>
 140:	01111927 	tsteq	r1, r7, lsr #18
 144:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 148:	01194297 			; <UNDEFINED> instruction: 0x01194297
 14c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 150:	08030005 	stmdaeq	r3, {r0, r2}
 154:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 158:	13490b39 	movtne	r0, #39737	; 0x9b39
 15c:	00001802 	andeq	r1, r0, r2, lsl #16
 160:	03000516 	movweq	r0, #1302	; 0x516
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 16c:	00180213 	andseq	r0, r8, r3, lsl r2
 170:	002e1700 	eoreq	r1, lr, r0, lsl #14
 174:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 188:	18000019 	stmdane	r0, {r0, r3, r4}
 18c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	13491927 	movtne	r1, #39207	; 0x9927
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	00051900 	andeq	r1, r5, r0, lsl #18
 1ac:	0b3a0e03 	bleq	e839c0 <startup-0x1f17c640>
 1b0:	0b390b3b 	bleq	e42ea4 <startup-0x1f1bd15c>
 1b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b8:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 1bc:	03193f01 	tsteq	r9, #1, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1cc:	96184006 	ldrls	r4, [r8], -r6
 1d0:	13011942 	movwne	r1, #6466	; 0x1942
 1d4:	341b0000 	ldrcc	r0, [fp], #-0
 1d8:	3a0e0300 	bcc	380de0 <startup-0x1fc7f220>
 1dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e4:	1c000018 	stcne	0, cr0, [r0], {24}
 1e8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 1ec:	341d0000 	ldrcc	r0, [sp], #-0
 1f0:	3a080300 	bcc	200df8 <startup-0x1fdff208>
 1f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1fc:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 200:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 204:	0b3a0e03 	bleq	e83a18 <startup-0x1f17c5e8>
 208:	0b390b3b 	bleq	e42efc <startup-0x1f1bd104>
 20c:	01111927 	tsteq	r1, r7, lsr #18
 210:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 214:	01194297 			; <UNDEFINED> instruction: 0x01194297
 218:	1f000013 	svcne	0x00000013
 21c:	08030005 	stmdaeq	r3, {r0, r2}
 220:	0b3b0b3a 	bleq	ec2f10 <startup-0x1f13d0f0>
 224:	13490b39 	movtne	r0, #39737	; 0x9b39
 228:	00001802 	andeq	r1, r0, r2, lsl #16
 22c:	3f002e20 	svccc	0x00002e20
 230:	3a0e0319 	bcc	380e9c <startup-0x1fc7f164>
 234:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 238:	1119270b 	tstne	r9, fp, lsl #14
 23c:	40061201 	andmi	r1, r6, r1, lsl #4
 240:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 244:	Address 0x00000244 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000a48 	andeq	r0, r0, r8, asr #20
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001c4 	andcs	r0, r0, r4, asr #3
   4:	200001ee 	andcs	r0, r0, lr, ror #3
   8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
   c:	200001f2 	strdcs	r0, [r0], -r2
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20000a58 	andcs	r0, r0, r8, asr sl
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000592 	muleq	r0, r2, r5
   4:	00950003 	addseq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	6c6f2f37 	stclvs	15, cr2, [pc], #-220	; ffffff80 <ball+0xdffff4f0>
  58:	635f666f 	cmpvs	pc, #116391936	; 0x6f00000
  5c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
  60:	432f746e 			; <UNDEFINED> instruction: 0x432f746e
  64:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  68:	2f657469 	svccs	0x00657469
  6c:	6b726f77 	blvs	1c9be50 <startup-0x1e3641b0>
  70:	63617073 	cmnvs	r1, #115	; 0x73
  74:	6f6c4f65 	svcvs	0x006c4f65
  78:	61622f66 	cmnvs	r2, r6, ror #30
  7c:	69576c6c 	ldmdbvs	r7, {r2, r3, r5, r6, sl, fp, sp, lr}^
  80:	654b6874 	strbvs	r6, [fp, #-2164]	; 0xfffff78c
  84:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  88:	61620000 	cmnvs	r2, r0
  8c:	69776c6c 	ldmdbvs	r7!, {r2, r3, r5, r6, sl, fp, sp, lr}^
  90:	656b6874 	strbvs	r6, [fp, #-2164]!	; 0xfffff78c
  94:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  98:	0100632e 	tsteq	r0, lr, lsr #6
  9c:	05000000 	streq	r0, [r0, #-0]
  a0:	02050017 	andeq	r0, r5, #23
  a4:	20000000 	andcs	r0, r0, r0
  a8:	0100de03 	tsteq	r0, r3, lsl #28
  ac:	21130105 	tstcs	r3, r5, lsl #2
  b0:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
  b4:	01010003 	tsteq	r1, r3
  b8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
  bc:	00001002 	andeq	r1, r0, r2
  c0:	00e80320 	rsceq	r0, r8, r0, lsr #6
  c4:	2f020501 	svccs	0x00020501
  c8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  cc:	0c052f02 	stceq	15, cr2, [r5], {2}
  d0:	2f020520 	svccs	0x00020520
  d4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
  d8:	0c052f02 	stceq	15, cr2, [r5], {2}
  dc:	2f070520 	svccs	0x00070520
  e0:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  e8:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
  ec:	07053c01 	streq	r3, [r5, -r1, lsl #24]
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	2202053c 	andcs	r0, r2, #60, 10	; 0xf000000
  f8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  fc:	17052f01 	strne	r2, [r5, -r1, lsl #30]
 100:	2f0205ae 	svccs	0x000205ae
 104:	22052f2f 	andcs	r2, r5, #47, 30	; 0xbc
 108:	4f0a053e 	svcmi	0x000a053e
 10c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 110:	04020003 	streq	r0, [r2], #-3
 114:	1c052103 	stfnes	f2, [r5], {3}
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	0016052d 	andseq	r0, r6, sp, lsr #10
 120:	3c010402 	cfstrscc	mvf0, [r1], {2}
 124:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 128:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 12c:	04020002 	streq	r0, [r2], #-2
 130:	01052001 	tsteq	r5, r1
 134:	5a220531 	bpl	881600 <startup-0x1f77ea00>
 138:	054f0a05 	strbeq	r0, [pc, #-2565]	; fffff73b <ball+0xdfffecab>
 13c:	03052e02 	movweq	r2, #24066	; 0x5e02
 140:	03040200 	movweq	r0, #16896	; 0x4200
 144:	001a0521 	andseq	r0, sl, r1, lsr #10
 148:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 14c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 150:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 154:	04020002 	streq	r0, [r2], #-2
 158:	01052001 	tsteq	r5, r1
 15c:	5c27053f 	cfstr32pl	mvfx0, [r7], #-252	; 0xffffff04
 160:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 164:	0f054a16 	svceq	0x00054a16
 168:	02055966 	andeq	r5, r5, #1671168	; 0x198000
 16c:	68290583 	stmdavs	r9!, {r0, r1, r7, r8, sl}
 170:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 174:	05150802 	ldreq	r0, [r5, #-2050]	; 0xfffff7fe
 178:	0205762e 	andeq	r7, r5, #48234496	; 0x2e00000
 17c:	c1130567 	tstgt	r3, r7, ror #10
 180:	7a030c05 	bvc	c319c <startup-0x1ff3ce64>
 184:	3c030520 	cfstr32cc	mvfx0, [r3], {32}
 188:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 18c:	0f053d09 	svceq	0x00053d09
 190:	3d09054b 	cfstr32cc	mvfx0, [r9, #-300]	; 0xfffffed4
 194:	054b1905 	strbeq	r1, [fp, #-2309]	; 0xfffff6fb
 198:	13053c03 	movwne	r3, #23555	; 0x5c03
 19c:	22010521 	andcs	r0, r1, #138412032	; 0x8400000
 1a0:	053e2005 	ldreq	r2, [lr, #-5]!
 1a4:	053d3d02 	ldreq	r3, [sp, #-3330]!	; 0xfffff2fe
 1a8:	0205200e 	andeq	r2, r5, #14
 1ac:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 1b0:	053d3003 	ldreq	r3, [sp, #-3]!
 1b4:	0b052f1d 	bleq	14be30 <startup-0x1feb41d0>
 1b8:	4b03053c 	blmi	c16b0 <startup-0x1ff3e950>
 1bc:	2f06053d 	svccs	0x0006053d
 1c0:	7a030c05 	bvc	c31dc <startup-0x1ff3ce24>
 1c4:	2704054a 	strcs	r0, [r4, -sl, asr #10]
 1c8:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 1cc:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1d0:	2b052f01 	blcs	14bddc <startup-0x1feb4224>
 1d4:	670205ca 	strvs	r0, [r2, -sl, asr #11]
 1d8:	200e053d 	andcs	r0, lr, sp, lsr r5
 1dc:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1d0 <startup-0x1ffffe30>
 1e0:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 1e4:	0a052f18 	beq	14be4c <startup-0x1feb41b4>
 1e8:	4b020520 	blmi	81670 <startup-0x1ff7e990>
 1ec:	200e053d 	andcs	r0, lr, sp, lsr r5
 1f0:	052f0505 	streq	r0, [pc, #-1285]!	; fffffcf3 <ball+0xdffff263>
 1f4:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 1f8:	03053005 	movweq	r3, #20485	; 0x5005
 1fc:	09053d4b 	stmdbeq	r5, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 200:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 204:	05ca3805 	strbeq	r3, [sl, #2053]	; 0x805
 208:	10059102 	andne	r9, r5, r2, lsl #2
 20c:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 210:	2f3d2f59 	svccs	0x003d2f59
 214:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
 218:	03054a05 	movweq	r4, #23045	; 0x5a05
 21c:	11053d21 	tstne	r5, r1, lsr #26
 220:	4a050530 	bmi	1416e8 <startup-0x1febe918>
 224:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 228:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 22c:	02052010 	andeq	r2, r5, #16
 230:	01053d2f 	tsteq	r5, pc, lsr #26
 234:	7642053d 			; <UNDEFINED> instruction: 0x7642053d
 238:	3d910205 	lfmcc	f0, 4, [r1, #20]
 23c:	05833d59 	streq	r3, [r3, #3417]	; 0xd59
 240:	02054c3c 	andeq	r4, r5, #60, 24	; 0x3c00
 244:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 248:	3005833d 	andcc	r8, r5, sp, lsr r3
 24c:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 250:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 254:	1f056702 	svcne	0x00056702
 258:	2f02054c 	svccs	0x0002054c
 25c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 260:	4b4b4b3d 	blmi	12d2f5c <startup-0x1ed2d0a4>
 264:	01054b4b 	tsteq	r5, fp, asr #22
 268:	3e22053d 	mcrcc	5, 1, r0, cr2, cr13, {1}
 26c:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 270:	03053c02 	movweq	r3, #23554	; 0x5c02
 274:	10059f21 	andne	r9, r5, r1, lsr #30
 278:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 27c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 280:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 284:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 288:	03054903 	movweq	r4, #22787	; 0x5903
 28c:	01040200 	mrseq	r0, R12_usr
 290:	00270558 	eoreq	r0, r7, r8, asr r5
 294:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 298:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 29c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 2a0:	30055101 	andcc	r5, r5, r1, lsl #2
 2a4:	e505055a 	str	r0, [r5, #-1370]	; 0xfffffaa6
 2a8:	02001005 	andeq	r1, r0, #5
 2ac:	05580204 	ldrbeq	r0, [r8, #-516]	; 0xfffffdfc
 2b0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 2b4:	25055804 	strcs	r5, [r5, #-2052]	; 0xfffff7fc
 2b8:	06040200 	streq	r0, [r4], -r0, lsl #4
 2bc:	5a150558 	bpl	541824 <startup-0x1fabe7dc>
 2c0:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
 2c4:	0c05580a 	stceq	8, cr5, [r5], {10}
 2c8:	3c10053e 	cfldr32cc	mvfx0, [r0], {62}	; 0x3e
 2cc:	4a0305e5 	bmi	c1a68 <startup-0x1ff3e598>
 2d0:	05211005 	streq	r1, [r1, #-5]!
 2d4:	10054a03 	andne	r4, r5, r3, lsl #20
 2d8:	4a030521 	bmi	c1764 <startup-0x1ff3e89c>
 2dc:	05211005 	streq	r1, [r1, #-5]!
 2e0:	10054a03 	andne	r4, r5, r3, lsl #20
 2e4:	4a030521 	bmi	c1770 <startup-0x1ff3e890>
 2e8:	05211005 	streq	r1, [r1, #-5]!
 2ec:	10054a03 	andne	r4, r5, r3, lsl #20
 2f0:	4a030521 	bmi	c177c <startup-0x1ff3e884>
 2f4:	05211005 	streq	r1, [r1, #-5]!
 2f8:	05214a03 	streq	r4, [r1, #-2563]!	; 0xfffff5fd
 2fc:	08052205 	stmdaeq	r5, {r0, r2, r9, sp}
 300:	6905054b 	stmdbvs	r5, {r0, r1, r3, r6, r8, sl}
 304:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 308:	0e054b0a 	vmlaeq.f64	d4, d5, d10
 30c:	4b0a0576 	blmi	2818ec <startup-0x1fd7e714>
 310:	c9680205 	stmdbgt	r8!, {r0, r2, r9}^
 314:	05c91005 	strbeq	r1, [r9, #5]
 318:	05059102 	streq	r9, [r5, #-258]	; 0xfffffefe
 31c:	4b0805ad 	blmi	2019d8 <startup-0x1fdfe628>
 320:	920205a0 	andls	r0, r2, #160, 10	; 0x28000000
 324:	5d033205 	sfmpl	f3, 4, [r3, #-20]	; 0xffffffec
 328:	030105ac 	movweq	r0, #5548	; 0x15ac
 32c:	3b052024 	blcc	1483c4 <startup-0x1feb7c3c>
 330:	67080586 	strvs	r0, [r8, -r6, lsl #11]
 334:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 338:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 33c:	02054b0b 	andeq	r4, r5, #11264	; 0x2c00
 340:	000b052e 	andeq	r0, fp, lr, lsr #10
 344:	21030402 	tstcs	r3, r2, lsl #8
 348:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 34c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 350:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 354:	03056603 	movweq	r6, #22019	; 0x5603
 358:	03040200 	movweq	r0, #16896	; 0x4200
 35c:	0028052e 	eoreq	r0, r8, lr, lsr #10
 360:	3c030402 	cfstrscc	mvf0, [r3], {2}
 364:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 368:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 36c:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 370:	03056603 	movweq	r6, #22019	; 0x5603
 374:	03040200 	movweq	r0, #16896	; 0x4200
 378:	002a052e 	eoreq	r0, sl, lr, lsr #10
 37c:	73030402 	movwvc	r0, #13314	; 0x3402
 380:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 384:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 388:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 38c:	02052e01 	andeq	r2, r5, #1, 28
 390:	01040200 	mrseq	r0, R12_usr
 394:	3f010520 	svccc	0x00010520
 398:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 39c:	02054b0b 	andeq	r4, r5, #11264	; 0x2c00
 3a0:	000b052e 	andeq	r0, fp, lr, lsr #10
 3a4:	21030402 	tstcs	r3, r2, lsl #8
 3a8:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 3ac:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3b0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 3b4:	03056603 	movweq	r6, #22019	; 0x5603
 3b8:	03040200 	movweq	r0, #16896	; 0x4200
 3bc:	0028052e 	eoreq	r0, r8, lr, lsr #10
 3c0:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3c4:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 3c8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3cc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 3d0:	03056603 	movweq	r6, #22019	; 0x5603
 3d4:	03040200 	movweq	r0, #16896	; 0x4200
 3d8:	002a052e 	eoreq	r0, sl, lr, lsr #10
 3dc:	73030402 	movwvc	r0, #13314	; 0x3402
 3e0:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 3e4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3e8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 3ec:	02052e01 	andeq	r2, r5, #1, 28
 3f0:	01040200 	mrseq	r0, R12_usr
 3f4:	3f010520 	svccc	0x00010520
 3f8:	055a1e05 	ldrbeq	r1, [sl, #-3589]	; 0xfffff1fb
 3fc:	0e054b02 	vmlaeq.f64	d4, d5, d2
 400:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 404:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 408:	18052f0e 	stmdane	r5, {r1, r2, r3, r8, r9, sl, fp, sp}
 40c:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 410:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 414:	11053d0c 	tstne	r5, ip, lsl #26
 418:	2009052e 	andcs	r0, r9, lr, lsr #10
 41c:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff91f <ball+0xdfffee8f>
 420:	19054c14 	stmdbne	r5, {r2, r4, sl, fp, lr}
 424:	2011052e 	andscs	r0, r1, lr, lsr #10
 428:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 42c:	12052f0d 	andne	r2, r5, #13, 30	; 0x34
 430:	2009052e 	andcs	r0, r9, lr, lsr #10
 434:	052f1405 	streq	r1, [pc, #-1029]!	; 37 <startup-0x1fffffc9>
 438:	11052e19 	tstne	r5, r9, lsl lr
 43c:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 440:	3e05053e 	mcrcc	5, 0, r0, cr5, cr14, {1}
 444:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 448:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
 44c:	2f0b0520 	svccs	0x000b0520
 450:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 454:	11052e19 	tstne	r5, r9, lsl lr
 458:	2e0a0520 	cfsh32cs	mvfx0, mvfx10, #16
 45c:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff75f <ball+0xdfffeccf>
 460:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
 464:	2f130520 	svccs	0x00130520
 468:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 46c:	0b052010 	bleq	1484b4 <startup-0x1feb7b4c>
 470:	02053e2e 	andeq	r3, r5, #736	; 0x2e0
 474:	4b01053f 	blmi	41978 <startup-0x1ffbe688>
 478:	054e2605 	strbeq	r2, [lr, #-1541]	; 0xfffff9fb
 47c:	0b054c02 	bleq	15348c <startup-0x1feacb74>
 480:	1b052f08 	blne	14c0a8 <startup-0x1feb3f58>
 484:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 488:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 48c:	0305201b 	movweq	r2, #20507	; 0x501b
 490:	210b052e 	tstcs	fp, lr, lsr #10
 494:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 498:	0b052e03 	bleq	14bcac <startup-0x1feb4354>
 49c:	201b0521 	andscs	r0, fp, r1, lsr #10
 4a0:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 4a4:	1c05210c 	stfnes	f2, [r5], {12}
 4a8:	30010520 	andcc	r0, r1, r0, lsr #10
 4ac:	05841705 	streq	r1, [r4, #1797]	; 0x705
 4b0:	12054114 	andne	r4, r5, #20, 2
 4b4:	3d160520 	cfldr32cc	mvfx0, [r6, #-128]	; 0xffffff80
 4b8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 4bc:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 4c0:	16052001 	strne	r2, [r5], -r1
 4c4:	4a05052f 	bmi	141988 <startup-0x1febe678>
 4c8:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 4cc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4d0:	05052f16 	streq	r2, [r5, #-3862]	; 0xfffff0ea
 4d4:	0022054a 	eoreq	r0, r2, sl, asr #10
 4d8:	20010402 	andcs	r0, r1, r2, lsl #8
 4dc:	052f1605 	streq	r1, [pc, #-1541]!	; fffffedf <ball+0xdffff44f>
 4e0:	22054a05 	andcs	r4, r5, #20480	; 0x5000
 4e4:	01040200 	mrseq	r0, R12_usr
 4e8:	2f090520 	svccs	0x00090520
 4ec:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 4f0:	1005681b 	andne	r6, r5, fp, lsl r8
 4f4:	15056a3d 	strne	r6, [r5, #-2621]	; 0xfffff5c3
 4f8:	4a02054b 	bmi	81a2c <startup-0x1ff7e5d4>
 4fc:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 500:	07056709 	streq	r6, [r5, -r9, lsl #14]
 504:	3d06053c 	cfstr32cc	mvfx0, [r6, #-240]	; 0xffffff10
 508:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
 50c:	15053c19 	strne	r3, [r5, #-3097]	; 0xfffff3e7
 510:	002b053c 	eoreq	r0, fp, ip, lsr r5
 514:	54020402 	strpl	r0, [r2], #-1026	; 0xfffffbfe
 518:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 51c:	5f660104 	svcpl	0x00660104
 520:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 524:	04020001 	streq	r0, [r2], #-1
 528:	14052101 	strne	r2, [r5], #-257	; 0xfffffeff
 52c:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
 530:	0e052f02 	cdpeq	15, 0, cr2, cr5, cr2, {0}
 534:	2f110520 	svccs	0x00110520
 538:	76120567 	ldrvc	r0, [r2], -r7, ror #10
 53c:	5a110583 	bpl	441b50 <startup-0x1fbbe4b0>
 540:	77030567 	strvc	r0, [r3, -r7, ror #10]
 544:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
 548:	05212f03 	streq	r2, [r1, #-3843]!	; 0xfffff0fd
 54c:	11052201 	tstne	r5, r1, lsl #4
 550:	3d0a05e6 	cfstr32cc	mvfx0, [sl, #-920]	; 0xfffffc68
 554:	2f2f0205 	svccs	0x002f0205
 558:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
 55c:	03053204 	movweq	r3, #20996	; 0x5204
 560:	0f053d2e 	svceq	0x00053d2e
 564:	5903053d 	stmdbpl	r3, {r0, r2, r3, r4, r5, r8, sl}
 568:	05c90d05 	strbeq	r0, [r9, #3333]	; 0xd05
 56c:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 570:	210d054a 	tstcs	sp, sl, asr #10
 574:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 578:	0d055804 	stceq	8, cr5, [r5, #-16]
 57c:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
 580:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 584:	0c05210d 	stfeqs	f2, [r5], {13}
 588:	4a04052e 	bmi	101a48 <startup-0x1fefe5b8>
 58c:	78030b05 	stmdavc	r3, {r0, r2, r8, r9, fp}
 590:	00050220 	andeq	r0, r5, r0, lsr #4
 594:	Address 0x00000594 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  14:	72670069 	rsbvc	r0, r7, #105	; 0x69
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  20:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  24:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  28:	43007465 	movwmi	r7, #1125	; 0x465
  2c:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  30:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  34:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  38:	6f445c6e 	svcvs	0x00445c6e
  3c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  40:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  44:	50746947 	rsbspl	r6, r4, r7, asr #18
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
  50:	6f686353 	svcvs	0x00686353
  54:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  58:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  5c:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
  60:	31305441 	teqcc	r0, r1, asr #8
  64:	6c6f5c37 	stclvs	12, cr5, [pc], #-220	; ffffff90 <ball+0xdffff500>
  68:	635f666f 	cmpvs	pc, #116391936	; 0x6f00000
  6c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
  70:	435c746e 	cmpmi	ip, #1845493760	; 0x6e000000
  74:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
  78:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  7c:	6b726f77 	blvs	1c9be60 <startup-0x1e3641a0>
  80:	63617073 	cmnvs	r1, #115	; 0x73
  84:	6f6c4f65 	svcvs	0x006c4f65
  88:	61625c66 	cmnvs	r2, r6, ror #24
  8c:	69576c6c 	ldmdbvs	r7, {r2, r3, r5, r6, sl, fp, sp, lr}^
  90:	654b6874 	strbvs	r6, [fp, #-2164]	; 0xfffff78c
  94:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  98:	61726700 	cmnvs	r2, r0, lsl #14
  9c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  a0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  a4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  a8:	616d6d6f 	cmnvs	sp, pc, ror #26
  ac:	6b00646e 	blvs	1926c <startup-0x1ffe6d94>
  b0:	41627965 	cmnmi	r2, r5, ror #18
  b4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
  b8:	00657461 	rsbeq	r7, r5, r1, ror #8
  bc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  c0:	61726400 	cmnvs	r2, r0, lsl #8
  c4:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
  c8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  cc:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  d0:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
  d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  d8:	6b696d5f 	blvs	1a5b65c <startup-0x1e5a49a4>
  dc:	74006f72 	strvc	r6, [r0], #-3954	; 0xfffff08e
  e0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
  e4:	61640074 	smcvs	16388	; 0x4004
  e8:	685f6174 	ldmdavs	pc, {r2, r4, r5, r6, r8, sp, lr}^	; <UNPREDICTABLE>
  ec:	65646c6f 	strbvs	r6, [r4, #-3183]!	; 0xfffff391
  f0:	4f500072 	svcmi	0x00500072
  f4:	00544e49 	subseq	r4, r4, r9, asr #28
  f8:	46776f72 	uhsub16mi	r6, r7, r2
  fc:	526d6f72 	rsbpl	r6, sp, #456	; 0x1c8
 100:	73696765 	cmnvc	r9, #26476544	; 0x1940000
 104:	00726574 	rsbseq	r6, r2, r4, ror r5
 108:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 10c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 110:	61686320 	cmnvs	r8, r0, lsr #6
 114:	6f700072 	svcvs	0x00700072
 118:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 11c:	5f6c6c61 	svcpl	0x006c6c61
 120:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff8c <ball+0xdffff4fc>
 124:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 128:	61726700 	cmnvs	r2, r0, lsl #14
 12c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 130:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 134:	67006574 	smlsdxvs	r0, r4, r5, r6
 138:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 13c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 140:	5f746961 	svcpl	0x00746961
 144:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 148:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 14c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 150:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 154:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffff8c <ball+0xdffff4fc>
 158:	0072656c 	rsbseq	r6, r2, ip, ror #10
 15c:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 160:	61566e72 	cmpvs	r6, r2, ror lr
 164:	0065756c 	rsbeq	r7, r5, ip, ror #10
 168:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
 16c:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 170:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 174:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 178:	5f6c7274 	svcpl	0x006c7274
 17c:	5f746962 	svcpl	0x00746962
 180:	61656c63 	cmnvs	r5, r3, ror #24
 184:	61700072 	cmnvs	r0, r2, ror r0
 188:	6d006567 	cfstr32vs	mvfx6, [r0, #-412]	; 0xfffffe64
 18c:	006e6961 	rsbeq	r6, lr, r1, ror #18
 190:	70617267 	rsbvc	r7, r1, r7, ror #4
 194:	5f636968 	svcpl	0x00636968
 198:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 19c:	61645f65 	cmnvs	r4, r5, ror #30
 1a0:	6b006174 	blvs	18778 <startup-0x1ffe7888>
 1a4:	47627965 	strbmi	r7, [r2, -r5, ror #18]!
 1a8:	6f437465 	svcvs	0x00437465
 1ac:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
 1b0:	385f746e 	ldmdacc	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 1b4:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 1b8:	6e007877 	mcrvs	8, 0, r7, cr0, cr7, {3}
 1bc:	00797765 	rsbseq	r7, r9, r5, ror #14
 1c0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1c4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 1c8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 1cc:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 1d0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1d4:	61007972 	tstvs	r0, r2, ror r9
 1d8:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 1dc:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
 1e0:	5f74696e 	svcpl	0x0074696e
 1e4:	00707061 	rsbseq	r7, r0, r1, rrx
 1e8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1ec:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 1f0:	0079657a 	rsbseq	r6, r9, sl, ror r5
 1f4:	616c6564 	cmnvs	ip, r4, ror #10
 1f8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 1fc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 200:	20554e47 	subscs	r4, r5, r7, asr #28
 204:	20393943 	eorscs	r3, r9, r3, asr #18
 208:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 20c:	30322031 	eorscc	r2, r2, r1, lsr r0
 210:	30313931 	eorscc	r3, r1, r1, lsr r9
 214:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 218:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 21c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 220:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 224:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 228:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 22c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 230:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 234:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 238:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 23c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 240:	205d3939 	subscs	r3, sp, r9, lsr r9
 244:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 248:	20626d75 	rsbcs	r6, r2, r5, ror sp
 24c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 250:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 254:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 258:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 25c:	616d2d20 	cmnvs	sp, r0, lsr #26
 260:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 264:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 268:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 26c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 270:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 274:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 278:	00393963 	eorseq	r3, r9, r3, ror #18
 27c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 280:	00707574 	rsbseq	r7, r0, r4, ror r5
 284:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 288:	61726400 	cmnvs	r2, r0, lsl #8
 28c:	616d0077 	smcvs	53255	; 0xd007
 290:	6b006b73 	blvs	1b064 <startup-0x1ffe4f9c>
 294:	00627965 	rsbeq	r7, r2, r5, ror #18
 298:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 29c:	72670065 	rsbvc	r0, r7, #101	; 0x65
 2a0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2a4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2a8:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2b0 <startup-0x1ffffd50>
 2ac:	00617461 	rsbeq	r7, r1, r1, ror #8
 2b0:	5f746573 	svcpl	0x00746573
 2b4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2b8:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 2bc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2c0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 2c4:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 2c8:	43006465 	movwmi	r6, #1125	; 0x465
 2cc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2d0:	2f737265 	svccs	0x00737265
 2d4:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
 2d8:	6f442f6e 	svcvs	0x00442f6e
 2dc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 2e0:	2f73746e 	svccs	0x0073746e
 2e4:	50746947 	rsbspl	r6, r4, r7, asr #18
 2e8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 2ec:	2f737463 	svccs	0x00737463
 2f0:	6f686353 	svcvs	0x00686353
 2f4:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 2f8:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 2fc:	442f7374 	strtmi	r7, [pc], #-884	; 304 <startup-0x1ffffcfc>
 300:	31305441 	teqcc	r0, r1, asr #8
 304:	6c6f2f37 	stclvs	15, cr2, [pc], #-220	; 230 <startup-0x1ffffdd0>
 308:	635f666f 	cmpvs	pc, #116391936	; 0x6f00000
 30c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 310:	432f746e 			; <UNDEFINED> instruction: 0x432f746e
 314:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 318:	2f657469 	svccs	0x00657469
 31c:	6b726f77 	blvs	1c9c100 <startup-0x1e363f00>
 320:	63617073 	cmnvs	r1, #115	; 0x73
 324:	6f6c4f65 	svcvs	0x006c4f65
 328:	61622f66 	cmnvs	r2, r6, ror #30
 32c:	69576c6c 	ldmdbvs	r7, {r2, r3, r5, r6, sl, fp, sp, lr}^
 330:	654b6874 	strbvs	r6, [fp, #-2164]	; 0xfffff78c
 334:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 338:	6c61622f 	sfmvs	f6, 2, [r1], #-188	; 0xffffff44
 33c:	7469776c 	strbtvc	r7, [r9], #-1900	; 0xfffff894
 340:	79656b68 	stmdbvc	r5!, {r3, r5, r6, r8, r9, fp, sp, lr}^
 344:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 348:	6e690063 	cdpvs	0, 6, cr0, cr9, cr3, {3}
 34c:	00786564 	rsbseq	r6, r8, r4, ror #10
 350:	61656c63 	cmnvs	r5, r3, ror #24
 354:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 358:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 35c:	61726700 	cmnvs	r2, r0, lsl #14
 360:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 364:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 368:	696c6174 	stmdbvs	ip!, {r2, r4, r5, r6, r8, sp, lr}^
 36c:	6400657a 	strvs	r6, [r0], #-1402	; 0xfffffa86
 370:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 374:	3030355f 	eorscc	r3, r0, pc, asr r5
 378:	7400736e 	strvc	r7, [r0], #-878	; 0xfffffc92
 37c:	006a624f 	rsbeq	r6, sl, pc, asr #4
 380:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 384:	61726700 	cmnvs	r2, r0, lsl #14
 388:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 38c:	6165725f 	cmnvs	r5, pc, asr r2
 390:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 394:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 398:	0073746e 	rsbseq	r7, r3, lr, ror #8
 39c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 3a0:	6a626f5f 	bvs	189c124 <startup-0x1e763edc>
 3a4:	00746365 	rsbseq	r6, r4, r5, ror #6
 3a8:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3ac:	73007864 	movwvc	r7, #2148	; 0x864
 3b0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3b4:	4f500079 	svcmi	0x00500079
 3b8:	43454a42 	movtmi	r4, #23106	; 0x5a42
 3bc:	72670054 	rsbvc	r0, r7, #84	; 0x54
 3c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3c4:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 3c8:	5f726165 	svcpl	0x00726165
 3cc:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 3d0:	Address 0x000003d0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000048 	andeq	r0, r0, r8, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000058 	andcs	r0, r0, r8, asr r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	2000006a 	andcs	r0, r0, sl, rrx
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000096 	mulcs	r0, r6, r0
  84:	00000030 	andeq	r0, r0, r0, lsr r0
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000046 	andeq	r0, r0, r6, asr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000010c 	andcs	r0, r0, ip, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000148 	andcs	r0, r0, r8, asr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001a2 	andcs	r0, r0, r2, lsr #3
 104:	00000076 	andeq	r0, r0, r6, ror r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000218 	andcs	r0, r0, r8, lsl r2
 124:	00000090 	muleq	r0, r0, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002a8 	andcs	r0, r0, r8, lsr #5
 144:	00000080 	andeq	r0, r0, r0, lsl #1
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000328 	andcs	r0, r0, r8, lsr #6
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000368 	andcs	r0, r0, r8, ror #6
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003ae 	andcs	r0, r0, lr, lsr #7
 1a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003d8 	ldrdcs	r0, [r0], -r8
 1c4:	00000056 	andeq	r0, r0, r6, asr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	2000042e 	andcs	r0, r0, lr, lsr #8
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000496 	mulcs	r0, r6, r4
 200:	000001ca 	andeq	r0, r0, sl, asr #3
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	280e4101 	stmdacs	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000660 	andcs	r0, r0, r0, ror #12
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000680 	andcs	r0, r0, r0, lsl #13
 244:	00000066 	andeq	r0, r0, r6, rrx
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006e6 	andcs	r0, r0, r6, ror #13
 264:	00000066 	andeq	r0, r0, r6, rrx
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	2000074c 	andcs	r0, r0, ip, asr #14
 284:	000000c4 	andeq	r0, r0, r4, asr #1
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	20000810 	andcs	r0, r0, r0, lsl r8
 2a4:	00000064 	andeq	r0, r0, r4, rrx
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2b4:	00000007 	andeq	r0, r0, r7
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	20000874 	andcs	r0, r0, r4, ror r8
 2c4:	00000054 	andeq	r0, r0, r4, asr r0
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	200008c8 	andcs	r0, r0, r8, asr #17
 2e4:	00000084 	andeq	r0, r0, r4, lsl #1
 2e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2f0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	2000094c 	andcs	r0, r0, ip, asr #18
 304:	00000080 	andeq	r0, r0, r0, lsl #1
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0000070d 	andeq	r0, r0, sp, lsl #14
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000000 	andeq	r0, r0, r0
 31c:	200009cc 	andcs	r0, r0, ip, asr #19
 320:	0000008c 	andeq	r0, r0, ip, lsl #1
 324:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 328:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 32c:	180e4101 	stmdane	lr, {r0, r8, lr}
 330:	00070d41 	andeq	r0, r7, r1, asr #26
