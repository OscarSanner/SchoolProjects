
./Debug/ballWithKeypad.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 } OBJECT, *POBJECT;

  // --------------------------- STARTUP --------------------------------
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ) {
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fce0 	bl	200009c8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b16      	ldr	r3, [pc, #88]	; (20000070 <init_app+0x60>)
20000016:	4a17      	ldr	r2, [pc, #92]	; (20000074 <init_app+0x64>)
20000018:	601a      	str	r2, [r3, #0]
	* GPIO_D_MODER &= 0x0000FFFF;				// Nollställer de 2 höga bytesen i MODER-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
2000001a:	4b17      	ldr	r3, [pc, #92]	; (20000078 <init_app+0x68>)
2000001c:	681a      	ldr	r2, [r3, #0]
2000001e:	4b16      	ldr	r3, [pc, #88]	; (20000078 <init_app+0x68>)
20000020:	0412      	lsls	r2, r2, #16
20000022:	0c12      	lsrs	r2, r2, #16
20000024:	601a      	str	r2, [r3, #0]
	* GPIO_D_MODER |= 0x55000000;					// 0101 0101 den högsta byten vilket gör porten till en utport och 0000 0000 den näst högsta porten vilket gör den till en inport. Har samtidigt kvar eventuella bitar på de låga bytesen.
20000026:	4b14      	ldr	r3, [pc, #80]	; (20000078 <init_app+0x68>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b13      	ldr	r3, [pc, #76]	; (20000078 <init_app+0x68>)
2000002c:	21aa      	movs	r1, #170	; 0xaa
2000002e:	05c9      	lsls	r1, r1, #23
20000030:	430a      	orrs	r2, r1
20000032:	601a      	str	r2, [r3, #0]
	
	* GPIO_D_OTYPER &= 0x00FF;						// Nollställer den höga byten i OTYPER-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
20000034:	4b11      	ldr	r3, [pc, #68]	; (2000007c <init_app+0x6c>)
20000036:	881b      	ldrh	r3, [r3, #0]
20000038:	b29b      	uxth	r3, r3
2000003a:	4a10      	ldr	r2, [pc, #64]	; (2000007c <init_app+0x6c>)
2000003c:	21ff      	movs	r1, #255	; 0xff
2000003e:	400b      	ands	r3, r1
20000040:	b29b      	uxth	r3, r3
20000042:	8013      	strh	r3, [r2, #0]
	* GPIO_D_OTYPER |= 0x0000;							// 0000 0000 på den  höga byten i registrert vilket sätter dessa portpinnar till PUSH-PULL. Har samtidigt kvar eventuella bitar på de låga bytesen.		(onödig kanske?)
20000044:	4a0d      	ldr	r2, [pc, #52]	; (2000007c <init_app+0x6c>)
20000046:	4b0d      	ldr	r3, [pc, #52]	; (2000007c <init_app+0x6c>)
20000048:	8812      	ldrh	r2, [r2, #0]
2000004a:	b292      	uxth	r2, r2
2000004c:	801a      	strh	r2, [r3, #0]
	
	* GPIO_D_PUPDR &= 0x0000FFFF;					// Nollställer de 2 höga bytesen i PUPDR-registret och har samtidigt kvar eventuella tidigare inskrivningar i de låga.
2000004e:	4b0c      	ldr	r3, [pc, #48]	; (20000080 <init_app+0x70>)
20000050:	681a      	ldr	r2, [r3, #0]
20000052:	4b0b      	ldr	r3, [pc, #44]	; (20000080 <init_app+0x70>)
20000054:	0412      	lsls	r2, r2, #16
20000056:	0c12      	lsrs	r2, r2, #16
20000058:	601a      	str	r2, [r3, #0]
	* GPIO_D_PUPDR |= 0x00AA0000;					// 0000 0000 den högsta byten vilket konfigurerar motsvarande 4 port-pinnar till FLOATING och 0101 0101 den näst högsta porten konfigurerar motsvarande 4 port-pinnar till PULL-DOWN. Har samtidigt kvar eventuella bitar på de låga bytesen.
2000005a:	4b09      	ldr	r3, [pc, #36]	; (20000080 <init_app+0x70>)
2000005c:	681a      	ldr	r2, [r3, #0]
2000005e:	4b08      	ldr	r3, [pc, #32]	; (20000080 <init_app+0x70>)
20000060:	21aa      	movs	r1, #170	; 0xaa
20000062:	0409      	lsls	r1, r1, #16
20000064:	430a      	orrs	r2, r1
20000066:	601a      	str	r2, [r3, #0]
	#ifdef USBDM
		* ((unsigned long *) 0x40023830) = 0x18;
		__asm__ volatile(" LDR R0, =0x08000209\n");
		__asm__ volatile(" BLX R0 \n");
	#endif
}
20000068:	46c0      	nop			; (mov r8, r8)
2000006a:	46bd      	mov	sp, r7
2000006c:	bd80      	pop	{r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	40021000 	andmi	r1, r2, r0
20000074:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000078:	40020c00 	andmi	r0, r2, r0, lsl #24
2000007c:	40020c04 	andmi	r0, r2, r4, lsl #24
20000080:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000084 <delay_250ns>:

 // --------------------------- DELAY --------------------------------

void delay_250ns(void){
20000084:	b580      	push	{r7, lr}
20000086:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000088:	4b0c      	ldr	r3, [pc, #48]	; (200000bc <delay_250ns+0x38>)
2000008a:	2200      	movs	r2, #0
2000008c:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000008e:	4b0c      	ldr	r3, [pc, #48]	; (200000c0 <delay_250ns+0x3c>)
20000090:	2229      	movs	r2, #41	; 0x29
20000092:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000094:	4b0b      	ldr	r3, [pc, #44]	; (200000c4 <delay_250ns+0x40>)
20000096:	2200      	movs	r2, #0
20000098:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000009a:	4b08      	ldr	r3, [pc, #32]	; (200000bc <delay_250ns+0x38>)
2000009c:	2205      	movs	r2, #5
2000009e:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x1) != 0){
200000a0:	46c0      	nop			; (mov r8, r8)
200000a2:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <delay_250ns+0x44>)
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	b2db      	uxtb	r3, r3
200000a8:	001a      	movs	r2, r3
200000aa:	2301      	movs	r3, #1
200000ac:	4013      	ands	r3, r2
200000ae:	d1f8      	bne.n	200000a2 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
200000b0:	4b02      	ldr	r3, [pc, #8]	; (200000bc <delay_250ns+0x38>)
200000b2:	2200      	movs	r2, #0
200000b4:	701a      	strb	r2, [r3, #0]
}
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	46bd      	mov	sp, r7
200000ba:	bd80      	pop	{r7, pc}
200000bc:	e000e010 	and	lr, r0, r0, lsl r0
200000c0:	e000e014 	and	lr, r0, r4, lsl r0
200000c4:	e000e018 	and	lr, r0, r8, lsl r0
200000c8:	e000e012 	and	lr, r0, r2, lsl r0

200000cc <delay_500ns>:

void delay_500ns(void){
200000cc:	b580      	push	{r7, lr}
200000ce:	af00      	add	r7, sp, #0
	delay_250ns();
200000d0:	f7ff ffd8 	bl	20000084 <delay_250ns>
	delay_250ns();
200000d4:	f7ff ffd6 	bl	20000084 <delay_250ns>
	}
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	bd80      	pop	{r7, pc}

200000de <delay_mikro>:

void delay_mikro(unsigned int us){	
200000de:	b580      	push	{r7, lr}
200000e0:	b084      	sub	sp, #16
200000e2:	af00      	add	r7, sp, #0
200000e4:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	22fa      	movs	r2, #250	; 0xfa
200000ea:	0091      	lsls	r1, r2, #2
200000ec:	0018      	movs	r0, r3
200000ee:	f000 fcaf 	bl	20000a50 <__udivsi3>
200000f2:	0003      	movs	r3, r0
200000f4:	607b      	str	r3, [r7, #4]
		us ++;
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	3301      	adds	r3, #1
200000fa:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
200000fc:	2300      	movs	r3, #0
200000fe:	60fb      	str	r3, [r7, #12]
20000100:	e004      	b.n	2000010c <delay_mikro+0x2e>
		delay_250ns();
20000102:	f7ff ffbf 	bl	20000084 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000106:	68fb      	ldr	r3, [r7, #12]
20000108:	3301      	adds	r3, #1
2000010a:	60fb      	str	r3, [r7, #12]
2000010c:	687b      	ldr	r3, [r7, #4]
2000010e:	009a      	lsls	r2, r3, #2
20000110:	68fb      	ldr	r3, [r7, #12]
20000112:	429a      	cmp	r2, r3
20000114:	d8f5      	bhi.n	20000102 <delay_mikro+0x24>
	}
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	b004      	add	sp, #16
2000011e:	bd80      	pop	{r7, pc}

20000120 <delay_milli>:

void delay_milli(unsigned int ms){
20000120:	b580      	push	{r7, lr}
20000122:	b084      	sub	sp, #16
20000124:	af00      	add	r7, sp, #0
20000126:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
20000128:	687b      	ldr	r3, [r7, #4]
2000012a:	22fa      	movs	r2, #250	; 0xfa
2000012c:	0091      	lsls	r1, r2, #2
2000012e:	0018      	movs	r0, r3
20000130:	f000 fc8e 	bl	20000a50 <__udivsi3>
20000134:	0003      	movs	r3, r0
20000136:	607b      	str	r3, [r7, #4]
		ms ++;
20000138:	687b      	ldr	r3, [r7, #4]
2000013a:	3301      	adds	r3, #1
2000013c:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
2000013e:	2300      	movs	r3, #0
20000140:	60fb      	str	r3, [r7, #12]
20000142:	e007      	b.n	20000154 <delay_milli+0x34>
		delay_mikro(1000);
20000144:	23fa      	movs	r3, #250	; 0xfa
20000146:	009b      	lsls	r3, r3, #2
20000148:	0018      	movs	r0, r3
2000014a:	f7ff ffc8 	bl	200000de <delay_mikro>
	for(int i = 0; i < ms; i++){
2000014e:	68fb      	ldr	r3, [r7, #12]
20000150:	3301      	adds	r3, #1
20000152:	60fb      	str	r3, [r7, #12]
20000154:	68fb      	ldr	r3, [r7, #12]
20000156:	687a      	ldr	r2, [r7, #4]
20000158:	429a      	cmp	r2, r3
2000015a:	d8f3      	bhi.n	20000144 <delay_milli+0x24>
	}
}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	46bd      	mov	sp, r7
20000162:	b004      	add	sp, #16
20000164:	bd80      	pop	{r7, pc}

20000166 <graphic_ctrl_bit_set>:

// ------------------------------ DISPLAY ----------------------------

void graphic_ctrl_bit_set (uint_8t x) {
20000166:	b580      	push	{r7, lr}
20000168:	b082      	sub	sp, #8
2000016a:	af00      	add	r7, sp, #0
2000016c:	0002      	movs	r2, r0
2000016e:	1dfb      	adds	r3, r7, #7
20000170:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= ( x & ~B_SELECT );
20000172:	4b0d      	ldr	r3, [pc, #52]	; (200001a8 <graphic_ctrl_bit_set+0x42>)
20000174:	781b      	ldrb	r3, [r3, #0]
20000176:	b2db      	uxtb	r3, r3
20000178:	b25a      	sxtb	r2, r3
2000017a:	1dfb      	adds	r3, r7, #7
2000017c:	781b      	ldrb	r3, [r3, #0]
2000017e:	b25b      	sxtb	r3, r3
20000180:	2104      	movs	r1, #4
20000182:	438b      	bics	r3, r1
20000184:	b25b      	sxtb	r3, r3
20000186:	4313      	orrs	r3, r2
20000188:	b25a      	sxtb	r2, r3
2000018a:	4b07      	ldr	r3, [pc, #28]	; (200001a8 <graphic_ctrl_bit_set+0x42>)
2000018c:	b2d2      	uxtb	r2, r2
2000018e:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000190:	4b05      	ldr	r3, [pc, #20]	; (200001a8 <graphic_ctrl_bit_set+0x42>)
20000192:	781b      	ldrb	r3, [r3, #0]
20000194:	b2db      	uxtb	r3, r3
20000196:	4a04      	ldr	r2, [pc, #16]	; (200001a8 <graphic_ctrl_bit_set+0x42>)
20000198:	2104      	movs	r1, #4
2000019a:	438b      	bics	r3, r1
2000019c:	b2db      	uxtb	r3, r3
2000019e:	7013      	strb	r3, [r2, #0]
	}
200001a0:	46c0      	nop			; (mov r8, r8)
200001a2:	46bd      	mov	sp, r7
200001a4:	b002      	add	sp, #8
200001a6:	bd80      	pop	{r7, pc}
200001a8:	40021014 	andmi	r1, r2, r4, lsl r0

200001ac <graphic_ctrl_bit_clear>:
	
void graphic_ctrl_bit_clear (uint_8t x) {
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~( x | B_SELECT );
200001b8:	4b0a      	ldr	r3, [pc, #40]	; (200001e4 <graphic_ctrl_bit_clear+0x38>)
200001ba:	781b      	ldrb	r3, [r3, #0]
200001bc:	b2db      	uxtb	r3, r3
200001be:	b25b      	sxtb	r3, r3
200001c0:	1dfa      	adds	r2, r7, #7
200001c2:	7812      	ldrb	r2, [r2, #0]
200001c4:	2104      	movs	r1, #4
200001c6:	430a      	orrs	r2, r1
200001c8:	b2d2      	uxtb	r2, r2
200001ca:	b252      	sxtb	r2, r2
200001cc:	43d2      	mvns	r2, r2
200001ce:	b252      	sxtb	r2, r2
200001d0:	4013      	ands	r3, r2
200001d2:	b25a      	sxtb	r2, r3
200001d4:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <graphic_ctrl_bit_clear+0x38>)
200001d6:	b2d2      	uxtb	r2, r2
200001d8:	701a      	strb	r2, [r3, #0]
			//	* portOdrLow &= ~x;
			//	* portOdrLow &= ~B_SELECT;
	}
200001da:	46c0      	nop			; (mov r8, r8)
200001dc:	46bd      	mov	sp, r7
200001de:	b002      	add	sp, #8
200001e0:	bd80      	pop	{r7, pc}
200001e2:	46c0      	nop			; (mov r8, r8)
200001e4:	40021014 	andmi	r1, r2, r4, lsl r0

200001e8 <select_controller>:

void select_controller (uint_8t controller ) {
200001e8:	b580      	push	{r7, lr}
200001ea:	b082      	sub	sp, #8
200001ec:	af00      	add	r7, sp, #0
200001ee:	0002      	movs	r2, r0
200001f0:	1dfb      	adds	r3, r7, #7
200001f2:	701a      	strb	r2, [r3, #0]
	switch (controller) {
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	781b      	ldrb	r3, [r3, #0]
200001f8:	2b18      	cmp	r3, #24
200001fa:	d01a      	beq.n	20000232 <select_controller+0x4a>
200001fc:	dc1d      	bgt.n	2000023a <select_controller+0x52>
200001fe:	2b10      	cmp	r3, #16
20000200:	d010      	beq.n	20000224 <select_controller+0x3c>
20000202:	dc1a      	bgt.n	2000023a <select_controller+0x52>
20000204:	2b00      	cmp	r3, #0
20000206:	d002      	beq.n	2000020e <select_controller+0x26>
20000208:	2b08      	cmp	r3, #8
2000020a:	d004      	beq.n	20000216 <select_controller+0x2e>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
								graphic_ctrl_bit_set( B_CS1 ); break;
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
								graphic_ctrl_bit_set( B_CS2 ); break;
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
		default: return 0;
2000020c:	e015      	b.n	2000023a <select_controller+0x52>
		case 0:  graphic_ctrl_bit_clear( B_CS1 | B_CS2 ); break;
2000020e:	2018      	movs	r0, #24
20000210:	f7ff ffcc 	bl	200001ac <graphic_ctrl_bit_clear>
20000214:	e012      	b.n	2000023c <select_controller+0x54>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
20000216:	2010      	movs	r0, #16
20000218:	f7ff ffc8 	bl	200001ac <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS1 ); break;
2000021c:	2008      	movs	r0, #8
2000021e:	f7ff ffa2 	bl	20000166 <graphic_ctrl_bit_set>
20000222:	e00b      	b.n	2000023c <select_controller+0x54>
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
20000224:	2008      	movs	r0, #8
20000226:	f7ff ffc1 	bl	200001ac <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS2 ); break;
2000022a:	2010      	movs	r0, #16
2000022c:	f7ff ff9b 	bl	20000166 <graphic_ctrl_bit_set>
20000230:	e004      	b.n	2000023c <select_controller+0x54>
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
20000232:	2018      	movs	r0, #24
20000234:	f7ff ff97 	bl	20000166 <graphic_ctrl_bit_set>
20000238:	e000      	b.n	2000023c <select_controller+0x54>
		default: return 0;
2000023a:	46c0      	nop			; (mov r8, r8)
	}
}
2000023c:	46bd      	mov	sp, r7
2000023e:	b002      	add	sp, #8
20000240:	bd80      	pop	{r7, pc}

20000242 <graphic_wait_ready>:

void graphic_wait_ready (void) {
20000242:	b580      	push	{r7, lr}
20000244:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000246:	2040      	movs	r0, #64	; 0x40
20000248:	f7ff ffb0 	bl	200001ac <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
2000024c:	4b12      	ldr	r3, [pc, #72]	; (20000298 <graphic_wait_ready+0x56>)
2000024e:	4a13      	ldr	r2, [pc, #76]	; (2000029c <graphic_wait_ready+0x5a>)
20000250:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
20000252:	2002      	movs	r0, #2
20000254:	f7ff ff87 	bl	20000166 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
20000258:	2001      	movs	r0, #1
2000025a:	f7ff ffa7 	bl	200001ac <graphic_ctrl_bit_clear>
	delay_500ns();
2000025e:	f7ff ff35 	bl	200000cc <delay_500ns>
	while (1) {
		graphic_ctrl_bit_set(B_E);
20000262:	2040      	movs	r0, #64	; 0x40
20000264:	f7ff ff7f 	bl	20000166 <graphic_ctrl_bit_set>
		delay_500ns();
20000268:	f7ff ff30 	bl	200000cc <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
2000026c:	2040      	movs	r0, #64	; 0x40
2000026e:	f7ff ff9d 	bl	200001ac <graphic_ctrl_bit_clear>
		delay_500ns();
20000272:	f7ff ff2b 	bl	200000cc <delay_500ns>
		if ( (* portIdrHigh & LCD_BUSY) == 0 ) {
20000276:	4b0a      	ldr	r3, [pc, #40]	; (200002a0 <graphic_wait_ready+0x5e>)
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	b2db      	uxtb	r3, r3
2000027c:	b25b      	sxtb	r3, r3
2000027e:	2b00      	cmp	r3, #0
20000280:	da00      	bge.n	20000284 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
20000282:	e7ee      	b.n	20000262 <graphic_wait_ready+0x20>
			break;
20000284:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000286:	2040      	movs	r0, #64	; 0x40
20000288:	f7ff ff6d 	bl	20000166 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000028c:	4b02      	ldr	r3, [pc, #8]	; (20000298 <graphic_wait_ready+0x56>)
2000028e:	4a05      	ldr	r2, [pc, #20]	; (200002a4 <graphic_wait_ready+0x62>)
20000290:	601a      	str	r2, [r3, #0]
}
20000292:	46c0      	nop			; (mov r8, r8)
20000294:	46bd      	mov	sp, r7
20000296:	bd80      	pop	{r7, pc}
20000298:	40021000 	andmi	r1, r2, r0
2000029c:	00005555 	andeq	r5, r0, r5, asr r5
200002a0:	40021011 	andmi	r1, r2, r1, lsl r0
200002a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a8 <graphic_read>:

uint_8t graphic_read (uint_8t controller) {
200002a8:	b580      	push	{r7, lr}
200002aa:	b084      	sub	sp, #16
200002ac:	af00      	add	r7, sp, #0
200002ae:	0002      	movs	r2, r0
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear (B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff79 	bl	200001ac <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
200002ba:	4b1b      	ldr	r3, [pc, #108]	; (20000328 <graphic_read+0x80>)
200002bc:	4a1b      	ldr	r2, [pc, #108]	; (2000032c <graphic_read+0x84>)
200002be:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set (B_RS | B_RW);
200002c0:	2003      	movs	r0, #3
200002c2:	f7ff ff50 	bl	20000166 <graphic_ctrl_bit_set>
	select_controller (controller);
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	781b      	ldrb	r3, [r3, #0]
200002ca:	0018      	movs	r0, r3
200002cc:	f7ff ff8c 	bl	200001e8 <select_controller>
	delay_500ns();
200002d0:	f7ff fefc 	bl	200000cc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d4:	2040      	movs	r0, #64	; 0x40
200002d6:	f7ff ff46 	bl	20000166 <graphic_ctrl_bit_set>
	delay_500ns();
200002da:	f7ff fef7 	bl	200000cc <delay_500ns>
	uint_8t returnValue = * portIdrHigh;
200002de:	4a14      	ldr	r2, [pc, #80]	; (20000330 <graphic_read+0x88>)
200002e0:	230f      	movs	r3, #15
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	7812      	ldrb	r2, [r2, #0]
200002e6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002e8:	2040      	movs	r0, #64	; 0x40
200002ea:	f7ff ff5f 	bl	200001ac <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;
200002ee:	4b0e      	ldr	r3, [pc, #56]	; (20000328 <graphic_read+0x80>)
200002f0:	4a10      	ldr	r2, [pc, #64]	; (20000334 <graphic_read+0x8c>)
200002f2:	601a      	str	r2, [r3, #0]
	if (controller == B_CS1) {
200002f4:	1dfb      	adds	r3, r7, #7
200002f6:	781b      	ldrb	r3, [r3, #0]
200002f8:	2b08      	cmp	r3, #8
200002fa:	d104      	bne.n	20000306 <graphic_read+0x5e>
		select_controller(B_CS1);
200002fc:	2008      	movs	r0, #8
200002fe:	f7ff ff73 	bl	200001e8 <select_controller>
		graphic_wait_ready();
20000302:	f7ff ff9e 	bl	20000242 <graphic_wait_ready>
	}
	if (controller == B_CS2) {
20000306:	1dfb      	adds	r3, r7, #7
20000308:	781b      	ldrb	r3, [r3, #0]
2000030a:	2b10      	cmp	r3, #16
2000030c:	d104      	bne.n	20000318 <graphic_read+0x70>
		select_controller(B_CS2);
2000030e:	2010      	movs	r0, #16
20000310:	f7ff ff6a 	bl	200001e8 <select_controller>
		graphic_wait_ready();
20000314:	f7ff ff95 	bl	20000242 <graphic_wait_ready>
	}
	return returnValue;
20000318:	230f      	movs	r3, #15
2000031a:	18fb      	adds	r3, r7, r3
2000031c:	781b      	ldrb	r3, [r3, #0]
}
2000031e:	0018      	movs	r0, r3
20000320:	46bd      	mov	sp, r7
20000322:	b004      	add	sp, #16
20000324:	bd80      	pop	{r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	40021000 	andmi	r1, r2, r0
2000032c:	00005555 	andeq	r5, r0, r5, asr r5
20000330:	40021011 	andmi	r1, r2, r1, lsl r0
20000334:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000338 <graphic_write>:

void graphic_write (uint_8t value, uint_8t controller) {
20000338:	b580      	push	{r7, lr}
2000033a:	b082      	sub	sp, #8
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
20000344:	1dbb      	adds	r3, r7, #6
20000346:	1c0a      	adds	r2, r1, #0
20000348:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
2000034a:	4a1a      	ldr	r2, [pc, #104]	; (200003b4 <graphic_write+0x7c>)
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000352:	1dbb      	adds	r3, r7, #6
20000354:	781b      	ldrb	r3, [r3, #0]
20000356:	0018      	movs	r0, r3
20000358:	f7ff ff46 	bl	200001e8 <select_controller>
	delay_500ns();
2000035c:	f7ff feb6 	bl	200000cc <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000360:	2040      	movs	r0, #64	; 0x40
20000362:	f7ff ff00 	bl	20000166 <graphic_ctrl_bit_set>
	delay_500ns();
20000366:	f7ff feb1 	bl	200000cc <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000036a:	2040      	movs	r0, #64	; 0x40
2000036c:	f7ff ff1e 	bl	200001ac <graphic_ctrl_bit_clear>
	if (controller & B_CS1) {
20000370:	1dbb      	adds	r3, r7, #6
20000372:	781b      	ldrb	r3, [r3, #0]
20000374:	2208      	movs	r2, #8
20000376:	4013      	ands	r3, r2
20000378:	d004      	beq.n	20000384 <graphic_write+0x4c>
		select_controller(B_CS1);
2000037a:	2008      	movs	r0, #8
2000037c:	f7ff ff34 	bl	200001e8 <select_controller>
		graphic_wait_ready();
20000380:	f7ff ff5f 	bl	20000242 <graphic_wait_ready>
	}
	if (controller & B_CS2) {
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	2210      	movs	r2, #16
2000038a:	4013      	ands	r3, r2
2000038c:	d004      	beq.n	20000398 <graphic_write+0x60>
		select_controller(B_CS2);
2000038e:	2010      	movs	r0, #16
20000390:	f7ff ff2a 	bl	200001e8 <select_controller>
		graphic_wait_ready();
20000394:	f7ff ff55 	bl	20000242 <graphic_wait_ready>
	}
	* portOdrHigh = 0;
20000398:	4b06      	ldr	r3, [pc, #24]	; (200003b4 <graphic_write+0x7c>)
2000039a:	2200      	movs	r2, #0
2000039c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
2000039e:	2040      	movs	r0, #64	; 0x40
200003a0:	f7ff fee1 	bl	20000166 <graphic_ctrl_bit_set>
	select_controller(0);
200003a4:	2000      	movs	r0, #0
200003a6:	f7ff ff1f 	bl	200001e8 <select_controller>
}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	46bd      	mov	sp, r7
200003ae:	b002      	add	sp, #8
200003b0:	bd80      	pop	{r7, pc}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	40021015 	andmi	r1, r2, r5, lsl r0

200003b8 <graphic_write_command>:

void graphic_write_command (uint_8t command, uint_8t controller) {
200003b8:	b580      	push	{r7, lr}
200003ba:	b082      	sub	sp, #8
200003bc:	af00      	add	r7, sp, #0
200003be:	0002      	movs	r2, r0
200003c0:	1dfb      	adds	r3, r7, #7
200003c2:	701a      	strb	r2, [r3, #0]
200003c4:	1dbb      	adds	r3, r7, #6
200003c6:	1c0a      	adds	r2, r1, #0
200003c8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ca:	2040      	movs	r0, #64	; 0x40
200003cc:	f7ff feee 	bl	200001ac <graphic_ctrl_bit_clear>
	select_controller(controller);
200003d0:	1dbb      	adds	r3, r7, #6
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff07 	bl	200001e8 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200003da:	2003      	movs	r0, #3
200003dc:	f7ff fee6 	bl	200001ac <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200003e0:	1dbb      	adds	r3, r7, #6
200003e2:	781a      	ldrb	r2, [r3, #0]
200003e4:	1dfb      	adds	r3, r7, #7
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	0011      	movs	r1, r2
200003ea:	0018      	movs	r0, r3
200003ec:	f7ff ffa4 	bl	20000338 <graphic_write>
	}
200003f0:	46c0      	nop			; (mov r8, r8)
200003f2:	46bd      	mov	sp, r7
200003f4:	b002      	add	sp, #8
200003f6:	bd80      	pop	{r7, pc}

200003f8 <graphic_write_data>:
	
void graphic_write_data (uint_8t data, uint_8t controller) {
200003f8:	b580      	push	{r7, lr}
200003fa:	b082      	sub	sp, #8
200003fc:	af00      	add	r7, sp, #0
200003fe:	0002      	movs	r2, r0
20000400:	1dfb      	adds	r3, r7, #7
20000402:	701a      	strb	r2, [r3, #0]
20000404:	1dbb      	adds	r3, r7, #6
20000406:	1c0a      	adds	r2, r1, #0
20000408:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000040a:	2040      	movs	r0, #64	; 0x40
2000040c:	f7ff fece 	bl	200001ac <graphic_ctrl_bit_clear>
	select_controller(controller);
20000410:	1dbb      	adds	r3, r7, #6
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	0018      	movs	r0, r3
20000416:	f7ff fee7 	bl	200001e8 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000041a:	2001      	movs	r0, #1
2000041c:	f7ff fea3 	bl	20000166 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000420:	2002      	movs	r0, #2
20000422:	f7ff fec3 	bl	200001ac <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000426:	1dbb      	adds	r3, r7, #6
20000428:	781a      	ldrb	r2, [r3, #0]
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	781b      	ldrb	r3, [r3, #0]
2000042e:	0011      	movs	r1, r2
20000430:	0018      	movs	r0, r3
20000432:	f7ff ff81 	bl	20000338 <graphic_write>
	}
20000436:	46c0      	nop			; (mov r8, r8)
20000438:	46bd      	mov	sp, r7
2000043a:	b002      	add	sp, #8
2000043c:	bd80      	pop	{r7, pc}

2000043e <graphic_read_data>:
	
uint_8t graphic_read_data (uint_8t controller) {
2000043e:	b580      	push	{r7, lr}
20000440:	b082      	sub	sp, #8
20000442:	af00      	add	r7, sp, #0
20000444:	0002      	movs	r2, r0
20000446:	1dfb      	adds	r3, r7, #7
20000448:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000044a:	1dfb      	adds	r3, r7, #7
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	0018      	movs	r0, r3
20000450:	f7ff ff2a 	bl	200002a8 <graphic_read>
	return graphic_read(controller);
20000454:	1dfb      	adds	r3, r7, #7
20000456:	781b      	ldrb	r3, [r3, #0]
20000458:	0018      	movs	r0, r3
2000045a:	f7ff ff25 	bl	200002a8 <graphic_read>
2000045e:	0003      	movs	r3, r0
	}
20000460:	0018      	movs	r0, r3
20000462:	46bd      	mov	sp, r7
20000464:	b002      	add	sp, #8
20000466:	bd80      	pop	{r7, pc}

20000468 <graphic_initalize>:

void graphic_initalize (void) {
20000468:	b580      	push	{r7, lr}
2000046a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000046c:	2040      	movs	r0, #64	; 0x40
2000046e:	f7ff fe7a 	bl	20000166 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000472:	200a      	movs	r0, #10
20000474:	f7ff fe33 	bl	200000de <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000478:	2078      	movs	r0, #120	; 0x78
2000047a:	f7ff fe97 	bl	200001ac <graphic_ctrl_bit_clear>
	delay_milli(30);
2000047e:	201e      	movs	r0, #30
20000480:	f7ff fe4e 	bl	20000120 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000484:	2020      	movs	r0, #32
20000486:	f7ff fe6e 	bl	20000166 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000048a:	2118      	movs	r1, #24
2000048c:	203e      	movs	r0, #62	; 0x3e
2000048e:	f7ff ff93 	bl	200003b8 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000492:	2118      	movs	r1, #24
20000494:	203f      	movs	r0, #63	; 0x3f
20000496:	f7ff ff8f 	bl	200003b8 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000049a:	2118      	movs	r1, #24
2000049c:	20c0      	movs	r0, #192	; 0xc0
2000049e:	f7ff ff8b 	bl	200003b8 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200004a2:	2118      	movs	r1, #24
200004a4:	2040      	movs	r0, #64	; 0x40
200004a6:	f7ff ff87 	bl	200003b8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200004aa:	2118      	movs	r1, #24
200004ac:	20b8      	movs	r0, #184	; 0xb8
200004ae:	f7ff ff83 	bl	200003b8 <graphic_write_command>
	select_controller(0);
200004b2:	2000      	movs	r0, #0
200004b4:	f7ff fe98 	bl	200001e8 <select_controller>
}
200004b8:	46c0      	nop			; (mov r8, r8)
200004ba:	46bd      	mov	sp, r7
200004bc:	bd80      	pop	{r7, pc}

200004be <graphic_clear_screen>:

void graphic_clear_screen (void) {
200004be:	b580      	push	{r7, lr}
200004c0:	b082      	sub	sp, #8
200004c2:	af00      	add	r7, sp, #0
	for (uint_8t page = 0; page < 8; page++) {
200004c4:	1dfb      	adds	r3, r7, #7
200004c6:	2200      	movs	r2, #0
200004c8:	701a      	strb	r2, [r3, #0]
200004ca:	e023      	b.n	20000514 <graphic_clear_screen+0x56>
		graphic_write_command (LCD_SET_PAGE | page, B_CS1 | B_CS2);
200004cc:	1dfb      	adds	r3, r7, #7
200004ce:	781b      	ldrb	r3, [r3, #0]
200004d0:	2248      	movs	r2, #72	; 0x48
200004d2:	4252      	negs	r2, r2
200004d4:	4313      	orrs	r3, r2
200004d6:	b2db      	uxtb	r3, r3
200004d8:	2118      	movs	r1, #24
200004da:	0018      	movs	r0, r3
200004dc:	f7ff ff6c 	bl	200003b8 <graphic_write_command>
		graphic_write_command (LCD_SET_ADD | 0, B_CS1 | B_CS2);
200004e0:	2118      	movs	r1, #24
200004e2:	2040      	movs	r0, #64	; 0x40
200004e4:	f7ff ff68 	bl	200003b8 <graphic_write_command>
		for (uint_8t address = 0; address < 64; address++) {
200004e8:	1dbb      	adds	r3, r7, #6
200004ea:	2200      	movs	r2, #0
200004ec:	701a      	strb	r2, [r3, #0]
200004ee:	e008      	b.n	20000502 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
200004f0:	2118      	movs	r1, #24
200004f2:	2000      	movs	r0, #0
200004f4:	f7ff ff80 	bl	200003f8 <graphic_write_data>
		for (uint_8t address = 0; address < 64; address++) {
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	781a      	ldrb	r2, [r3, #0]
200004fc:	1dbb      	adds	r3, r7, #6
200004fe:	3201      	adds	r2, #1
20000500:	701a      	strb	r2, [r3, #0]
20000502:	1dbb      	adds	r3, r7, #6
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	2b3f      	cmp	r3, #63	; 0x3f
20000508:	d9f2      	bls.n	200004f0 <graphic_clear_screen+0x32>
	for (uint_8t page = 0; page < 8; page++) {
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	781a      	ldrb	r2, [r3, #0]
2000050e:	1dfb      	adds	r3, r7, #7
20000510:	3201      	adds	r2, #1
20000512:	701a      	strb	r2, [r3, #0]
20000514:	1dfb      	adds	r3, r7, #7
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	2b07      	cmp	r3, #7
2000051a:	d9d7      	bls.n	200004cc <graphic_clear_screen+0xe>
		}
	}
}
2000051c:	46c0      	nop			; (mov r8, r8)
2000051e:	46c0      	nop			; (mov r8, r8)
20000520:	46bd      	mov	sp, r7
20000522:	b002      	add	sp, #8
20000524:	bd80      	pop	{r7, pc}

20000526 <pixel>:

void pixel (uint_8t x, uint_8t y, uint_8t set) {
20000526:	b5f0      	push	{r4, r5, r6, r7, lr}
20000528:	b085      	sub	sp, #20
2000052a:	af00      	add	r7, sp, #0
2000052c:	0004      	movs	r4, r0
2000052e:	0008      	movs	r0, r1
20000530:	0011      	movs	r1, r2
20000532:	1dfb      	adds	r3, r7, #7
20000534:	1c22      	adds	r2, r4, #0
20000536:	701a      	strb	r2, [r3, #0]
20000538:	1dbb      	adds	r3, r7, #6
2000053a:	1c02      	adds	r2, r0, #0
2000053c:	701a      	strb	r2, [r3, #0]
2000053e:	1d7b      	adds	r3, r7, #5
20000540:	1c0a      	adds	r2, r1, #0
20000542:	701a      	strb	r2, [r3, #0]
	if ((x > 128) || (y > 64)) {return;}
20000544:	1dfb      	adds	r3, r7, #7
20000546:	781b      	ldrb	r3, [r3, #0]
20000548:	2b80      	cmp	r3, #128	; 0x80
2000054a:	d900      	bls.n	2000054e <pixel+0x28>
2000054c:	e0bd      	b.n	200006ca <pixel+0x1a4>
2000054e:	1dbb      	adds	r3, r7, #6
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	2b40      	cmp	r3, #64	; 0x40
20000554:	d900      	bls.n	20000558 <pixel+0x32>
20000556:	e0b8      	b.n	200006ca <pixel+0x1a4>
	uint_8t mask, controller, x_real, data_holder;
	uint_8t index = (y - 1) / 8;
20000558:	1dbb      	adds	r3, r7, #6
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	3b01      	subs	r3, #1
2000055e:	2b00      	cmp	r3, #0
20000560:	da00      	bge.n	20000564 <pixel+0x3e>
20000562:	3307      	adds	r3, #7
20000564:	10db      	asrs	r3, r3, #3
20000566:	001a      	movs	r2, r3
20000568:	230c      	movs	r3, #12
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	701a      	strb	r2, [r3, #0]

	switch ((y-1) % 8) {
2000056e:	1dbb      	adds	r3, r7, #6
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	3b01      	subs	r3, #1
20000574:	4a57      	ldr	r2, [pc, #348]	; (200006d4 <pixel+0x1ae>)
20000576:	4013      	ands	r3, r2
20000578:	d504      	bpl.n	20000584 <pixel+0x5e>
2000057a:	3b01      	subs	r3, #1
2000057c:	2208      	movs	r2, #8
2000057e:	4252      	negs	r2, r2
20000580:	4313      	orrs	r3, r2
20000582:	3301      	adds	r3, #1
20000584:	2b07      	cmp	r3, #7
20000586:	d82c      	bhi.n	200005e2 <pixel+0xbc>
20000588:	009a      	lsls	r2, r3, #2
2000058a:	4b53      	ldr	r3, [pc, #332]	; (200006d8 <pixel+0x1b2>)
2000058c:	18d3      	adds	r3, r2, r3
2000058e:	681b      	ldr	r3, [r3, #0]
20000590:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000592:	230f      	movs	r3, #15
20000594:	18fb      	adds	r3, r7, r3
20000596:	2201      	movs	r2, #1
20000598:	701a      	strb	r2, [r3, #0]
2000059a:	e023      	b.n	200005e4 <pixel+0xbe>
		case 1: mask = 2; break;
2000059c:	230f      	movs	r3, #15
2000059e:	18fb      	adds	r3, r7, r3
200005a0:	2202      	movs	r2, #2
200005a2:	701a      	strb	r2, [r3, #0]
200005a4:	e01e      	b.n	200005e4 <pixel+0xbe>
		case 2: mask = 4; break;
200005a6:	230f      	movs	r3, #15
200005a8:	18fb      	adds	r3, r7, r3
200005aa:	2204      	movs	r2, #4
200005ac:	701a      	strb	r2, [r3, #0]
200005ae:	e019      	b.n	200005e4 <pixel+0xbe>
		case 3: mask = 8; break;
200005b0:	230f      	movs	r3, #15
200005b2:	18fb      	adds	r3, r7, r3
200005b4:	2208      	movs	r2, #8
200005b6:	701a      	strb	r2, [r3, #0]
200005b8:	e014      	b.n	200005e4 <pixel+0xbe>
		case 4: mask = 0x10; break;
200005ba:	230f      	movs	r3, #15
200005bc:	18fb      	adds	r3, r7, r3
200005be:	2210      	movs	r2, #16
200005c0:	701a      	strb	r2, [r3, #0]
200005c2:	e00f      	b.n	200005e4 <pixel+0xbe>
		case 5: mask = 0x20; break;
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	2220      	movs	r2, #32
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e00a      	b.n	200005e4 <pixel+0xbe>
		case 6: mask = 0x40; break;
200005ce:	230f      	movs	r3, #15
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	2240      	movs	r2, #64	; 0x40
200005d4:	701a      	strb	r2, [r3, #0]
200005d6:	e005      	b.n	200005e4 <pixel+0xbe>
		case 7: mask = 0x80; break;
200005d8:	230f      	movs	r3, #15
200005da:	18fb      	adds	r3, r7, r3
200005dc:	2280      	movs	r2, #128	; 0x80
200005de:	701a      	strb	r2, [r3, #0]
200005e0:	e000      	b.n	200005e4 <pixel+0xbe>
		default: break;
200005e2:	46c0      	nop			; (mov r8, r8)
	}
	if (set == 0) {
200005e4:	1d7b      	adds	r3, r7, #5
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	2b00      	cmp	r3, #0
200005ea:	d105      	bne.n	200005f8 <pixel+0xd2>
		mask = ~mask;
200005ec:	220f      	movs	r2, #15
200005ee:	18bb      	adds	r3, r7, r2
200005f0:	18ba      	adds	r2, r7, r2
200005f2:	7812      	ldrb	r2, [r2, #0]
200005f4:	43d2      	mvns	r2, r2
200005f6:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
200005f8:	1dfb      	adds	r3, r7, #7
200005fa:	781b      	ldrb	r3, [r3, #0]
200005fc:	2b40      	cmp	r3, #64	; 0x40
200005fe:	d90a      	bls.n	20000616 <pixel+0xf0>
		controller = B_CS2;
20000600:	230e      	movs	r3, #14
20000602:	18fb      	adds	r3, r7, r3
20000604:	2210      	movs	r2, #16
20000606:	701a      	strb	r2, [r3, #0]
		x_real = x - 65;
20000608:	230d      	movs	r3, #13
2000060a:	18fb      	adds	r3, r7, r3
2000060c:	1dfa      	adds	r2, r7, #7
2000060e:	7812      	ldrb	r2, [r2, #0]
20000610:	3a41      	subs	r2, #65	; 0x41
20000612:	701a      	strb	r2, [r3, #0]
20000614:	e009      	b.n	2000062a <pixel+0x104>
	} else {
		controller = B_CS1;
20000616:	230e      	movs	r3, #14
20000618:	18fb      	adds	r3, r7, r3
2000061a:	2208      	movs	r2, #8
2000061c:	701a      	strb	r2, [r3, #0]
		x_real = x - 1;
2000061e:	230d      	movs	r3, #13
20000620:	18fb      	adds	r3, r7, r3
20000622:	1dfa      	adds	r2, r7, #7
20000624:	7812      	ldrb	r2, [r2, #0]
20000626:	3a01      	subs	r2, #1
20000628:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
2000062a:	260d      	movs	r6, #13
2000062c:	19bb      	adds	r3, r7, r6
2000062e:	781b      	ldrb	r3, [r3, #0]
20000630:	2240      	movs	r2, #64	; 0x40
20000632:	4313      	orrs	r3, r2
20000634:	b2da      	uxtb	r2, r3
20000636:	250e      	movs	r5, #14
20000638:	197b      	adds	r3, r7, r5
2000063a:	781b      	ldrb	r3, [r3, #0]
2000063c:	0019      	movs	r1, r3
2000063e:	0010      	movs	r0, r2
20000640:	f7ff feba 	bl	200003b8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000644:	230c      	movs	r3, #12
20000646:	18fb      	adds	r3, r7, r3
20000648:	781b      	ldrb	r3, [r3, #0]
2000064a:	2248      	movs	r2, #72	; 0x48
2000064c:	4252      	negs	r2, r2
2000064e:	4313      	orrs	r3, r2
20000650:	b2da      	uxtb	r2, r3
20000652:	197b      	adds	r3, r7, r5
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	0019      	movs	r1, r3
20000658:	0010      	movs	r0, r2
2000065a:	f7ff fead 	bl	200003b8 <graphic_write_command>
	data_holder = graphic_read_data(controller);
2000065e:	230b      	movs	r3, #11
20000660:	18fc      	adds	r4, r7, r3
20000662:	197b      	adds	r3, r7, r5
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	0018      	movs	r0, r3
20000668:	f7ff fee9 	bl	2000043e <graphic_read_data>
2000066c:	0003      	movs	r3, r0
2000066e:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000670:	19bb      	adds	r3, r7, r6
20000672:	781b      	ldrb	r3, [r3, #0]
20000674:	2240      	movs	r2, #64	; 0x40
20000676:	4313      	orrs	r3, r2
20000678:	b2da      	uxtb	r2, r3
2000067a:	197b      	adds	r3, r7, r5
2000067c:	781b      	ldrb	r3, [r3, #0]
2000067e:	0019      	movs	r1, r3
20000680:	0010      	movs	r0, r2
20000682:	f7ff fe99 	bl	200003b8 <graphic_write_command>
	if (set == 1) {
20000686:	1d7b      	adds	r3, r7, #5
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	2b01      	cmp	r3, #1
2000068c:	d109      	bne.n	200006a2 <pixel+0x17c>
		mask |= data_holder;
2000068e:	210f      	movs	r1, #15
20000690:	187b      	adds	r3, r7, r1
20000692:	1879      	adds	r1, r7, r1
20000694:	220b      	movs	r2, #11
20000696:	18ba      	adds	r2, r7, r2
20000698:	7809      	ldrb	r1, [r1, #0]
2000069a:	7812      	ldrb	r2, [r2, #0]
2000069c:	430a      	orrs	r2, r1
2000069e:	701a      	strb	r2, [r3, #0]
200006a0:	e008      	b.n	200006b4 <pixel+0x18e>
	} else {
		mask &= data_holder;
200006a2:	220f      	movs	r2, #15
200006a4:	18bb      	adds	r3, r7, r2
200006a6:	18ba      	adds	r2, r7, r2
200006a8:	210b      	movs	r1, #11
200006aa:	1879      	adds	r1, r7, r1
200006ac:	7812      	ldrb	r2, [r2, #0]
200006ae:	7809      	ldrb	r1, [r1, #0]
200006b0:	400a      	ands	r2, r1
200006b2:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
200006b4:	230e      	movs	r3, #14
200006b6:	18fb      	adds	r3, r7, r3
200006b8:	781a      	ldrb	r2, [r3, #0]
200006ba:	230f      	movs	r3, #15
200006bc:	18fb      	adds	r3, r7, r3
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	0011      	movs	r1, r2
200006c2:	0018      	movs	r0, r3
200006c4:	f7ff fe98 	bl	200003f8 <graphic_write_data>
200006c8:	e000      	b.n	200006cc <pixel+0x1a6>
	if ((x > 128) || (y > 64)) {return;}
200006ca:	46c0      	nop			; (mov r8, r8)
}
200006cc:	46bd      	mov	sp, r7
200006ce:	b005      	add	sp, #20
200006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200006d2:	46c0      	nop			; (mov r8, r8)
200006d4:	80000007 	andhi	r0, r0, r7
200006d8:	20000bc0 	andcs	r0, r0, r0, asr #23

200006dc <set_object_speed>:

// ------------------------------ OBJECT_FUNCTIONS ----------------------------

void set_object_speed (POBJECT o, int speedx, int speedy) {
200006dc:	b580      	push	{r7, lr}
200006de:	b084      	sub	sp, #16
200006e0:	af00      	add	r7, sp, #0
200006e2:	60f8      	str	r0, [r7, #12]
200006e4:	60b9      	str	r1, [r7, #8]
200006e6:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
200006e8:	68fb      	ldr	r3, [r7, #12]
200006ea:	68ba      	ldr	r2, [r7, #8]
200006ec:	605a      	str	r2, [r3, #4]
	o->dy = speedy;	
200006ee:	68fb      	ldr	r3, [r7, #12]
200006f0:	687a      	ldr	r2, [r7, #4]
200006f2:	609a      	str	r2, [r3, #8]
}
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	46bd      	mov	sp, r7
200006f8:	b004      	add	sp, #16
200006fa:	bd80      	pop	{r7, pc}

200006fc <draw_object>:

void draw_object (POBJECT o) {
200006fc:	b580      	push	{r7, lr}
200006fe:	b084      	sub	sp, #16
20000700:	af00      	add	r7, sp, #0
20000702:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
20000704:	2300      	movs	r3, #0
20000706:	60fb      	str	r3, [r7, #12]
20000708:	e020      	b.n	2000074c <draw_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 1);
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	681a      	ldr	r2, [r3, #0]
2000070e:	68fb      	ldr	r3, [r7, #12]
20000710:	3304      	adds	r3, #4
20000712:	005b      	lsls	r3, r3, #1
20000714:	18d3      	adds	r3, r2, r3
20000716:	3304      	adds	r3, #4
20000718:	781a      	ldrb	r2, [r3, #0]
2000071a:	687b      	ldr	r3, [r7, #4]
2000071c:	68db      	ldr	r3, [r3, #12]
2000071e:	b2db      	uxtb	r3, r3
20000720:	18d3      	adds	r3, r2, r3
20000722:	b2d8      	uxtb	r0, r3
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	681a      	ldr	r2, [r3, #0]
20000728:	68fb      	ldr	r3, [r7, #12]
2000072a:	3304      	adds	r3, #4
2000072c:	005b      	lsls	r3, r3, #1
2000072e:	18d3      	adds	r3, r2, r3
20000730:	3305      	adds	r3, #5
20000732:	781a      	ldrb	r2, [r3, #0]
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	691b      	ldr	r3, [r3, #16]
20000738:	b2db      	uxtb	r3, r3
2000073a:	18d3      	adds	r3, r2, r3
2000073c:	b2db      	uxtb	r3, r3
2000073e:	2201      	movs	r2, #1
20000740:	0019      	movs	r1, r3
20000742:	f7ff fef0 	bl	20000526 <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
20000746:	68fb      	ldr	r3, [r7, #12]
20000748:	3301      	adds	r3, #1
2000074a:	60fb      	str	r3, [r7, #12]
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	681b      	ldr	r3, [r3, #0]
20000750:	681b      	ldr	r3, [r3, #0]
20000752:	68fa      	ldr	r2, [r7, #12]
20000754:	429a      	cmp	r2, r3
20000756:	dbd8      	blt.n	2000070a <draw_object+0xe>
	}
}
20000758:	46c0      	nop			; (mov r8, r8)
2000075a:	46c0      	nop			; (mov r8, r8)
2000075c:	46bd      	mov	sp, r7
2000075e:	b004      	add	sp, #16
20000760:	bd80      	pop	{r7, pc}

20000762 <clear_object>:

void clear_object (POBJECT o) {
20000762:	b580      	push	{r7, lr}
20000764:	b084      	sub	sp, #16
20000766:	af00      	add	r7, sp, #0
20000768:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
2000076a:	2300      	movs	r3, #0
2000076c:	60fb      	str	r3, [r7, #12]
2000076e:	e020      	b.n	200007b2 <clear_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 0);
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	681a      	ldr	r2, [r3, #0]
20000774:	68fb      	ldr	r3, [r7, #12]
20000776:	3304      	adds	r3, #4
20000778:	005b      	lsls	r3, r3, #1
2000077a:	18d3      	adds	r3, r2, r3
2000077c:	3304      	adds	r3, #4
2000077e:	781a      	ldrb	r2, [r3, #0]
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	68db      	ldr	r3, [r3, #12]
20000784:	b2db      	uxtb	r3, r3
20000786:	18d3      	adds	r3, r2, r3
20000788:	b2d8      	uxtb	r0, r3
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	681a      	ldr	r2, [r3, #0]
2000078e:	68fb      	ldr	r3, [r7, #12]
20000790:	3304      	adds	r3, #4
20000792:	005b      	lsls	r3, r3, #1
20000794:	18d3      	adds	r3, r2, r3
20000796:	3305      	adds	r3, #5
20000798:	781a      	ldrb	r2, [r3, #0]
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	691b      	ldr	r3, [r3, #16]
2000079e:	b2db      	uxtb	r3, r3
200007a0:	18d3      	adds	r3, r2, r3
200007a2:	b2db      	uxtb	r3, r3
200007a4:	2200      	movs	r2, #0
200007a6:	0019      	movs	r1, r3
200007a8:	f7ff febd 	bl	20000526 <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
200007ac:	68fb      	ldr	r3, [r7, #12]
200007ae:	3301      	adds	r3, #1
200007b0:	60fb      	str	r3, [r7, #12]
200007b2:	687b      	ldr	r3, [r7, #4]
200007b4:	681b      	ldr	r3, [r3, #0]
200007b6:	681b      	ldr	r3, [r3, #0]
200007b8:	68fa      	ldr	r2, [r7, #12]
200007ba:	429a      	cmp	r2, r3
200007bc:	dbd8      	blt.n	20000770 <clear_object+0xe>
	}
}
200007be:	46c0      	nop			; (mov r8, r8)
200007c0:	46c0      	nop			; (mov r8, r8)
200007c2:	46bd      	mov	sp, r7
200007c4:	b004      	add	sp, #16
200007c6:	bd80      	pop	{r7, pc}

200007c8 <move_object>:

void move_object (POBJECT o) {
200007c8:	b580      	push	{r7, lr}
200007ca:	b084      	sub	sp, #16
200007cc:	af00      	add	r7, sp, #0
200007ce:	6078      	str	r0, [r7, #4]
	clear_object(o);
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	0018      	movs	r0, r3
200007d4:	f7ff ffc5 	bl	20000762 <clear_object>
	int newx = o->posx + o->dx;
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	68da      	ldr	r2, [r3, #12]
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	685b      	ldr	r3, [r3, #4]
200007e0:	18d3      	adds	r3, r2, r3
200007e2:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	691a      	ldr	r2, [r3, #16]
200007e8:	687b      	ldr	r3, [r7, #4]
200007ea:	689b      	ldr	r3, [r3, #8]
200007ec:	18d3      	adds	r3, r2, r3
200007ee:	60bb      	str	r3, [r7, #8]
	
	if (newx < 1) {
200007f0:	68fb      	ldr	r3, [r7, #12]
200007f2:	2b00      	cmp	r3, #0
200007f4:	dc08      	bgt.n	20000808 <move_object+0x40>
		o->dx =(o->dx)*(-1);
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	685b      	ldr	r3, [r3, #4]
200007fa:	425a      	negs	r2, r3
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	605a      	str	r2, [r3, #4]
		o->posx = 1;
20000800:	687b      	ldr	r3, [r7, #4]
20000802:	2201      	movs	r2, #1
20000804:	60da      	str	r2, [r3, #12]
20000806:	e016      	b.n	20000836 <move_object+0x6e>
	}
	else if ((newx + o->geo->sizex)  > 128) {
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	681b      	ldr	r3, [r3, #0]
2000080c:	685a      	ldr	r2, [r3, #4]
2000080e:	68fb      	ldr	r3, [r7, #12]
20000810:	18d3      	adds	r3, r2, r3
20000812:	2b80      	cmp	r3, #128	; 0x80
20000814:	dd0c      	ble.n	20000830 <move_object+0x68>
		o->dx = (o->dx)*(-1);
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	685b      	ldr	r3, [r3, #4]
2000081a:	425a      	negs	r2, r3
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	681b      	ldr	r3, [r3, #0]
20000824:	685b      	ldr	r3, [r3, #4]
20000826:	2280      	movs	r2, #128	; 0x80
20000828:	1ad2      	subs	r2, r2, r3
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	60da      	str	r2, [r3, #12]
2000082e:	e002      	b.n	20000836 <move_object+0x6e>
	} else {
		o->posx = newx;
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	68fa      	ldr	r2, [r7, #12]
20000834:	60da      	str	r2, [r3, #12]
	}
	if (newy < 1) {
20000836:	68bb      	ldr	r3, [r7, #8]
20000838:	2b00      	cmp	r3, #0
2000083a:	dc08      	bgt.n	2000084e <move_object+0x86>
		o->dy = (o->dy)*(-1);
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	689b      	ldr	r3, [r3, #8]
20000840:	425a      	negs	r2, r3
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	2201      	movs	r2, #1
2000084a:	611a      	str	r2, [r3, #16]
2000084c:	e016      	b.n	2000087c <move_object+0xb4>
	}
	else if ((newy + o->geo->sizey) > 64) {
2000084e:	687b      	ldr	r3, [r7, #4]
20000850:	681b      	ldr	r3, [r3, #0]
20000852:	689a      	ldr	r2, [r3, #8]
20000854:	68bb      	ldr	r3, [r7, #8]
20000856:	18d3      	adds	r3, r2, r3
20000858:	2b40      	cmp	r3, #64	; 0x40
2000085a:	dd0c      	ble.n	20000876 <move_object+0xae>
		o->dy = (o->dy)*(-1);
2000085c:	687b      	ldr	r3, [r7, #4]
2000085e:	689b      	ldr	r3, [r3, #8]
20000860:	425a      	negs	r2, r3
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	681b      	ldr	r3, [r3, #0]
2000086a:	689b      	ldr	r3, [r3, #8]
2000086c:	2240      	movs	r2, #64	; 0x40
2000086e:	1ad2      	subs	r2, r2, r3
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	611a      	str	r2, [r3, #16]
20000874:	e002      	b.n	2000087c <move_object+0xb4>
	} else {
		o->posy = newy;
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	68ba      	ldr	r2, [r7, #8]
2000087a:	611a      	str	r2, [r3, #16]
	}

	draw_object(o);
2000087c:	687b      	ldr	r3, [r7, #4]
2000087e:	0018      	movs	r0, r3
20000880:	f7ff ff3c 	bl	200006fc <draw_object>
}
20000884:	46c0      	nop			; (mov r8, r8)
20000886:	46bd      	mov	sp, r7
20000888:	b004      	add	sp, #16
2000088a:	bd80      	pop	{r7, pc}

2000088c <keybActivate>:

// ------------------------------ KEYPAD ----------------------------

void keybActivate (unsigned int row) {
2000088c:	b580      	push	{r7, lr}
2000088e:	b082      	sub	sp, #8
20000890:	af00      	add	r7, sp, #0
20000892:	6078      	str	r0, [r7, #4]
	// Kollar vilken rad som knappen är itryckt på och sparar detta i D-portens HÖGA BYTE (inget kopplat hit).				VARFÖR SPARAR MAN DET HÄR????
	switch(row) {
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	2b04      	cmp	r3, #4
20000898:	d01b      	beq.n	200008d2 <keybActivate+0x46>
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	2b04      	cmp	r3, #4
2000089e:	d81c      	bhi.n	200008da <keybActivate+0x4e>
200008a0:	687b      	ldr	r3, [r7, #4]
200008a2:	2b03      	cmp	r3, #3
200008a4:	d011      	beq.n	200008ca <keybActivate+0x3e>
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	2b03      	cmp	r3, #3
200008aa:	d816      	bhi.n	200008da <keybActivate+0x4e>
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	2b01      	cmp	r3, #1
200008b0:	d003      	beq.n	200008ba <keybActivate+0x2e>
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	2b02      	cmp	r3, #2
200008b6:	d004      	beq.n	200008c2 <keybActivate+0x36>
200008b8:	e00f      	b.n	200008da <keybActivate+0x4e>
		case 1: * GPIO_ODR_HIGH = 0x10; break;
200008ba:	4b0c      	ldr	r3, [pc, #48]	; (200008ec <keybActivate+0x60>)
200008bc:	2210      	movs	r2, #16
200008be:	701a      	strb	r2, [r3, #0]
200008c0:	e00f      	b.n	200008e2 <keybActivate+0x56>
		case 2: * GPIO_ODR_HIGH = 0x20; break;
200008c2:	4b0a      	ldr	r3, [pc, #40]	; (200008ec <keybActivate+0x60>)
200008c4:	2220      	movs	r2, #32
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	e00b      	b.n	200008e2 <keybActivate+0x56>
		case 3: * GPIO_ODR_HIGH = 0x40; break;
200008ca:	4b08      	ldr	r3, [pc, #32]	; (200008ec <keybActivate+0x60>)
200008cc:	2240      	movs	r2, #64	; 0x40
200008ce:	701a      	strb	r2, [r3, #0]
200008d0:	e007      	b.n	200008e2 <keybActivate+0x56>
		case 4: * GPIO_ODR_HIGH = 0x80; break;
200008d2:	4b06      	ldr	r3, [pc, #24]	; (200008ec <keybActivate+0x60>)
200008d4:	2280      	movs	r2, #128	; 0x80
200008d6:	701a      	strb	r2, [r3, #0]
200008d8:	e003      	b.n	200008e2 <keybActivate+0x56>
		default: * GPIO_ODR_HIGH = 0;
200008da:	4b04      	ldr	r3, [pc, #16]	; (200008ec <keybActivate+0x60>)
200008dc:	2200      	movs	r2, #0
200008de:	701a      	strb	r2, [r3, #0]
	}
}
200008e0:	46c0      	nop			; (mov r8, r8)
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b002      	add	sp, #8
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	40020c15 	andmi	r0, r2, r5, lsl ip

200008f0 <keybGetCol>:

int keybGetCol (void) {
200008f0:	b580      	push	{r7, lr}
200008f2:	b082      	sub	sp, #8
200008f4:	af00      	add	r7, sp, #0
	/* Om någon tangent (i aktiverad rad)
	 * är nedtryckt, returnera dess kolumnnummer,
	 * annars, returnera 0 */
	unsigned char rowFromRegister;
	rowFromRegister = * GPIO_IDR_HIGH;
200008f6:	4a12      	ldr	r2, [pc, #72]	; (20000940 <keybGetCol+0x50>)
200008f8:	1dfb      	adds	r3, r7, #7
200008fa:	7812      	ldrb	r2, [r2, #0]
200008fc:	701a      	strb	r2, [r3, #0]
	if (rowFromRegister & 8) return 4;
200008fe:	1dfb      	adds	r3, r7, #7
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	2208      	movs	r2, #8
20000904:	4013      	ands	r3, r2
20000906:	d001      	beq.n	2000090c <keybGetCol+0x1c>
20000908:	2304      	movs	r3, #4
2000090a:	e015      	b.n	20000938 <keybGetCol+0x48>
	if (rowFromRegister & 4) return 3;
2000090c:	1dfb      	adds	r3, r7, #7
2000090e:	781b      	ldrb	r3, [r3, #0]
20000910:	2204      	movs	r2, #4
20000912:	4013      	ands	r3, r2
20000914:	d001      	beq.n	2000091a <keybGetCol+0x2a>
20000916:	2303      	movs	r3, #3
20000918:	e00e      	b.n	20000938 <keybGetCol+0x48>
	if (rowFromRegister & 2) return 2;
2000091a:	1dfb      	adds	r3, r7, #7
2000091c:	781b      	ldrb	r3, [r3, #0]
2000091e:	2202      	movs	r2, #2
20000920:	4013      	ands	r3, r2
20000922:	d001      	beq.n	20000928 <keybGetCol+0x38>
20000924:	2302      	movs	r3, #2
20000926:	e007      	b.n	20000938 <keybGetCol+0x48>
	if (rowFromRegister & 1) return 1;
20000928:	1dfb      	adds	r3, r7, #7
2000092a:	781b      	ldrb	r3, [r3, #0]
2000092c:	2201      	movs	r2, #1
2000092e:	4013      	ands	r3, r2
20000930:	d001      	beq.n	20000936 <keybGetCol+0x46>
20000932:	2301      	movs	r3, #1
20000934:	e000      	b.n	20000938 <keybGetCol+0x48>
	return 0;
20000936:	2300      	movs	r3, #0
}
20000938:	0018      	movs	r0, r3
2000093a:	46bd      	mov	sp, r7
2000093c:	b002      	add	sp, #8
2000093e:	bd80      	pop	{r7, pc}
20000940:	40020c11 	andmi	r0, r2, r1, lsl ip

20000944 <keyb>:

unsigned char keyb (void) {
20000944:	b590      	push	{r4, r7, lr}
20000946:	b087      	sub	sp, #28
20000948:	af00      	add	r7, sp, #0
	unsigned char key[4][4] = { {1, 2, 3, 10},			// Matris som representerar alla knappar på 16-tangenbord ( OBS i decimalt för att kunna använda som index i hexArrayen i metoden ovan.
2000094a:	1d3b      	adds	r3, r7, #4
2000094c:	4a1d      	ldr	r2, [pc, #116]	; (200009c4 <keyb+0x80>)
2000094e:	ca13      	ldmia	r2!, {r0, r1, r4}
20000950:	c313      	stmia	r3!, {r0, r1, r4}
20000952:	6812      	ldr	r2, [r2, #0]
20000954:	601a      	str	r2, [r3, #0]
											    {4, 5, 6, 11},
											    {7, 8, 9, 12},
										     	{14, 0, 15, 13} };
	unsigned char col = 0;
20000956:	2316      	movs	r3, #22
20000958:	18fb      	adds	r3, r7, r3
2000095a:	2200      	movs	r2, #0
2000095c:	701a      	strb	r2, [r3, #0]
	for (unsigned char row = 1; row <= 4; row++) {		// Loopar igenom alla rader
2000095e:	2317      	movs	r3, #23
20000960:	18fb      	adds	r3, r7, r3
20000962:	2201      	movs	r2, #1
20000964:	701a      	strb	r2, [r3, #0]
20000966:	e020      	b.n	200009aa <keyb+0x66>
		keybActivate(row);													// Om en knapp på raden är ifylld, spara dess RAD (se metoden ovan).
20000968:	2417      	movs	r4, #23
2000096a:	193b      	adds	r3, r7, r4
2000096c:	781b      	ldrb	r3, [r3, #0]
2000096e:	0018      	movs	r0, r3
20000970:	f7ff ff8c 	bl	2000088c <keybActivate>
		col = keybGetCol();													// Om en knapp på raden (infon hämtas från HÖGA BYTEN i ODR) är ifylld, spara dess KOLUMN (se metoden ovan). 
20000974:	f7ff ffbc 	bl	200008f0 <keybGetCol>
20000978:	0002      	movs	r2, r0
2000097a:	2116      	movs	r1, #22
2000097c:	187b      	adds	r3, r7, r1
2000097e:	701a      	strb	r2, [r3, #0]
		if ( col != 0 ) {															// Om kolumnen inte är 0, dvs en rad har hämtats från HÖGA BYTEN i ODR och kolumnen för knappen på raden har sparats....
20000980:	187b      	adds	r3, r7, r1
20000982:	781b      	ldrb	r3, [r3, #0]
20000984:	2b00      	cmp	r3, #0
20000986:	d00a      	beq.n	2000099e <keyb+0x5a>
			return key[row-1][col-1];										// retunera då knappens värde i matrisen, alltså det nummer som står på knappen.
20000988:	193b      	adds	r3, r7, r4
2000098a:	781b      	ldrb	r3, [r3, #0]
2000098c:	1e5a      	subs	r2, r3, #1
2000098e:	187b      	adds	r3, r7, r1
20000990:	781b      	ldrb	r3, [r3, #0]
20000992:	3b01      	subs	r3, #1
20000994:	1d39      	adds	r1, r7, #4
20000996:	0092      	lsls	r2, r2, #2
20000998:	188a      	adds	r2, r1, r2
2000099a:	5cd3      	ldrb	r3, [r2, r3]
2000099c:	e00e      	b.n	200009bc <keyb+0x78>
	for (unsigned char row = 1; row <= 4; row++) {		// Loopar igenom alla rader
2000099e:	2117      	movs	r1, #23
200009a0:	187b      	adds	r3, r7, r1
200009a2:	781a      	ldrb	r2, [r3, #0]
200009a4:	187b      	adds	r3, r7, r1
200009a6:	3201      	adds	r2, #1
200009a8:	701a      	strb	r2, [r3, #0]
200009aa:	2317      	movs	r3, #23
200009ac:	18fb      	adds	r3, r7, r3
200009ae:	781b      	ldrb	r3, [r3, #0]
200009b0:	2b04      	cmp	r3, #4
200009b2:	d9d9      	bls.n	20000968 <keyb+0x24>
		}
	}
	keybActivate(0);
200009b4:	2000      	movs	r0, #0
200009b6:	f7ff ff69 	bl	2000088c <keybActivate>
	return 0xFF;							// Kommer att stänga av displayen då ( FF > 15 )
200009ba:	23ff      	movs	r3, #255	; 0xff
}
200009bc:	0018      	movs	r0, r3
200009be:	46bd      	mov	sp, r7
200009c0:	b007      	add	sp, #28
200009c2:	bd90      	pop	{r4, r7, pc}
200009c4:	20000be0 	andcs	r0, r0, r0, ror #23

200009c8 <main>:
static GEOMETRY ball_geometry = {12, 4, 4, {{0,1}, {0,2}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,1}, {3,2} }};

static OBJECT ball = {&ball_geometry, 0,0, 0,0, draw_object, clear_object, move_object, set_object_speed};


void main(void) {
200009c8:	b590      	push	{r4, r7, lr}
200009ca:	b083      	sub	sp, #12
200009cc:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200009ce:	4b1f      	ldr	r3, [pc, #124]	; (20000a4c <main+0x84>)
200009d0:	607b      	str	r3, [r7, #4]
	init_app();
200009d2:	f7ff fb1d 	bl	20000010 <init_app>
	graphic_initalize();
200009d6:	f7ff fd47 	bl	20000468 <graphic_initalize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	while(1) {
		p->move(p);
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	69db      	ldr	r3, [r3, #28]
200009de:	687a      	ldr	r2, [r7, #4]
200009e0:	0010      	movs	r0, r2
200009e2:	4798      	blx	r3
		delay_milli(40);
200009e4:	2028      	movs	r0, #40	; 0x28
200009e6:	f7ff fb9b 	bl	20000120 <delay_milli>
		uint_8t c = keyb();
200009ea:	1cfc      	adds	r4, r7, #3
200009ec:	f7ff ffaa 	bl	20000944 <keyb>
200009f0:	0003      	movs	r3, r0
200009f2:	7023      	strb	r3, [r4, #0]
		switch (c) {
200009f4:	1cfb      	adds	r3, r7, #3
200009f6:	781b      	ldrb	r3, [r3, #0]
200009f8:	2b08      	cmp	r3, #8
200009fa:	d01f      	beq.n	20000a3c <main+0x74>
200009fc:	dced      	bgt.n	200009da <main+0x12>
200009fe:	2b06      	cmp	r3, #6
20000a00:	d005      	beq.n	20000a0e <main+0x46>
20000a02:	dcea      	bgt.n	200009da <main+0x12>
20000a04:	2b02      	cmp	r3, #2
20000a06:	d011      	beq.n	20000a2c <main+0x64>
20000a08:	2b04      	cmp	r3, #4
20000a0a:	d007      	beq.n	20000a1c <main+0x54>
20000a0c:	e01d      	b.n	20000a4a <main+0x82>
			case 6: p->set_speed (p, 2, 0); break;
20000a0e:	687b      	ldr	r3, [r7, #4]
20000a10:	6a1b      	ldr	r3, [r3, #32]
20000a12:	6878      	ldr	r0, [r7, #4]
20000a14:	2200      	movs	r2, #0
20000a16:	2102      	movs	r1, #2
20000a18:	4798      	blx	r3
20000a1a:	e016      	b.n	20000a4a <main+0x82>
			case 4: p->set_speed (p, -2, 0); break;
20000a1c:	687b      	ldr	r3, [r7, #4]
20000a1e:	6a1b      	ldr	r3, [r3, #32]
20000a20:	2202      	movs	r2, #2
20000a22:	4251      	negs	r1, r2
20000a24:	6878      	ldr	r0, [r7, #4]
20000a26:	2200      	movs	r2, #0
20000a28:	4798      	blx	r3
20000a2a:	e00e      	b.n	20000a4a <main+0x82>
			case 2: p->set_speed (p, 2, -2); break;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	6a1b      	ldr	r3, [r3, #32]
20000a30:	2202      	movs	r2, #2
20000a32:	4252      	negs	r2, r2
20000a34:	6878      	ldr	r0, [r7, #4]
20000a36:	2102      	movs	r1, #2
20000a38:	4798      	blx	r3
20000a3a:	e006      	b.n	20000a4a <main+0x82>
			case 8: p->set_speed (p, 2, 2); break;
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	6a1b      	ldr	r3, [r3, #32]
20000a40:	6878      	ldr	r0, [r7, #4]
20000a42:	2202      	movs	r2, #2
20000a44:	2102      	movs	r1, #2
20000a46:	4798      	blx	r3
20000a48:	46c0      	nop			; (mov r8, r8)
	while(1) {
20000a4a:	e7c6      	b.n	200009da <main+0x12>
20000a4c:	20000b9c 	mulcs	r0, ip, fp

20000a50 <__udivsi3>:
20000a50:	2200      	movs	r2, #0
20000a52:	0843      	lsrs	r3, r0, #1
20000a54:	428b      	cmp	r3, r1
20000a56:	d374      	bcc.n	20000b42 <__udivsi3+0xf2>
20000a58:	0903      	lsrs	r3, r0, #4
20000a5a:	428b      	cmp	r3, r1
20000a5c:	d35f      	bcc.n	20000b1e <__udivsi3+0xce>
20000a5e:	0a03      	lsrs	r3, r0, #8
20000a60:	428b      	cmp	r3, r1
20000a62:	d344      	bcc.n	20000aee <__udivsi3+0x9e>
20000a64:	0b03      	lsrs	r3, r0, #12
20000a66:	428b      	cmp	r3, r1
20000a68:	d328      	bcc.n	20000abc <__udivsi3+0x6c>
20000a6a:	0c03      	lsrs	r3, r0, #16
20000a6c:	428b      	cmp	r3, r1
20000a6e:	d30d      	bcc.n	20000a8c <__udivsi3+0x3c>
20000a70:	22ff      	movs	r2, #255	; 0xff
20000a72:	0209      	lsls	r1, r1, #8
20000a74:	ba12      	rev	r2, r2
20000a76:	0c03      	lsrs	r3, r0, #16
20000a78:	428b      	cmp	r3, r1
20000a7a:	d302      	bcc.n	20000a82 <__udivsi3+0x32>
20000a7c:	1212      	asrs	r2, r2, #8
20000a7e:	0209      	lsls	r1, r1, #8
20000a80:	d065      	beq.n	20000b4e <__udivsi3+0xfe>
20000a82:	0b03      	lsrs	r3, r0, #12
20000a84:	428b      	cmp	r3, r1
20000a86:	d319      	bcc.n	20000abc <__udivsi3+0x6c>
20000a88:	e000      	b.n	20000a8c <__udivsi3+0x3c>
20000a8a:	0a09      	lsrs	r1, r1, #8
20000a8c:	0bc3      	lsrs	r3, r0, #15
20000a8e:	428b      	cmp	r3, r1
20000a90:	d301      	bcc.n	20000a96 <__udivsi3+0x46>
20000a92:	03cb      	lsls	r3, r1, #15
20000a94:	1ac0      	subs	r0, r0, r3
20000a96:	4152      	adcs	r2, r2
20000a98:	0b83      	lsrs	r3, r0, #14
20000a9a:	428b      	cmp	r3, r1
20000a9c:	d301      	bcc.n	20000aa2 <__udivsi3+0x52>
20000a9e:	038b      	lsls	r3, r1, #14
20000aa0:	1ac0      	subs	r0, r0, r3
20000aa2:	4152      	adcs	r2, r2
20000aa4:	0b43      	lsrs	r3, r0, #13
20000aa6:	428b      	cmp	r3, r1
20000aa8:	d301      	bcc.n	20000aae <__udivsi3+0x5e>
20000aaa:	034b      	lsls	r3, r1, #13
20000aac:	1ac0      	subs	r0, r0, r3
20000aae:	4152      	adcs	r2, r2
20000ab0:	0b03      	lsrs	r3, r0, #12
20000ab2:	428b      	cmp	r3, r1
20000ab4:	d301      	bcc.n	20000aba <__udivsi3+0x6a>
20000ab6:	030b      	lsls	r3, r1, #12
20000ab8:	1ac0      	subs	r0, r0, r3
20000aba:	4152      	adcs	r2, r2
20000abc:	0ac3      	lsrs	r3, r0, #11
20000abe:	428b      	cmp	r3, r1
20000ac0:	d301      	bcc.n	20000ac6 <__udivsi3+0x76>
20000ac2:	02cb      	lsls	r3, r1, #11
20000ac4:	1ac0      	subs	r0, r0, r3
20000ac6:	4152      	adcs	r2, r2
20000ac8:	0a83      	lsrs	r3, r0, #10
20000aca:	428b      	cmp	r3, r1
20000acc:	d301      	bcc.n	20000ad2 <__udivsi3+0x82>
20000ace:	028b      	lsls	r3, r1, #10
20000ad0:	1ac0      	subs	r0, r0, r3
20000ad2:	4152      	adcs	r2, r2
20000ad4:	0a43      	lsrs	r3, r0, #9
20000ad6:	428b      	cmp	r3, r1
20000ad8:	d301      	bcc.n	20000ade <__udivsi3+0x8e>
20000ada:	024b      	lsls	r3, r1, #9
20000adc:	1ac0      	subs	r0, r0, r3
20000ade:	4152      	adcs	r2, r2
20000ae0:	0a03      	lsrs	r3, r0, #8
20000ae2:	428b      	cmp	r3, r1
20000ae4:	d301      	bcc.n	20000aea <__udivsi3+0x9a>
20000ae6:	020b      	lsls	r3, r1, #8
20000ae8:	1ac0      	subs	r0, r0, r3
20000aea:	4152      	adcs	r2, r2
20000aec:	d2cd      	bcs.n	20000a8a <__udivsi3+0x3a>
20000aee:	09c3      	lsrs	r3, r0, #7
20000af0:	428b      	cmp	r3, r1
20000af2:	d301      	bcc.n	20000af8 <__udivsi3+0xa8>
20000af4:	01cb      	lsls	r3, r1, #7
20000af6:	1ac0      	subs	r0, r0, r3
20000af8:	4152      	adcs	r2, r2
20000afa:	0983      	lsrs	r3, r0, #6
20000afc:	428b      	cmp	r3, r1
20000afe:	d301      	bcc.n	20000b04 <__udivsi3+0xb4>
20000b00:	018b      	lsls	r3, r1, #6
20000b02:	1ac0      	subs	r0, r0, r3
20000b04:	4152      	adcs	r2, r2
20000b06:	0943      	lsrs	r3, r0, #5
20000b08:	428b      	cmp	r3, r1
20000b0a:	d301      	bcc.n	20000b10 <__udivsi3+0xc0>
20000b0c:	014b      	lsls	r3, r1, #5
20000b0e:	1ac0      	subs	r0, r0, r3
20000b10:	4152      	adcs	r2, r2
20000b12:	0903      	lsrs	r3, r0, #4
20000b14:	428b      	cmp	r3, r1
20000b16:	d301      	bcc.n	20000b1c <__udivsi3+0xcc>
20000b18:	010b      	lsls	r3, r1, #4
20000b1a:	1ac0      	subs	r0, r0, r3
20000b1c:	4152      	adcs	r2, r2
20000b1e:	08c3      	lsrs	r3, r0, #3
20000b20:	428b      	cmp	r3, r1
20000b22:	d301      	bcc.n	20000b28 <__udivsi3+0xd8>
20000b24:	00cb      	lsls	r3, r1, #3
20000b26:	1ac0      	subs	r0, r0, r3
20000b28:	4152      	adcs	r2, r2
20000b2a:	0883      	lsrs	r3, r0, #2
20000b2c:	428b      	cmp	r3, r1
20000b2e:	d301      	bcc.n	20000b34 <__udivsi3+0xe4>
20000b30:	008b      	lsls	r3, r1, #2
20000b32:	1ac0      	subs	r0, r0, r3
20000b34:	4152      	adcs	r2, r2
20000b36:	0843      	lsrs	r3, r0, #1
20000b38:	428b      	cmp	r3, r1
20000b3a:	d301      	bcc.n	20000b40 <__udivsi3+0xf0>
20000b3c:	004b      	lsls	r3, r1, #1
20000b3e:	1ac0      	subs	r0, r0, r3
20000b40:	4152      	adcs	r2, r2
20000b42:	1a41      	subs	r1, r0, r1
20000b44:	d200      	bcs.n	20000b48 <__udivsi3+0xf8>
20000b46:	4601      	mov	r1, r0
20000b48:	4152      	adcs	r2, r2
20000b4a:	4610      	mov	r0, r2
20000b4c:	4770      	bx	lr
20000b4e:	e7ff      	b.n	20000b50 <__udivsi3+0x100>
20000b50:	b501      	push	{r0, lr}
20000b52:	2000      	movs	r0, #0
20000b54:	f000 f806 	bl	20000b64 <__aeabi_idiv0>
20000b58:	bd02      	pop	{r1, pc}
20000b5a:	46c0      	nop			; (mov r8, r8)

20000b5c <__aeabi_uidivmod>:
20000b5c:	2900      	cmp	r1, #0
20000b5e:	d0f7      	beq.n	20000b50 <__udivsi3+0x100>
20000b60:	e776      	b.n	20000a50 <__udivsi3>
20000b62:	4770      	bx	lr

20000b64 <__aeabi_idiv0>:
20000b64:	4770      	bx	lr
20000b66:	46c0      	nop			; (mov r8, r8)

20000b68 <ball_geometry>:
20000b68:	0000000c 	andeq	r0, r0, ip
20000b6c:	00000004 	andeq	r0, r0, r4
20000b70:	00000004 	andeq	r0, r0, r4
20000b74:	02000100 	andeq	r0, r0, #0, 2
20000b78:	01010001 	tsteq	r1, r1
20000b7c:	03010201 	movweq	r0, #4609	; 0x1201
20000b80:	01020002 	tsteq	r2, r2
20000b84:	03020202 	movweq	r0, #8706	; 0x2202
20000b88:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000b9c <ball>:
20000b9c:	20000b68 	andcs	r0, r0, r8, ror #22
	...
20000bb0:	200006fd 	strdcs	r0, [r0], -sp
20000bb4:	20000763 	andcs	r0, r0, r3, ror #14
20000bb8:	200007c9 	andcs	r0, r0, r9, asr #15
20000bbc:	200006dd 	ldrdcs	r0, [r0], -sp
20000bc0:	20000592 	mulcs	r0, r2, r5
20000bc4:	2000059c 	mulcs	r0, ip, r5
20000bc8:	200005a6 	andcs	r0, r0, r6, lsr #11
20000bcc:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
20000bd0:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
20000bd4:	200005c4 	andcs	r0, r0, r4, asr #11
20000bd8:	200005ce 	andcs	r0, r0, lr, asr #11
20000bdc:	200005d8 	ldrdcs	r0, [r0], -r8
20000be0:	0a030201 	beq	200c13ec <ball+0xc0850>
20000be4:	0b060504 	bleq	20181ffc <ball+0x181460>
20000be8:	0c090807 	stceq	8, cr0, [r9], {7}
20000bec:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000bbc <ball+0x20>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000710 	andeq	r0, r0, r0, lsl r7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001e7 	andeq	r0, r0, r7, ror #3
  10:	0002750c 	andeq	r7, r2, ip, lsl #10
  14:	00008300 	andeq	r8, r0, r0, lsl #6
	...
  24:	01950200 	orrseq	r0, r5, r0, lsl #4
  28:	44010000 	strmi	r0, [r1], #-0
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000114 	andeq	r0, r0, r4, lsl r1
  38:	00031704 	andeq	r1, r3, r4, lsl #14
  3c:	46010200 	strmi	r0, [r1], -r0, lsl #4
  40:	00005c12 	andeq	r5, r0, r2, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250b4701 	strcs	r4, [fp, #-1793]	; 0xfffff8ff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250b48 	eoreq	r0, r5, r8, asr #22
  58:	00010000 	andeq	r0, r1, r0
  5c:	0000fe02 	andeq	pc, r0, r2, lsl #28
  60:	04490100 	strbeq	r0, [r9], #-256	; 0xffffff00
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	0001b404 	andeq	fp, r1, r4, lsl #8
  6c:	4b013400 	blmi	4d074 <startup-0x1ffb2f8c>
  70:	0000a911 	andeq	sl, r0, r1, lsl r9
  74:	03810600 	orreq	r0, r1, #0, 12
  78:	4c010000 	stcmi	0, cr0, [r1], {-0}
  7c:	0000a907 	andeq	sl, r0, r7, lsl #18
  80:	cf060000 	svcgt	0x00060000
  84:	01000001 	tsteq	r0, r1
  88:	00a9074d 	adceq	r0, r9, sp, asr #14
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000001d5 	ldrdeq	r0, [r0], -r5
  94:	a9074e01 	stmdbge	r7, {r0, r9, sl, fp, lr}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0094f01 	andlt	r4, r9, r1, lsl #30
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	a7070403 	strge	r0, [r7, -r3, lsl #8]
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68045001 	stmdavs	r4, {r0, ip, lr}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0f5001 	svcle	0x000f5001
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	036a0400 	cmneq	sl, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	01661152 	cmneq	r6, r2, asr r1
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30d53 	sbcseq	r0, r3, r3, asr sp
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a90754 	adceq	r0, r9, r4, asr r7
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90b54 	adceq	r0, r9, r4, asr fp
 114:	06080000 	streq	r0, [r8], -r0
 118:	0000036f 	andeq	r0, r0, pc, ror #6
 11c:	a9075501 	stmdbge	r7, {r0, r8, sl, ip, lr}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00012206 	andeq	r2, r1, r6, lsl #4
 128:	0d550100 	ldfeqe	f0, [r5, #-0]
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02700610 	rsbseq	r0, r0, #16, 12	; 0x1000000
 134:	56010000 	strpl	r0, [r1], -r0
 138:	0001770b 	andeq	r7, r1, fp, lsl #14
 13c:	67061400 	strvs	r1, [r6, -r0, lsl #8]
 140:	01000001 	tsteq	r0, r1
 144:	01770b57 	cmneq	r7, r7, asr fp
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	0000004e 	andeq	r0, r0, lr, asr #32
 150:	770b5801 	strvc	r5, [fp, -r1, lsl #16]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00032f06 	andeq	r2, r3, r6, lsl #30
 15c:	0b590100 	bleq	1640564 <startup-0x1e9bfa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	0003b902 	andeq	fp, r3, r2, lsl #18
 19c:	045a0100 	ldrbeq	r0, [sl], #-256	; 0xffffff00
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	0003b802 	andeq	fp, r3, r2, lsl #16
 1a8:	0d5a0100 	ldfeqe	f0, [sl, #-0]
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0001270d 	andeq	r2, r1, sp, lsl #14
 1b4:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	68030500 	stmdavs	r3, {r8, sl}
 1c0:	0d20000b 	stceq	0, cr0, [r0, #-44]!	; 0xffffffd4
 1c4:	0000026b 	andeq	r0, r0, fp, ror #4
 1c8:	0f01a501 	svceq	0x0001a501
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	0b9c0305 	bleq	fe700dec <ball+0xde700250>
 1d4:	720e2000 	andvc	r2, lr, #0
 1d8:	01000001 	tsteq	r0, r1
 1dc:	c80601a8 	stmdagt	r6, {r3, r5, r7, r8}
 1e0:	88200009 	stmdahi	r0!, {r0, r3}
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0002149c 	muleq	r2, ip, r4
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a01a901 	beq	6a5fc <startup-0x1ff95a04>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 1fc:	200009da 	ldrdcs	r0, [r0], -sl
 200:	00000070 	andeq	r0, r0, r0, ror r0
 204:	0100630f 	tsteq	r0, pc, lsl #6
 208:	250b01b4 	strcs	r0, [fp, #-436]	; 0xfffffe4c
 20c:	02000000 	andeq	r0, r0, #0
 210:	00006b91 	muleq	r0, r1, fp
 214:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
 218:	018f0100 	orreq	r0, pc, r0, lsl #2
 21c:	0000310f 	andeq	r3, r0, pc, lsl #2
 220:	00094400 	andeq	r4, r9, r0, lsl #8
 224:	00008420 	andeq	r8, r0, r0, lsr #8
 228:	6a9c0100 	bvs	fe700630 <ball+0xde6ffa94>
 22c:	0f000002 	svceq	0x00000002
 230:	0079656b 	rsbseq	r6, r9, fp, ror #10
 234:	10019001 	andne	r9, r1, r1
 238:	0000026a 	andeq	r0, r0, sl, ror #4
 23c:	0f5c9102 	svceq	0x005c9102
 240:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 244:	10019401 	andne	r9, r1, r1, lsl #8
 248:	00000031 	andeq	r0, r0, r1, lsr r0
 24c:	106e9102 	rsbne	r9, lr, r2, lsl #2
 250:	2000095e 	andcs	r0, r0, lr, asr r9
 254:	00000056 	andeq	r0, r0, r6, asr r0
 258:	776f720f 	strbvc	r7, [pc, -pc, lsl #4]!
 25c:	01950100 	orrseq	r0, r5, r0, lsl #2
 260:	00003115 	andeq	r3, r0, r5, lsl r1
 264:	6f910200 	svcvs	0x00910200
 268:	31080000 	mrscc	r0, (UNDEF: 8)
 26c:	80000000 	andhi	r0, r0, r0
 270:	09000002 	stmdbeq	r0, {r1}
 274:	000000c0 	andeq	r0, r0, r0, asr #1
 278:	00c00903 	sbceq	r0, r0, r3, lsl #18
 27c:	00030000 	andeq	r0, r3, r0
 280:	00018a12 	andeq	r8, r1, r2, lsl sl
 284:	01820100 	orreq	r0, r2, r0, lsl #2
 288:	0000a905 	andeq	sl, r0, r5, lsl #18
 28c:	0008f000 	andeq	pc, r8, r0
 290:	00005420 	andeq	r5, r0, r0, lsr #8
 294:	ac9c0100 	ldfges	f0, [ip], {0}
 298:	0d000002 	stceq	0, cr0, [r0, #-8]
 29c:	00000104 	andeq	r0, r0, r4, lsl #2
 2a0:	10018601 	andne	r8, r1, r1, lsl #12
 2a4:	00000031 	andeq	r0, r0, r1, lsr r0
 2a8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2ac:	00004113 	andeq	r4, r0, r3, lsl r1
 2b0:	01770100 	cmneq	r7, r0, lsl #2
 2b4:	00088c06 	andeq	r8, r8, r6, lsl #24
 2b8:	00006420 	andeq	r6, r0, r0, lsr #8
 2bc:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
 2c0:	14000002 	strne	r0, [r0], #-2
 2c4:	00776f72 	rsbseq	r6, r7, r2, ror pc
 2c8:	21017701 	tstcs	r1, r1, lsl #14
 2cc:	000000c0 	andeq	r0, r0, r0, asr #1
 2d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2d4:	00039e0e 	andeq	r9, r3, lr, lsl #28
 2d8:	01580100 	cmpeq	r8, r0, lsl #2
 2dc:	0007c806 	andeq	ip, r7, r6, lsl #16
 2e0:	0000c420 	andeq	ip, r0, r0, lsr #8
 2e4:	1a9c0100 	bne	fe7006ec <ball+0xde6ffb50>
 2e8:	14000003 	strne	r0, [r0], #-3
 2ec:	5801006f 	stmdapl	r1, {r0, r1, r2, r3, r5, r6}
 2f0:	01a41b01 			; <UNDEFINED> instruction: 0x01a41b01
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	019d0d6c 	orrseq	r0, sp, ip, ror #26
 2fc:	5a010000 	bpl	40304 <startup-0x1ffbfcfc>
 300:	00a90601 	adceq	r0, r9, r1, lsl #12
 304:	91020000 	mrsls	r0, (UNDEF: 2)
 308:	01a20d74 			; <UNDEFINED> instruction: 0x01a20d74
 30c:	5b010000 	blpl	40314 <startup-0x1ffbfcec>
 310:	00a90601 	adceq	r0, r9, r1, lsl #12
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	3f0e0070 	svccc	0x000e0070
 31c:	01000003 	tsteq	r0, r3
 320:	62060152 	andvs	r0, r6, #-2147483628	; 0x80000014
 324:	66200007 	strtvs	r0, [r0], -r7
 328:	01000000 	mrseq	r0, (UNDEF: 0)
 32c:	0003589c 	muleq	r3, ip, r8
 330:	006f1400 	rsbeq	r1, pc, r0, lsl #8
 334:	1c015201 	sfmne	f5, 4, [r1], {1}
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	106c9102 	rsbne	r9, ip, r2, lsl #2
 340:	2000076a 	andcs	r0, r0, sl, ror #14
 344:	00000054 	andeq	r0, r0, r4, asr r0
 348:	0100740f 	tsteq	r0, pc, lsl #8
 34c:	a90b0153 	stmdbge	fp, {r0, r1, r4, r6, r8}
 350:	02000000 	andeq	r0, r0, #0
 354:	00007491 	muleq	r0, r1, r4
 358:	0000650e 	andeq	r6, r0, lr, lsl #10
 35c:	014c0100 	mrseq	r0, (UNDEF: 92)
 360:	0006fc06 	andeq	pc, r6, r6, lsl #24
 364:	00006620 	andeq	r6, r0, r0, lsr #12
 368:	969c0100 	ldrls	r0, [ip], r0, lsl #2
 36c:	14000003 	strne	r0, [r0], #-3
 370:	4c01006f 	stcmi	0, cr0, [r1], {111}	; 0x6f
 374:	01a41b01 			; <UNDEFINED> instruction: 0x01a41b01
 378:	91020000 	mrsls	r0, (UNDEF: 2)
 37c:	0704106c 	streq	r1, [r4, -ip, rrx]
 380:	00542000 	subseq	r2, r4, r0
 384:	740f0000 	strvc	r0, [pc], #-0	; 38c <startup-0x1ffffc74>
 388:	014d0100 	mrseq	r0, (UNDEF: 93)
 38c:	0000a90b 	andeq	sl, r0, fp, lsl #18
 390:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 394:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
 398:	01000003 	tsteq	r0, r3
 39c:	dc060147 	stfles	f0, [r6], {71}	; 0x47
 3a0:	20200006 	eorcs	r0, r0, r6
 3a4:	01000000 	mrseq	r0, (UNDEF: 0)
 3a8:	0003dc9c 	muleq	r3, ip, ip
 3ac:	006f1400 	rsbeq	r1, pc, r0, lsl #8
 3b0:	20014701 	andcs	r4, r1, r1, lsl #14
 3b4:	000001a4 	andeq	r0, r0, r4, lsr #3
 3b8:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 3bc:	000003aa 	andeq	r0, r0, sl, lsr #7
 3c0:	27014701 	strcs	r4, [r1, -r1, lsl #14]
 3c4:	000000a9 	andeq	r0, r0, r9, lsr #1
 3c8:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
 3cc:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
 3d0:	33014701 	movwcc	r4, #5889	; 0x1701
 3d4:	000000a9 	andeq	r0, r0, r9, lsr #1
 3d8:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 3dc:	0000710e 	andeq	r7, r0, lr, lsl #2
 3e0:	011e0100 	tsteq	lr, r0, lsl #2
 3e4:	00052606 	andeq	r2, r5, r6, lsl #12
 3e8:	0001b620 	andeq	fp, r1, r0, lsr #12
 3ec:	709c0100 	addsvc	r0, ip, r0, lsl #2
 3f0:	14000004 	strne	r0, [r0], #-4
 3f4:	1e010078 	mcrne	0, 0, r0, cr1, cr8, {3}
 3f8:	00251501 	eoreq	r1, r5, r1, lsl #10
 3fc:	91020000 	mrsls	r0, (UNDEF: 2)
 400:	0079145f 	rsbseq	r1, r9, pc, asr r4
 404:	20011e01 	andcs	r1, r1, r1, lsl #28
 408:	00000025 	andeq	r0, r0, r5, lsr #32
 40c:	145e9102 	ldrbne	r9, [lr], #-258	; 0xfffffefe
 410:	00746573 	rsbseq	r6, r4, r3, ror r5
 414:	2b011e01 	blcs	47c20 <startup-0x1ffb83e0>
 418:	00000025 	andeq	r0, r0, r5, lsr #32
 41c:	0d5d9102 	ldfeqp	f1, [sp, #-8]
 420:	000002f5 	strdeq	r0, [r0], -r5
 424:	0a012001 	beq	48430 <startup-0x1ffb7bd0>
 428:	00000025 	andeq	r0, r0, r5, lsr #32
 42c:	0d679102 	stfeqp	f1, [r7, #-8]!
 430:	0000005a 	andeq	r0, r0, sl, asr r0
 434:	10012001 	andne	r2, r1, r1
 438:	00000025 	andeq	r0, r0, r5, lsr #32
 43c:	0d669102 	stfeqp	f1, [r6, #-8]!
 440:	0000014f 	andeq	r0, r0, pc, asr #2
 444:	1c012001 	stcne	0, cr2, [r1], {1}
 448:	00000025 	andeq	r0, r0, r5, lsr #32
 44c:	0d659102 	stfeqp	f1, [r5, #-8]!
 450:	000000f2 	strdeq	r0, [r0], -r2
 454:	24012001 	strcs	r2, [r1], #-1
 458:	00000025 	andeq	r0, r0, r5, lsr #32
 45c:	0d639102 	stfeqp	f1, [r3, #-8]!
 460:	00000339 	andeq	r0, r0, r9, lsr r3
 464:	0a012101 	beq	48870 <startup-0x1ffb7790>
 468:	00000025 	andeq	r0, r0, r5, lsr #32
 46c:	00649102 	rsbeq	r9, r4, r2, lsl #2
 470:	0003c00e 	andeq	ip, r3, lr
 474:	01140100 	tsteq	r4, r0, lsl #2
 478:	0004be06 	andeq	fp, r4, r6, lsl #28
 47c:	00006820 	andeq	r6, r0, r0, lsr #16
 480:	bc9c0100 	ldflts	f0, [ip], {0}
 484:	10000004 	andne	r0, r0, r4
 488:	200004c4 	andcs	r0, r0, r4, asr #9
 48c:	00000058 	andeq	r0, r0, r8, asr r0
 490:	00016d0d 	andeq	r6, r1, sp, lsl #26
 494:	01150100 	tsteq	r5, r0, lsl #2
 498:	0000250f 	andeq	r2, r0, pc, lsl #10
 49c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4a0:	0004e810 	andeq	lr, r4, r0, lsl r8
 4a4:	00002220 	andeq	r2, r0, r0, lsr #4
 4a8:	01be0d00 			; <UNDEFINED> instruction: 0x01be0d00
 4ac:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 4b0:	00251001 	eoreq	r1, r5, r1
 4b4:	91020000 	mrsls	r0, (UNDEF: 2)
 4b8:	00000076 	andeq	r0, r0, r6, ror r0
 4bc:	00034c16 	andeq	r4, r3, r6, lsl ip
 4c0:	01060100 	mrseq	r0, (UNDEF: 22)
 4c4:	00046806 	andeq	r6, r4, r6, lsl #16
 4c8:	00005620 	andeq	r5, r0, r0, lsr #12
 4cc:	119c0100 	orrsne	r0, ip, r0, lsl #2
 4d0:	00000305 	andeq	r0, r0, r5, lsl #6
 4d4:	09010101 	stmdbeq	r1, {r0, r8}
 4d8:	00000025 	andeq	r0, r0, r5, lsr #32
 4dc:	2000043e 	andcs	r0, r0, lr, lsr r4
 4e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 4e4:	04fb9c01 	ldrbteq	r9, [fp], #3073	; 0xc01
 4e8:	5a150000 	bpl	5404f0 <startup-0x1fabfb10>
 4ec:	01000000 	mrseq	r0, (UNDEF: 0)
 4f0:	25240101 	strcs	r0, [r4, #-257]!	; 0xfffffeff
 4f4:	02000000 	andeq	r0, r0, #0
 4f8:	17007791 			; <UNDEFINED> instruction: 0x17007791
 4fc:	00000177 	andeq	r0, r0, r7, ror r1
 500:	f806f901 			; <UNDEFINED> instruction: 0xf806f901
 504:	46200003 	strtmi	r0, [r0], -r3
 508:	01000000 	mrseq	r0, (UNDEF: 0)
 50c:	0005309c 	muleq	r5, ip, r0
 510:	03121800 	tsteq	r2, #0, 16
 514:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 518:	00002522 	andeq	r2, r0, r2, lsr #10
 51c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 520:	00005a18 	andeq	r5, r0, r8, lsl sl
 524:	30f90100 	rscscc	r0, r9, r0, lsl #2
 528:	00000025 	andeq	r0, r0, r5, lsr #32
 52c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 530:	00002b17 	andeq	r2, r0, r7, lsl fp
 534:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
 538:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 53c:	00000040 	andeq	r0, r0, r0, asr #32
 540:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xfffff3ff
 544:	39180000 	ldmdbcc	r8, {}	; <UNPREDICTABLE>
 548:	01000000 	mrseq	r0, (UNDEF: 0)
 54c:	002525f2 	strdeq	r2, [r5], -r2	; <UNPREDICTABLE>
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	005a1877 	subseq	r1, sl, r7, ror r8
 558:	f2010000 	vhadd.s8	d0, d1, d0
 55c:	00002536 	andeq	r2, r0, r6, lsr r5
 560:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 564:	01351700 	teqeq	r5, r0, lsl #14
 568:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
 56c:	00033806 	andeq	r3, r3, r6, lsl #16
 570:	00008020 	andeq	r8, r0, r0, lsr #32
 574:	9a9c0100 	bls	fe70097c <ball+0xde6ffde0>
 578:	18000005 	stmdane	r0, {r0, r2}
 57c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 580:	251dde01 	ldrcs	sp, [sp, #-3585]	; 0xfffff1ff
 584:	02000000 	andeq	r0, r0, #0
 588:	5a187791 	bpl	61e3d4 <startup-0x1f9e1c2c>
 58c:	01000000 	mrseq	r0, (UNDEF: 0)
 590:	00252cde 	ldrdeq	r2, [r5], -lr	; <UNPREDICTABLE>
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	74190076 	ldrvc	r0, [r9], #-118	; 0xffffff8a
 59c:	01000003 	tsteq	r0, r3
 5a0:	002509c8 	eoreq	r0, r5, r8, asr #19
 5a4:	02a80000 	adceq	r0, r8, #0
 5a8:	00902000 	addseq	r2, r0, r0
 5ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b0:	000005d3 	ldrdeq	r0, [r0], -r3
 5b4:	00005a18 	andeq	r5, r0, r8, lsl sl
 5b8:	1fc80100 	svcne	0x00c80100
 5bc:	00000025 	andeq	r0, r0, r5, lsr #32
 5c0:	1a6f9102 	bne	1be49d0 <startup-0x1e41b630>
 5c4:	00000143 	andeq	r0, r0, r3, asr #2
 5c8:	250ad001 	strcs	sp, [sl, #-1]
 5cc:	02000000 	andeq	r0, r0, #0
 5d0:	1b007791 	blne	1e41c <startup-0x1ffe1be4>
 5d4:	0000038b 	andeq	r0, r0, fp, lsl #7
 5d8:	4206b501 	andmi	fp, r6, #4194304	; 0x400000
 5dc:	66200002 	strtvs	r0, [r0], -r2
 5e0:	01000000 	mrseq	r0, (UNDEF: 0)
 5e4:	0053179c 			; <UNDEFINED> instruction: 0x0053179c
 5e8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
 5ec:	0001e806 	andeq	lr, r1, r6, lsl #16
 5f0:	00005a20 	andeq	r5, r0, r0, lsr #20
 5f4:	0b9c0100 	bleq	fe7009fc <ball+0xde6ffe60>
 5f8:	18000006 	stmdane	r0, {r1, r2}
 5fc:	0000005a 	andeq	r0, r0, sl, asr r0
 600:	2521a901 	strcs	sl, [r1, #-2305]!	; 0xfffff6ff
 604:	02000000 	andeq	r0, r0, #0
 608:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 60c:	00000156 	andeq	r0, r0, r6, asr r1
 610:	ac06a301 	stcge	3, cr10, [r6], {1}
 614:	3c200001 	stccc	0, cr0, [r0], #-4
 618:	01000000 	mrseq	r0, (UNDEF: 0)
 61c:	00062f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
 620:	00781d00 	rsbseq	r1, r8, r0, lsl #26
 624:	2526a301 	strcs	sl, [r6, #-769]!	; 0xfffffcff
 628:	02000000 	andeq	r0, r0, #0
 62c:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 630:	00000016 	andeq	r0, r0, r6, lsl r0
 634:	66069e01 	strvs	r9, [r6], -r1, lsl #28
 638:	46200001 	strtmi	r0, [r0], -r1
 63c:	01000000 	mrseq	r0, (UNDEF: 0)
 640:	0006539c 	muleq	r6, ip, r3
 644:	00781d00 	rsbseq	r1, r8, r0, lsl #26
 648:	25249e01 	strcs	r9, [r4, #-3585]!	; 0xfffff1ff
 64c:	02000000 	andeq	r0, r0, #0
 650:	17007791 			; <UNDEFINED> instruction: 0x17007791
 654:	0000000a 	andeq	r0, r0, sl
 658:	20069201 	andcs	r9, r6, r1, lsl #4
 65c:	46200001 	strtmi	r0, [r0], -r1
 660:	01000000 	mrseq	r0, (UNDEF: 0)
 664:	00068f9c 	muleq	r6, ip, pc	; <UNPREDICTABLE>
 668:	736d1d00 	cmnvc	sp, #0, 26
 66c:	1f920100 	svcne	0x00920100
 670:	000000c0 	andeq	r0, r0, r0, asr #1
 674:	106c9102 	rsbne	r9, ip, r2, lsl #2
 678:	2000013e 	andcs	r0, r0, lr, lsr r1
 67c:	0000001e 	andeq	r0, r0, lr, lsl r0
 680:	0100691e 	tsteq	r0, lr, lsl r9
 684:	00a90a97 	umlaleq	r0, r9, r7, sl
 688:	91020000 	mrsls	r0, (UNDEF: 2)
 68c:	17000074 	smlsdxne	r0, r4, r0, r0
 690:	00000077 	andeq	r0, r0, r7, ror r0
 694:	de068801 	cdple	8, 0, cr8, cr6, cr1, {0}
 698:	42200000 	eormi	r0, r0, #0
 69c:	01000000 	mrseq	r0, (UNDEF: 0)
 6a0:	0006cb9c 	muleq	r6, ip, fp
 6a4:	73751d00 	cmnvc	r5, #0, 26
 6a8:	1f880100 	svcne	0x00880100
 6ac:	000000c0 	andeq	r0, r0, r0, asr #1
 6b0:	106c9102 	rsbne	r9, ip, r2, lsl #2
 6b4:	200000fc 	strdcs	r0, [r0], -ip
 6b8:	0000001a 	andeq	r0, r0, sl, lsl r0
 6bc:	0100691e 	tsteq	r0, lr, lsl r9
 6c0:	00a90a8d 	adceq	r0, r9, sp, lsl #21
 6c4:	91020000 	mrsls	r0, (UNDEF: 2)
 6c8:	1b000074 	blne	8a0 <startup-0x1ffff760>
 6cc:	0000035e 	andeq	r0, r0, lr, asr r3
 6d0:	cc068301 	stcgt	3, cr8, [r6], {1}
 6d4:	12200000 	eorne	r0, r0, #0
 6d8:	01000000 	mrseq	r0, (UNDEF: 0)
 6dc:	01db1f9c 			; <UNDEFINED> instruction: 0x01db1f9c
 6e0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 6e4:	00008406 	andeq	r8, r0, r6, lsl #8
 6e8:	00004820 	andeq	r4, r0, r0, lsr #16
 6ec:	1f9c0100 	svcne	0x009c0100
 6f0:	000001c6 	andeq	r0, r0, r6, asr #3
 6f4:	10066501 	andne	r6, r6, r1, lsl #10
 6f8:	74200000 	strtvc	r0, [r0], #-0
 6fc:	01000000 	mrseq	r0, (UNDEF: 0)
 700:	02631f9c 	rsbeq	r1, r3, #156, 30	; 0x270
 704:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 708:	00000006 	andeq	r0, r0, r6
 70c:	00000c20 	andeq	r0, r0, r0, lsr #24
 710:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	01111349 	tsteq	r1, r9, asr #6
  f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f8:	12000013 	andne	r0, r0, #19
  fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	0b39053b 	bleq	e415f8 <startup-0x1f1bea08>
 108:	13491927 	movtne	r1, #39207	; 0x9927
 10c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 110:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 114:	00130119 	andseq	r0, r3, r9, lsl r1
 118:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 11c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 120:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 130:	00130119 	andseq	r0, r3, r9, lsl r1
 134:	00051400 	andeq	r1, r5, r0, lsl #8
 138:	0b3a0803 	bleq	e8214c <startup-0x1f17deb4>
 13c:	0b39053b 	bleq	e41630 <startup-0x1f1be9d0>
 140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 144:	05150000 	ldreq	r0, [r5, #-0]
 148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
 14c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 154:	16000018 			; <UNDEFINED> instruction: 0x16000018
 158:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	0b39053b 	bleq	e41654 <startup-0x1f1be9ac>
 164:	01111927 	tsteq	r1, r7, lsr #18
 168:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 16c:	00194296 	mulseq	r9, r6, r2
 170:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 174:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 178:	0b3b0b3a 	bleq	ec2e68 <startup-0x1f13d198>
 17c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	00051800 	andeq	r1, r5, r0, lsl #16
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b390b3b 	bleq	e42e88 <startup-0x1f1bd178>
 198:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 19c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 1a0:	03193f01 	tsteq	r9, #1, 30
 1a4:	3b0b3a0e 	blcc	2ce9e4 <startup-0x1fd3161c>
 1a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1ac:	11134919 	tstne	r3, r9, lsl r9
 1b0:	40061201 	andmi	r1, r6, r1, lsl #4
 1b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	0300341a 	movweq	r3, #1050	; 0x41a
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1c8:	00180213 	andseq	r0, r8, r3, lsl r2
 1cc:	002e1b00 	eoreq	r1, lr, r0, lsl #22
 1d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d4:	0b3b0b3a 	bleq	ec2ec4 <startup-0x1f13d13c>
 1d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1e4:	1c000019 	stcne	0, cr0, [r0], {25}
 1e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1ec:	0b3a0e03 	bleq	e83a00 <startup-0x1f17c600>
 1f0:	0b390b3b 	bleq	e42ee4 <startup-0x1f1bd11c>
 1f4:	01111927 	tsteq	r1, r7, lsr #18
 1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 200:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 204:	08030005 	stmdaeq	r3, {r0, r2}
 208:	0b3b0b3a 	bleq	ec2ef8 <startup-0x1f13d108>
 20c:	13490b39 	movtne	r0, #39737	; 0x9b39
 210:	00001802 	andeq	r1, r0, r2, lsl #16
 214:	0300341e 	movweq	r3, #1054	; 0x41e
 218:	3b0b3a08 	blcc	2cea40 <startup-0x1fd315c0>
 21c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 220:	00180213 	andseq	r0, r8, r3, lsl r2
 224:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 228:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 22c:	0b3b0b3a 	bleq	ec2f1c <startup-0x1f13d0e4>
 230:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 234:	06120111 			; <UNDEFINED> instruction: 0x06120111
 238:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 23c:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000a40 	andeq	r0, r0, r0, asr #20
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000a50 	andcs	r0, r0, r0, asr sl
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000057c 	andeq	r0, r0, ip, ror r5
   4:	00960003 	addseq	r0, r6, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	6f2f3731 	svcvs	0x002f3731
  58:	5f666f6c 	svcpl	0x00666f6c
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	2f746e65 	svccs	0x00746e65
  64:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  68:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  6c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
  70:	6170736b 	cmnvs	r0, fp, ror #6
  74:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  78:	622f666f 	eorvs	r6, pc, #116391936	; 0x6f00000
  7c:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  80:	4b687469 	blmi	1a1d22c <startup-0x1e5e2dd4>
  84:	61707965 	cmnvs	r0, r5, ror #18
  88:	62000064 	andvs	r0, r0, #100	; 0x64
  8c:	776c6c61 	strbvc	r6, [ip, -r1, ror #24]!
  90:	6b687469 	blvs	1a1d23c <startup-0x1e5e2dc4>
  94:	61707965 	cmnvs	r0, r5, ror #18
  98:	00632e64 	rsbeq	r2, r3, r4, ror #28
  9c:	00000001 	andeq	r0, r0, r1
  a0:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
  a4:	00000002 	andeq	r0, r0, r2
  a8:	00dd0320 	sbcseq	r0, sp, r0, lsr #6
  ac:	13010501 	movwne	r0, #5377	; 0x1501
  b0:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  b4:	01000302 	tsteq	r0, r2, lsl #6
  b8:	00140501 	andseq	r0, r4, r1, lsl #10
  bc:	00100205 	andseq	r0, r0, r5, lsl #4
  c0:	e4032000 	str	r2, [r3], #-0
  c4:	02050100 	andeq	r0, r5, #0, 2
  c8:	200e052f 	andcs	r0, lr, pc, lsr #10
  cc:	672f1105 	strvs	r1, [pc, -r5, lsl #2]!
  d0:	83761205 	cmnhi	r6, #1342177280	; 0x50000000
  d4:	675a1105 	ldrbvs	r1, [sl, -r5, lsl #2]
  d8:	057b0105 	ldrbeq	r0, [fp, #-261]!	; 0xfffffefb
  dc:	0205da17 	andeq	sp, r5, #94208	; 0x17000
  e0:	200c052f 	andcs	r0, ip, pc, lsr #10
  e4:	052f0205 	streq	r0, [pc, #-517]!	; fffffee7 <ball+0xdffff34b>
  e8:	0205200c 	andeq	r2, r5, #12
  ec:	200b052f 	andcs	r0, fp, pc, lsr #10
  f0:	052f0205 	streq	r0, [pc, #-517]!	; fffffef3 <ball+0xdffff357>
  f4:	0705200c 	streq	r2, [r5, -ip]
  f8:	000a052f 	andeq	r0, sl, pc, lsr #10
  fc:	20010402 	andcs	r0, r1, r2, lsl #8
 100:	02001905 	andeq	r1, r0, #81920	; 0x14000
 104:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 108:	04020007 	streq	r0, [r2], #-7
 10c:	02053c01 	andeq	r3, r5, #256	; 0x100
 110:	200c0522 	andcs	r0, ip, r2, lsr #10
 114:	052f0105 	streq	r0, [pc, #-261]!	; 17 <startup-0x1fffffe9>
 118:	0205ae17 	andeq	sl, r5, #368	; 0x170
 11c:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff1f5 <ball+0xdfffe659>
 120:	06053e22 	streq	r3, [r5], -r2, lsr #28
 124:	0a05834c 	beq	160e5c <startup-0x1fe9f1a4>
 128:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 12c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 130:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 134:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 138:	16052d03 	strne	r2, [r5], -r3, lsl #26
 13c:	01040200 	mrseq	r0, R12_usr
 140:	0013053c 	andseq	r0, r3, ip, lsr r5
 144:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 148:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 14c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 150:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 154:	4c06055a 	cfstr32mi	mvfx0, [r6], {90}	; 0x5a
 158:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 15c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 160:	04020003 	streq	r0, [r2], #-3
 164:	1a052103 	bne	148578 <startup-0x1feb7a88>
 168:	03040200 	movweq	r0, #16896	; 0x4200
 16c:	00130557 	andseq	r0, r3, r7, asr r5
 170:	3c010402 	cfstrscc	mvf0, [r1], {2}
 174:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 178:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 17c:	27053f01 	strcs	r3, [r5, -r1, lsl #30]
 180:	670f055c 	smlsdvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 184:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 188:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 18c:	29058302 	stmdbcs	r5, {r1, r8, r9, pc}
 190:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 194:	15080205 	strne	r0, [r8, #-517]	; 0xfffffdfb
 198:	05762e05 	ldrbeq	r2, [r6, #-3589]!	; 0xfffff1fb
 19c:	13056702 	movwne	r6, #22274	; 0x5702
 1a0:	030c05c1 	movweq	r0, #50625	; 0xc5c1
 1a4:	0305207a 	movweq	r2, #20602	; 0x507a
 1a8:	210f053c 	tstcs	pc, ip, lsr r5	; <UNPREDICTABLE>
 1ac:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 1b0:	09054b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, lr}
 1b4:	4b19053d 	blmi	6416b0 <startup-0x1f9be950>
 1b8:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 1bc:	01052113 	tsteq	r5, r3, lsl r1
 1c0:	3e200522 	cfsh64cc	mvdx0, mvdx0, #18
 1c4:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1b8 <startup-0x1ffffe48>
 1c8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1cc:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 1d0:	3d300305 	ldccc	3, cr0, [r0, #-20]!	; 0xffffffec
 1d4:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 1d8:	3c23052f 	cfstr32cc	mvfx0, [r3], #-188	; 0xffffff44
 1dc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 1e0:	04052a03 	streq	r2, [r5], #-2563	; 0xfffff5fd
 1e4:	23020525 	movwcs	r0, #9509	; 0x2525
 1e8:	200e053d 	andcs	r0, lr, sp, lsr r5
 1ec:	052f0105 	streq	r0, [pc, #-261]!	; ef <startup-0x1fffff11>
 1f0:	0205ae2b 	andeq	sl, r5, #688	; 0x2b0
 1f4:	0e053d67 	cdpeq	13, 0, cr3, cr5, cr7, {3}
 1f8:	2f020520 	svccs	0x00020520
 1fc:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 200:	052f1805 	streq	r1, [pc, #-2053]!	; fffffa03 <ball+0xdfffee67>
 204:	0205200a 	andeq	r2, r5, #10
 208:	0e053d4b 	cdpeq	13, 0, cr3, cr5, cr11, {2}
 20c:	2f050520 	svccs	0x00050520
 210:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 214:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 218:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 21c:	01053009 	tsteq	r5, r9
 220:	ca38053d 	bgt	e0171c <startup-0x1f1fe8e4>
 224:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 228:	02052010 	andeq	r2, r5, #16
 22c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 230:	3d11052f 	cfldr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 234:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 238:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 23c:	05053011 	streq	r3, [r5, #-17]	; 0xffffffef
 240:	2103054a 	tstcs	r3, sl, asr #10
 244:	3002053d 	andcc	r0, r2, sp, lsr r5
 248:	05201005 	streq	r1, [r0, #-5]!
 24c:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 250:	42053d01 	andmi	r3, r5, #1, 26	; 0x40
 254:	91020576 	tstls	r2, r6, ror r5
 258:	833d593d 	teqhi	sp, #999424	; 0xf4000
 25c:	054c3c05 	strbeq	r3, [ip, #-3077]	; 0xfffff3fb
 260:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 264:	05833d3d 	streq	r3, [r3, #3389]	; 0xd3d
 268:	02054c30 	andeq	r4, r5, #48, 24	; 0x3000
 26c:	59090567 	stmdbpl	r9, {r0, r1, r2, r5, r6, r8, sl}
 270:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 274:	02054c1f 	andeq	r4, r5, #7936	; 0x1f00
 278:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 27c:	4b4b3d3d 	blmi	12cf778 <startup-0x1ed30888>
 280:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 284:	22053d01 	andcs	r3, r5, #1, 26	; 0x40
 288:	3d0f053e 	cfstr32cc	mvfx0, [pc, #-248]	; 198 <startup-0x1ffffe68>
 28c:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 290:	059f2103 	ldreq	r2, [pc, #259]	; 39b <startup-0x1ffffc65>
 294:	03054b10 	movweq	r4, #23312	; 0x5b10
 298:	0004053c 	andeq	r0, r4, ip, lsr r5
 29c:	21030402 	tstcs	r3, r2, lsl #8
 2a0:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 2a4:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 2a8:	04020003 	streq	r0, [r2], #-3
 2ac:	27055801 	strcs	r5, [r5, -r1, lsl #16]
 2b0:	02040200 	andeq	r0, r4, #0, 4
 2b4:	00020547 	andeq	r0, r2, r7, asr #10
 2b8:	58010402 	stmdapl	r1, {r1, sl}
 2bc:	05510105 	ldrbeq	r0, [r1, #-261]	; 0xfffffefb
 2c0:	05055a30 	streq	r5, [r5, #-2608]	; 0xfffff5d0
 2c4:	001005e5 	andseq	r0, r0, r5, ror #11
 2c8:	58020402 	stmdapl	r2, {r1, sl}
 2cc:	055a1505 	ldrbeq	r1, [sl, #-1285]	; 0xfffffafb
 2d0:	0a053c1a 	beq	14f340 <startup-0x1feb0cc0>
 2d4:	3e0c0558 	cfrshl32cc	mvfx12, mvfx8, r0
 2d8:	e53c1005 	ldr	r1, [ip, #-5]!
 2dc:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2e0:	03052110 	movweq	r2, #20752	; 0x5110
 2e4:	2110054a 	tstcs	r0, sl, asr #10
 2e8:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2ec:	03052110 	movweq	r2, #20752	; 0x5110
 2f0:	2110054a 	tstcs	r0, sl, asr #10
 2f4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2f8:	03052110 	movweq	r2, #20752	; 0x5110
 2fc:	2110054a 	tstcs	r0, sl, asr #10
 300:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 304:	03052110 	movweq	r2, #20752	; 0x5110
 308:	0505214a 	streq	r2, [r5, #-330]	; 0xfffffeb6
 30c:	4b080522 	blmi	20179c <startup-0x1fdfe864>
 310:	05690505 	strbeq	r0, [r9, #-1285]!	; 0xfffffafb
 314:	0a054b0e 	beq	152f54 <startup-0x1fead0ac>
 318:	760e054b 	strvc	r0, [lr], -fp, asr #10
 31c:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 320:	05c96802 	strbeq	r6, [r9, #2050]	; 0x802
 324:	0205c910 	andeq	ip, r5, #16, 18	; 0x40000
 328:	ad050591 	cfstr32ge	mvfx0, [r5, #-580]	; 0xfffffdbc
 32c:	a04b0805 	subge	r0, fp, r5, lsl #16
 330:	05920205 	ldreq	r0, [r2, #517]	; 0x205
 334:	ac5d031e 	mrrcge	3, 1, r0, sp, cr14
 338:	24030105 	strcs	r0, [r3], #-261	; 0xfffffefb
 33c:	863b0520 	ldrthi	r0, [fp], -r0, lsr #10
 340:	3d670805 	stclcc	8, cr0, [r7, #-20]!	; 0xffffffec
 344:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 348:	0b054c1e 	bleq	1533c8 <startup-0x1feacc38>
 34c:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 350:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 354:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 358:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 35c:	1d052e03 	stcne	14, cr2, [r5, #-12]
 360:	03040200 	movweq	r0, #16896	; 0x4200
 364:	00030566 	andeq	r0, r3, r6, ror #10
 368:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 36c:	02002805 	andeq	r2, r0, #327680	; 0x50000
 370:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 374:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 378:	3a052e03 	bcc	14bb8c <startup-0x1feb4474>
 37c:	03040200 	movweq	r0, #16896	; 0x4200
 380:	00030566 	andeq	r0, r3, r6, ror #10
 384:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 388:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 38c:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 390:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 394:	1c053c01 	stcne	12, cr3, [r5], {1}
 398:	01040200 	mrseq	r0, R12_usr
 39c:	0002052e 	andeq	r0, r2, lr, lsr #10
 3a0:	20010402 	andcs	r0, r1, r2, lsl #8
 3a4:	053f0105 	ldreq	r0, [pc, #-261]!	; 2a7 <startup-0x1ffffd59>
 3a8:	0b055a1f 	bleq	156c2c <startup-0x1fea93d4>
 3ac:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 3b0:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 3b4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 3b8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 3bc:	1d052e03 	stcne	14, cr2, [r5, #-12]
 3c0:	03040200 	movweq	r0, #16896	; 0x4200
 3c4:	00030566 	andeq	r0, r3, r6, ror #10
 3c8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3cc:	02002805 	andeq	r2, r0, #327680	; 0x50000
 3d0:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 3d4:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 3d8:	3a052e03 	bcc	14bbec <startup-0x1feb4414>
 3dc:	03040200 	movweq	r0, #16896	; 0x4200
 3e0:	00030566 	andeq	r0, r3, r6, ror #10
 3e4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3e8:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 3ec:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 3f0:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 3f4:	1c053c01 	stcne	12, cr3, [r5], {1}
 3f8:	01040200 	mrseq	r0, R12_usr
 3fc:	0002052e 	andeq	r0, r2, lr, lsr #10
 400:	20010402 	andcs	r0, r1, r2, lsl #8
 404:	053f0105 	ldreq	r0, [pc, #-261]!	; 307 <startup-0x1ffffcf9>
 408:	02055a1e 	andeq	r5, r5, #122880	; 0x1e000
 40c:	4b0e054b 	blmi	381940 <startup-0x1fc7e6c0>
 410:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 414:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 418:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 41c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 420:	0c053005 	stceq	0, cr3, [r5], {5}
 424:	2e11053d 	mrccs	5, 0, r0, cr1, cr13, {1}
 428:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 42c:	14052f0b 	strne	r2, [r5], #-3851	; 0xfffff0f5
 430:	2e19054c 	cfmac32cs	mvfx0, mvfx9, mvfx12
 434:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 438:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
 43c:	2e12052f 	cfmul64cs	mvdx0, mvdx2, mvdx15
 440:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 444:	19052f14 	stmdbne	r5, {r2, r4, r8, r9, sl, fp, sp}
 448:	2011052e 	andscs	r0, r1, lr, lsr #10
 44c:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 450:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 454:	12053d0d 	andne	r3, r5, #832	; 0x340
 458:	2009052e 	andcs	r0, r9, lr, lsr #10
 45c:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff95f <ball+0xdfffedc3>
 460:	19054c14 	stmdbne	r5, {r2, r4, sl, fp, lr}
 464:	2011052e 	andscs	r0, r1, lr, lsr #10
 468:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 46c:	12052f0d 	andne	r2, r5, #13, 30	; 0x34
 470:	2009052e 	andcs	r0, r9, lr, lsr #10
 474:	052f1305 	streq	r1, [pc, #-773]!	; 177 <startup-0x1ffffe89>
 478:	10052e18 	andne	r2, r5, r8, lsl lr
 47c:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 480:	3f02053e 	svccc	0x0002053e
 484:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 488:	02054e26 	andeq	r4, r5, #608	; 0x260
 48c:	080b054c 	stmdaeq	fp, {r2, r3, r6, r8, sl}
 490:	201b052f 	andscs	r0, fp, pc, lsr #10
 494:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 498:	1b05210b 	blne	1488cc <startup-0x1feb7734>
 49c:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 4a0:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 4a4:	0305201b 	movweq	r2, #20507	; 0x501b
 4a8:	210b052e 	tstcs	fp, lr, lsr #10
 4ac:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 4b0:	0c052e03 	stceq	14, cr2, [r5], {3}
 4b4:	201c0521 	andscs	r0, ip, r1, lsr #10
 4b8:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
 4bc:	14058417 	strne	r8, [r5], #-1047	; 0xfffffbe9
 4c0:	20120541 	andscs	r0, r2, r1, asr #10
 4c4:	053d1605 	ldreq	r1, [sp, #-1541]!	; 0xfffff9fb
 4c8:	22054a05 	andcs	r4, r5, #20480	; 0x5000
 4cc:	01040200 	mrseq	r0, R12_usr
 4d0:	2f160520 	svccs	0x00160520
 4d4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 4d8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 4dc:	16052001 	strne	r2, [r5], -r1
 4e0:	4a05052f 	bmi	1419a4 <startup-0x1febe65c>
 4e4:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 4e8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4ec:	05052f16 	streq	r2, [r5, #-3862]	; 0xfffff0ea
 4f0:	0022054a 	eoreq	r0, r2, sl, asr #10
 4f4:	20010402 	andcs	r0, r1, r2, lsl #8
 4f8:	052f0905 	streq	r0, [pc, #-2309]!	; fffffbfb <ball+0xdffff05f>
 4fc:	1b052101 	blne	148908 <startup-0x1feb76f8>
 500:	3d100568 	cfldr32cc	mvfx0, [r0, #-416]	; 0xfffffe60
 504:	4b15056a 	blmi	541ab4 <startup-0x1fabe54c>
 508:	054a0205 	strbeq	r0, [sl, #-517]	; 0xfffffdfb
 50c:	09052103 	stmdbeq	r5, {r0, r1, r8, sp}
 510:	3c070567 	cfstr32cc	mvfx0, [r7], {103}	; 0x67
 514:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 518:	19054b12 	stmdbne	r5, {r1, r4, r8, r9, fp, lr}
 51c:	3c15053c 	cfldr32cc	mvfx0, [r5], {60}	; 0x3c
 520:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 524:	05540204 	ldrbeq	r0, [r4, #-516]	; 0xfffffdfc
 528:	04020002 	streq	r0, [r2], #-2
 52c:	055f6601 	ldrbeq	r6, [pc, #-1537]	; ffffff33 <ball+0xdffff397>
 530:	01053d09 	tsteq	r5, r9, lsl #26
 534:	01040200 	mrseq	r0, R12_usr
 538:	03110521 	tsteq	r1, #138412032	; 0x8400000
 53c:	0a05660a 	beq	159d6c <startup-0x1fea6294>
 540:	2f02053d 	svccs	0x0002053d
 544:	3504052f 	strcc	r0, [r4, #-1327]	; 0xfffffad1
 548:	3d2e0305 	stccc	3, cr0, [lr, #-20]!	; 0xffffffec
 54c:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 550:	0d055903 	vstreq.16	s10, [r5, #-6]	; <UNPREDICTABLE>
 554:	2e0c05c9 	cfsh32cs	mvfx0, mvfx12, #-23
 558:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 55c:	0c05210d 	stfeqs	f2, [r5], {13}
 560:	5804052e 	stmdapl	r4, {r1, r2, r3, r5, r8, sl}
 564:	05210d05 	streq	r0, [r1, #-3333]!	; 0xfffff2fb
 568:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 56c:	210d0558 	tstcs	sp, r8, asr r5
 570:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 574:	0b054a04 	bleq	152d8c <startup-0x1fead274>
 578:	02207803 	eoreq	r7, r0, #196608	; 0x30000
 57c:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	65640059 	strbvs	r0, [r4, #-89]!	; 0xffffffa7
   c:	5f79616c 	svcpl	0x0079616c
  10:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  14:	72670069 	rsbvc	r0, r7, #105	; 0x69
  18:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  1c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  20:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  24:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  28:	67007465 	strvs	r7, [r0, -r5, ror #8]
  2c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  30:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  34:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  38:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffec4 <ball+0xdffff328>
  3c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  40:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  44:	74634162 	strbtvc	r4, [r3], #-354	; 0xfffffe9e
  48:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
  4c:	6f6d0065 	svcvs	0x006d0065
  50:	73006576 	movwvc	r6, #1398	; 0x576
  54:	63656c65 	cmnvs	r5, #25856	; 0x6500
  58:	6f635f74 	svcvs	0x00635f74
  5c:	6f72746e 	svcvs	0x0072746e
  60:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  64:	61726400 	cmnvs	r2, r0, lsl #8
  68:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
  6c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  70:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  74:	64006c65 	strvs	r6, [r0], #-3173	; 0xfffff39b
  78:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  7c:	6b696d5f 	blvs	1a5b600 <startup-0x1e5a4a00>
  80:	43006f72 	movwmi	r6, #3954	; 0xf72
  84:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  88:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  8c:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  90:	6f445c73 	svcvs	0x00445c73
  94:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  98:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  9c:	5f746967 	svcpl	0x00746967
  a0:	6a6f7270 	bvs	1bdca68 <startup-0x1e423598>
  a4:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  a8:	6863535c 	stmdavs	r3!, {r2, r3, r4, r6, r8, r9, ip, lr}^
  ac:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  b0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  b4:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
  b8:	30544144 	subscc	r4, r4, r4, asr #2
  bc:	6f5c3731 	svcvs	0x005c3731
  c0:	5f666f6c 	svcpl	0x00666f6c
  c4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  c8:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
  cc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  d0:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  d4:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
  d8:	6170736b 	cmnvs	r0, fp, ror #6
  dc:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  e0:	625c666f 	subsvs	r6, ip, #116391936	; 0x6f00000
  e4:	576c6c61 	strbpl	r6, [ip, -r1, ror #24]!
  e8:	4b687469 	blmi	1a1d294 <startup-0x1e5e2d6c>
  ec:	61707965 	cmnvs	r0, r5, ror #18
  f0:	61640064 	cmnvs	r4, r4, rrx
  f4:	685f6174 	ldmdavs	pc, {r2, r4, r5, r6, r8, sp, lr}^	; <UNPREDICTABLE>
  f8:	65646c6f 	strbvs	r6, [r4, #-3183]!	; 0xfffff391
  fc:	4f500072 	svcmi	0x00500072
 100:	00544e49 	subseq	r4, r4, r9, asr #28
 104:	46776f72 	uhsub16mi	r6, r7, r2
 108:	526d6f72 	rsbpl	r6, sp, #456	; 0x1c8
 10c:	73696765 	cmnvc	r9, #26476544	; 0x1940000
 110:	00726574 	rsbseq	r6, r2, r4, ror r5
 114:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 118:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 11c:	61686320 	cmnvs	r8, r0, lsr #6
 120:	6f700072 	svcvs	0x00700072
 124:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 128:	5f6c6c61 	svcpl	0x006c6c61
 12c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff98 <ball+0xdffff3fc>
 130:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 134:	61726700 	cmnvs	r2, r0, lsl #14
 138:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 13c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 140:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
 144:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
 148:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
 14c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
 150:	6165725f 	cmnvs	r5, pc, asr r2
 154:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 158:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 15c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 160:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 164:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 168:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 16c:	67617000 	strbvs	r7, [r1, -r0]!
 170:	616d0065 	cmnvs	sp, r5, rrx
 174:	67006e69 	strvs	r6, [r0, -r9, ror #28]
 178:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 17c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 180:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 184:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 188:	656b0061 	strbvs	r0, [fp, #-97]!	; 0xffffff9f
 18c:	65476279 	strbvs	r6, [r7, #-633]	; 0xfffffd87
 190:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; ffffffc8 <ball+0xdffff42c>
 194:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 198:	74385f74 	ldrtvc	r5, [r8], #-3956	; 0xfffff08c
 19c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 1a0:	656e0078 	strbvs	r0, [lr, #-120]!	; 0xffffff88
 1a4:	75007977 	strvc	r7, [r0, #-2423]	; 0xfffff689
 1a8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1ac:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1b4:	6f654774 	svcvs	0x00654774
 1b8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 1bc:	64610079 	strbtvs	r0, [r1], #-121	; 0xffffff87
 1c0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 1c4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 1c8:	615f7469 	cmpvs	pc, r9, ror #8
 1cc:	73007070 	movwvc	r7, #112	; 0x70
 1d0:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1d4:	7a697300 	bvc	1a5cddc <startup-0x1e5a3224>
 1d8:	64007965 	strvs	r7, [r0], #-2405	; 0xfffff69b
 1dc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1e0:	3035325f 	eorscc	r3, r5, pc, asr r2
 1e4:	4700736e 	strmi	r7, [r0, -lr, ror #6]
 1e8:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 1ec:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
 1f0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 1f4:	31303220 	teqcc	r0, r0, lsr #4
 1f8:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
 1fc:	72282035 	eorvc	r2, r8, #53	; 0x35
 200:	61656c65 	cmnvs	r5, r5, ror #24
 204:	20296573 	eorcs	r6, r9, r3, ror r5
 208:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 20c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 210:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
 214:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 218:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 21c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 220:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 224:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
 228:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
 22c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 230:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 234:	6f6c666d 	svcvs	0x006c666d
 238:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 23c:	733d6962 	teqvc	sp, #1605632	; 0x188000
 240:	2074666f 	rsbscs	r6, r4, pc, ror #12
 244:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 248:	613d6863 	teqvs	sp, r3, ror #16
 24c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 250:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 254:	4f2d2067 	svcmi	0x002d2067
 258:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 25c:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 260:	73003939 	movwvc	r3, #2361	; 0x939
 264:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 268:	62007075 	andvs	r7, r0, #117	; 0x75
 26c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 270:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 274:	2f3a4300 	svccs	0x003a4300
 278:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 27c:	6c6f2f73 	stclvs	15, cr2, [pc], #-460	; b8 <startup-0x1fffff48>
 280:	2f73666f 	svccs	0x0073666f
 284:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 288:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 28c:	69672f73 	stmdbvs	r7!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 290:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 294:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 298:	532f7374 			; <UNDEFINED> instruction: 0x532f7374
 29c:	6f6f6863 	svcvs	0x006f6863
 2a0:	6f72506c 	svcvs	0x0072506c
 2a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2a8:	41442f73 	hvcmi	17139	; 0x42f3
 2ac:	37313054 			; <UNDEFINED> instruction: 0x37313054
 2b0:	6f6c6f2f 	svcvs	0x006c6f2f
 2b4:	6f635f66 	svcvs	0x00635f66
 2b8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 2bc:	6f432f74 	svcvs	0x00432f74
 2c0:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
 2c4:	772f6574 			; <UNDEFINED> instruction: 0x772f6574
 2c8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 2cc:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
 2d0:	666f6c4f 	strbtvs	r6, [pc], -pc, asr #24
 2d4:	6c61622f 	sfmvs	f6, 2, [r1], #-188	; 0xffffff44
 2d8:	7469576c 	strbtvc	r5, [r9], #-1900	; 0xfffff894
 2dc:	79654b68 	stmdbvc	r5!, {r3, r5, r6, r8, r9, fp, lr}^
 2e0:	2f646170 	svccs	0x00646170
 2e4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2e8:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 2ec:	7079656b 	rsbsvc	r6, r9, fp, ror #10
 2f0:	632e6461 			; <UNDEFINED> instruction: 0x632e6461
 2f4:	73616d00 	cmnvc	r1, #0, 26
 2f8:	656b006b 	strbvs	r0, [fp, #-107]!	; 0xffffff95
 2fc:	76006279 			; <UNDEFINED> instruction: 0x76006279
 300:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 304:	61726700 	cmnvs	r2, r0, lsl #14
 308:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 30c:	6165725f 	cmnvs	r5, pc, asr r2
 310:	61645f64 	cmnvs	r4, r4, ror #30
 314:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
 318:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 31c:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 320:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 324:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 328:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 32c:	73006465 	movwvc	r6, #1125	; 0x465
 330:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 334:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 338:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 33c:	63007865 	movwvs	r7, #2149	; 0x865
 340:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 344:	6a626f5f 	bvs	189c0c8 <startup-0x1e763f38>
 348:	00746365 	rsbseq	r6, r4, r5, ror #6
 34c:	70617267 	rsbvc	r7, r1, r7, ror #4
 350:	5f636968 	svcpl	0x00636968
 354:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 358:	7a696c61 	bvc	1a5b4e4 <startup-0x1e5a4b1c>
 35c:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
 360:	5f79616c 	svcpl	0x0079616c
 364:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 368:	4f740073 	svcmi	0x00740073
 36c:	70006a62 	andvc	r6, r0, r2, ror #20
 370:	0078736f 	rsbseq	r7, r8, pc, ror #6
 374:	70617267 	rsbvc	r7, r1, r7, ror #4
 378:	5f636968 	svcpl	0x00636968
 37c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 380:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 384:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 388:	67007374 	smlsdxvs	r0, r4, r3, r7
 38c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 390:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 394:	5f746961 	svcpl	0x00746961
 398:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 39c:	6f6d0079 	svcvs	0x006d0079
 3a0:	6f5f6576 	svcvs	0x005f6576
 3a4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3a8:	70730074 	rsbsvc	r0, r3, r4, ror r0
 3ac:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 3b0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 3b4:	00796465 	rsbseq	r6, r9, r5, ror #8
 3b8:	4a424f50 	bmi	1094100 <startup-0x1ef6bf00>
 3bc:	00544345 	subseq	r4, r4, r5, asr #6
 3c0:	70617267 	rsbvc	r7, r1, r7, ror #4
 3c4:	5f636968 	svcpl	0x00636968
 3c8:	61656c63 	cmnvs	r5, r3, ror #24
 3cc:	63735f72 	cmnvs	r3, #456	; 0x1c8
 3d0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000074 	andeq	r0, r0, r4, ror r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000084 	andcs	r0, r0, r4, lsl #1
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	200000cc 	andcs	r0, r0, ip, asr #1
  64:	00000012 	andeq	r0, r0, r2, lsl r0
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0000070d 	andeq	r0, r0, sp, lsl #14
  74:	0000001c 	andeq	r0, r0, ip, lsl r0
  78:	00000000 	andeq	r0, r0, r0
  7c:	200000de 	ldrdcs	r0, [r0], -lr
  80:	00000042 	andeq	r0, r0, r2, asr #32
  84:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  88:	41018e02 	tstmi	r1, r2, lsl #28
  8c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  90:	00000007 	andeq	r0, r0, r7
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	00000000 	andeq	r0, r0, r0
  9c:	20000120 	andcs	r0, r0, r0, lsr #2
  a0:	00000046 	andeq	r0, r0, r6, asr #32
  a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a8:	41018e02 	tstmi	r1, r2, lsl #28
  ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b0:	00000007 	andeq	r0, r0, r7
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	20000166 	andcs	r0, r0, r6, ror #2
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	200001ac 	andcs	r0, r0, ip, lsr #3
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	200001e8 	andcs	r0, r0, r8, ror #3
 100:	0000005a 	andeq	r0, r0, sl, asr r0
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000242 	andcs	r0, r0, r2, asr #4
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200002a8 	andcs	r0, r0, r8, lsr #5
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000338 	andcs	r0, r0, r8, lsr r3
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003f8 	strdcs	r0, [r0], -r8
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	2000043e 	andcs	r0, r0, lr, lsr r4
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000468 	andcs	r0, r0, r8, ror #8
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	200004be 			; <UNDEFINED> instruction: 0x200004be
 1f8:	00000068 	andeq	r0, r0, r8, rrx
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 208:	00000007 	andeq	r0, r0, r7
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	20000526 	andcs	r0, r0, r6, lsr #10
 218:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 21c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 220:	86048505 	strhi	r8, [r4], -r5, lsl #10
 224:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 228:	280e4101 	stmdacs	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200006dc 	ldrdcs	r0, [r0], -ip
 23c:	00000020 	andeq	r0, r0, r0, lsr #32
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	200006fc 	strdcs	r0, [r0], -ip
 25c:	00000066 	andeq	r0, r0, r6, rrx
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000762 	andcs	r0, r0, r2, ror #14
 27c:	00000066 	andeq	r0, r0, r6, rrx
 280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 284:	41018e02 	tstmi	r1, r2, lsl #28
 288:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 28c:	00000007 	andeq	r0, r0, r7
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	00000000 	andeq	r0, r0, r0
 298:	200007c8 	andcs	r0, r0, r8, asr #15
 29c:	000000c4 	andeq	r0, r0, r4, asr #1
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	2000088c 	andcs	r0, r0, ip, lsl #17
 2bc:	00000064 	andeq	r0, r0, r4, rrx
 2c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c4:	41018e02 	tstmi	r1, r2, lsl #28
 2c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2cc:	00000007 	andeq	r0, r0, r7
 2d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2dc:	00000054 	andeq	r0, r0, r4, asr r0
 2e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e4:	41018e02 	tstmi	r1, r2, lsl #28
 2e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2ec:	00000007 	andeq	r0, r0, r7
 2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f4:	00000000 	andeq	r0, r0, r0
 2f8:	20000944 	andcs	r0, r0, r4, asr #18
 2fc:	00000084 	andeq	r0, r0, r4, lsl #1
 300:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 304:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 308:	280e4101 	stmdacs	lr, {r0, r8, lr}
 30c:	00070d41 	andeq	r0, r7, r1, asr #26
 310:	0000001c 	andeq	r0, r0, ip, lsl r0
 314:	00000000 	andeq	r0, r0, r0
 318:	200009c8 	andcs	r0, r0, r8, asr #19
 31c:	00000088 	andeq	r0, r0, r8, lsl #1
 320:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 324:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 328:	180e4101 	stmdane	lr, {r0, r8, lr}
 32c:	00070d41 	andeq	r0, r7, r1, asr #26
 330:	0000000c 	andeq	r0, r0, ip
 334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 338:	7c010001 	stcvc	0, cr0, [r1], {1}
 33c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 340:	0000000c 	andeq	r0, r0, ip
 344:	00000330 	andeq	r0, r0, r0, lsr r3
 348:	20000a51 	andcs	r0, r0, r1, asr sl
 34c:	0000010a 	andeq	r0, r0, sl, lsl #2
