
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define B_RS 1
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9ca 	bl	2000039c <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
		* ((unsigned long *) 0x40023830) = 0x18;
		__asm__ volatile(" LDR R0, =0x08000209\n");
		__asm__ volatile(" BLX R0 \n");
	#endif
	
	* portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <delay_250ns>:





void delay_250ns(void){
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000002c:	4b0c      	ldr	r3, [pc, #48]	; (20000060 <delay_250ns+0x38>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000032:	4b0c      	ldr	r3, [pc, #48]	; (20000064 <delay_250ns+0x3c>)
20000034:	2229      	movs	r2, #41	; 0x29
20000036:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000038:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <delay_250ns+0x40>)
2000003a:	2200      	movs	r2, #0
2000003c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000003e:	4b08      	ldr	r3, [pc, #32]	; (20000060 <delay_250ns+0x38>)
20000040:	2205      	movs	r2, #5
20000042:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <delay_250ns+0x44>)
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	b2db      	uxtb	r3, r3
2000004c:	001a      	movs	r2, r3
2000004e:	2301      	movs	r3, #1
20000050:	4013      	ands	r3, r2
20000052:	d1f8      	bne.n	20000046 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000054:	4b02      	ldr	r3, [pc, #8]	; (20000060 <delay_250ns+0x38>)
20000056:	2200      	movs	r2, #0
20000058:	701a      	strb	r2, [r3, #0]
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	bd80      	pop	{r7, pc}
20000060:	e000e010 	and	lr, r0, r0, lsl r0
20000064:	e000e014 	and	lr, r0, r4, lsl r0
20000068:	e000e018 	and	lr, r0, r8, lsl r0
2000006c:	e000e012 	and	lr, r0, r2, lsl r0

20000070 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000070:	b580      	push	{r7, lr}
20000072:	b084      	sub	sp, #16
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
20000078:	687b      	ldr	r3, [r7, #4]
2000007a:	22fa      	movs	r2, #250	; 0xfa
2000007c:	0091      	lsls	r1, r2, #2
2000007e:	0018      	movs	r0, r3
20000080:	f000 f9d0 	bl	20000424 <__udivsi3>
20000084:	0003      	movs	r3, r0
20000086:	607b      	str	r3, [r7, #4]
		us ++;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	3301      	adds	r3, #1
2000008c:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
2000008e:	2300      	movs	r3, #0
20000090:	60fb      	str	r3, [r7, #12]
20000092:	e004      	b.n	2000009e <delay_mikro+0x2e>
		delay_250ns();
20000094:	f7ff ffc8 	bl	20000028 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000098:	68fb      	ldr	r3, [r7, #12]
2000009a:	3301      	adds	r3, #1
2000009c:	60fb      	str	r3, [r7, #12]
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	009a      	lsls	r2, r3, #2
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	429a      	cmp	r2, r3
200000a6:	d8f5      	bhi.n	20000094 <delay_mikro+0x24>
	}
}
200000a8:	46c0      	nop			; (mov r8, r8)
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46bd      	mov	sp, r7
200000ae:	b004      	add	sp, #16
200000b0:	bd80      	pop	{r7, pc}

200000b2 <delay_milli>:

void delay_milli(unsigned int ms){
200000b2:	b580      	push	{r7, lr}
200000b4:	b084      	sub	sp, #16
200000b6:	af00      	add	r7, sp, #0
200000b8:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000ba:	687b      	ldr	r3, [r7, #4]
200000bc:	22fa      	movs	r2, #250	; 0xfa
200000be:	0091      	lsls	r1, r2, #2
200000c0:	0018      	movs	r0, r3
200000c2:	f000 f9af 	bl	20000424 <__udivsi3>
200000c6:	0003      	movs	r3, r0
200000c8:	607b      	str	r3, [r7, #4]
		ms ++;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	3301      	adds	r3, #1
200000ce:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000d0:	2300      	movs	r3, #0
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	e007      	b.n	200000e6 <delay_milli+0x34>
		delay_mikro(1000);
200000d6:	23fa      	movs	r3, #250	; 0xfa
200000d8:	009b      	lsls	r3, r3, #2
200000da:	0018      	movs	r0, r3
200000dc:	f7ff ffc8 	bl	20000070 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	3301      	adds	r3, #1
200000e4:	60fb      	str	r3, [r7, #12]
200000e6:	68fb      	ldr	r3, [r7, #12]
200000e8:	687a      	ldr	r2, [r7, #4]
200000ea:	429a      	cmp	r2, r3
200000ec:	d8f3      	bhi.n	200000d6 <delay_milli+0x24>
	}
}
200000ee:	46c0      	nop			; (mov r8, r8)
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b004      	add	sp, #16
200000f6:	bd80      	pop	{r7, pc}

200000f8 <ascii_ctrl_bit_set>:




void ascii_ctrl_bit_set (unsigned char x) {
200000f8:	b580      	push	{r7, lr}
200000fa:	b082      	sub	sp, #8
200000fc:	af00      	add	r7, sp, #0
200000fe:	0002      	movs	r2, r0
20000100:	1dfb      	adds	r3, r7, #7
20000102:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= x | B_SELECT;
20000104:	4b07      	ldr	r3, [pc, #28]	; (20000124 <ascii_ctrl_bit_set+0x2c>)
20000106:	781b      	ldrb	r3, [r3, #0]
20000108:	b2da      	uxtb	r2, r3
2000010a:	1dfb      	adds	r3, r7, #7
2000010c:	781b      	ldrb	r3, [r3, #0]
2000010e:	4313      	orrs	r3, r2
20000110:	b2db      	uxtb	r3, r3
20000112:	4a04      	ldr	r2, [pc, #16]	; (20000124 <ascii_ctrl_bit_set+0x2c>)
20000114:	2104      	movs	r1, #4
20000116:	430b      	orrs	r3, r1
20000118:	b2db      	uxtb	r3, r3
2000011a:	7013      	strb	r3, [r2, #0]
}
2000011c:	46c0      	nop			; (mov r8, r8)
2000011e:	46bd      	mov	sp, r7
20000120:	b002      	add	sp, #8
20000122:	bd80      	pop	{r7, pc}
20000124:	40021014 	andmi	r1, r2, r4, lsl r0

20000128 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear (unsigned char x) {
20000128:	b580      	push	{r7, lr}
2000012a:	b084      	sub	sp, #16
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
20000134:	200f      	movs	r0, #15
20000136:	183b      	adds	r3, r7, r0
20000138:	1dfa      	adds	r2, r7, #7
2000013a:	7812      	ldrb	r2, [r2, #0]
2000013c:	43d2      	mvns	r2, r2
2000013e:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= notX;
20000140:	4b0a      	ldr	r3, [pc, #40]	; (2000016c <ascii_ctrl_bit_clear+0x44>)
20000142:	781b      	ldrb	r3, [r3, #0]
20000144:	b2db      	uxtb	r3, r3
20000146:	4909      	ldr	r1, [pc, #36]	; (2000016c <ascii_ctrl_bit_clear+0x44>)
20000148:	183a      	adds	r2, r7, r0
2000014a:	7812      	ldrb	r2, [r2, #0]
2000014c:	4013      	ands	r3, r2
2000014e:	b2db      	uxtb	r3, r3
20000150:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
20000152:	4b06      	ldr	r3, [pc, #24]	; (2000016c <ascii_ctrl_bit_clear+0x44>)
20000154:	781b      	ldrb	r3, [r3, #0]
20000156:	b2db      	uxtb	r3, r3
20000158:	4a04      	ldr	r2, [pc, #16]	; (2000016c <ascii_ctrl_bit_clear+0x44>)
2000015a:	2104      	movs	r1, #4
2000015c:	430b      	orrs	r3, r1
2000015e:	b2db      	uxtb	r3, r3
20000160:	7013      	strb	r3, [r2, #0]
}
20000162:	46c0      	nop			; (mov r8, r8)
20000164:	46bd      	mov	sp, r7
20000166:	b004      	add	sp, #16
20000168:	bd80      	pop	{r7, pc}
2000016a:	46c0      	nop			; (mov r8, r8)
2000016c:	40021014 	andmi	r1, r2, r4, lsl r0

20000170 <ascii_write_cmd>:

void ascii_write_cmd (unsigned char command) {
20000170:	b580      	push	{r7, lr}
20000172:	b082      	sub	sp, #8
20000174:	af00      	add	r7, sp, #0
20000176:	0002      	movs	r2, r0
20000178:	1dfb      	adds	r3, r7, #7
2000017a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
2000017c:	2001      	movs	r0, #1
2000017e:	f7ff ffd3 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000182:	2002      	movs	r0, #2
20000184:	f7ff ffd0 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	0018      	movs	r0, r3
2000018e:	f000 f819 	bl	200001c4 <ascii_write_controller>
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}

2000019a <ascii_write_data>:

void ascii_write_data (unsigned char data) {
2000019a:	b580      	push	{r7, lr}
2000019c:	b082      	sub	sp, #8
2000019e:	af00      	add	r7, sp, #0
200001a0:	0002      	movs	r2, r0
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001a6:	2001      	movs	r0, #1
200001a8:	f7ff ffa6 	bl	200000f8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
200001ac:	2002      	movs	r0, #2
200001ae:	f7ff ffbb 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
200001b2:	1dfb      	adds	r3, r7, #7
200001b4:	781b      	ldrb	r3, [r3, #0]
200001b6:	0018      	movs	r0, r3
200001b8:	f000 f804 	bl	200001c4 <ascii_write_controller>
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}

200001c4 <ascii_write_controller>:

void ascii_write_controller (unsigned char byte) {
200001c4:	b580      	push	{r7, lr}
200001c6:	b082      	sub	sp, #8
200001c8:	af00      	add	r7, sp, #0
200001ca:	0002      	movs	r2, r0
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	701a      	strb	r2, [r3, #0]
						//delay_250ns();								// BEHÖVS DELAYEN???
	ascii_ctrl_bit_set(B_E);
200001d0:	2040      	movs	r0, #64	; 0x40
200001d2:	f7ff ff91 	bl	200000f8 <ascii_ctrl_bit_set>
	* portOdrHigh = byte;
200001d6:	4a06      	ldr	r2, [pc, #24]	; (200001f0 <ascii_write_controller+0x2c>)
200001d8:	1dfb      	adds	r3, r7, #7
200001da:	781b      	ldrb	r3, [r3, #0]
200001dc:	7013      	strb	r3, [r2, #0]
						//delay_250ns();								// BEHÖVS DELAYEN???
	ascii_ctrl_bit_clear(B_E);
200001de:	2040      	movs	r0, #64	; 0x40
200001e0:	f7ff ffa2 	bl	20000128 <ascii_ctrl_bit_clear>
	delay_250ns();
200001e4:	f7ff ff20 	bl	20000028 <delay_250ns>
}
200001e8:	46c0      	nop			; (mov r8, r8)
200001ea:	46bd      	mov	sp, r7
200001ec:	b002      	add	sp, #8
200001ee:	bd80      	pop	{r7, pc}
200001f0:	40021015 	andmi	r1, r2, r5, lsl r0

200001f4 <ascii_read_controller>:

unsigned char ascii_read_controller (void) {
200001f4:	b580      	push	{r7, lr}
200001f6:	b082      	sub	sp, #8
200001f8:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
200001fa:	2040      	movs	r0, #64	; 0x40
200001fc:	f7ff ff7c 	bl	200000f8 <ascii_ctrl_bit_set>
	delay_250ns();
20000200:	f7ff ff12 	bl	20000028 <delay_250ns>
	delay_250ns();
20000204:	f7ff ff10 	bl	20000028 <delay_250ns>
	unsigned char returnValue = (* portIdrHigh);		// INDATA 
20000208:	4a06      	ldr	r2, [pc, #24]	; (20000224 <ascii_read_controller+0x30>)
2000020a:	1dfb      	adds	r3, r7, #7
2000020c:	7812      	ldrb	r2, [r2, #0]
2000020e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff89 	bl	20000128 <ascii_ctrl_bit_clear>
	return returnValue;
20000216:	1dfb      	adds	r3, r7, #7
20000218:	781b      	ldrb	r3, [r3, #0]
}
2000021a:	0018      	movs	r0, r3
2000021c:	46bd      	mov	sp, r7
2000021e:	b002      	add	sp, #8
20000220:	bd80      	pop	{r7, pc}
20000222:	46c0      	nop			; (mov r8, r8)
20000224:	40021011 	andmi	r1, r2, r1, lsl r0

20000228 <ascii_read_data>:


unsigned char ascii_read_data (void) {
20000228:	b590      	push	{r4, r7, lr}
2000022a:	b083      	sub	sp, #12
2000022c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
2000022e:	4b0b      	ldr	r3, [pc, #44]	; (2000025c <ascii_read_data+0x34>)
20000230:	4a0b      	ldr	r2, [pc, #44]	; (20000260 <ascii_read_data+0x38>)
20000232:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);						//OBS samma som ovan men SÄTTER RS här	
20000234:	2001      	movs	r0, #1
20000236:	f7ff ff5f 	bl	200000f8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000023a:	2002      	movs	r0, #2
2000023c:	f7ff ff5c 	bl	200000f8 <ascii_ctrl_bit_set>
	unsigned char returnValue = ascii_read_controller();
20000240:	1dfc      	adds	r4, r7, #7
20000242:	f7ff ffd7 	bl	200001f4 <ascii_read_controller>
20000246:	0003      	movs	r3, r0
20000248:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
2000024a:	4b04      	ldr	r3, [pc, #16]	; (2000025c <ascii_read_data+0x34>)
2000024c:	4a05      	ldr	r2, [pc, #20]	; (20000264 <ascii_read_data+0x3c>)
2000024e:	601a      	str	r2, [r3, #0]
	return returnValue;
20000250:	1dfb      	adds	r3, r7, #7
20000252:	781b      	ldrb	r3, [r3, #0]
}
20000254:	0018      	movs	r0, r3
20000256:	46bd      	mov	sp, r7
20000258:	b003      	add	sp, #12
2000025a:	bd90      	pop	{r4, r7, pc}
2000025c:	40021000 	andmi	r1, r2, r0
20000260:	00005555 	andeq	r5, r0, r5, asr r5
20000264:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000268 <ascii_read_status>:

unsigned char ascii_read_status (void) {
20000268:	b590      	push	{r4, r7, lr}
2000026a:	b083      	sub	sp, #12
2000026c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
2000026e:	4b0b      	ldr	r3, [pc, #44]	; (2000029c <ascii_read_status+0x34>)
20000270:	4a0b      	ldr	r2, [pc, #44]	; (200002a0 <ascii_read_status+0x38>)
20000272:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);						//OBS samma som ovan men CLEARAR RS här
20000274:	2001      	movs	r0, #1
20000276:	f7ff ff57 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000027a:	2002      	movs	r0, #2
2000027c:	f7ff ff3c 	bl	200000f8 <ascii_ctrl_bit_set>
	unsigned char returnValue = ascii_read_controller();
20000280:	1dfc      	adds	r4, r7, #7
20000282:	f7ff ffb7 	bl	200001f4 <ascii_read_controller>
20000286:	0003      	movs	r3, r0
20000288:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
2000028a:	4b04      	ldr	r3, [pc, #16]	; (2000029c <ascii_read_status+0x34>)
2000028c:	4a05      	ldr	r2, [pc, #20]	; (200002a4 <ascii_read_status+0x3c>)
2000028e:	601a      	str	r2, [r3, #0]
	return returnValue;
20000290:	1dfb      	adds	r3, r7, #7
20000292:	781b      	ldrb	r3, [r3, #0]
}
20000294:	0018      	movs	r0, r3
20000296:	46bd      	mov	sp, r7
20000298:	b003      	add	sp, #12
2000029a:	bd90      	pop	{r4, r7, pc}
2000029c:	40021000 	andmi	r1, r2, r0
200002a0:	00005555 	andeq	r5, r0, r5, asr r5
200002a4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002a8 <ascii_command>:

void ascii_command (unsigned char command) {
200002a8:	b580      	push	{r7, lr}
200002aa:	b082      	sub	sp, #8
200002ac:	af00      	add	r7, sp, #0
200002ae:	0002      	movs	r2, r0
200002b0:	1dfb      	adds	r3, r7, #7
200002b2:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status()  & 0x80) == 0x80 ){}
200002b4:	46c0      	nop			; (mov r8, r8)
200002b6:	f7ff ffd7 	bl	20000268 <ascii_read_status>
200002ba:	0003      	movs	r3, r0
200002bc:	001a      	movs	r2, r3
200002be:	2380      	movs	r3, #128	; 0x80
200002c0:	4013      	ands	r3, r2
200002c2:	2b80      	cmp	r3, #128	; 0x80
200002c4:	d0f7      	beq.n	200002b6 <ascii_command+0xe>
	delay_mikro(8);
200002c6:	2008      	movs	r0, #8
200002c8:	f7ff fed2 	bl	20000070 <delay_mikro>
	ascii_write_cmd(command);
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	0018      	movs	r0, r3
200002d2:	f7ff ff4d 	bl	20000170 <ascii_write_cmd>
	delay_milli(2);
200002d6:	2002      	movs	r0, #2
200002d8:	f7ff feeb 	bl	200000b2 <delay_milli>
}
200002dc:	46c0      	nop			; (mov r8, r8)
200002de:	46bd      	mov	sp, r7
200002e0:	b002      	add	sp, #8
200002e2:	bd80      	pop	{r7, pc}

200002e4 <ascii_init>:

void ascii_init (void) {
200002e4:	b580      	push	{r7, lr}
200002e6:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS);
200002e8:	2001      	movs	r0, #1
200002ea:	f7ff ff1d 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200002ee:	2002      	movs	r0, #2
200002f0:	f7ff ff1a 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_command(0x38);
200002f4:	2038      	movs	r0, #56	; 0x38
200002f6:	f7ff ffd7 	bl	200002a8 <ascii_command>
	ascii_command(0x0E);
200002fa:	200e      	movs	r0, #14
200002fc:	f7ff ffd4 	bl	200002a8 <ascii_command>
	ascii_command(0x01);
20000300:	2001      	movs	r0, #1
20000302:	f7ff ffd1 	bl	200002a8 <ascii_command>
	ascii_command(0x04);
20000306:	2004      	movs	r0, #4
20000308:	f7ff ffce 	bl	200002a8 <ascii_command>
}
2000030c:	46c0      	nop			; (mov r8, r8)
2000030e:	46bd      	mov	sp, r7
20000310:	bd80      	pop	{r7, pc}

20000312 <ascii_gotoxy>:

void ascii_gotoxy (int x, int y) {
20000312:	b580      	push	{r7, lr}
20000314:	b084      	sub	sp, #16
20000316:	af00      	add	r7, sp, #0
20000318:	6078      	str	r0, [r7, #4]
2000031a:	6039      	str	r1, [r7, #0]
	ascii_ctrl_bit_clear(B_RS);
2000031c:	2001      	movs	r0, #1
2000031e:	f7ff ff03 	bl	20000128 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000322:	2002      	movs	r0, #2
20000324:	f7ff ff00 	bl	20000128 <ascii_ctrl_bit_clear>
	unsigned char adress = x - 1;
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	b2da      	uxtb	r2, r3
2000032c:	210f      	movs	r1, #15
2000032e:	187b      	adds	r3, r7, r1
20000330:	3a01      	subs	r2, #1
20000332:	701a      	strb	r2, [r3, #0]
	if ( y == 2) {
20000334:	683b      	ldr	r3, [r7, #0]
20000336:	2b02      	cmp	r3, #2
20000338:	d104      	bne.n	20000344 <ascii_gotoxy+0x32>
		adress += 0x40;
2000033a:	187b      	adds	r3, r7, r1
2000033c:	187a      	adds	r2, r7, r1
2000033e:	7812      	ldrb	r2, [r2, #0]
20000340:	3240      	adds	r2, #64	; 0x40
20000342:	701a      	strb	r2, [r3, #0]
	}
	ascii_write_cmd(0x80 | adress);
20000344:	230f      	movs	r3, #15
20000346:	18fb      	adds	r3, r7, r3
20000348:	781b      	ldrb	r3, [r3, #0]
2000034a:	2280      	movs	r2, #128	; 0x80
2000034c:	4252      	negs	r2, r2
2000034e:	4313      	orrs	r3, r2
20000350:	b2db      	uxtb	r3, r3
20000352:	0018      	movs	r0, r3
20000354:	f7ff ff0c 	bl	20000170 <ascii_write_cmd>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b004      	add	sp, #16
2000035e:	bd80      	pop	{r7, pc}

20000360 <ascii_write_char>:

void ascii_write_char (unsigned char c) {
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status()  & 0x80) == 0x80 ){}
2000036c:	46c0      	nop			; (mov r8, r8)
2000036e:	f7ff ff7b 	bl	20000268 <ascii_read_status>
20000372:	0003      	movs	r3, r0
20000374:	001a      	movs	r2, r3
20000376:	2380      	movs	r3, #128	; 0x80
20000378:	4013      	ands	r3, r2
2000037a:	2b80      	cmp	r3, #128	; 0x80
2000037c:	d0f7      	beq.n	2000036e <ascii_write_char+0xe>
	delay_mikro(8);
2000037e:	2008      	movs	r0, #8
20000380:	f7ff fe76 	bl	20000070 <delay_mikro>
	ascii_write_data(c);
20000384:	1dfb      	adds	r3, r7, #7
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	0018      	movs	r0, r3
2000038a:	f7ff ff06 	bl	2000019a <ascii_write_data>
	delay_mikro(50);
2000038e:	2032      	movs	r0, #50	; 0x32
20000390:	f7ff fe6e 	bl	20000070 <delay_mikro>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <main>:





void main(void) {
2000039c:	b5b0      	push	{r4, r5, r7, lr}
2000039e:	b08a      	sub	sp, #40	; 0x28
200003a0:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Alfanumerisk ";
200003a2:	2414      	movs	r4, #20
200003a4:	193b      	adds	r3, r7, r4
200003a6:	4a1d      	ldr	r2, [pc, #116]	; (2000041c <main+0x80>)
200003a8:	ca23      	ldmia	r2!, {r0, r1, r5}
200003aa:	c323      	stmia	r3!, {r0, r1, r5}
200003ac:	8812      	ldrh	r2, [r2, #0]
200003ae:	801a      	strh	r2, [r3, #0]
	char test2[] = "Display - test";
200003b0:	1d3b      	adds	r3, r7, #4
200003b2:	4a1b      	ldr	r2, [pc, #108]	; (20000420 <main+0x84>)
200003b4:	ca23      	ldmia	r2!, {r0, r1, r5}
200003b6:	c323      	stmia	r3!, {r0, r1, r5}
200003b8:	8811      	ldrh	r1, [r2, #0]
200003ba:	8019      	strh	r1, [r3, #0]
200003bc:	7892      	ldrb	r2, [r2, #2]
200003be:	709a      	strb	r2, [r3, #2]
	
	init_app();
200003c0:	f7ff fe26 	bl	20000010 <init_app>
	ascii_init();
200003c4:	f7ff ff8e 	bl	200002e4 <ascii_init>
	ascii_gotoxy(1,1);
200003c8:	2101      	movs	r1, #1
200003ca:	2001      	movs	r0, #1
200003cc:	f7ff ffa1 	bl	20000312 <ascii_gotoxy>
	s = test1;
200003d0:	193b      	adds	r3, r7, r4
200003d2:	627b      	str	r3, [r7, #36]	; 0x24
	while (*s) {
200003d4:	e007      	b.n	200003e6 <main+0x4a>
		ascii_write_char(*s);
200003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003d8:	781b      	ldrb	r3, [r3, #0]
200003da:	0018      	movs	r0, r3
200003dc:	f7ff ffc0 	bl	20000360 <ascii_write_char>
		s++;
200003e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003e2:	3301      	adds	r3, #1
200003e4:	627b      	str	r3, [r7, #36]	; 0x24
	while (*s) {
200003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003e8:	781b      	ldrb	r3, [r3, #0]
200003ea:	2b00      	cmp	r3, #0
200003ec:	d1f3      	bne.n	200003d6 <main+0x3a>
	}
	ascii_gotoxy(1,2);
200003ee:	2102      	movs	r1, #2
200003f0:	2001      	movs	r0, #1
200003f2:	f7ff ff8e 	bl	20000312 <ascii_gotoxy>
	s = test2;
200003f6:	1d3b      	adds	r3, r7, #4
200003f8:	627b      	str	r3, [r7, #36]	; 0x24
	while (*s) {
200003fa:	e006      	b.n	2000040a <main+0x6e>
		ascii_write_char(*s++);
200003fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200003fe:	1c5a      	adds	r2, r3, #1
20000400:	627a      	str	r2, [r7, #36]	; 0x24
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	0018      	movs	r0, r3
20000406:	f7ff ffab 	bl	20000360 <ascii_write_char>
	while (*s) {
2000040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000040c:	781b      	ldrb	r3, [r3, #0]
2000040e:	2b00      	cmp	r3, #0
20000410:	d1f4      	bne.n	200003fc <main+0x60>
	}
	return 0;
20000412:	46c0      	nop			; (mov r8, r8)
}
20000414:	46bd      	mov	sp, r7
20000416:	b00a      	add	sp, #40	; 0x28
20000418:	bdb0      	pop	{r4, r5, r7, pc}
2000041a:	46c0      	nop			; (mov r8, r8)
2000041c:	2000053c 	andcs	r0, r0, ip, lsr r5
20000420:	2000054c 	andcs	r0, r0, ip, asr #10

20000424 <__udivsi3>:
20000424:	2200      	movs	r2, #0
20000426:	0843      	lsrs	r3, r0, #1
20000428:	428b      	cmp	r3, r1
2000042a:	d374      	bcc.n	20000516 <__udivsi3+0xf2>
2000042c:	0903      	lsrs	r3, r0, #4
2000042e:	428b      	cmp	r3, r1
20000430:	d35f      	bcc.n	200004f2 <__udivsi3+0xce>
20000432:	0a03      	lsrs	r3, r0, #8
20000434:	428b      	cmp	r3, r1
20000436:	d344      	bcc.n	200004c2 <__udivsi3+0x9e>
20000438:	0b03      	lsrs	r3, r0, #12
2000043a:	428b      	cmp	r3, r1
2000043c:	d328      	bcc.n	20000490 <__udivsi3+0x6c>
2000043e:	0c03      	lsrs	r3, r0, #16
20000440:	428b      	cmp	r3, r1
20000442:	d30d      	bcc.n	20000460 <__udivsi3+0x3c>
20000444:	22ff      	movs	r2, #255	; 0xff
20000446:	0209      	lsls	r1, r1, #8
20000448:	ba12      	rev	r2, r2
2000044a:	0c03      	lsrs	r3, r0, #16
2000044c:	428b      	cmp	r3, r1
2000044e:	d302      	bcc.n	20000456 <__udivsi3+0x32>
20000450:	1212      	asrs	r2, r2, #8
20000452:	0209      	lsls	r1, r1, #8
20000454:	d065      	beq.n	20000522 <__udivsi3+0xfe>
20000456:	0b03      	lsrs	r3, r0, #12
20000458:	428b      	cmp	r3, r1
2000045a:	d319      	bcc.n	20000490 <__udivsi3+0x6c>
2000045c:	e000      	b.n	20000460 <__udivsi3+0x3c>
2000045e:	0a09      	lsrs	r1, r1, #8
20000460:	0bc3      	lsrs	r3, r0, #15
20000462:	428b      	cmp	r3, r1
20000464:	d301      	bcc.n	2000046a <__udivsi3+0x46>
20000466:	03cb      	lsls	r3, r1, #15
20000468:	1ac0      	subs	r0, r0, r3
2000046a:	4152      	adcs	r2, r2
2000046c:	0b83      	lsrs	r3, r0, #14
2000046e:	428b      	cmp	r3, r1
20000470:	d301      	bcc.n	20000476 <__udivsi3+0x52>
20000472:	038b      	lsls	r3, r1, #14
20000474:	1ac0      	subs	r0, r0, r3
20000476:	4152      	adcs	r2, r2
20000478:	0b43      	lsrs	r3, r0, #13
2000047a:	428b      	cmp	r3, r1
2000047c:	d301      	bcc.n	20000482 <__udivsi3+0x5e>
2000047e:	034b      	lsls	r3, r1, #13
20000480:	1ac0      	subs	r0, r0, r3
20000482:	4152      	adcs	r2, r2
20000484:	0b03      	lsrs	r3, r0, #12
20000486:	428b      	cmp	r3, r1
20000488:	d301      	bcc.n	2000048e <__udivsi3+0x6a>
2000048a:	030b      	lsls	r3, r1, #12
2000048c:	1ac0      	subs	r0, r0, r3
2000048e:	4152      	adcs	r2, r2
20000490:	0ac3      	lsrs	r3, r0, #11
20000492:	428b      	cmp	r3, r1
20000494:	d301      	bcc.n	2000049a <__udivsi3+0x76>
20000496:	02cb      	lsls	r3, r1, #11
20000498:	1ac0      	subs	r0, r0, r3
2000049a:	4152      	adcs	r2, r2
2000049c:	0a83      	lsrs	r3, r0, #10
2000049e:	428b      	cmp	r3, r1
200004a0:	d301      	bcc.n	200004a6 <__udivsi3+0x82>
200004a2:	028b      	lsls	r3, r1, #10
200004a4:	1ac0      	subs	r0, r0, r3
200004a6:	4152      	adcs	r2, r2
200004a8:	0a43      	lsrs	r3, r0, #9
200004aa:	428b      	cmp	r3, r1
200004ac:	d301      	bcc.n	200004b2 <__udivsi3+0x8e>
200004ae:	024b      	lsls	r3, r1, #9
200004b0:	1ac0      	subs	r0, r0, r3
200004b2:	4152      	adcs	r2, r2
200004b4:	0a03      	lsrs	r3, r0, #8
200004b6:	428b      	cmp	r3, r1
200004b8:	d301      	bcc.n	200004be <__udivsi3+0x9a>
200004ba:	020b      	lsls	r3, r1, #8
200004bc:	1ac0      	subs	r0, r0, r3
200004be:	4152      	adcs	r2, r2
200004c0:	d2cd      	bcs.n	2000045e <__udivsi3+0x3a>
200004c2:	09c3      	lsrs	r3, r0, #7
200004c4:	428b      	cmp	r3, r1
200004c6:	d301      	bcc.n	200004cc <__udivsi3+0xa8>
200004c8:	01cb      	lsls	r3, r1, #7
200004ca:	1ac0      	subs	r0, r0, r3
200004cc:	4152      	adcs	r2, r2
200004ce:	0983      	lsrs	r3, r0, #6
200004d0:	428b      	cmp	r3, r1
200004d2:	d301      	bcc.n	200004d8 <__udivsi3+0xb4>
200004d4:	018b      	lsls	r3, r1, #6
200004d6:	1ac0      	subs	r0, r0, r3
200004d8:	4152      	adcs	r2, r2
200004da:	0943      	lsrs	r3, r0, #5
200004dc:	428b      	cmp	r3, r1
200004de:	d301      	bcc.n	200004e4 <__udivsi3+0xc0>
200004e0:	014b      	lsls	r3, r1, #5
200004e2:	1ac0      	subs	r0, r0, r3
200004e4:	4152      	adcs	r2, r2
200004e6:	0903      	lsrs	r3, r0, #4
200004e8:	428b      	cmp	r3, r1
200004ea:	d301      	bcc.n	200004f0 <__udivsi3+0xcc>
200004ec:	010b      	lsls	r3, r1, #4
200004ee:	1ac0      	subs	r0, r0, r3
200004f0:	4152      	adcs	r2, r2
200004f2:	08c3      	lsrs	r3, r0, #3
200004f4:	428b      	cmp	r3, r1
200004f6:	d301      	bcc.n	200004fc <__udivsi3+0xd8>
200004f8:	00cb      	lsls	r3, r1, #3
200004fa:	1ac0      	subs	r0, r0, r3
200004fc:	4152      	adcs	r2, r2
200004fe:	0883      	lsrs	r3, r0, #2
20000500:	428b      	cmp	r3, r1
20000502:	d301      	bcc.n	20000508 <__udivsi3+0xe4>
20000504:	008b      	lsls	r3, r1, #2
20000506:	1ac0      	subs	r0, r0, r3
20000508:	4152      	adcs	r2, r2
2000050a:	0843      	lsrs	r3, r0, #1
2000050c:	428b      	cmp	r3, r1
2000050e:	d301      	bcc.n	20000514 <__udivsi3+0xf0>
20000510:	004b      	lsls	r3, r1, #1
20000512:	1ac0      	subs	r0, r0, r3
20000514:	4152      	adcs	r2, r2
20000516:	1a41      	subs	r1, r0, r1
20000518:	d200      	bcs.n	2000051c <__udivsi3+0xf8>
2000051a:	4601      	mov	r1, r0
2000051c:	4152      	adcs	r2, r2
2000051e:	4610      	mov	r0, r2
20000520:	4770      	bx	lr
20000522:	e7ff      	b.n	20000524 <__udivsi3+0x100>
20000524:	b501      	push	{r0, lr}
20000526:	2000      	movs	r0, #0
20000528:	f000 f806 	bl	20000538 <__aeabi_idiv0>
2000052c:	bd02      	pop	{r1, pc}
2000052e:	46c0      	nop			; (mov r8, r8)

20000530 <__aeabi_uidivmod>:
20000530:	2900      	cmp	r1, #0
20000532:	d0f7      	beq.n	20000524 <__udivsi3+0x100>
20000534:	e776      	b.n	20000424 <__udivsi3>
20000536:	4770      	bx	lr

20000538 <__aeabi_idiv0>:
20000538:	4770      	bx	lr
2000053a:	46c0      	nop			; (mov r8, r8)
2000053c:	61666c41 	cmnvs	r6, r1, asr #24
20000540:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
20000544:	6b736972 	blvs	21cdab14 <__aeabi_idiv0+0x1cda5dc>
20000548:	00000020 	andeq	r0, r0, r0, lsr #32
2000054c:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000550:	2079616c 	rsbscs	r6, r9, ip, ror #2
20000554:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000558:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000353 	andeq	r0, r0, r3, asr r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000e0 	andeq	r0, r0, r0, ror #1
  10:	0000600c 	andeq	r6, r0, ip
  14:	0001d200 	andeq	sp, r1, r0, lsl #4
	...
  24:	023f0200 	eorseq	r0, pc, #0, 4
  28:	b2010000 	andlt	r0, r1, #0
  2c:	00039c06 	andeq	r9, r3, r6, lsl #24
  30:	00008820 	andeq	r8, r0, r0, lsr #16
  34:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
  38:	03000000 	movweq	r0, #0
  3c:	b3010073 	movwlt	r0, #4211	; 0x1073
  40:	00006708 	andeq	r6, r0, r8, lsl #14
  44:	6c910200 	lfmvs	f0, 4, [r1], {0}
  48:	00024e04 	andeq	r4, r2, r4, lsl #28
  4c:	07b40100 	ldreq	r0, [r4, r0, lsl #2]!
  50:	00000074 	andeq	r0, r0, r4, ror r0
  54:	045c9102 	ldrbeq	r9, [ip], #-258	; 0xfffffefe
  58:	00000254 	andeq	r0, r0, r4, asr r2
  5c:	8b07b501 	blhi	1ed468 <startup-0x1fe12b98>
  60:	02000000 	andeq	r0, r0, #0
  64:	05004c91 	streq	r4, [r0, #-3217]	; 0xfffff36f
  68:	00006d04 	andeq	r6, r0, r4, lsl #26
  6c:	08010600 	stmdaeq	r1, {r9, sl}
  70:	00000044 	andeq	r0, r0, r4, asr #32
  74:	00006d07 	andeq	r6, r0, r7, lsl #26
  78:	00008400 	andeq	r8, r0, r0, lsl #8
  7c:	00840800 	addeq	r0, r4, r0, lsl #16
  80:	000d0000 	andeq	r0, sp, r0
  84:	19070406 	stmdbne	r7, {r1, r2, sl}
  88:	07000000 	streq	r0, [r0, -r0]
  8c:	0000006d 	andeq	r0, r0, sp, rrx
  90:	0000009b 	muleq	r0, fp, r0
  94:	00008408 	andeq	r8, r0, r8, lsl #8
  98:	02000e00 	andeq	r0, r0, #0, 28
  9c:	0000027e 	andeq	r0, r0, lr, ror r2
  a0:	6006a701 	andvs	sl, r6, r1, lsl #14
  a4:	3c200003 	stccc	0, cr0, [r0], #-12
  a8:	01000000 	mrseq	r0, (UNDEF: 0)
  ac:	0000bf9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
  b0:	00630900 	rsbeq	r0, r3, r0, lsl #18
  b4:	bf26a701 	svclt	0x0026a701
  b8:	02000000 	andeq	r0, r0, #0
  bc:	06007791 			; <UNDEFINED> instruction: 0x06007791
  c0:	003b0801 	eorseq	r0, fp, r1, lsl #16
  c4:	0c020000 	stceq	0, cr0, [r2], {-0}
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	0312069d 	tsteq	r2, #164626432	; 0x9d00000
  d0:	004e2000 	subeq	r2, lr, r0
  d4:	9c010000 	stcls	0, cr0, [r1], {-0}
  d8:	00000106 	andeq	r0, r0, r6, lsl #2
  dc:	01007809 	tsteq	r0, r9, lsl #16
  e0:	0106189d 			; <UNDEFINED> instruction: 0x0106189d
  e4:	91020000 	mrsls	r0, (UNDEF: 2)
  e8:	0079096c 	rsbseq	r0, r9, ip, ror #18
  ec:	061f9d01 	ldreq	r9, [pc], -r1, lsl #26
  f0:	02000001 	andeq	r0, r0, #1
  f4:	7f046891 	svcvc	0x00046891
  f8:	01000001 	tsteq	r0, r1
  fc:	00bf10a0 	adcseq	r1, pc, r0, lsr #1
 100:	91020000 	mrsls	r0, (UNDEF: 2)
 104:	040a0077 	streq	r0, [sl], #-119	; 0xffffff89
 108:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 10c:	02a20b00 	adceq	r0, r2, #0, 22
 110:	94010000 	strls	r0, [r1], #-0
 114:	0002e406 	andeq	lr, r2, r6, lsl #8
 118:	00002e20 	andeq	r2, r0, r0, lsr #28
 11c:	029c0100 	addseq	r0, ip, #0, 2
 120:	0000019e 	muleq	r0, lr, r1
 124:	a8068d01 	stmdage	r6, {r0, r8, sl, fp, pc}
 128:	3c200002 	stccc	0, cr0, [r0], #-8
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	0001459c 	muleq	r1, ip, r5
 134:	01a40c00 			; <UNDEFINED> instruction: 0x01a40c00
 138:	8d010000 	stchi	0, cr0, [r1, #-0]
 13c:	0000bf23 	andeq	fp, r0, r3, lsr #30
 140:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 144:	015c0d00 	cmpeq	ip, r0, lsl #26
 148:	84010000 	strhi	r0, [r1], #-0
 14c:	0000bf0f 	andeq	fp, r0, pc, lsl #30
 150:	00026800 	andeq	r6, r2, r0, lsl #16
 154:	00004020 	andeq	r4, r0, r0, lsr #32
 158:	6f9c0100 	svcvs	0x009c0100
 15c:	04000001 	streq	r0, [r0], #-1
 160:	00000192 	muleq	r0, r2, r1
 164:	bf108801 	svclt	0x00108801
 168:	02000000 	andeq	r0, r0, #0
 16c:	0d006f91 	stceq	15, cr6, [r0, #-580]	; 0xfffffdbc
 170:	000001c2 	andeq	r0, r0, r2, asr #3
 174:	bf0f7b01 	svclt	0x000f7b01
 178:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 17c:	40200002 	eormi	r0, r0, r2
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	0001999c 	muleq	r1, ip, r9
 188:	01920400 	orrseq	r0, r2, r0, lsl #8
 18c:	7f010000 	svcvc	0x00010000
 190:	0000bf10 	andeq	fp, r0, r0, lsl pc
 194:	6f910200 	svcvs	0x00910200
 198:	01ac0d00 			; <UNDEFINED> instruction: 0x01ac0d00
 19c:	71010000 	mrsvc	r0, (UNDEF: 1)
 1a0:	0000bf0f 	andeq	fp, r0, pc, lsl #30
 1a4:	0001f400 	andeq	pc, r1, r0, lsl #8
 1a8:	00003420 	andeq	r3, r0, r0, lsr #8
 1ac:	c39c0100 	orrsgt	r0, ip, #0, 2
 1b0:	04000001 	streq	r0, [r0], #-1
 1b4:	00000192 	muleq	r0, r2, r1
 1b8:	bf107501 	svclt	0x00107501
 1bc:	02000000 	andeq	r0, r0, #0
 1c0:	02007791 	andeq	r7, r0, #38010880	; 0x2440000
 1c4:	00000049 	andeq	r0, r0, r9, asr #32
 1c8:	c4066801 	strgt	r6, [r6], #-2049	; 0xfffff7ff
 1cc:	30200001 	eorcc	r0, r0, r1
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	0001e99c 	muleq	r1, ip, r9
 1d8:	02440c00 	subeq	r0, r4, #0, 24
 1dc:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 1e0:	0000bf2c 	andeq	fp, r0, ip, lsr #30
 1e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1e8:	016e0200 	cmneq	lr, r0, lsl #4
 1ec:	62010000 	andvs	r0, r1, #0
 1f0:	00019a06 	andeq	r9, r1, r6, lsl #20
 1f4:	00002a20 	andeq	r2, r0, r0, lsr #20
 1f8:	1d9c0100 	ldfnes	f0, [ip]
 1fc:	0c000002 	stceq	0, cr0, [r0], {2}
 200:	000001cd 	andeq	r0, r0, sp, asr #3
 204:	bf266201 	svclt	0x00266201
 208:	02000000 	andeq	r0, r0, #0
 20c:	490e7791 	stmdbmi	lr, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 210:	01000000 	mrseq	r0, (UNDEF: 0)
 214:	0106025f 	tsteq	r6, pc, asr r2
 218:	000f0000 	andeq	r0, pc, r0
 21c:	02620200 	rsbeq	r0, r2, #0, 4
 220:	5c010000 	stcpl	0, cr0, [r1], {-0}
 224:	00017006 	andeq	r7, r1, r6
 228:	00002a20 	andeq	r2, r0, r0, lsr #20
 22c:	519c0100 	orrspl	r0, ip, r0, lsl #2
 230:	0c000002 	stceq	0, cr0, [r0], {2}
 234:	000001a4 	andeq	r0, r0, r4, lsr #3
 238:	bf255c01 	svclt	0x00255c01
 23c:	02000000 	andeq	r0, r0, #0
 240:	490e7791 	stmdbmi	lr, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 244:	01000000 	mrseq	r0, (UNDEF: 0)
 248:	0106025f 	tsteq	r6, pc, asr r2
 24c:	000f0000 	andeq	r0, pc, r0
 250:	00261000 	eoreq	r1, r6, r0
 254:	56010000 	strpl	r0, [r1], -r0
 258:	00012806 	andeq	r2, r1, r6, lsl #16
 25c:	00004820 	andeq	r4, r0, r0, lsr #16
 260:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
 264:	09000002 	stmdbeq	r0, {r1}
 268:	56010078 			; <UNDEFINED> instruction: 0x56010078
 26c:	0000bf2a 	andeq	fp, r0, sl, lsr #30
 270:	6f910200 	svcvs	0x00910200
 274:	00024904 	andeq	r4, r2, r4, lsl #18
 278:	07570100 	ldrbeq	r0, [r7, -r0, lsl #2]
 27c:	0000006d 	andeq	r0, r0, sp, rrx
 280:	00779102 	rsbseq	r9, r7, r2, lsl #2
 284:	00028f10 	andeq	r8, r2, r0, lsl pc
 288:	06520100 	ldrbeq	r0, [r2], -r0, lsl #2
 28c:	200000f8 	strdcs	r0, [r0], -r8
 290:	00000030 	andeq	r0, r0, r0, lsr r0
 294:	02a89c01 	adceq	r9, r8, #256	; 0x100
 298:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
 29c:	28520100 	ldmdacs	r2, {r8}^
 2a0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 2a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2a8:	00000002 	andeq	r0, r0, r2
 2ac:	06450100 	strbeq	r0, [r5], -r0, lsl #2
 2b0:	200000b2 	strhcs	r0, [r0], -r2
 2b4:	00000046 	andeq	r0, r0, r6, asr #32
 2b8:	02e49c01 	rsceq	r9, r4, #256	; 0x100
 2bc:	6d090000 	stcvs	0, cr0, [r9, #-0]
 2c0:	45010073 	strmi	r0, [r1, #-115]	; 0xffffff8d
 2c4:	0000841f 	andeq	r8, r0, pc, lsl r4
 2c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 2cc:	0000d011 	andeq	sp, r0, r1, lsl r0
 2d0:	00001e20 	andeq	r1, r0, r0, lsr #28
 2d4:	00690300 	rsbeq	r0, r9, r0, lsl #6
 2d8:	060a4a01 	streq	r4, [sl], -r1, lsl #20
 2dc:	02000001 	andeq	r0, r0, #1
 2e0:	00007491 	muleq	r0, r1, r4
 2e4:	00027202 	andeq	r7, r2, r2, lsl #4
 2e8:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
 2ec:	20000070 	andcs	r0, r0, r0, ror r0
 2f0:	00000042 	andeq	r0, r0, r2, asr #32
 2f4:	03209c01 			; <UNDEFINED> instruction: 0x03209c01
 2f8:	75090000 	strvc	r0, [r9, #-0]
 2fc:	3b010073 	blcc	404d0 <startup-0x1ffbfb30>
 300:	0000841f 	andeq	r8, r0, pc, lsl r4
 304:	6c910200 	lfmvs	f0, 4, [r1], {0}
 308:	00008e11 	andeq	r8, r0, r1, lsl lr
 30c:	00001a20 	andeq	r1, r0, r0, lsr #20
 310:	00690300 	rsbeq	r0, r9, r0, lsl #6
 314:	060a4001 	streq	r4, [sl], -r1
 318:	02000001 	andeq	r0, r0, #1
 31c:	00007491 	muleq	r0, r1, r4
 320:	00018612 	andeq	r8, r1, r2, lsl r6
 324:	06310100 	ldrteq	r0, [r1], -r0, lsl #2
 328:	20000028 	andcs	r0, r0, r8, lsr #32
 32c:	00000048 	andeq	r0, r0, r8, asr #32
 330:	d7129c01 	ldrle	r9, [r2, -r1, lsl #24]
 334:	01000000 	mrseq	r0, (UNDEF: 0)
 338:	00100623 	andseq	r0, r0, r3, lsr #12
 33c:	00182000 	andseq	r2, r8, r0
 340:	9c010000 	stcls	0, cr0, [r1], {-0}
 344:	00025a12 	andeq	r5, r2, r2, lsl sl
 348:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
 34c:	20000000 	andcs	r0, r0, r0
 350:	0000000c 	andeq	r0, r0, ip
 354:	Address 0x00000354 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	01111927 	tsteq	r1, r7, lsr #18
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	01194296 			; <UNDEFINED> instruction: 0x01194296
  2c:	03000013 	movweq	r0, #19
  30:	08030034 	stmdaeq	r3, {r2, r4, r5}
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13490b39 	movtne	r0, #39737	; 0x9b39
  3c:	00001802 	andeq	r1, r0, r2, lsl #16
  40:	03003404 	movweq	r3, #1028	; 0x404
  44:	3b0b3a0e 	blcc	2ce884 <startup-0x1fd3177c>
  48:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  4c:	00180213 	andseq	r0, r8, r3, lsl r2
  50:	000f0500 	andeq	r0, pc, r0, lsl #10
  54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  58:	24060000 	strcs	r0, [r6], #-0
  5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010700 	tsteq	r1, r0, lsl #14
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21080000 	mrscs	r0, (UNDEF: 8)
  70:	2f134900 	svccs	0x00134900
  74:	0900000b 	stmdbeq	r0, {r0, r1, r3}
  78:	08030005 	stmdaeq	r3, {r0, r2}
  7c:	0b3b0b3a 	bleq	ec2d6c <startup-0x1f13d294>
  80:	13490b39 	movtne	r0, #39737	; 0x9b39
  84:	00001802 	andeq	r1, r0, r2, lsl #16
  88:	0b00240a 	bleq	90b8 <startup-0x1fff6f48>
  8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  90:	0b000008 	bleq	b8 <startup-0x1fffff48>
  94:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <startup-0x1f17c754>
  9c:	0b390b3b 	bleq	e42d90 <startup-0x1f1bd270>
  a0:	01111927 	tsteq	r1, r7, lsr #18
  a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a8:	00194296 	mulseq	r9, r6, r2
  ac:	00050c00 	andeq	r0, r5, r0, lsl #24
  b0:	0b3a0e03 	bleq	e838c4 <startup-0x1f17c73c>
  b4:	0b390b3b 	bleq	e42da8 <startup-0x1f1bd258>
  b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  bc:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  c0:	03193f01 	tsteq	r9, #1, 30
  c4:	3b0b3a0e 	blcc	2ce904 <startup-0x1fd316fc>
  c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  cc:	11134919 	tstne	r3, r9, lsl r9
  d0:	40061201 	andmi	r1, r6, r1, lsl #4
  d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  d8:	00001301 	andeq	r1, r0, r1, lsl #6
  dc:	3f012e0e 	svccc	0x00012e0e
  e0:	3a0e0319 	bcc	380d4c <startup-0x1fc7f2b4>
  e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  ec:	0f000019 	svceq	0x00000019
  f0:	00000018 	andeq	r0, r0, r8, lsl r0
  f4:	3f012e10 	svccc	0x00012e10
  f8:	3a0e0319 	bcc	380d64 <startup-0x1fc7f29c>
  fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	1119270b 	tstne	r9, fp, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 10c:	00001301 	andeq	r1, r0, r1, lsl #6
 110:	11010b11 	tstne	r1, r1, lsl fp
 114:	00061201 	andeq	r1, r6, r1, lsl #4
 118:	002e1200 	eoreq	r1, lr, r0, lsl #4
 11c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 120:	0b3b0b3a 	bleq	ec2e10 <startup-0x1f13d1f0>
 124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 130:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000414 	andeq	r0, r0, r4, lsl r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000424 	andcs	r0, r0, r4, lsr #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000290 	muleq	r0, r0, r2
   4:	008d0003 	addeq	r0, sp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	6f2f3731 	svcvs	0x002f3731
  58:	5f666f6c 	svcpl	0x00666f6c
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	2f746e65 	svccs	0x00746e65
  64:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  68:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  6c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
  70:	6170736b 	cmnvs	r0, fp, ror #6
  74:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  78:	612f666f 			; <UNDEFINED> instruction: 0x612f666f
  7c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  80:	70736964 	rsbsvc	r6, r3, r4, ror #18
  84:	0079616c 	rsbseq	r6, r9, ip, ror #2
  88:	61747300 	cmnvs	r4, r0, lsl #6
  8c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  90:	0100632e 	tsteq	r0, lr, lsr #6
  94:	05000000 	streq	r0, [r0, #-0]
  98:	02050001 	andeq	r0, r5, #1
  9c:	20000000 	andcs	r0, r0, r0
  a0:	13011b03 	movwne	r1, #6915	; 0x1b03
  a4:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  a8:	01000302 	tsteq	r0, r2, lsl #6
  ac:	00140501 	andseq	r0, r4, r1, lsl #10
  b0:	00100205 	andseq	r0, r0, r5, lsl #4
  b4:	22032000 	andcs	r2, r3, #0
  b8:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
  bc:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
  c0:	17052f01 	strne	r2, [r5, -r1, lsl #30]
  c4:	2f02057a 	svccs	0x0002057a
  c8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  cc:	0c052f02 	stceq	15, cr2, [r5], {2}
  d0:	2f020520 	svccs	0x00020520
  d4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
  d8:	0c052f02 	stceq	15, cr2, [r5], {2}
  dc:	2f070520 	svccs	0x00070520
  e0:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  e8:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
  ec:	07053c01 	streq	r3, [r5, -r1, lsl #24]
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	2202053c 	andcs	r0, r2, #60, 10	; 0xf000000
  f8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  fc:	22052f01 	andcs	r2, r5, #1, 30
 100:	4c0605ae 	cfstr32mi	mvfx0, [r6], {174}	; 0xae
 104:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 108:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 10c:	04020003 	streq	r0, [r2], #-3
 110:	1c052103 	stfnes	f2, [r5], {3}
 114:	03040200 	movweq	r0, #16896	; 0x4200
 118:	0016052d 	andseq	r0, r6, sp, lsr #10
 11c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 120:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 124:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 128:	04020002 	streq	r0, [r2], #-2
 12c:	01052001 	tsteq	r5, r1
 130:	5a220531 	bpl	8815fc <startup-0x1f77ea04>
 134:	834c0605 	movthi	r0, #50693	; 0xc605
 138:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 13c:	03052e02 	movweq	r2, #24066	; 0x5e02
 140:	03040200 	movweq	r0, #16896	; 0x4200
 144:	001a0521 	andseq	r0, sl, r1, lsr #10
 148:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 14c:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 150:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 154:	04020002 	streq	r0, [r2], #-2
 158:	01052001 	tsteq	r5, r1
 15c:	5d2b053f 	cfstr32pl	mvfx0, [fp, #-252]!	; 0xffffff04
 160:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 164:	2d05bb01 	vstrcs	d11, [r5, #-4]
 168:	67070568 	strvs	r0, [r7, -r8, ror #10]
 16c:	91670f05 	cmnls	r7, r5, lsl #30
 170:	05830105 	streq	r0, [r3, #261]	; 0x105
 174:	0205762e 	andeq	r7, r5, #48234496	; 0x2e00000
 178:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 17c:	2c055901 			; <UNDEFINED> instruction: 0x2c055901
 180:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 184:	01053d3d 	tsteq	r5, sp, lsr sp
 188:	4c320559 	cfldr32mi	mvfx0, [r2], #-356	; 0xfffffe9c
 18c:	3d680205 	sfmcc	f0, 2, [r8, #-20]!	; 0xffffffec
 190:	05201005 	streq	r1, [r0, #-5]!
 194:	053d3e02 	ldreq	r3, [sp, #-3586]!	; 0xfffff1fe
 198:	2c052f01 	stccs	15, cr2, [r5], {1}
 19c:	3d020568 	cfstr32cc	mvfx0, [r2, #-416]	; 0xfffffe60
 1a0:	1f052f3d 	svcne	0x00052f3d
 1a4:	2010052f 	andscs	r0, r0, pc, lsr #10
 1a8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 1ac:	01053d09 	tsteq	r5, r9, lsl #26
 1b0:	7726052f 	strvc	r0, [r6, -pc, lsr #10]!
 1b4:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 1b8:	0205200e 	andeq	r2, r5, #14
 1bc:	1e053d2f 	cdpne	13, 0, cr3, cr5, cr15, {1}
 1c0:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 1c4:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1c8:	01052f09 	tsteq	r5, r9, lsl #30
 1cc:	a028052f 	eorge	r0, r8, pc, lsr #10
 1d0:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 1d4:	0205200e 	andeq	r2, r5, #14
 1d8:	1e053d2f 	cdpne	13, 0, cr3, cr5, cr15, {1}
 1dc:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 1e0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1e4:	01052f09 	tsteq	r5, r9, lsl #30
 1e8:	a02c052f 	eorge	r0, ip, pc, lsr #10
 1ec:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
 1f0:	0402000a 	streq	r0, [r2], #-10
 1f4:	1f052001 	svcne	0x00052001
 1f8:	01040200 	mrseq	r0, R12_usr
 1fc:	0008053c 	andeq	r0, r8, ip, lsr r5
 200:	3c010402 	cfstrscc	mvf0, [r1], {2}
 204:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1f8 <startup-0x1ffffe08>
 208:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 20c:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
 210:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 214:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 218:	22053d01 	andcs	r3, r5, #1, 26	; 0x40
 21c:	5902053e 	stmdbpl	r2, {r1, r2, r3, r4, r5, r8, sl}
 220:	3d1b053d 	cfldr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
 224:	052e1005 	streq	r1, [lr, #-5]!
 228:	0a054b05 	beq	152e44 <startup-0x1fead1bc>
 22c:	5a02053d 	bpl	81728 <startup-0x1ff7e8d8>
 230:	059f0105 	ldreq	r0, [pc, #261]	; 33d <startup-0x1ffffcc3>
 234:	08054c29 	stmdaeq	r5, {r0, r3, r5, sl, fp, lr}
 238:	000a0567 	andeq	r0, sl, r7, ror #10
 23c:	20010402 	andcs	r0, r1, r2, lsl #8
 240:	02001f05 	andeq	r1, r0, #5, 30
 244:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 248:	04020008 	streq	r0, [r2], #-8
 24c:	02053c01 	andeq	r3, r5, #256	; 0x100
 250:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 254:	11053d01 	tstne	r5, r1, lsl #26
 258:	3e070550 	cfrshl32cc	mvfx7, mvfx0, r0
 25c:	84020575 	strhi	r0, [r2], #-1397	; 0xfffffa8b
 260:	04052f2f 	streq	r2, [r5], #-3887	; 0xfffff0d1
 264:	2f08054b 	svccs	0x0008054b
 268:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 26c:	09055904 	stmdbeq	r5, {r2, r8, fp, ip, lr}
 270:	2e08053a 	mcrcs	5, 0, r0, cr8, cr10, {1}
 274:	05320205 	ldreq	r0, [r2, #-517]!	; 0xfffffdfb
 278:	08054b04 	stmdaeq	r5, {r2, r8, r9, fp, lr}
 27c:	2116052f 	tstcs	r6, pc, lsr #10
 280:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 284:	08054909 	stmdaeq	r5, {r0, r3, r8, fp, lr}
 288:	3109052e 	tstcc	r9, lr, lsr #10
 28c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 290:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  24:	73610074 	cmnvc	r1, #116	; 0x74
  28:	5f696963 	svcpl	0x00696963
  2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  38:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
  3c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  40:	2064656e 	rsbcs	r6, r4, lr, ror #10
  44:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  48:	63736100 	cmnvs	r3, #0, 2
  4c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  50:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  54:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  58:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffe90 <__aeabi_idiv0+0xdffff958>
  5c:	0072656c 	rsbseq	r6, r2, ip, ror #10
  60:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff625 <__aeabi_idiv0+0xdffff0ed>
  64:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  68:	6f6c6f2f 	svcvs	0x006c6f2f
  6c:	442f7366 	strtmi	r7, [pc], #-870	; 74 <startup-0x1fffff8c>
  70:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  74:	73746e65 	cmnvc	r4, #1616	; 0x650
  78:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
  7c:	6f72705f 	svcvs	0x0072705f
  80:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  84:	63532f73 	cmpvs	r3, #460	; 0x1cc
  88:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; fffffef0 <__aeabi_idiv0+0xdffff9b8>
  8c:	6a6f7250 	bvs	1bdc9d4 <startup-0x1e42362c>
  90:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  94:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  98:	2f373130 	svccs	0x00373130
  9c:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  a0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  a4:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
  a8:	646f432f 	strbtvs	r4, [pc], #-815	; b0 <startup-0x1fffff50>
  ac:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  b0:	6f772f65 	svcvs	0x00772f65
  b4:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  b8:	4f656361 	svcmi	0x00656361
  bc:	2f666f6c 	svccs	0x00666f6c
  c0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  c4:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
  c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  cc:	6174732f 	cmnvs	r4, pc, lsr #6
  d0:	70757472 	rsbsvc	r7, r5, r2, ror r4
  d4:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
  d8:	5f74696e 	svcpl	0x0074696e
  dc:	00707061 	rsbseq	r7, r0, r1, rrx
  e0:	20554e47 	subscs	r4, r5, r7, asr #28
  e4:	20393943 	eorscs	r3, r9, r3, asr #18
  e8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  ec:	30322031 	eorscc	r2, r2, r1, lsr r0
  f0:	30313931 	eorscc	r3, r1, r1, lsr r9
  f4:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  f8:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  fc:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 100:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 104:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 108:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 10c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 110:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 114:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 118:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 11c:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 120:	205d3939 	subscs	r3, sp, r9, lsr r9
 124:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 128:	20626d75 	rsbcs	r6, r2, r5, ror sp
 12c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 130:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 134:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 138:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 13c:	616d2d20 	cmnvs	sp, r0, lsr #26
 140:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 144:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 148:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 14c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 150:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 154:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 158:	00393963 	eorseq	r3, r9, r3, ror #18
 15c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 160:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 164:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 168:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 16c:	73610073 	cmnvc	r1, #115	; 0x73
 170:	5f696963 	svcpl	0x00696963
 174:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 178:	61645f65 	cmnvs	r4, r5, ror #30
 17c:	61006174 	tstvs	r0, r4, ror r1
 180:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 184:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 188:	5f79616c 	svcpl	0x0079616c
 18c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 190:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 194:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 198:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 19c:	73610065 	cmnvc	r1, #101	; 0x65
 1a0:	5f696963 	svcpl	0x00696963
 1a4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1ac:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1b0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 1b4:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 1b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1c0:	73610072 	cmnvc	r1, #114	; 0x72
 1c4:	5f696963 	svcpl	0x00696963
 1c8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1cc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 1d0:	3a430061 	bcc	10c035c <startup-0x1ef3fca4>
 1d4:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 1d8:	6f5c7372 	svcvs	0x005c7372
 1dc:	73666f6c 	cmnvc	r6, #108, 30	; 0x1b0
 1e0:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 1e4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 1e8:	675c7374 			; <UNDEFINED> instruction: 0x675c7374
 1ec:	705f7469 	subsvc	r7, pc, r9, ror #8
 1f0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 1f4:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 1f8:	6f686353 	svcvs	0x00686353
 1fc:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 200:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 204:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 208:	31305441 	teqcc	r0, r1, asr #8
 20c:	6c6f5c37 	stclvs	12, cr5, [pc], #-220	; 138 <startup-0x1ffffec8>
 210:	635f666f 	cmpvs	pc, #116391936	; 0x6f00000
 214:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 218:	435c746e 	cmpmi	ip, #1845493760	; 0x6e000000
 21c:	4c65646f 	cfstrdmi	mvd6, [r5], #-444	; 0xfffffe44
 220:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 224:	6b726f77 	blvs	1c9c008 <startup-0x1e363ff8>
 228:	63617073 	cmnvs	r1, #115	; 0x73
 22c:	6f6c4f65 	svcvs	0x006c4f65
 230:	73615c66 	cmnvc	r1, #26112	; 0x6600
 234:	64696963 	strbtvs	r6, [r9], #-2403	; 0xfffff69d
 238:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 23c:	6d007961 	vstrvs.16	s14, [r0, #-194]	; 0xffffff3e	; <UNPREDICTABLE>
 240:	006e6961 	rsbeq	r6, lr, r1, ror #18
 244:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 248:	746f6e00 	strbtvc	r6, [pc], #-3584	; 250 <startup-0x1ffffdb0>
 24c:	65740058 	ldrbvs	r0, [r4, #-88]!	; 0xffffffa8
 250:	00317473 	eorseq	r7, r1, r3, ror r4
 254:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 258:	74730032 	ldrbtvc	r0, [r3], #-50	; 0xffffffce
 25c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 260:	73610070 	cmnvc	r1, #112	; 0x70
 264:	5f696963 	svcpl	0x00696963
 268:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 26c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 270:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 274:	5f79616c 	svcpl	0x0079616c
 278:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 27c:	7361006f 	cmnvc	r1, #111	; 0x6f
 280:	5f696963 	svcpl	0x00696963
 284:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 288:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 28c:	61007261 	tstvs	r0, r1, ror #4
 290:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 294:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 298:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 29c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 2a0:	73610074 	cmnvc	r1, #116	; 0x74
 2a4:	5f696963 	svcpl	0x00696963
 2a8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000042 	andeq	r0, r0, r2, asr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000b2 	strhcs	r0, [r0], -r2
  84:	00000046 	andeq	r0, r0, r6, asr #32
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000f8 	strdcs	r0, [r0], -r8
  a4:	00000030 	andeq	r0, r0, r0, lsr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000128 	andcs	r0, r0, r8, lsr #2
  c4:	00000048 	andeq	r0, r0, r8, asr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000170 	andcs	r0, r0, r0, ror r1
  e4:	0000002a 	andeq	r0, r0, sl, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	2000019a 	mulcs	r0, sl, r1
 104:	0000002a 	andeq	r0, r0, sl, lsr #32
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001c4 	andcs	r0, r0, r4, asr #3
 124:	00000030 	andeq	r0, r0, r0, lsr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200001f4 	strdcs	r0, [r0], -r4
 144:	00000034 	andeq	r0, r0, r4, lsr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000228 	andcs	r0, r0, r8, lsr #4
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 16c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 170:	180e4101 	stmdane	lr, {r0, r8, lr}
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000268 	andcs	r0, r0, r8, ror #4
 184:	00000040 	andeq	r0, r0, r0, asr #32
 188:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 18c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 190:	180e4101 	stmdane	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200002a8 	andcs	r0, r0, r8, lsr #5
 1a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200002e4 	andcs	r0, r0, r4, ror #5
 1c4:	0000002e 	andeq	r0, r0, lr, lsr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000312 	andcs	r0, r0, r2, lsl r3
 1e0:	0000004e 	andeq	r0, r0, lr, asr #32
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	20000360 	andcs	r0, r0, r0, ror #6
 200:	0000003c 	andeq	r0, r0, ip, lsr r0
 204:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 208:	41018e02 	tstmi	r1, r2, lsl #28
 20c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 210:	00000007 	andeq	r0, r0, r7
 214:	00000020 	andeq	r0, r0, r0, lsr #32
 218:	00000000 	andeq	r0, r0, r0
 21c:	2000039c 	mulcs	r0, ip, r3
 220:	00000088 	andeq	r0, r0, r8, lsl #1
 224:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 228:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000000c 	andeq	r0, r0, ip
 23c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 240:	7c010001 	stcvc	0, cr0, [r1], {1}
 244:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 248:	0000000c 	andeq	r0, r0, ip
 24c:	00000238 	andeq	r0, r0, r8, lsr r2
 250:	20000425 	andcs	r0, r0, r5, lsr #8
 254:	0000010a 	andeq	r0, r0, sl, lsl #2
