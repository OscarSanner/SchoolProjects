
./Debug/asciidisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f95f 	bl	200002c6 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* GPIO_MODER &= 0xFFFF0000;
20000014:	4b07      	ldr	r3, [pc, #28]	; (20000034 <init_app+0x24>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b06      	ldr	r3, [pc, #24]	; (20000034 <init_app+0x24>)
2000001a:	0c12      	lsrs	r2, r2, #16
2000001c:	0412      	lsls	r2, r2, #16
2000001e:	601a      	str	r2, [r3, #0]
	* GPIO_MODER |= 0x5555;
20000020:	4b04      	ldr	r3, [pc, #16]	; (20000034 <init_app+0x24>)
20000022:	681a      	ldr	r2, [r3, #0]
20000024:	4b03      	ldr	r3, [pc, #12]	; (20000034 <init_app+0x24>)
20000026:	4904      	ldr	r1, [pc, #16]	; (20000038 <init_app+0x28>)
20000028:	430a      	orrs	r2, r1
2000002a:	601a      	str	r2, [r3, #0]
}
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	46bd      	mov	sp, r7
20000030:	bd80      	pop	{r7, pc}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	40021000 	andmi	r1, r2, r0
20000038:	00005555 	andeq	r5, r0, r5, asr r5

2000003c <delay_250ns>:

void delay_250ns(void){
2000003c:	b580      	push	{r7, lr}
2000003e:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000040:	4b0c      	ldr	r3, [pc, #48]	; (20000074 <delay_250ns+0x38>)
20000042:	2200      	movs	r2, #0
20000044:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000046:	4b0c      	ldr	r3, [pc, #48]	; (20000078 <delay_250ns+0x3c>)
20000048:	2229      	movs	r2, #41	; 0x29
2000004a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
2000004c:	4b0b      	ldr	r3, [pc, #44]	; (2000007c <delay_250ns+0x40>)
2000004e:	2200      	movs	r2, #0
20000050:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000052:	4b08      	ldr	r3, [pc, #32]	; (20000074 <delay_250ns+0x38>)
20000054:	2205      	movs	r2, #5
20000056:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
20000058:	46c0      	nop			; (mov r8, r8)
2000005a:	4b09      	ldr	r3, [pc, #36]	; (20000080 <delay_250ns+0x44>)
2000005c:	781b      	ldrb	r3, [r3, #0]
2000005e:	b2db      	uxtb	r3, r3
20000060:	001a      	movs	r2, r3
20000062:	2301      	movs	r3, #1
20000064:	4013      	ands	r3, r2
20000066:	d1f8      	bne.n	2000005a <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000068:	4b02      	ldr	r3, [pc, #8]	; (20000074 <delay_250ns+0x38>)
2000006a:	2200      	movs	r2, #0
2000006c:	701a      	strb	r2, [r3, #0]
}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	46bd      	mov	sp, r7
20000072:	bd80      	pop	{r7, pc}
20000074:	e000e010 	and	lr, r0, r0, lsl r0
20000078:	e000e014 	and	lr, r0, r4, lsl r0
2000007c:	e000e018 	and	lr, r0, r8, lsl r0
20000080:	e000e012 	and	lr, r0, r2, lsl r0

20000084 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
		us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
2000008c:	2300      	movs	r3, #0
2000008e:	60fb      	str	r3, [r7, #12]
20000090:	e004      	b.n	2000009c <delay_mikro+0x18>
		delay_250ns();
20000092:	f7ff ffd3 	bl	2000003c <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	3301      	adds	r3, #1
2000009a:	60fb      	str	r3, [r7, #12]
2000009c:	687b      	ldr	r3, [r7, #4]
2000009e:	009a      	lsls	r2, r3, #2
200000a0:	68fb      	ldr	r3, [r7, #12]
200000a2:	429a      	cmp	r2, r3
200000a4:	d8f5      	bhi.n	20000092 <delay_mikro+0xe>
	}
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46c0      	nop			; (mov r8, r8)
200000aa:	46bd      	mov	sp, r7
200000ac:	b004      	add	sp, #16
200000ae:	bd80      	pop	{r7, pc}

200000b0 <delay_milli>:

void delay_milli(unsigned int ms){
200000b0:	b580      	push	{r7, lr}
200000b2:	b084      	sub	sp, #16
200000b4:	af00      	add	r7, sp, #0
200000b6:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x1e>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffde 	bl	20000084 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0xe>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <ascii_ctrl_bit_set>:




void ascii_ctrl_bit_set (unsigned char x) {
200000e0:	b580      	push	{r7, lr}
200000e2:	b082      	sub	sp, #8
200000e4:	af00      	add	r7, sp, #0
200000e6:	0002      	movs	r2, r0
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= x | B_SELECT;
200000ec:	4b07      	ldr	r3, [pc, #28]	; (2000010c <ascii_ctrl_bit_set+0x2c>)
200000ee:	781b      	ldrb	r3, [r3, #0]
200000f0:	b2da      	uxtb	r2, r3
200000f2:	1dfb      	adds	r3, r7, #7
200000f4:	781b      	ldrb	r3, [r3, #0]
200000f6:	4313      	orrs	r3, r2
200000f8:	b2db      	uxtb	r3, r3
200000fa:	4a04      	ldr	r2, [pc, #16]	; (2000010c <ascii_ctrl_bit_set+0x2c>)
200000fc:	2104      	movs	r1, #4
200000fe:	430b      	orrs	r3, r1
20000100:	b2db      	uxtb	r3, r3
20000102:	7013      	strb	r3, [r2, #0]
}
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	46bd      	mov	sp, r7
20000108:	b002      	add	sp, #8
2000010a:	bd80      	pop	{r7, pc}
2000010c:	40021014 	andmi	r1, r2, r4, lsl r0

20000110 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear (unsigned char x) {
20000110:	b580      	push	{r7, lr}
20000112:	b084      	sub	sp, #16
20000114:	af00      	add	r7, sp, #0
20000116:	0002      	movs	r2, r0
20000118:	1dfb      	adds	r3, r7, #7
2000011a:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
2000011c:	200f      	movs	r0, #15
2000011e:	183b      	adds	r3, r7, r0
20000120:	1dfa      	adds	r2, r7, #7
20000122:	7812      	ldrb	r2, [r2, #0]
20000124:	43d2      	mvns	r2, r2
20000126:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= notX;
20000128:	4b0a      	ldr	r3, [pc, #40]	; (20000154 <ascii_ctrl_bit_clear+0x44>)
2000012a:	781b      	ldrb	r3, [r3, #0]
2000012c:	b2db      	uxtb	r3, r3
2000012e:	4909      	ldr	r1, [pc, #36]	; (20000154 <ascii_ctrl_bit_clear+0x44>)
20000130:	183a      	adds	r2, r7, r0
20000132:	7812      	ldrb	r2, [r2, #0]
20000134:	4013      	ands	r3, r2
20000136:	b2db      	uxtb	r3, r3
20000138:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
2000013a:	4b06      	ldr	r3, [pc, #24]	; (20000154 <ascii_ctrl_bit_clear+0x44>)
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	b2db      	uxtb	r3, r3
20000140:	4a04      	ldr	r2, [pc, #16]	; (20000154 <ascii_ctrl_bit_clear+0x44>)
20000142:	2104      	movs	r1, #4
20000144:	430b      	orrs	r3, r1
20000146:	b2db      	uxtb	r3, r3
20000148:	7013      	strb	r3, [r2, #0]
}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	46bd      	mov	sp, r7
2000014e:	b004      	add	sp, #16
20000150:	bd80      	pop	{r7, pc}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	40021014 	andmi	r1, r2, r4, lsl r0

20000158 <ascii_write_cmd>:





void ascii_write_cmd (unsigned char command) {
20000158:	b580      	push	{r7, lr}
2000015a:	b082      	sub	sp, #8
2000015c:	af00      	add	r7, sp, #0
2000015e:	0002      	movs	r2, r0
20000160:	1dfb      	adds	r3, r7, #7
20000162:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000164:	2001      	movs	r0, #1
20000166:	f7ff ffd3 	bl	20000110 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000016a:	2002      	movs	r0, #2
2000016c:	f7ff ffd0 	bl	20000110 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000170:	1dfb      	adds	r3, r7, #7
20000172:	781b      	ldrb	r3, [r3, #0]
20000174:	0018      	movs	r0, r3
20000176:	f000 f819 	bl	200001ac <ascii_write_controller>
}
2000017a:	46c0      	nop			; (mov r8, r8)
2000017c:	46bd      	mov	sp, r7
2000017e:	b002      	add	sp, #8
20000180:	bd80      	pop	{r7, pc}

20000182 <ascii_write_data>:

void ascii_write_data (unsigned char data) {
20000182:	b580      	push	{r7, lr}
20000184:	b082      	sub	sp, #8
20000186:	af00      	add	r7, sp, #0
20000188:	0002      	movs	r2, r0
2000018a:	1dfb      	adds	r3, r7, #7
2000018c:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000018e:	2001      	movs	r0, #1
20000190:	f7ff ffa6 	bl	200000e0 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000194:	2002      	movs	r0, #2
20000196:	f7ff ffbb 	bl	20000110 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000019a:	1dfb      	adds	r3, r7, #7
2000019c:	781b      	ldrb	r3, [r3, #0]
2000019e:	0018      	movs	r0, r3
200001a0:	f000 f804 	bl	200001ac <ascii_write_controller>
}
200001a4:	46c0      	nop			; (mov r8, r8)
200001a6:	46bd      	mov	sp, r7
200001a8:	b002      	add	sp, #8
200001aa:	bd80      	pop	{r7, pc}

200001ac <ascii_write_controller>:

void ascii_write_controller (unsigned char byte) {
200001ac:	b580      	push	{r7, lr}
200001ae:	b082      	sub	sp, #8
200001b0:	af00      	add	r7, sp, #0
200001b2:	0002      	movs	r2, r0
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	701a      	strb	r2, [r3, #0]
						//delay_250ns();								// BEHÖVS DELAYEN???
	ascii_ctrl_bit_set(B_E);
200001b8:	2040      	movs	r0, #64	; 0x40
200001ba:	f7ff ff91 	bl	200000e0 <ascii_ctrl_bit_set>
	* portOdrHigh = byte;
200001be:	4a06      	ldr	r2, [pc, #24]	; (200001d8 <ascii_write_controller+0x2c>)
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	7013      	strb	r3, [r2, #0]
						//delay_250ns();								// BEHÖVS DELAYEN???
	ascii_ctrl_bit_clear(B_E);
200001c6:	2040      	movs	r0, #64	; 0x40
200001c8:	f7ff ffa2 	bl	20000110 <ascii_ctrl_bit_clear>
	delay_250ns();
200001cc:	f7ff ff36 	bl	2000003c <delay_250ns>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b002      	add	sp, #8
200001d6:	bd80      	pop	{r7, pc}
200001d8:	40021015 	andmi	r1, r2, r5, lsl r0

200001dc <ascii_read_controller>:

unsigned char ascii_read_controller (void) {
200001dc:	b580      	push	{r7, lr}
200001de:	b082      	sub	sp, #8
200001e0:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
200001e2:	2040      	movs	r0, #64	; 0x40
200001e4:	f7ff ff7c 	bl	200000e0 <ascii_ctrl_bit_set>
	delay_250ns();
200001e8:	f7ff ff28 	bl	2000003c <delay_250ns>
	delay_250ns();
200001ec:	f7ff ff26 	bl	2000003c <delay_250ns>
	unsigned char returnValue = (* portIdrHigh);		// INDATA 
200001f0:	4a06      	ldr	r2, [pc, #24]	; (2000020c <ascii_read_controller+0x30>)
200001f2:	1dfb      	adds	r3, r7, #7
200001f4:	7812      	ldrb	r2, [r2, #0]
200001f6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff89 	bl	20000110 <ascii_ctrl_bit_clear>
	return returnValue;
200001fe:	1dfb      	adds	r3, r7, #7
20000200:	781b      	ldrb	r3, [r3, #0]
}
20000202:	0018      	movs	r0, r3
20000204:	46bd      	mov	sp, r7
20000206:	b002      	add	sp, #8
20000208:	bd80      	pop	{r7, pc}
2000020a:	46c0      	nop			; (mov r8, r8)
2000020c:	40021011 	andmi	r1, r2, r1, lsl r0

20000210 <ascii_read_data>:


unsigned char ascii_read_data (void) {
20000210:	b590      	push	{r4, r7, lr}
20000212:	b083      	sub	sp, #12
20000214:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000216:	4b0b      	ldr	r3, [pc, #44]	; (20000244 <ascii_read_data+0x34>)
20000218:	4a0b      	ldr	r2, [pc, #44]	; (20000248 <ascii_read_data+0x38>)
2000021a:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);						//OBS samma som ovan men SÄTTER RS här	
2000021c:	2001      	movs	r0, #1
2000021e:	f7ff ff5f 	bl	200000e0 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000222:	2002      	movs	r0, #2
20000224:	f7ff ff5c 	bl	200000e0 <ascii_ctrl_bit_set>
	unsigned char returnValue = ascii_read_controller();
20000228:	1dfc      	adds	r4, r7, #7
2000022a:	f7ff ffd7 	bl	200001dc <ascii_read_controller>
2000022e:	0003      	movs	r3, r0
20000230:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000232:	4b04      	ldr	r3, [pc, #16]	; (20000244 <ascii_read_data+0x34>)
20000234:	4a05      	ldr	r2, [pc, #20]	; (2000024c <ascii_read_data+0x3c>)
20000236:	601a      	str	r2, [r3, #0]
	return returnValue;
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	781b      	ldrb	r3, [r3, #0]
}
2000023c:	0018      	movs	r0, r3
2000023e:	46bd      	mov	sp, r7
20000240:	b003      	add	sp, #12
20000242:	bd90      	pop	{r4, r7, pc}
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000250 <ascii_read_status>:

unsigned char ascii_read_status (void) {
20000250:	b590      	push	{r4, r7, lr}
20000252:	b083      	sub	sp, #12
20000254:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000256:	4b0b      	ldr	r3, [pc, #44]	; (20000284 <ascii_read_status+0x34>)
20000258:	4a0b      	ldr	r2, [pc, #44]	; (20000288 <ascii_read_status+0x38>)
2000025a:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);						//OBS samma som ovan men CLEARAR RS här (RS styr 
2000025c:	2001      	movs	r0, #1
2000025e:	f7ff ff57 	bl	20000110 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000262:	2002      	movs	r0, #2
20000264:	f7ff ff3c 	bl	200000e0 <ascii_ctrl_bit_set>
	unsigned char returnValue = ascii_read_controller();
20000268:	1dfc      	adds	r4, r7, #7
2000026a:	f7ff ffb7 	bl	200001dc <ascii_read_controller>
2000026e:	0003      	movs	r3, r0
20000270:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000272:	4b04      	ldr	r3, [pc, #16]	; (20000284 <ascii_read_status+0x34>)
20000274:	4a05      	ldr	r2, [pc, #20]	; (2000028c <ascii_read_status+0x3c>)
20000276:	601a      	str	r2, [r3, #0]
	return returnValue;
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	781b      	ldrb	r3, [r3, #0]
}
2000027c:	0018      	movs	r0, r3
2000027e:	46bd      	mov	sp, r7
20000280:	b003      	add	sp, #12
20000282:	bd90      	pop	{r4, r7, pc}
20000284:	40021000 	andmi	r1, r2, r0
20000288:	00005555 	andeq	r5, r0, r5, asr r5
2000028c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000290 <ascii_command>:

void ascii_command (unsigned char command) {
20000290:	b580      	push	{r7, lr}
20000292:	b082      	sub	sp, #8
20000294:	af00      	add	r7, sp, #0
20000296:	0002      	movs	r2, r0
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status()  & 0x80) == 0x80 ){}
2000029c:	46c0      	nop			; (mov r8, r8)
2000029e:	f7ff ffd7 	bl	20000250 <ascii_read_status>
200002a2:	0003      	movs	r3, r0
200002a4:	001a      	movs	r2, r3
200002a6:	2380      	movs	r3, #128	; 0x80
200002a8:	4013      	ands	r3, r2
200002aa:	2b80      	cmp	r3, #128	; 0x80
200002ac:	d0f7      	beq.n	2000029e <ascii_command+0xe>
	delay_mikro(8);
200002ae:	2008      	movs	r0, #8
200002b0:	f7ff fee8 	bl	20000084 <delay_mikro>
	ascii_write_cmd(command);
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	781b      	ldrb	r3, [r3, #0]
200002b8:	0018      	movs	r0, r3
200002ba:	f7ff ff4d 	bl	20000158 <ascii_write_cmd>
	
	
}
200002be:	46c0      	nop			; (mov r8, r8)
200002c0:	46bd      	mov	sp, r7
200002c2:	b002      	add	sp, #8
200002c4:	bd80      	pop	{r7, pc}

200002c6 <main>:


void main(void) {
200002c6:	b580      	push	{r7, lr}
200002c8:	af00      	add	r7, sp, #0
	
}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	46bd      	mov	sp, r7
200002ce:	bd80      	pop	{r7, pc}

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000287 	andeq	r0, r0, r7, lsl #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000116 	andeq	r0, r0, r6, lsl r1
  10:	0000bd0c 	andeq	fp, r0, ip, lsl #26
  14:	00004600 	andeq	r4, r0, r0, lsl #12
	...
  24:	02030200 	andeq	r0, r3, #0, 4
  28:	95010000 	strls	r0, [r1, #-0]
  2c:	0002c606 	andeq	ip, r2, r6, lsl #12
  30:	00000a20 	andeq	r0, r0, r0, lsr #20
  34:	039c0100 	orrseq	r0, ip, #0, 2
  38:	000001c1 	andeq	r0, r0, r1, asr #3
  3c:	90068c01 	andls	r8, r6, r1, lsl #24
  40:	36200002 	strtcc	r0, [r0], -r2
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	00005d9c 	muleq	r0, ip, sp
  4c:	01c70400 	biceq	r0, r7, r0, lsl #8
  50:	8c010000 	stchi	0, cr0, [r1], {-0}
  54:	00005d23 	andeq	r5, r0, r3, lsr #26
  58:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  5c:	08010500 	stmdaeq	r1, {r8, sl}
  60:	000001f5 	strdeq	r0, [r0], -r5
  64:	00019206 	andeq	r9, r1, r6, lsl #4
  68:	0f830100 	svceq	0x00830100
  6c:	0000005d 	andeq	r0, r0, sp, asr r0
  70:	20000250 	andcs	r0, r0, r0, asr r2
  74:	00000040 	andeq	r0, r0, r0, asr #32
  78:	008e9c01 	addeq	r9, lr, r1, lsl #24
  7c:	0c070000 	stceq	0, cr0, [r7], {-0}
  80:	01000000 	mrseq	r0, (UNDEF: 0)
  84:	005d1087 	subseq	r1, sp, r7, lsl #1
  88:	91020000 	mrsls	r0, (UNDEF: 2)
  8c:	e506006f 	str	r0, [r6, #-111]	; 0xffffff91
  90:	01000001 	tsteq	r0, r1
  94:	005d0f7a 	subseq	r0, sp, sl, ror pc
  98:	02100000 	andseq	r0, r0, #0
  9c:	00402000 	subeq	r2, r0, r0
  a0:	9c010000 	stcls	0, cr0, [r1], {-0}
  a4:	000000b8 	strheq	r0, [r0], -r8
  a8:	00000c07 	andeq	r0, r0, r7, lsl #24
  ac:	107e0100 	rsbsne	r0, lr, r0, lsl #2
  b0:	0000005d 	andeq	r0, r0, sp, asr r0
  b4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
  b8:	0001cf06 	andeq	ip, r1, r6, lsl #30
  bc:	0f700100 	svceq	0x00700100
  c0:	0000005d 	andeq	r0, r0, sp, asr r0
  c4:	200001dc 	ldrdcs	r0, [r0], -ip
  c8:	00000034 	andeq	r0, r0, r4, lsr r0
  cc:	00e29c01 	rsceq	r9, r2, r1, lsl #24
  d0:	0c070000 	stceq	0, cr0, [r7], {-0}
  d4:	01000000 	mrseq	r0, (UNDEF: 0)
  d8:	005d1074 	subseq	r1, sp, r4, ror r0
  dc:	91020000 	mrsls	r0, (UNDEF: 2)
  e0:	95030077 	strls	r0, [r3, #-119]	; 0xffffff89
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	01ac0667 			; <UNDEFINED> instruction: 0x01ac0667
  ec:	00302000 	eorseq	r2, r0, r0
  f0:	9c010000 	stcls	0, cr0, [r1], {-0}
  f4:	00000108 	andeq	r0, r0, r8, lsl #2
  f8:	00020804 	andeq	r0, r2, r4, lsl #16
  fc:	2c670100 	stfcse	f0, [r7], #-0
 100:	0000005d 	andeq	r0, r0, sp, asr r0
 104:	00779102 	rsbseq	r9, r7, r2, lsl #2
 108:	0001a403 	andeq	sl, r1, r3, lsl #8
 10c:	06610100 	strbteq	r0, [r1], -r0, lsl #2
 110:	20000182 	andcs	r0, r0, r2, lsl #3
 114:	0000002a 	andeq	r0, r0, sl, lsr #32
 118:	013c9c01 	teqeq	ip, r1, lsl #24
 11c:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
 120:	01000001 	tsteq	r0, r1
 124:	005d2661 	subseq	r2, sp, r1, ror #12
 128:	91020000 	mrsls	r0, (UNDEF: 2)
 12c:	00950877 	addseq	r0, r5, r7, ror r8
 130:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 134:	00013c02 	andeq	r3, r1, r2, lsl #24
 138:	00000900 	andeq	r0, r0, r0, lsl #18
 13c:	6905040a 	stmdbvs	r5, {r1, r3, sl}
 140:	0300746e 	movweq	r7, #1134	; 0x46e
 144:	00000212 	andeq	r0, r0, r2, lsl r2
 148:	58065b01 	stmdapl	r6, {r0, r8, r9, fp, ip, lr}
 14c:	2a200001 	bcs	800158 <startup-0x1f7ffea8>
 150:	01000000 	mrseq	r0, (UNDEF: 0)
 154:	0001779c 	muleq	r1, ip, r7
 158:	01c70400 	biceq	r0, r7, r0, lsl #8
 15c:	5b010000 	blpl	40164 <startup-0x1ffbfe9c>
 160:	00005d25 	andeq	r5, r0, r5, lsr #26
 164:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 168:	00009508 	andeq	r9, r0, r8, lsl #10
 16c:	025e0100 	subseq	r0, lr, #0, 2
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	0b000009 	bleq	1a0 <startup-0x1ffffe60>
 178:	00000025 	andeq	r0, r0, r5, lsr #32
 17c:	10065001 	andne	r5, r6, r1
 180:	48200001 	stmdami	r0!, {r0}
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	0001aa9c 	muleq	r1, ip, sl
 18c:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 190:	5d2a5001 	stcpl	0, cr5, [sl, #-4]!
 194:	02000000 	andeq	r0, r0, #0
 198:	0d076f91 	stceq	15, cr6, [r7, #-580]	; 0xfffffdbc
 19c:	01000002 	tsteq	r0, r2
 1a0:	01aa0751 			; <UNDEFINED> instruction: 0x01aa0751
 1a4:	91020000 	mrsls	r0, (UNDEF: 2)
 1a8:	01050077 	tsteq	r5, r7, ror r0
 1ac:	0001fe08 	andeq	pc, r1, r8, lsl #28
 1b0:	02220b00 	eoreq	r0, r2, #0, 22
 1b4:	4c010000 	stcmi	0, cr0, [r1], {-0}
 1b8:	0000e006 	andeq	lr, r0, r6
 1bc:	00003020 	andeq	r3, r0, r0, lsr #32
 1c0:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
 1c4:	0c000001 	stceq	0, cr0, [r0], {1}
 1c8:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
 1cc:	00005d28 	andeq	r5, r0, r8, lsr #26
 1d0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1d4:	00000300 	andeq	r0, r0, r0, lsl #6
 1d8:	3f010000 	svccc	0x00010000
 1dc:	0000b006 	andeq	fp, r0, r6
 1e0:	00003020 	andeq	r3, r0, r0, lsr #32
 1e4:	119c0100 	orrsne	r0, ip, r0, lsl #2
 1e8:	0c000002 	stceq	0, cr0, [r0], {2}
 1ec:	0100736d 	tsteq	r0, sp, ror #6
 1f0:	02111f3f 	andseq	r1, r1, #63, 30	; 0xfc
 1f4:	91020000 	mrsls	r0, (UNDEF: 2)
 1f8:	00b80d6c 	adcseq	r0, r8, ip, ror #26
 1fc:	001e2000 	andseq	r2, lr, r0
 200:	690e0000 	stmdbvs	lr, {}	; <UNPREDICTABLE>
 204:	0a440100 	beq	110060c <startup-0x1eeff9f4>
 208:	0000013c 	andeq	r0, r0, ip, lsr r1
 20c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 210:	07040500 	streq	r0, [r4, -r0, lsl #10]
 214:	00000018 	andeq	r0, r0, r8, lsl r0
 218:	00003a03 	andeq	r3, r0, r3, lsl #20
 21c:	06350100 	ldrteq	r0, [r5], -r0, lsl #2
 220:	20000084 	andcs	r0, r0, r4, lsl #1
 224:	0000002c 	andeq	r0, r0, ip, lsr #32
 228:	02549c01 	subseq	r9, r4, #256	; 0x100
 22c:	750c0000 	strvc	r0, [ip, #-0]
 230:	35010073 	strcc	r0, [r1, #-115]	; 0xffffff8d
 234:	0002111f 	andeq	r1, r2, pc, lsl r1
 238:	6c910200 	lfmvs	f0, 4, [r1], {0}
 23c:	00008c0d 	andeq	r8, r0, sp, lsl #24
 240:	00001a20 	andeq	r1, r0, r0, lsr #20
 244:	00690e00 	rsbeq	r0, r9, r0, lsl #28
 248:	3c0a3a01 			; <UNDEFINED> instruction: 0x3c0a3a01
 24c:	02000001 	andeq	r0, r0, #1
 250:	00007491 	muleq	r0, r1, r4
 254:	0001b502 	andeq	fp, r1, r2, lsl #10
 258:	062b0100 	strteq	r0, [fp], -r0, lsl #2
 25c:	2000003c 	andcs	r0, r0, ip, lsr r0
 260:	00000048 	andeq	r0, r0, r8, asr #32
 264:	b4029c01 	strlt	r9, [r2], #-3073	; 0xfffff3ff
 268:	01000000 	mrseq	r0, (UNDEF: 0)
 26c:	00100626 	andseq	r0, r0, r6, lsr #12
 270:	002c2000 	eoreq	r2, ip, r0
 274:	9c010000 	stcls	0, cr0, [r1], {-0}
 278:	0000ac02 	andeq	sl, r0, r2, lsl #24
 27c:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
 280:	20000000 	andcs	r0, r0, r0
 284:	0000000c 	andeq	r0, r0, ip
 288:	Address 0x00000288 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	01111927 	tsteq	r1, r7, lsr #18
  24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  28:	00194297 	mulseq	r9, r7, r2
  2c:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  44:	00130119 	andseq	r0, r3, r9, lsl r1
  48:	00050400 	andeq	r0, r5, r0, lsl #8
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  58:	24050000 	strcs	r0, [r5], #-0
  5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
  68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  74:	01111349 	tsteq	r1, r9, asr #6
  78:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  7c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  80:	07000013 	smladeq	r0, r3, r0, r0
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	0b3b0b3a 	bleq	ec2d78 <startup-0x1f13d288>
  8c:	13490b39 	movtne	r0, #39737	; 0x9b39
  90:	00001802 	andeq	r1, r0, r2, lsl #16
  94:	3f012e08 	svccc	0x00012e08
  98:	3a0e0319 	bcc	380d04 <startup-0x1fc7f2fc>
  9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
  a4:	09000019 	stmdbeq	r0, {r0, r3, r4}
  a8:	00000018 	andeq	r0, r0, r8, lsl r0
  ac:	0b00240a 	bleq	90dc <startup-0x1fff6f24>
  b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  b4:	0b000008 	bleq	dc <startup-0x1fffff24>
  b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  bc:	0b3a0e03 	bleq	e838d0 <startup-0x1f17c730>
  c0:	0b390b3b 	bleq	e42db4 <startup-0x1f1bd24c>
  c4:	01111927 	tsteq	r1, r7, lsr #18
  c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
  d0:	0c000013 	stceq	0, cr0, [r0], {19}
  d4:	08030005 	stmdaeq	r3, {r0, r2}
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	13490b39 	movtne	r0, #39737	; 0x9b39
  e0:	00001802 	andeq	r1, r0, r2, lsl #16
  e4:	11010b0d 	tstne	r1, sp, lsl #22
  e8:	00061201 	andeq	r1, r6, r1, lsl #4
  ec:	00340e00 	eorseq	r0, r4, r0, lsl #28
  f0:	0b3a0803 	bleq	e82104 <startup-0x1f17defc>
  f4:	0b390b3b 	bleq	e42de8 <startup-0x1f1bd218>
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	Address 0x000000fc is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002c0 	andeq	r0, r0, r0, asr #5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001ea 	andeq	r0, r0, sl, ror #3
   4:	006f0003 	rsbeq	r0, pc, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	65442f73 	strbvs	r2, [r4, #-3955]	; 0xfffff08d
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	37313054 			; <UNDEFINED> instruction: 0x37313054
  38:	6f6c6f2f 	svcvs	0x006c6f2f
  3c:	6f635f66 	svcvs	0x00635f66
  40:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
  44:	6f432f74 	svcvs	0x00432f74
  48:	694c6564 	stmdbvs	ip, {r2, r5, r6, r8, sl, sp, lr}^
  4c:	772f6574 			; <UNDEFINED> instruction: 0x772f6574
  50:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
  54:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
  58:	666f6c4f 	strbtvs	r6, [pc], -pc, asr #24
  5c:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
  60:	69646969 	stmdbvs	r4!, {r0, r3, r5, r6, r8, fp, sp, lr}^
  64:	616c7073 	smcvs	50947	; 0xc703
  68:	73000079 	movwvc	r0, #121	; 0x79
  6c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  70:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  74:	00000100 	andeq	r0, r0, r0, lsl #2
  78:	00010500 	andeq	r0, r1, r0, lsl #10
  7c:	00000205 	andeq	r0, r0, r5, lsl #4
  80:	1e032000 	cdpne	0, 0, cr2, cr3, cr0, {0}
  84:	21211301 			; <UNDEFINED> instruction: 0x21211301
  88:	0302212f 	movweq	r2, #8495	; 0x212f
  8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  90:	02050014 	andeq	r0, r5, #20
  94:	20000010 	andcs	r0, r0, r0, lsl r0
  98:	05012503 	streq	r2, [r1, #-1283]	; 0xfffffafd
  9c:	05672f0f 	strbeq	r2, [r7, #-3855]!	; 0xfffff0f1
  a0:	17056701 	strne	r6, [r5, -r1, lsl #14]
  a4:	2f020584 	svccs	0x00020584
  a8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  ac:	0c052f02 	stceq	15, cr2, [r5], {2}
  b0:	2f020520 	svccs	0x00020520
  b4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
  b8:	0c052f02 	stceq	15, cr2, [r5], {2}
  bc:	2f070520 	svccs	0x00070520
  c0:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  c4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  c8:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
  cc:	07053c01 	streq	r3, [r5, -r1, lsl #24]
  d0:	01040200 	mrseq	r0, R12_usr
  d4:	2202053c 	andcs	r0, r2, #60, 10	; 0xf000000
  d8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  dc:	22052f01 	andcs	r2, r5, #1, 30
  e0:	4f0a05ae 	svcmi	0x000a05ae
  e4:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
  e8:	04020003 	streq	r0, [r2], #-3
  ec:	1c052103 	stfnes	f2, [r5], {3}
  f0:	03040200 	movweq	r0, #16896	; 0x4200
  f4:	0016052d 	andseq	r0, r6, sp, lsr #10
  f8:	3c010402 	cfstrscc	mvf0, [r1], {2}
  fc:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 100:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 104:	04020002 	streq	r0, [r2], #-2
 108:	01052001 	tsteq	r5, r1
 10c:	5a220531 	bpl	8815d8 <startup-0x1f77ea28>
 110:	054f0a05 	strbeq	r0, [pc, #-2565]	; fffff713 <main+0xdffff44d>
 114:	03052e02 	movweq	r2, #24066	; 0x5e02
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	001a0521 	andseq	r0, sl, r1, lsr #10
 120:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 124:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 128:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 12c:	04020002 	streq	r0, [r2], #-2
 130:	01052001 	tsteq	r5, r1
 134:	5d2b053f 	cfstr32pl	mvfx0, [fp, #-252]!	; 0xffffff04
 138:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 13c:	2d05bb01 	vstrcs	d11, [r5, #-4]
 140:	67070568 	strvs	r0, [r7, -r8, ror #10]
 144:	91670f05 	cmnls	r7, r5, lsl #30
 148:	05830105 	streq	r0, [r3, #261]	; 0x105
 14c:	02057b2e 	andeq	r7, r5, #47104	; 0xb800
 150:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 154:	2c055901 			; <UNDEFINED> instruction: 0x2c055901
 158:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 15c:	01053d3d 	tsteq	r5, sp, lsr sp
 160:	4c320559 	cfldr32mi	mvfx0, [r2], #-356	; 0xfffffe9c
 164:	3d680205 	sfmcc	f0, 2, [r8, #-20]!	; 0xffffffec
 168:	05201005 	streq	r1, [r0, #-5]!
 16c:	053d3e02 	ldreq	r3, [sp, #-3586]!	; 0xfffff1fe
 170:	2c052f01 	stccs	15, cr2, [r5], {1}
 174:	3d020568 	cfstr32cc	mvfx0, [r2, #-416]	; 0xfffffe60
 178:	1f052f3d 	svcne	0x00052f3d
 17c:	2010052f 	andscs	r0, r0, pc, lsr #10
 180:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 184:	01053d09 	tsteq	r5, r9, lsl #26
 188:	7726052f 	strvc	r0, [r6, -pc, lsr #10]!
 18c:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 190:	0205200e 	andeq	r2, r5, #14
 194:	1e053d2f 	cdpne	13, 0, cr3, cr5, cr15, {1}
 198:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 19c:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1a0:	01052f09 	tsteq	r5, r9, lsl #30
 1a4:	a028052f 	eorge	r0, r8, pc, lsr #10
 1a8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 1ac:	0205200e 	andeq	r2, r5, #14
 1b0:	1e053d2f 	cdpne	13, 0, cr3, cr5, cr15, {1}
 1b4:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 1b8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1bc:	01052f09 	tsteq	r5, r9, lsl #30
 1c0:	a02c052f 	eorge	r0, ip, pc, lsr #10
 1c4:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
 1c8:	0402000a 	streq	r0, [r2], #-10
 1cc:	1f052001 	svcne	0x00052001
 1d0:	01040200 	mrseq	r0, R12_usr
 1d4:	0008053c 	andeq	r0, r8, ip, lsr r5
 1d8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1dc:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1d0 <startup-0x1ffffe30>
 1e0:	055b0105 	ldrbeq	r0, [fp, #-261]	; 0xfffffefb
 1e4:	01054d11 	tsteq	r5, r1, lsl sp
 1e8:	00030230 	andeq	r0, r3, r0, lsr r2
 1ec:	Address 0x000001ec is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
  10:	61566e72 	cmpvs	r6, r2, ror lr
  14:	0065756c 	rsbeq	r7, r5, ip, ror #10
  18:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  1c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  20:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  24:	63736100 	cmnvs	r3, #0, 2
  28:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  2c:	5f6c7274 	svcpl	0x006c7274
  30:	5f746962 	svcpl	0x00746962
  34:	61656c63 	cmnvs	r5, r3, ror #24
  38:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
  3c:	5f79616c 	svcpl	0x0079616c
  40:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  44:	3a43006f 	bcc	10c0208 <startup-0x1ef3fdf8>
  48:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
  4c:	6f5c7372 	svcvs	0x005c7372
  50:	73666f6c 	cmnvc	r6, #108, 30	; 0x1b0
  54:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
  58:	706f746b 	rsbvc	r7, pc, fp, ror #8
  5c:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
  60:	5c373130 	ldfpls	f3, [r7], #-192	; 0xffffff40
  64:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  68:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  6c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
  70:	646f435c 	strbtvs	r4, [pc], #-860	; 78 <startup-0x1fffff88>
  74:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
  78:	6f775c65 	svcvs	0x00775c65
  7c:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  80:	4f656361 	svcmi	0x00656361
  84:	5c666f6c 	stclpl	15, cr6, [r6], #-432	; 0xfffffe50
  88:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  8c:	73696469 	cmnvc	r9, #1761607680	; 0x69000000
  90:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  94:	63736100 	cmnvs	r3, #0, 2
  98:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
  9c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  a0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  a4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; fffffedc <main+0xdffffc16>
  a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
  ac:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  b0:	00707574 	rsbseq	r7, r0, r4, ror r5
  b4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  b8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
  bc:	2f3a4300 	svccs	0x003a4300
  c0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  c4:	6c6f2f73 	stclvs	15, cr2, [pc], #-460	; ffffff00 <main+0xdffffc3a>
  c8:	2f73666f 	svccs	0x0073666f
  cc:	6b736544 	blvs	1cd95e4 <startup-0x1e326a1c>
  d0:	2f706f74 	svccs	0x00706f74
  d4:	30544144 	subscc	r4, r4, r4, asr #2
  d8:	6f2f3731 	svcvs	0x002f3731
  dc:	5f666f6c 	svcpl	0x00666f6c
  e0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  e4:	2f746e65 	svccs	0x00746e65
  e8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  ec:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  f0:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
  f4:	6170736b 	cmnvs	r0, fp, ror #6
  f8:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  fc:	612f666f 			; <UNDEFINED> instruction: 0x612f666f
 100:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 104:	70736964 	rsbsvc	r6, r3, r4, ror #18
 108:	2f79616c 	svccs	0x0079616c
 10c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 110:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 114:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
 118:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 11c:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 120:	20312e32 	eorscs	r2, r1, r2, lsr lr
 124:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 128:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 12c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 130:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 134:	5b202965 	blpl	80a6d0 <startup-0x1f7f5930>
 138:	2f4d5241 	svccs	0x004d5241
 13c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 140:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 144:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 148:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 14c:	6f697369 	svcvs	0x00697369
 150:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 154:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 158:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 15c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 160:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 164:	616f6c66 	cmnvs	pc, r6, ror #24
 168:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 16c:	6f733d69 	svcvs	0x00733d69
 170:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 174:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 178:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 17c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 180:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 184:	304f2d20 	subcc	r2, pc, r0, lsr #26
 188:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 18c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 190:	73610039 	cmnvc	r1, #57	; 0x39
 194:	5f696963 	svcpl	0x00696963
 198:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 19c:	6174735f 	cmnvs	r4, pc, asr r3
 1a0:	00737574 	rsbseq	r7, r3, r4, ror r5
 1a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1a8:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1ac:	5f657469 	svcpl	0x00657469
 1b0:	61746164 	cmnvs	r4, r4, ror #2
 1b4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1b8:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 1bc:	736e3035 	cmnvc	lr, #53	; 0x35
 1c0:	63736100 	cmnvs	r3, #0, 2
 1c4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 1c8:	616d6d6f 	cmnvs	sp, pc, ror #26
 1cc:	6100646e 	tstvs	r0, lr, ror #8
 1d0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1d4:	6165725f 	cmnvs	r5, pc, asr r2
 1d8:	6f635f64 	svcvs	0x00635f64
 1dc:	6f72746e 	svcvs	0x0072746e
 1e0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1e4:	63736100 	cmnvs	r3, #0, 2
 1e8:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 1ec:	5f646165 	svcpl	0x00646165
 1f0:	61746164 	cmnvs	r4, r4, ror #2
 1f4:	736e7500 	cmnvc	lr, #0, 10
 1f8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 1fc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 200:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
 204:	006e6961 	rsbeq	r6, lr, r1, ror #18
 208:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 20c:	746f6e00 	strbtvc	r6, [pc], #-3584	; 214 <startup-0x1ffffdec>
 210:	73610058 	cmnvc	r1, #88	; 0x58
 214:	5f696963 	svcpl	0x00696963
 218:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 21c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 220:	73610064 	cmnvc	r1, #100	; 0x64
 224:	5f696963 	svcpl	0x00696963
 228:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 22c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 230:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000003c 	andcs	r0, r0, ip, lsr r0
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000084 	andcs	r0, r0, r4, lsl #1
  64:	0000002c 	andeq	r0, r0, ip, lsr #32
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  74:	00000007 	andeq	r0, r0, r7
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
  84:	00000030 	andeq	r0, r0, r0, lsr r0
  88:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  8c:	41018e02 	tstmi	r1, r2, lsl #28
  90:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  94:	00000007 	andeq	r0, r0, r7
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000e0 	andcs	r0, r0, r0, ror #1
  a4:	00000030 	andeq	r0, r0, r0, lsr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000110 	andcs	r0, r0, r0, lsl r1
  c4:	00000048 	andeq	r0, r0, r8, asr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000158 	andcs	r0, r0, r8, asr r1
  e4:	0000002a 	andeq	r0, r0, sl, lsr #32
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000182 	andcs	r0, r0, r2, lsl #3
 104:	0000002a 	andeq	r0, r0, sl, lsr #32
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001ac 	andcs	r0, r0, ip, lsr #3
 124:	00000030 	andeq	r0, r0, r0, lsr r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200001dc 	ldrdcs	r0, [r0], -ip
 144:	00000034 	andeq	r0, r0, r4, lsr r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000210 	andcs	r0, r0, r0, lsl r2
 164:	00000040 	andeq	r0, r0, r0, asr #32
 168:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 16c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 170:	180e4101 	stmdane	lr, {r0, r8, lr}
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	20000250 	andcs	r0, r0, r0, asr r2
 184:	00000040 	andeq	r0, r0, r0, asr #32
 188:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 18c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 190:	180e4101 	stmdane	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000290 	mulcs	r0, r0, r2
 1a4:	00000036 	andeq	r0, r0, r6, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	00000018 	andeq	r0, r0, r8, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200002c6 	andcs	r0, r0, r6, asr #5
 1c4:	0000000a 	andeq	r0, r0, sl
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0000070d 	andeq	r0, r0, sp, lsl #14
