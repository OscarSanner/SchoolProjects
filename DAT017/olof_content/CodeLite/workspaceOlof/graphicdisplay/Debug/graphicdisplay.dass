
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 typedef unsigned char uint_8t;
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fa17 	bl	20000436 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <delay_250ns>:

 // --------------------------- DELAY -----------------------

void delay_250ns(void){
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000002c:	4b0c      	ldr	r3, [pc, #48]	; (20000060 <delay_250ns+0x38>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000032:	4b0c      	ldr	r3, [pc, #48]	; (20000064 <delay_250ns+0x3c>)
20000034:	2229      	movs	r2, #41	; 0x29
20000036:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000038:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <delay_250ns+0x40>)
2000003a:	2200      	movs	r2, #0
2000003c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000003e:	4b08      	ldr	r3, [pc, #32]	; (20000060 <delay_250ns+0x38>)
20000040:	2205      	movs	r2, #5
20000042:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x1) != 0){
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <delay_250ns+0x44>)
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	b2db      	uxtb	r3, r3
2000004c:	001a      	movs	r2, r3
2000004e:	2301      	movs	r3, #1
20000050:	4013      	ands	r3, r2
20000052:	d1f8      	bne.n	20000046 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000054:	4b02      	ldr	r3, [pc, #8]	; (20000060 <delay_250ns+0x38>)
20000056:	2200      	movs	r2, #0
20000058:	701a      	strb	r2, [r3, #0]
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	bd80      	pop	{r7, pc}
20000060:	e000e010 	and	lr, r0, r0, lsl r0
20000064:	e000e014 	and	lr, r0, r4, lsl r0
20000068:	e000e018 	and	lr, r0, r8, lsl r0
2000006c:	e000e012 	and	lr, r0, r2, lsl r0

20000070 <delay_500ns>:

void delay_500ns(void){
20000070:	b580      	push	{r7, lr}
20000072:	af00      	add	r7, sp, #0
	delay_250ns();
20000074:	f7ff ffd8 	bl	20000028 <delay_250ns>
	delay_250ns();
20000078:	f7ff ffd6 	bl	20000028 <delay_250ns>
	}
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	bd80      	pop	{r7, pc}

20000082 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000082:	b580      	push	{r7, lr}
20000084:	b084      	sub	sp, #16
20000086:	af00      	add	r7, sp, #0
20000088:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
		us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
2000008a:	2300      	movs	r3, #0
2000008c:	60fb      	str	r3, [r7, #12]
2000008e:	e004      	b.n	2000009a <delay_mikro+0x18>
		delay_250ns();
20000090:	f7ff ffca 	bl	20000028 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	3301      	adds	r3, #1
20000098:	60fb      	str	r3, [r7, #12]
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	009a      	lsls	r2, r3, #2
2000009e:	68fb      	ldr	r3, [r7, #12]
200000a0:	429a      	cmp	r2, r3
200000a2:	d8f5      	bhi.n	20000090 <delay_mikro+0xe>
	}
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b004      	add	sp, #16
200000ac:	bd80      	pop	{r7, pc}

200000ae <delay_milli>:

void delay_milli(unsigned int ms){
200000ae:	b580      	push	{r7, lr}
200000b0:	b084      	sub	sp, #16
200000b2:	af00      	add	r7, sp, #0
200000b4:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
200000b6:	2300      	movs	r3, #0
200000b8:	60fb      	str	r3, [r7, #12]
200000ba:	e007      	b.n	200000cc <delay_milli+0x1e>
		delay_mikro(1000);
200000bc:	23fa      	movs	r3, #250	; 0xfa
200000be:	009b      	lsls	r3, r3, #2
200000c0:	0018      	movs	r0, r3
200000c2:	f7ff ffde 	bl	20000082 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c6:	68fb      	ldr	r3, [r7, #12]
200000c8:	3301      	adds	r3, #1
200000ca:	60fb      	str	r3, [r7, #12]
200000cc:	68fb      	ldr	r3, [r7, #12]
200000ce:	687a      	ldr	r2, [r7, #4]
200000d0:	429a      	cmp	r2, r3
200000d2:	d8f3      	bhi.n	200000bc <delay_milli+0xe>
	}
}
200000d4:	46c0      	nop			; (mov r8, r8)
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46bd      	mov	sp, r7
200000da:	b004      	add	sp, #16
200000dc:	bd80      	pop	{r7, pc}

200000de <graphic_ctrl_bit_set>:

// ------------------------------ DISPLAY ----------------------------

void graphic_ctrl_bit_set (uint_8t x) {
200000de:	b580      	push	{r7, lr}
200000e0:	b082      	sub	sp, #8
200000e2:	af00      	add	r7, sp, #0
200000e4:	0002      	movs	r2, r0
200000e6:	1dfb      	adds	r3, r7, #7
200000e8:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= ( x & ~B_SELECT );
200000ea:	4b0d      	ldr	r3, [pc, #52]	; (20000120 <graphic_ctrl_bit_set+0x42>)
200000ec:	781b      	ldrb	r3, [r3, #0]
200000ee:	b2db      	uxtb	r3, r3
200000f0:	b25a      	sxtb	r2, r3
200000f2:	1dfb      	adds	r3, r7, #7
200000f4:	781b      	ldrb	r3, [r3, #0]
200000f6:	b25b      	sxtb	r3, r3
200000f8:	2104      	movs	r1, #4
200000fa:	438b      	bics	r3, r1
200000fc:	b25b      	sxtb	r3, r3
200000fe:	4313      	orrs	r3, r2
20000100:	b25a      	sxtb	r2, r3
20000102:	4b07      	ldr	r3, [pc, #28]	; (20000120 <graphic_ctrl_bit_set+0x42>)
20000104:	b2d2      	uxtb	r2, r2
20000106:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000108:	4b05      	ldr	r3, [pc, #20]	; (20000120 <graphic_ctrl_bit_set+0x42>)
2000010a:	781b      	ldrb	r3, [r3, #0]
2000010c:	b2db      	uxtb	r3, r3
2000010e:	4a04      	ldr	r2, [pc, #16]	; (20000120 <graphic_ctrl_bit_set+0x42>)
20000110:	2104      	movs	r1, #4
20000112:	438b      	bics	r3, r1
20000114:	b2db      	uxtb	r3, r3
20000116:	7013      	strb	r3, [r2, #0]
	}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	b002      	add	sp, #8
2000011e:	bd80      	pop	{r7, pc}
20000120:	40021014 	andmi	r1, r2, r4, lsl r0

20000124 <graphic_ctrl_bit_clear>:
	
void graphic_ctrl_bit_clear (uint_8t x) {
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~( x | B_SELECT );
20000130:	4b0a      	ldr	r3, [pc, #40]	; (2000015c <graphic_ctrl_bit_clear+0x38>)
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	b2db      	uxtb	r3, r3
20000136:	b25b      	sxtb	r3, r3
20000138:	1dfa      	adds	r2, r7, #7
2000013a:	7812      	ldrb	r2, [r2, #0]
2000013c:	2104      	movs	r1, #4
2000013e:	430a      	orrs	r2, r1
20000140:	b2d2      	uxtb	r2, r2
20000142:	b252      	sxtb	r2, r2
20000144:	43d2      	mvns	r2, r2
20000146:	b252      	sxtb	r2, r2
20000148:	4013      	ands	r3, r2
2000014a:	b25a      	sxtb	r2, r3
2000014c:	4b03      	ldr	r3, [pc, #12]	; (2000015c <graphic_ctrl_bit_clear+0x38>)
2000014e:	b2d2      	uxtb	r2, r2
20000150:	701a      	strb	r2, [r3, #0]
			//	* portOdrLow &= ~x;
			//	* portOdrLow &= ~B_SELECT;
	}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	46bd      	mov	sp, r7
20000156:	b002      	add	sp, #8
20000158:	bd80      	pop	{r7, pc}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	40021014 	andmi	r1, r2, r4, lsl r0

20000160 <select_controller>:

void select_controller (uint_8t controller ) {
20000160:	b580      	push	{r7, lr}
20000162:	b082      	sub	sp, #8
20000164:	af00      	add	r7, sp, #0
20000166:	0002      	movs	r2, r0
20000168:	1dfb      	adds	r3, r7, #7
2000016a:	701a      	strb	r2, [r3, #0]
	switch (controller) {
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	781b      	ldrb	r3, [r3, #0]
20000170:	2b18      	cmp	r3, #24
20000172:	d01a      	beq.n	200001aa <select_controller+0x4a>
20000174:	dc1d      	bgt.n	200001b2 <select_controller+0x52>
20000176:	2b10      	cmp	r3, #16
20000178:	d010      	beq.n	2000019c <select_controller+0x3c>
2000017a:	dc1a      	bgt.n	200001b2 <select_controller+0x52>
2000017c:	2b00      	cmp	r3, #0
2000017e:	d002      	beq.n	20000186 <select_controller+0x26>
20000180:	2b08      	cmp	r3, #8
20000182:	d004      	beq.n	2000018e <select_controller+0x2e>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
								graphic_ctrl_bit_set( B_CS1 ); break;
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
								graphic_ctrl_bit_set( B_CS2 ); break;
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
		default: return 0;
20000184:	e015      	b.n	200001b2 <select_controller+0x52>
		case 0:  graphic_ctrl_bit_clear( B_CS1 | B_CS2 ); break;
20000186:	2018      	movs	r0, #24
20000188:	f7ff ffcc 	bl	20000124 <graphic_ctrl_bit_clear>
2000018c:	e012      	b.n	200001b4 <select_controller+0x54>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
2000018e:	2010      	movs	r0, #16
20000190:	f7ff ffc8 	bl	20000124 <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS1 ); break;
20000194:	2008      	movs	r0, #8
20000196:	f7ff ffa2 	bl	200000de <graphic_ctrl_bit_set>
2000019a:	e00b      	b.n	200001b4 <select_controller+0x54>
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
2000019c:	2008      	movs	r0, #8
2000019e:	f7ff ffc1 	bl	20000124 <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS2 ); break;
200001a2:	2010      	movs	r0, #16
200001a4:	f7ff ff9b 	bl	200000de <graphic_ctrl_bit_set>
200001a8:	e004      	b.n	200001b4 <select_controller+0x54>
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
200001aa:	2018      	movs	r0, #24
200001ac:	f7ff ff97 	bl	200000de <graphic_ctrl_bit_set>
200001b0:	e000      	b.n	200001b4 <select_controller+0x54>
		default: return 0;
200001b2:	46c0      	nop			; (mov r8, r8)
	}
}
200001b4:	46bd      	mov	sp, r7
200001b6:	b002      	add	sp, #8
200001b8:	bd80      	pop	{r7, pc}

200001ba <graphic_wait_ready>:

void graphic_wait_ready (void) {
200001ba:	b580      	push	{r7, lr}
200001bc:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001be:	2040      	movs	r0, #64	; 0x40
200001c0:	f7ff ffb0 	bl	20000124 <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
200001c4:	4b12      	ldr	r3, [pc, #72]	; (20000210 <graphic_wait_ready+0x56>)
200001c6:	4a13      	ldr	r2, [pc, #76]	; (20000214 <graphic_wait_ready+0x5a>)
200001c8:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001ca:	2002      	movs	r0, #2
200001cc:	f7ff ff87 	bl	200000de <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001d0:	2001      	movs	r0, #1
200001d2:	f7ff ffa7 	bl	20000124 <graphic_ctrl_bit_clear>
	delay_500ns();
200001d6:	f7ff ff4b 	bl	20000070 <delay_500ns>
	while (1) {
		graphic_ctrl_bit_set(B_E);
200001da:	2040      	movs	r0, #64	; 0x40
200001dc:	f7ff ff7f 	bl	200000de <graphic_ctrl_bit_set>
		delay_500ns();
200001e0:	f7ff ff46 	bl	20000070 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001e4:	2040      	movs	r0, #64	; 0x40
200001e6:	f7ff ff9d 	bl	20000124 <graphic_ctrl_bit_clear>
		delay_500ns();
200001ea:	f7ff ff41 	bl	20000070 <delay_500ns>
		if ( (* portIdrHigh & LCD_BUSY) == 0 ) {
200001ee:	4b0a      	ldr	r3, [pc, #40]	; (20000218 <graphic_wait_ready+0x5e>)
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	b2db      	uxtb	r3, r3
200001f4:	b25b      	sxtb	r3, r3
200001f6:	2b00      	cmp	r3, #0
200001f8:	da00      	bge.n	200001fc <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
200001fa:	e7ee      	b.n	200001da <graphic_wait_ready+0x20>
			break;
200001fc:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001fe:	2040      	movs	r0, #64	; 0x40
20000200:	f7ff ff6d 	bl	200000de <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000204:	4b02      	ldr	r3, [pc, #8]	; (20000210 <graphic_wait_ready+0x56>)
20000206:	4a05      	ldr	r2, [pc, #20]	; (2000021c <graphic_wait_ready+0x62>)
20000208:	601a      	str	r2, [r3, #0]
}
2000020a:	46c0      	nop			; (mov r8, r8)
2000020c:	46bd      	mov	sp, r7
2000020e:	bd80      	pop	{r7, pc}
20000210:	40021000 	andmi	r1, r2, r0
20000214:	00005555 	andeq	r5, r0, r5, asr r5
20000218:	40021011 	andmi	r1, r2, r1, lsl r0
2000021c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000220 <graphic_read>:

uint_8t graphic_read (uint_8t controller) {
20000220:	b580      	push	{r7, lr}
20000222:	b084      	sub	sp, #16
20000224:	af00      	add	r7, sp, #0
20000226:	0002      	movs	r2, r0
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear (B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff79 	bl	20000124 <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
20000232:	4b1b      	ldr	r3, [pc, #108]	; (200002a0 <graphic_read+0x80>)
20000234:	4a1b      	ldr	r2, [pc, #108]	; (200002a4 <graphic_read+0x84>)
20000236:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set (B_RS | B_RW);
20000238:	2003      	movs	r0, #3
2000023a:	f7ff ff50 	bl	200000de <graphic_ctrl_bit_set>
	select_controller (controller);
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	0018      	movs	r0, r3
20000244:	f7ff ff8c 	bl	20000160 <select_controller>
	delay_500ns();
20000248:	f7ff ff12 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000024c:	2040      	movs	r0, #64	; 0x40
2000024e:	f7ff ff46 	bl	200000de <graphic_ctrl_bit_set>
	delay_500ns();
20000252:	f7ff ff0d 	bl	20000070 <delay_500ns>
	uint_8t returnValue = * portIdrHigh;
20000256:	4a14      	ldr	r2, [pc, #80]	; (200002a8 <graphic_read+0x88>)
20000258:	230f      	movs	r3, #15
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff5f 	bl	20000124 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;
20000266:	4b0e      	ldr	r3, [pc, #56]	; (200002a0 <graphic_read+0x80>)
20000268:	4a10      	ldr	r2, [pc, #64]	; (200002ac <graphic_read+0x8c>)
2000026a:	601a      	str	r2, [r3, #0]
	if (controller == B_CS1) {
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2b08      	cmp	r3, #8
20000272:	d104      	bne.n	2000027e <graphic_read+0x5e>
		select_controller(B_CS1);
20000274:	2008      	movs	r0, #8
20000276:	f7ff ff73 	bl	20000160 <select_controller>
		graphic_wait_ready();
2000027a:	f7ff ff9e 	bl	200001ba <graphic_wait_ready>
	}
	if (controller == B_CS2) {
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	2b10      	cmp	r3, #16
20000284:	d104      	bne.n	20000290 <graphic_read+0x70>
		select_controller(B_CS2);
20000286:	2010      	movs	r0, #16
20000288:	f7ff ff6a 	bl	20000160 <select_controller>
		graphic_wait_ready();
2000028c:	f7ff ff95 	bl	200001ba <graphic_wait_ready>
	}
	return returnValue;
20000290:	230f      	movs	r3, #15
20000292:	18fb      	adds	r3, r7, r3
20000294:	781b      	ldrb	r3, [r3, #0]
}
20000296:	0018      	movs	r0, r3
20000298:	46bd      	mov	sp, r7
2000029a:	b004      	add	sp, #16
2000029c:	bd80      	pop	{r7, pc}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	40021000 	andmi	r1, r2, r0
200002a4:	00005555 	andeq	r5, r0, r5, asr r5
200002a8:	40021011 	andmi	r1, r2, r1, lsl r0
200002ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b0 <graphic_write>:

void graphic_write (uint_8t value, uint_8t controller) {
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
200002bc:	1dbb      	adds	r3, r7, #6
200002be:	1c0a      	adds	r2, r1, #0
200002c0:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002c2:	4a1a      	ldr	r2, [pc, #104]	; (2000032c <graphic_write+0x7c>)
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002ca:	1dbb      	adds	r3, r7, #6
200002cc:	781b      	ldrb	r3, [r3, #0]
200002ce:	0018      	movs	r0, r3
200002d0:	f7ff ff46 	bl	20000160 <select_controller>
	delay_500ns();
200002d4:	f7ff fecc 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff ff00 	bl	200000de <graphic_ctrl_bit_set>
	delay_500ns();
200002de:	f7ff fec7 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff ff1e 	bl	20000124 <graphic_ctrl_bit_clear>
	if (controller & B_CS1) {
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2208      	movs	r2, #8
200002ee:	4013      	ands	r3, r2
200002f0:	d004      	beq.n	200002fc <graphic_write+0x4c>
		select_controller(B_CS1);
200002f2:	2008      	movs	r0, #8
200002f4:	f7ff ff34 	bl	20000160 <select_controller>
		graphic_wait_ready();
200002f8:	f7ff ff5f 	bl	200001ba <graphic_wait_ready>
	}
	if (controller & B_CS2) {
200002fc:	1dbb      	adds	r3, r7, #6
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2210      	movs	r2, #16
20000302:	4013      	ands	r3, r2
20000304:	d004      	beq.n	20000310 <graphic_write+0x60>
		select_controller(B_CS2);
20000306:	2010      	movs	r0, #16
20000308:	f7ff ff2a 	bl	20000160 <select_controller>
		graphic_wait_ready();
2000030c:	f7ff ff55 	bl	200001ba <graphic_wait_ready>
	}
	* portOdrHigh = 0;
20000310:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7c>)
20000312:	2200      	movs	r2, #0
20000314:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff fee1 	bl	200000de <graphic_ctrl_bit_set>
	select_controller(0);
2000031c:	2000      	movs	r0, #0
2000031e:	f7ff ff1f 	bl	20000160 <select_controller>
}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}
2000032a:	46c0      	nop			; (mov r8, r8)
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:

void graphic_write_command (uint_8t command, uint_8t controller) {
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff feee 	bl	20000124 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff ff07 	bl	20000160 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000352:	2003      	movs	r0, #3
20000354:	f7ff fee6 	bl	20000124 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa4 	bl	200002b0 <graphic_write>
	}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:
	
void graphic_write_data (uint_8t data, uint_8t controller) {
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff fece 	bl	20000124 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fee7 	bl	20000160 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000392:	2001      	movs	r0, #1
20000394:	f7ff fea3 	bl	200000de <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000398:	2002      	movs	r0, #2
2000039a:	f7ff fec3 	bl	20000124 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff81 	bl	200002b0 <graphic_write>
	}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_read_data>:
	
uint_8t graphic_read_data (uint_8t controller) {
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
200003bc:	0002      	movs	r2, r0
200003be:	1dfb      	adds	r3, r7, #7
200003c0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	0018      	movs	r0, r3
200003c8:	f7ff ff2a 	bl	20000220 <graphic_read>
	return graphic_read(controller);
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff25 	bl	20000220 <graphic_read>
200003d6:	0003      	movs	r3, r0
	}
200003d8:	0018      	movs	r0, r3
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <graphic_initalize>:

void graphic_initalize (void) {
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff fe7a 	bl	200000de <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ea:	200a      	movs	r0, #10
200003ec:	f7ff fe49 	bl	20000082 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003f0:	2078      	movs	r0, #120	; 0x78
200003f2:	f7ff fe97 	bl	20000124 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003f6:	201e      	movs	r0, #30
200003f8:	f7ff fe59 	bl	200000ae <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003fc:	2020      	movs	r0, #32
200003fe:	f7ff fe6e 	bl	200000de <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000402:	2118      	movs	r1, #24
20000404:	203e      	movs	r0, #62	; 0x3e
20000406:	f7ff ff93 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	203f      	movs	r0, #63	; 0x3f
2000040e:	f7ff ff8f 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000412:	2118      	movs	r1, #24
20000414:	20c0      	movs	r0, #192	; 0xc0
20000416:	f7ff ff8b 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	2040      	movs	r0, #64	; 0x40
2000041e:	f7ff ff87 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000422:	2118      	movs	r1, #24
20000424:	20b8      	movs	r0, #184	; 0xb8
20000426:	f7ff ff83 	bl	20000330 <graphic_write_command>
	select_controller(0);
2000042a:	2000      	movs	r0, #0
2000042c:	f7ff fe98 	bl	20000160 <select_controller>
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	bd80      	pop	{r7, pc}

20000436 <main>:


void main(void) {
20000436:	b580      	push	{r7, lr}
20000438:	af00      	add	r7, sp, #0
}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	46bd      	mov	sp, r7
2000043e:	bd80      	pop	{r7, pc}

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002a9 	andeq	r0, r0, r9, lsr #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000dd 	ldrdeq	r0, [r0], -sp
  10:	0001700c 	andeq	r7, r1, ip
  14:	00004f00 	andeq	r4, r0, r0, lsl #30
	...
  24:	026a0200 	rsbeq	r0, sl, #0, 4
  28:	2a010000 	bcs	40030 <startup-0x1ffbffd0>
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000237 	andeq	r0, r0, r7, lsr r2
  38:	00024504 	andeq	r4, r2, r4, lsl #10
  3c:	06d70100 	ldrbeq	r0, [r7], r0, lsl #2
  40:	20000436 	andcs	r0, r0, r6, lsr r4
  44:	0000000a 	andeq	r0, r0, sl
  48:	7a059c01 	bvc	167054 <startup-0x1fe98fac>
  4c:	01000002 	tsteq	r0, r2
  50:	03e006c8 	mvneq	r0, #200, 12	; 0xc800000
  54:	00562000 	subseq	r2, r6, r0
  58:	9c010000 	stcls	0, cr0, [r1], {-0}
  5c:	0000be06 	andeq	fp, r0, r6, lsl #28
  60:	09c30100 	stmibeq	r3, {r8}^
  64:	00000025 	andeq	r0, r0, r5, lsr #32
  68:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
  6c:	0000002a 	andeq	r0, r0, sl, lsr #32
  70:	00869c01 	addeq	r9, r6, r1, lsl #24
  74:	5f070000 	svcpl	0x00070000
  78:	01000002 	tsteq	r0, r2
  7c:	002524c3 	eoreq	r2, r5, r3, asr #9
  80:	91020000 	mrsls	r0, (UNDEF: 2)
  84:	1b080077 	blne	200268 <startup-0x1fdffd98>
  88:	01000002 	tsteq	r0, r2
  8c:	037006bb 	cmneq	r0, #196083712	; 0xbb00000
  90:	00462000 	subeq	r2, r6, r0
  94:	9c010000 	stcls	0, cr0, [r1], {-0}
  98:	000000bb 	strheq	r0, [r0], -fp
  9c:	0000cb07 	andeq	ip, r0, r7, lsl #22
  a0:	22bb0100 	adcscs	r0, fp, #0, 2
  a4:	00000025 	andeq	r0, r0, r5, lsr #32
  a8:	07779102 	ldrbeq	r9, [r7, -r2, lsl #2]!
  ac:	0000025f 	andeq	r0, r0, pc, asr r2
  b0:	2530bb01 	ldrcs	fp, [r0, #-2817]!	; 0xfffff4ff
  b4:	02000000 	andeq	r0, r0, #0
  b8:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
  bc:	0000002d 	andeq	r0, r0, sp, lsr #32
  c0:	3006b401 	andcc	fp, r6, r1, lsl #8
  c4:	40200003 	eormi	r0, r0, r3
  c8:	01000000 	mrseq	r0, (UNDEF: 0)
  cc:	0000f09c 	muleq	r0, ip, r0
  d0:	003b0700 	eorseq	r0, fp, r0, lsl #14
  d4:	b4010000 	strlt	r0, [r1], #-0
  d8:	00002525 	andeq	r2, r0, r5, lsr #10
  dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  e0:	00025f07 	andeq	r5, r2, r7, lsl #30
  e4:	36b40100 	ldrtcc	r0, [r4], r0, lsl #2
  e8:	00000025 	andeq	r0, r0, r5, lsr #32
  ec:	00769102 	rsbseq	r9, r6, r2, lsl #2
  f0:	00024a08 	andeq	r4, r2, r8, lsl #20
  f4:	06a00100 	strteq	r0, [r0], r0, lsl #2
  f8:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
  fc:	00000080 	andeq	r0, r0, r0, lsl #1
 100:	01259c01 			; <UNDEFINED> instruction: 0x01259c01
 104:	8c070000 	stchi	0, cr0, [r7], {-0}
 108:	01000002 	tsteq	r0, r2
 10c:	00251da0 	eoreq	r1, r5, r0, lsr #27
 110:	91020000 	mrsls	r0, (UNDEF: 2)
 114:	025f0777 	subseq	r0, pc, #31195136	; 0x1dc0000
 118:	a0010000 	andge	r0, r1, r0
 11c:	0000252c 	andeq	r2, r0, ip, lsr #10
 120:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 124:	00d00600 	sbcseq	r0, r0, r0, lsl #12
 128:	8a010000 	bhi	40130 <startup-0x1ffbfed0>
 12c:	00002509 	andeq	r2, r0, r9, lsl #10
 130:	00022000 	andeq	r2, r2, r0
 134:	00009020 	andeq	r9, r0, r0, lsr #32
 138:	5e9c0100 	fmlple	f0, f4, f0
 13c:	07000001 	streq	r0, [r0, -r1]
 140:	0000025f 	andeq	r0, r0, pc, asr r2
 144:	251f8a01 	ldrcs	r8, [pc, #-2561]	; fffff74b <main+0xdffff315>
 148:	02000000 	andeq	r0, r0, #0
 14c:	0c096f91 	stceq	15, cr6, [r9], {145}	; 0x91
 150:	01000000 	mrseq	r0, (UNDEF: 0)
 154:	00250a92 	mlaeq	r5, r2, sl, r0
 158:	91020000 	mrsls	r0, (UNDEF: 2)
 15c:	08050077 	stmdaeq	r5, {r0, r1, r2, r4, r5, r6}
 160:	01000002 	tsteq	r0, r2
 164:	01ba0677 			; <UNDEFINED> instruction: 0x01ba0677
 168:	00662000 	rsbeq	r2, r6, r0
 16c:	9c010000 	stcls	0, cr0, [r1], {-0}
 170:	00025808 	andeq	r5, r2, r8, lsl #16
 174:	066b0100 	strbteq	r0, [fp], -r0, lsl #2
 178:	20000160 	andcs	r0, r0, r0, ror #2
 17c:	0000005a 	andeq	r0, r0, sl, asr r0
 180:	01969c01 	orrseq	r9, r6, r1, lsl #24
 184:	5f070000 	svcpl	0x00070000
 188:	01000002 	tsteq	r0, r2
 18c:	0025216b 	eoreq	r2, r5, fp, ror #2
 190:	91020000 	mrsls	r0, (UNDEF: 2)
 194:	590a0077 	stmdbpl	sl, {r0, r1, r2, r4, r5, r6}
 198:	01000001 	tsteq	r0, r1
 19c:	01240665 			; <UNDEFINED> instruction: 0x01240665
 1a0:	003c2000 	eorseq	r2, ip, r0
 1a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 1a8:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 1ac:	0100780b 	tsteq	r0, fp, lsl #16
 1b0:	00252665 	eoreq	r2, r5, r5, ror #12
 1b4:	91020000 	mrsls	r0, (UNDEF: 2)
 1b8:	180a0077 	stmdane	sl, {r0, r1, r2, r4, r5, r6}
 1bc:	01000000 	mrseq	r0, (UNDEF: 0)
 1c0:	00de0660 	sbcseq	r0, lr, r0, ror #12
 1c4:	00462000 	subeq	r2, r6, r0
 1c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1cc:	000001de 	ldrdeq	r0, [r0], -lr
 1d0:	0100780b 	tsteq	r0, fp, lsl #16
 1d4:	00252460 	eoreq	r2, r5, r0, ror #8
 1d8:	91020000 	mrsls	r0, (UNDEF: 2)
 1dc:	00080077 	andeq	r0, r8, r7, ror r0
 1e0:	01000000 	mrseq	r0, (UNDEF: 0)
 1e4:	00ae0654 	adceq	r0, lr, r4, asr r6
 1e8:	00302000 	eorseq	r2, r0, r0
 1ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 1f0:	0000021a 	andeq	r0, r0, sl, lsl r2
 1f4:	00736d0b 	rsbseq	r6, r3, fp, lsl #26
 1f8:	1a1f5401 	bne	7d5204 <startup-0x1f82adfc>
 1fc:	02000002 	andeq	r0, r0, #2
 200:	b60c6c91 			; <UNDEFINED> instruction: 0xb60c6c91
 204:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 208:	0d000000 	stceq	0, cr0, [r0, #-0]
 20c:	59010069 	stmdbpl	r1, {r0, r3, r5, r6}
 210:	0002210a 	andeq	r2, r2, sl, lsl #2
 214:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 218:	04030000 	streq	r0, [r3], #-0
 21c:	00029207 	andeq	r9, r2, r7, lsl #4
 220:	05040e00 	streq	r0, [r4, #-3584]	; 0xfffff200
 224:	00746e69 	rsbseq	r6, r4, r9, ror #28
 228:	00004308 	andeq	r4, r0, r8, lsl #6
 22c:	064a0100 	strbeq	r0, [sl], -r0, lsl #2
 230:	20000082 	andcs	r0, r0, r2, lsl #1
 234:	0000002c 	andeq	r0, r0, ip, lsr #32
 238:	02649c01 	rsbeq	r9, r4, #256	; 0x100
 23c:	750b0000 	strvc	r0, [fp, #-0]
 240:	4a010073 	bmi	40414 <startup-0x1ffbfbec>
 244:	00021a1f 	andeq	r1, r2, pc, lsl sl
 248:	6c910200 	lfmvs	f0, 4, [r1], {0}
 24c:	00008a0c 	andeq	r8, r0, ip, lsl #20
 250:	00001a20 	andeq	r1, r0, r0, lsr #20
 254:	00690d00 	rsbeq	r0, r9, r0, lsl #26
 258:	210a4f01 	tstcs	sl, r1, lsl #30
 25c:	02000002 	andeq	r0, r0, #2
 260:	00007491 	muleq	r0, r1, r4
 264:	0001fc05 	andeq	pc, r1, r5, lsl #24
 268:	06450100 	strbeq	r0, [r5], -r0, lsl #2
 26c:	20000070 	andcs	r0, r0, r0, ror r0
 270:	00000012 	andeq	r0, r0, r2, lsl r0
 274:	f0049c01 			; <UNDEFINED> instruction: 0xf0049c01
 278:	01000001 	tsteq	r0, r1
 27c:	0028063b 	eoreq	r0, r8, fp, lsr r6
 280:	00482000 	subeq	r2, r8, r0
 284:	9c010000 	stcls	0, cr0, [r1], {-0}
 288:	00022e04 	andeq	r2, r2, r4, lsl #28
 28c:	06350100 	ldrteq	r0, [r5], -r0, lsl #2
 290:	20000010 	andcs	r0, r0, r0, lsl r0
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	72049c01 	andvc	r9, r4, #256	; 0x100
 29c:	01000002 	tsteq	r0, r2
 2a0:	0000062d 	andeq	r0, r0, sp, lsr #12
 2a4:	000c2000 	andeq	r2, ip, r0
 2a8:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	002e0400 	eoreq	r0, lr, r0, lsl #8
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  44:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
  48:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b390b3b 	bleq	e42d44 <startup-0x1f1bd2bc>
  54:	01111927 	tsteq	r1, r7, lsr #18
  58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  5c:	00194296 	mulseq	r9, r6, r2
  60:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
  64:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  68:	0b3b0b3a 	bleq	ec2d58 <startup-0x1f13d2a8>
  6c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  70:	01111349 	tsteq	r1, r9, asr #6
  74:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  78:	01194296 			; <UNDEFINED> instruction: 0x01194296
  7c:	07000013 	smladeq	r0, r3, r0, r0
  80:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  84:	0b3b0b3a 	bleq	ec2d74 <startup-0x1f13d28c>
  88:	13490b39 	movtne	r0, #39737	; 0x9b39
  8c:	00001802 	andeq	r1, r0, r2, lsl #16
  90:	3f012e08 	svccc	0x00012e08
  94:	3a0e0319 	bcc	380d00 <startup-0x1fc7f300>
  98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  9c:	1119270b 	tstne	r9, fp, lsl #14
  a0:	40061201 	andmi	r1, r6, r1, lsl #4
  a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a8:	00001301 	andeq	r1, r0, r1, lsl #6
  ac:	03003409 	movweq	r3, #1033	; 0x409
  b0:	3b0b3a0e 	blcc	2ce8f0 <startup-0x1fd31710>
  b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  b8:	00180213 	andseq	r0, r8, r3, lsl r2
  bc:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
  c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c4:	0b3b0b3a 	bleq	ec2db4 <startup-0x1f13d24c>
  c8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  d4:	00130119 	andseq	r0, r3, r9, lsl r1
  d8:	00050b00 	andeq	r0, r5, r0, lsl #22
  dc:	0b3a0803 	bleq	e820f0 <startup-0x1f17df10>
  e0:	0b390b3b 	bleq	e42dd4 <startup-0x1f1bd22c>
  e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e8:	0b0c0000 	bleq	3000f0 <startup-0x1fcfff10>
  ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  f0:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
  f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  f8:	0b3b0b3a 	bleq	ec2de8 <startup-0x1f13d218>
  fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 100:	00001802 	andeq	r1, r0, r2, lsl #16
 104:	0b00240e 	bleq	9144 <startup-0x1fff6ebc>
 108:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 10c:	00000008 	andeq	r0, r0, r8

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000430 	andeq	r0, r0, r0, lsr r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000440 	andcs	r0, r0, r0, asr #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000275 	andeq	r0, r0, r5, ror r2
   4:	00960003 	addseq	r0, r6, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	6f2f3731 	svcvs	0x002f3731
  58:	5f666f6c 	svcpl	0x00666f6c
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	2f746e65 	svccs	0x00746e65
  64:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  68:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  6c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
  70:	6170736b 	cmnvs	r0, fp, ror #6
  74:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  78:	672f666f 	strvs	r6, [pc, -pc, ror #12]!
  7c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  80:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  84:	616c7073 	smcvs	50947	; 0xc703
  88:	67000079 	smlsdxvs	r0, r9, r0, r0
  8c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  90:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  94:	616c7073 	smcvs	50947	; 0xc703
  98:	00632e79 	rsbeq	r2, r3, r9, ror lr
  9c:	00000001 	andeq	r0, r0, r1
  a0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  a4:	00000002 	andeq	r0, r0, r2
  a8:	012d0320 			; <UNDEFINED> instruction: 0x012d0320
  ac:	2f212113 	svccs	0x00212113
  b0:	00030221 	andeq	r0, r3, r1, lsr #4
  b4:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
  b8:	10020500 	andne	r0, r2, r0, lsl #10
  bc:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  c0:	02050134 	andeq	r0, r5, #52, 2
  c4:	200e052f 	andcs	r0, lr, pc, lsr #10
  c8:	052f0105 	streq	r0, [pc, #-261]!	; ffffffcb <main+0xdffffb95>
  cc:	02057817 	andeq	r7, r5, #1507328	; 0x170000
  d0:	200c052f 	andcs	r0, ip, pc, lsr #10
  d4:	052f0205 	streq	r0, [pc, #-517]!	; fffffed7 <main+0xdffffaa1>
  d8:	0205200c 	andeq	r2, r5, #12
  dc:	200b052f 	andcs	r0, fp, pc, lsr #10
  e0:	052f0205 	streq	r0, [pc, #-517]!	; fffffee3 <main+0xdffffaad>
  e4:	0705200c 	streq	r2, [r5, -ip]
  e8:	000a052f 	andeq	r0, sl, pc, lsr #10
  ec:	20010402 	andcs	r0, r1, r2, lsl #8
  f0:	02001905 	andeq	r1, r0, #81920	; 0x14000
  f4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  f8:	04020007 	streq	r0, [r2], #-7
  fc:	02053c01 	andeq	r3, r5, #256	; 0x100
 100:	200c0522 	andcs	r0, ip, r2, lsr #10
 104:	052f0105 	streq	r0, [pc, #-261]!	; 7 <startup-0x1ffffff9>
 108:	0205ae17 	andeq	sl, r5, #368	; 0x170
 10c:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff1e5 <main+0xdfffedaf>
 110:	0a053e22 	beq	14f9a0 <startup-0x1feb0660>
 114:	2e02054f 	cfsh32cs	mvfx0, mvfx2, #47
 118:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 11c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 120:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 124:	16052d03 	strne	r2, [r5], -r3, lsl #26
 128:	01040200 	mrseq	r0, R12_usr
 12c:	0013053c 	andseq	r0, r3, ip, lsr r5
 130:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 134:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 138:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 13c:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 140:	4f0a055a 	svcmi	0x000a055a
 144:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 148:	04020003 	streq	r0, [r2], #-3
 14c:	1a052103 	bne	148560 <startup-0x1feb7aa0>
 150:	03040200 	movweq	r0, #16896	; 0x4200
 154:	00130557 	andseq	r0, r3, r7, asr r5
 158:	3c010402 	cfstrscc	mvf0, [r1], {2}
 15c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 160:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 164:	27053f01 	strcs	r3, [r5, -r1, lsl #30]
 168:	670f055c 	smlsdvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 16c:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 170:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 174:	29058302 	stmdbcs	r5, {r1, r8, r9, pc}
 178:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 17c:	15080205 	strne	r0, [r8, #-517]	; 0xfffffdfb
 180:	05762e05 	ldrbeq	r2, [r6, #-3589]!	; 0xfffff1fb
 184:	13056702 	movwne	r6, #22274	; 0x5702
 188:	030c05c1 	movweq	r0, #50625	; 0xc5c1
 18c:	0305207a 	movweq	r2, #20602	; 0x507a
 190:	210f053c 	tstcs	pc, ip, lsr r5	; <UNPREDICTABLE>
 194:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 198:	09054b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, lr}
 19c:	4b19053d 	blmi	641698 <startup-0x1f9be968>
 1a0:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 1a4:	01052113 	tsteq	r5, r3, lsl r1
 1a8:	3e200522 	cfsh64cc	mvdx0, mvdx0, #18
 1ac:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1a0 <startup-0x1ffffe60>
 1b0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1b4:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 1b8:	3d300305 	ldccc	3, cr0, [r0, #-20]!	; 0xffffffec
 1bc:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 1c0:	3c23052f 	cfstr32cc	mvfx0, [r3], #-188	; 0xffffff44
 1c4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 1c8:	04052a03 	streq	r2, [r5], #-2563	; 0xfffff5fd
 1cc:	23020525 	movwcs	r0, #9509	; 0x2525
 1d0:	200e053d 	andcs	r0, lr, sp, lsr r5
 1d4:	052f0105 	streq	r0, [pc, #-261]!	; d7 <startup-0x1fffff29>
 1d8:	0205ae2b 	andeq	sl, r5, #688	; 0x2b0
 1dc:	0e053d67 	cdpeq	13, 0, cr3, cr5, cr7, {3}
 1e0:	2f020520 	svccs	0x00020520
 1e4:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 1e8:	052f1805 	streq	r1, [pc, #-2053]!	; fffff9eb <main+0xdffff5b5>
 1ec:	0205200a 	andeq	r2, r5, #10
 1f0:	0e053d4b 	cdpeq	13, 0, cr3, cr5, cr11, {2}
 1f4:	2f050520 	svccs	0x00050520
 1f8:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 1fc:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 200:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 204:	01053009 	tsteq	r5, r9
 208:	ca38053d 	bgt	e01704 <startup-0x1f1fe8fc>
 20c:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 210:	02052010 	andeq	r2, r5, #16
 214:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 218:	3d11052f 	cfldr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 21c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 220:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 224:	05053011 	streq	r3, [r5, #-17]	; 0xffffffef
 228:	2103054a 	tstcs	r3, sl, asr #10
 22c:	3002053d 	andcc	r0, r2, sp, lsr r5
 230:	05201005 	streq	r1, [r0, #-5]!
 234:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 238:	42053d01 	andmi	r3, r5, #1, 26	; 0x40
 23c:	91020576 	tstls	r2, r6, ror r5
 240:	833d593d 	teqhi	sp, #999424	; 0xf4000
 244:	054c3c05 	strbeq	r3, [ip, #-3077]	; 0xfffff3fb
 248:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 24c:	05833d3d 	streq	r3, [r3, #3389]	; 0xd3d
 250:	02054c30 	andeq	r4, r5, #48, 24	; 0x3000
 254:	59090567 	stmdbpl	r9, {r0, r1, r2, r5, r6, r8, sl}
 258:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 25c:	02054c1f 	andeq	r4, r5, #7936	; 0x1f00
 260:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 264:	4b4b3d3d 	blmi	12cf760 <startup-0x1ed308a0>
 268:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 26c:	11053d01 	tstne	r5, r1, lsl #26
 270:	2f01053f 	svccs	0x0001053f
 274:	01000302 	tsteq	r0, r2, lsl #6
 278:	Address 0x00000278 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
  10:	61566e72 	cmpvs	r6, r2, ror lr
  14:	0065756c 	rsbeq	r7, r5, ip, ror #10
  18:	70617267 	rsbvc	r7, r1, r7, ror #4
  1c:	5f636968 	svcpl	0x00636968
  20:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  24:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  28:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  2c:	61726700 	cmnvs	r2, r0, lsl #14
  30:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  34:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  38:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  3c:	616d6d6f 	cmnvs	sp, pc, ror #26
  40:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
  44:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  48:	6b696d5f 	blvs	1a5b5cc <startup-0x1e5a4a34>
  4c:	43006f72 	movwmi	r6, #3954	; 0xf72
  50:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
  54:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
  58:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  5c:	6f445c73 	svcvs	0x00445c73
  60:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  64:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
  68:	5f746967 	svcpl	0x00746967
  6c:	6a6f7270 	bvs	1bdca34 <startup-0x1e4235cc>
  70:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  74:	6863535c 	stmdavs	r3!, {r2, r3, r4, r6, r8, r9, ip, lr}^
  78:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  7c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  80:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
  84:	30544144 	subscc	r4, r4, r4, asr #2
  88:	6f5c3731 	svcvs	0x005c3731
  8c:	5f666f6c 	svcpl	0x00666f6c
  90:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  94:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
  98:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  9c:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  a0:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
  a4:	6170736b 	cmnvs	r0, fp, ror #6
  a8:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  ac:	675c666f 	ldrbvs	r6, [ip, -pc, ror #12]
  b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  b4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
  b8:	616c7073 	smcvs	50947	; 0xc703
  bc:	72670079 	rsbvc	r0, r7, #121	; 0x79
  c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  c4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  c8:	645f6461 	ldrbvs	r6, [pc], #-1121	; d0 <startup-0x1fffff30>
  cc:	00617461 	rsbeq	r7, r1, r1, ror #8
  d0:	70617267 	rsbvc	r7, r1, r7, ror #4
  d4:	5f636968 	svcpl	0x00636968
  d8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  dc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  e0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  e4:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  e8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  ec:	31393130 	teqcc	r9, r0, lsr r1
  f0:	20353230 	eorscs	r3, r5, r0, lsr r2
  f4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  f8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  fc:	415b2029 	cmpmi	fp, r9, lsr #32
 100:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 104:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 108:	6172622d 	cmnvs	r2, sp, lsr #4
 10c:	2068636e 	rsbcs	r6, r8, lr, ror #6
 110:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 114:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 118:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 11c:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 120:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 124:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 128:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 12c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 130:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 134:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 138:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 13c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 140:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 144:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 148:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 14c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 150:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 154:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 158:	61726700 	cmnvs	r2, r0, lsl #14
 15c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 160:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 164:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 168:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 16c:	00726165 	rsbseq	r6, r2, r5, ror #2
 170:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff735 <main+0xdffff2ff>
 174:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 178:	6f6c6f2f 	svcvs	0x006c6f2f
 17c:	442f7366 	strtmi	r7, [pc], #-870	; 184 <startup-0x1ffffe7c>
 180:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 184:	73746e65 	cmnvc	r4, #1616	; 0x650
 188:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 18c:	6f72705f 	svcvs	0x0072705f
 190:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 194:	63532f73 	cmpvs	r3, #460	; 0x1cc
 198:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 0 <startup-0x20000000>
 19c:	6a6f7250 	bvs	1bdcae4 <startup-0x1e42351c>
 1a0:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 1a4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1a8:	2f373130 	svccs	0x00373130
 1ac:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
 1b0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1b4:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 1b8:	646f432f 	strbtvs	r4, [pc], #-815	; 1c0 <startup-0x1ffffe40>
 1bc:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 1c0:	6f772f65 	svcvs	0x00772f65
 1c4:	70736b72 	rsbsvc	r6, r3, r2, ror fp
 1c8:	4f656361 	svcmi	0x00656361
 1cc:	2f666f6c 	svccs	0x00666f6c
 1d0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1d4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1d8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1dc:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 1e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1e4:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1e8:	616c7073 	smcvs	50947	; 0xc703
 1ec:	00632e79 	rsbeq	r2, r3, r9, ror lr
 1f0:	616c6564 	cmnvs	ip, r4, ror #10
 1f4:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 1f8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 1fc:	616c6564 	cmnvs	ip, r4, ror #10
 200:	30355f79 	eorscc	r5, r5, r9, ror pc
 204:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 208:	70617267 	rsbvc	r7, r1, r7, ror #4
 20c:	5f636968 	svcpl	0x00636968
 210:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 214:	6165725f 	cmnvs	r5, pc, asr r2
 218:	67007964 	strvs	r7, [r0, -r4, ror #18]
 21c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 220:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 224:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 228:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 22c:	6e690061 	cdpvs	0, 6, cr0, cr9, cr1, {3}
 230:	615f7469 	cmpvs	pc, r9, ror #8
 234:	75007070 	strvc	r7, [r0, #-112]	; 0xffffff90
 238:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 23c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 240:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 244:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 248:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 24c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 250:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 254:	00657469 	rsbeq	r7, r5, r9, ror #8
 258:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 25c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 260:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 264:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 268:	69750072 	ldmdbvs	r5!, {r1, r4, r5, r6}^
 26c:	385f746e 	ldmdacc	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 270:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
 274:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 278:	72670070 	rsbvc	r0, r7, #112	; 0x70
 27c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 280:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 284:	6c617469 	cfstrdvs	mvd7, [r1], #-420	; 0xfffffe5c
 288:	00657a69 	rsbeq	r7, r5, r9, ror #20
 28c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 290:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
 294:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 298:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 29c:	Address 0x0000029c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000012 	andeq	r0, r0, r2, lsl r0
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0000070d 	andeq	r0, r0, sp, lsl #14
  74:	0000001c 	andeq	r0, r0, ip, lsl r0
  78:	00000000 	andeq	r0, r0, r0
  7c:	20000082 	andcs	r0, r0, r2, lsl #1
  80:	0000002c 	andeq	r0, r0, ip, lsr #32
  84:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  88:	41018e02 	tstmi	r1, r2, lsl #28
  8c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  90:	00000007 	andeq	r0, r0, r7
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	00000000 	andeq	r0, r0, r0
  9c:	200000ae 	andcs	r0, r0, lr, lsr #1
  a0:	00000030 	andeq	r0, r0, r0, lsr r0
  a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a8:	41018e02 	tstmi	r1, r2, lsl #28
  ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b0:	00000007 	andeq	r0, r0, r7
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	200000de 	ldrdcs	r0, [r0], -lr
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000124 	andcs	r0, r0, r4, lsr #2
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	20000160 	andcs	r0, r0, r0, ror #2
 100:	0000005a 	andeq	r0, r0, sl, asr r0
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001ba 			; <UNDEFINED> instruction: 0x200001ba
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000220 	andcs	r0, r0, r0, lsr #4
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000330 	andcs	r0, r0, r0, lsr r3
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	20000370 	andcs	r0, r0, r0, ror r3
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200003e0 	andcs	r0, r0, r0, ror #7
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	00000018 	andeq	r0, r0, r8, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	20000436 	andcs	r0, r0, r6, lsr r4
 1f8:	0000000a 	andeq	r0, r0, sl
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0000070d 	andeq	r0, r0, sp, lsl #14
