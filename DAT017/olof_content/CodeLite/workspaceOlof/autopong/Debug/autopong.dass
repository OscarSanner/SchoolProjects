
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 } OBJECT, *POBJECT;

  // --------------------------- STARTUP --------------------------------
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ) {
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fc14 	bl	20000830 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	* portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
	#ifdef USBDM
		* ((unsigned long *) 0x40023830) = 0x18;
		__asm__ volatile(" LDR R0, =0x08000209\n");
		__asm__ volatile(" BLX R0 \n");
	#endif
}
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <delay_250ns>:

 // --------------------------- DELAY --------------------------------

void delay_250ns(void){
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
2000002c:	4b0c      	ldr	r3, [pc, #48]	; (20000060 <delay_250ns+0x38>)
2000002e:	2200      	movs	r2, #0
20000030:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
20000032:	4b0c      	ldr	r3, [pc, #48]	; (20000064 <delay_250ns+0x3c>)
20000034:	2229      	movs	r2, #41	; 0x29
20000036:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000038:	4b0b      	ldr	r3, [pc, #44]	; (20000068 <delay_250ns+0x40>)
2000003a:	2200      	movs	r2, #0
2000003c:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
2000003e:	4b08      	ldr	r3, [pc, #32]	; (20000060 <delay_250ns+0x38>)
20000040:	2205      	movs	r2, #5
20000042:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x1) != 0){
20000044:	46c0      	nop			; (mov r8, r8)
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <delay_250ns+0x44>)
20000048:	781b      	ldrb	r3, [r3, #0]
2000004a:	b2db      	uxtb	r3, r3
2000004c:	001a      	movs	r2, r3
2000004e:	2301      	movs	r3, #1
20000050:	4013      	ands	r3, r2
20000052:	d1f8      	bne.n	20000046 <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
20000054:	4b02      	ldr	r3, [pc, #8]	; (20000060 <delay_250ns+0x38>)
20000056:	2200      	movs	r2, #0
20000058:	701a      	strb	r2, [r3, #0]
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	bd80      	pop	{r7, pc}
20000060:	e000e010 	and	lr, r0, r0, lsl r0
20000064:	e000e014 	and	lr, r0, r4, lsl r0
20000068:	e000e018 	and	lr, r0, r8, lsl r0
2000006c:	e000e012 	and	lr, r0, r2, lsl r0

20000070 <delay_500ns>:

void delay_500ns(void){
20000070:	b580      	push	{r7, lr}
20000072:	af00      	add	r7, sp, #0
	delay_250ns();
20000074:	f7ff ffd8 	bl	20000028 <delay_250ns>
	delay_250ns();
20000078:	f7ff ffd6 	bl	20000028 <delay_250ns>
	}
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	bd80      	pop	{r7, pc}

20000082 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000082:	b580      	push	{r7, lr}
20000084:	b084      	sub	sp, #16
20000086:	af00      	add	r7, sp, #0
20000088:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
		us = us/1000;
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	22fa      	movs	r2, #250	; 0xfa
2000008e:	0091      	lsls	r1, r2, #2
20000090:	0018      	movs	r0, r3
20000092:	f000 fbe9 	bl	20000868 <__udivsi3>
20000096:	0003      	movs	r3, r0
20000098:	607b      	str	r3, [r7, #4]
		us ++;
2000009a:	687b      	ldr	r3, [r7, #4]
2000009c:	3301      	adds	r3, #1
2000009e:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delay_mikro+0x2e>
		delay_250ns();
200000a6:	f7ff ffbf 	bl	20000028 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	009a      	lsls	r2, r3, #2
200000b4:	68fb      	ldr	r3, [r7, #12]
200000b6:	429a      	cmp	r2, r3
200000b8:	d8f5      	bhi.n	200000a6 <delay_mikro+0x24>
	}
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46bd      	mov	sp, r7
200000c0:	b004      	add	sp, #16
200000c2:	bd80      	pop	{r7, pc}

200000c4 <delay_milli>:

void delay_milli(unsigned int ms){
200000c4:	b580      	push	{r7, lr}
200000c6:	b084      	sub	sp, #16
200000c8:	af00      	add	r7, sp, #0
200000ca:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	22fa      	movs	r2, #250	; 0xfa
200000d0:	0091      	lsls	r1, r2, #2
200000d2:	0018      	movs	r0, r3
200000d4:	f000 fbc8 	bl	20000868 <__udivsi3>
200000d8:	0003      	movs	r3, r0
200000da:	607b      	str	r3, [r7, #4]
		ms ++;
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	3301      	adds	r3, #1
200000e0:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000e2:	2300      	movs	r3, #0
200000e4:	60fb      	str	r3, [r7, #12]
200000e6:	e007      	b.n	200000f8 <delay_milli+0x34>
		delay_mikro(1000);
200000e8:	23fa      	movs	r3, #250	; 0xfa
200000ea:	009b      	lsls	r3, r3, #2
200000ec:	0018      	movs	r0, r3
200000ee:	f7ff ffc8 	bl	20000082 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000f2:	68fb      	ldr	r3, [r7, #12]
200000f4:	3301      	adds	r3, #1
200000f6:	60fb      	str	r3, [r7, #12]
200000f8:	68fb      	ldr	r3, [r7, #12]
200000fa:	687a      	ldr	r2, [r7, #4]
200000fc:	429a      	cmp	r2, r3
200000fe:	d8f3      	bhi.n	200000e8 <delay_milli+0x24>
	}
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b004      	add	sp, #16
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_ctrl_bit_set>:

// ------------------------------ DISPLAY ----------------------------

void graphic_ctrl_bit_set (uint_8t x) {
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
20000110:	0002      	movs	r2, r0
20000112:	1dfb      	adds	r3, r7, #7
20000114:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= ( x & ~B_SELECT );
20000116:	4b0d      	ldr	r3, [pc, #52]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000118:	781b      	ldrb	r3, [r3, #0]
2000011a:	b2db      	uxtb	r3, r3
2000011c:	b25a      	sxtb	r2, r3
2000011e:	1dfb      	adds	r3, r7, #7
20000120:	781b      	ldrb	r3, [r3, #0]
20000122:	b25b      	sxtb	r3, r3
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b25b      	sxtb	r3, r3
2000012a:	4313      	orrs	r3, r2
2000012c:	b25a      	sxtb	r2, r3
2000012e:	4b07      	ldr	r3, [pc, #28]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000130:	b2d2      	uxtb	r2, r2
20000132:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
20000134:	4b05      	ldr	r3, [pc, #20]	; (2000014c <graphic_ctrl_bit_set+0x42>)
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	b2db      	uxtb	r3, r3
2000013a:	4a04      	ldr	r2, [pc, #16]	; (2000014c <graphic_ctrl_bit_set+0x42>)
2000013c:	2104      	movs	r1, #4
2000013e:	438b      	bics	r3, r1
20000140:	b2db      	uxtb	r3, r3
20000142:	7013      	strb	r3, [r2, #0]
	}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b002      	add	sp, #8
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <graphic_ctrl_bit_clear>:
	
void graphic_ctrl_bit_clear (uint_8t x) {
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~( x | B_SELECT );
2000015c:	4b0a      	ldr	r3, [pc, #40]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	b2db      	uxtb	r3, r3
20000162:	b25b      	sxtb	r3, r3
20000164:	1dfa      	adds	r2, r7, #7
20000166:	7812      	ldrb	r2, [r2, #0]
20000168:	2104      	movs	r1, #4
2000016a:	430a      	orrs	r2, r1
2000016c:	b2d2      	uxtb	r2, r2
2000016e:	b252      	sxtb	r2, r2
20000170:	43d2      	mvns	r2, r2
20000172:	b252      	sxtb	r2, r2
20000174:	4013      	ands	r3, r2
20000176:	b25a      	sxtb	r2, r3
20000178:	4b03      	ldr	r3, [pc, #12]	; (20000188 <graphic_ctrl_bit_clear+0x38>)
2000017a:	b2d2      	uxtb	r2, r2
2000017c:	701a      	strb	r2, [r3, #0]
			//	* portOdrLow &= ~x;
			//	* portOdrLow &= ~B_SELECT;
	}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	46bd      	mov	sp, r7
20000182:	b002      	add	sp, #8
20000184:	bd80      	pop	{r7, pc}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	40021014 	andmi	r1, r2, r4, lsl r0

2000018c <select_controller>:

void select_controller (uint_8t controller ) {
2000018c:	b580      	push	{r7, lr}
2000018e:	b082      	sub	sp, #8
20000190:	af00      	add	r7, sp, #0
20000192:	0002      	movs	r2, r0
20000194:	1dfb      	adds	r3, r7, #7
20000196:	701a      	strb	r2, [r3, #0]
	switch (controller) {
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	781b      	ldrb	r3, [r3, #0]
2000019c:	2b18      	cmp	r3, #24
2000019e:	d01a      	beq.n	200001d6 <select_controller+0x4a>
200001a0:	dc1d      	bgt.n	200001de <select_controller+0x52>
200001a2:	2b10      	cmp	r3, #16
200001a4:	d010      	beq.n	200001c8 <select_controller+0x3c>
200001a6:	dc1a      	bgt.n	200001de <select_controller+0x52>
200001a8:	2b00      	cmp	r3, #0
200001aa:	d002      	beq.n	200001b2 <select_controller+0x26>
200001ac:	2b08      	cmp	r3, #8
200001ae:	d004      	beq.n	200001ba <select_controller+0x2e>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
								graphic_ctrl_bit_set( B_CS1 ); break;
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
								graphic_ctrl_bit_set( B_CS2 ); break;
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
		default: return 0;
200001b0:	e015      	b.n	200001de <select_controller+0x52>
		case 0:  graphic_ctrl_bit_clear( B_CS1 | B_CS2 ); break;
200001b2:	2018      	movs	r0, #24
200001b4:	f7ff ffcc 	bl	20000150 <graphic_ctrl_bit_clear>
200001b8:	e012      	b.n	200001e0 <select_controller+0x54>
		case B_CS1: graphic_ctrl_bit_clear( B_CS2 ); 
200001ba:	2010      	movs	r0, #16
200001bc:	f7ff ffc8 	bl	20000150 <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS1 ); break;
200001c0:	2008      	movs	r0, #8
200001c2:	f7ff ffa2 	bl	2000010a <graphic_ctrl_bit_set>
200001c6:	e00b      	b.n	200001e0 <select_controller+0x54>
		case B_CS2: graphic_ctrl_bit_clear( B_CS1 ); 
200001c8:	2008      	movs	r0, #8
200001ca:	f7ff ffc1 	bl	20000150 <graphic_ctrl_bit_clear>
								graphic_ctrl_bit_set( B_CS2 ); break;
200001ce:	2010      	movs	r0, #16
200001d0:	f7ff ff9b 	bl	2000010a <graphic_ctrl_bit_set>
200001d4:	e004      	b.n	200001e0 <select_controller+0x54>
		case B_CS1_AND_B_CS2: graphic_ctrl_bit_set( B_CS1 | B_CS2); break;
200001d6:	2018      	movs	r0, #24
200001d8:	f7ff ff97 	bl	2000010a <graphic_ctrl_bit_set>
200001dc:	e000      	b.n	200001e0 <select_controller+0x54>
		default: return 0;
200001de:	46c0      	nop			; (mov r8, r8)
	}
}
200001e0:	46bd      	mov	sp, r7
200001e2:	b002      	add	sp, #8
200001e4:	bd80      	pop	{r7, pc}

200001e6 <graphic_wait_ready>:

void graphic_wait_ready (void) {
200001e6:	b580      	push	{r7, lr}
200001e8:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001ea:	2040      	movs	r0, #64	; 0x40
200001ec:	f7ff ffb0 	bl	20000150 <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
200001f0:	4b12      	ldr	r3, [pc, #72]	; (2000023c <graphic_wait_ready+0x56>)
200001f2:	4a13      	ldr	r2, [pc, #76]	; (20000240 <graphic_wait_ready+0x5a>)
200001f4:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001f6:	2002      	movs	r0, #2
200001f8:	f7ff ff87 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001fc:	2001      	movs	r0, #1
200001fe:	f7ff ffa7 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_500ns();
20000202:	f7ff ff35 	bl	20000070 <delay_500ns>
	while (1) {
		graphic_ctrl_bit_set(B_E);
20000206:	2040      	movs	r0, #64	; 0x40
20000208:	f7ff ff7f 	bl	2000010a <graphic_ctrl_bit_set>
		delay_500ns();
2000020c:	f7ff ff30 	bl	20000070 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff9d 	bl	20000150 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff2b 	bl	20000070 <delay_500ns>
		if ( (* portIdrHigh & LCD_BUSY) == 0 ) {
2000021a:	4b0a      	ldr	r3, [pc, #40]	; (20000244 <graphic_wait_ready+0x5e>)
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	b2db      	uxtb	r3, r3
20000220:	b25b      	sxtb	r3, r3
20000222:	2b00      	cmp	r3, #0
20000224:	da00      	bge.n	20000228 <graphic_wait_ready+0x42>
		graphic_ctrl_bit_set(B_E);
20000226:	e7ee      	b.n	20000206 <graphic_wait_ready+0x20>
			break;
20000228:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
2000022a:	2040      	movs	r0, #64	; 0x40
2000022c:	f7ff ff6d 	bl	2000010a <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000230:	4b02      	ldr	r3, [pc, #8]	; (2000023c <graphic_wait_ready+0x56>)
20000232:	4a05      	ldr	r2, [pc, #20]	; (20000248 <graphic_wait_ready+0x62>)
20000234:	601a      	str	r2, [r3, #0]
}
20000236:	46c0      	nop			; (mov r8, r8)
20000238:	46bd      	mov	sp, r7
2000023a:	bd80      	pop	{r7, pc}
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint_8t graphic_read (uint_8t controller) {
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear (B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff79 	bl	20000150 <graphic_ctrl_bit_clear>
	* portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set (B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff50 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller (controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff8c 	bl	2000018c <select_controller>
	delay_500ns();
20000274:	f7ff fefc 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff46 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff fef7 	bl	20000070 <delay_500ns>
	uint_8t returnValue = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff5f 	bl	20000150 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if (controller == B_CS1) {
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff73 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff9e 	bl	200001e6 <graphic_wait_ready>
	}
	if (controller == B_CS2) {
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff6a 	bl	2000018c <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff95 	bl	200001e6 <graphic_wait_ready>
	}
	return returnValue;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write (uint_8t value, uint_8t controller) {
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff46 	bl	2000018c <select_controller>
	delay_500ns();
20000300:	f7ff feb6 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff ff00 	bl	2000010a <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff feb1 	bl	20000070 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff1e 	bl	20000150 <graphic_ctrl_bit_clear>
	if (controller & B_CS1) {
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff34 	bl	2000018c <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff5f 	bl	200001e6 <graphic_wait_ready>
	}
	if (controller & B_CS2) {
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff2a 	bl	2000018c <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff55 	bl	200001e6 <graphic_wait_ready>
	}
	* portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fee1 	bl	2000010a <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff1f 	bl	2000018c <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command (uint_8t command, uint_8t controller) {
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff feee 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff ff07 	bl	2000018c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff fee6 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
	}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:
	
void graphic_write_data (uint_8t data, uint_8t controller) {
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fece 	bl	20000150 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fee7 	bl	2000018c <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fea3 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff fec3 	bl	20000150 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
	}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:
	
uint_8t graphic_read_data (uint_8t controller) {
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
	}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initalize>:

void graphic_initalize (void) {
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe7a 	bl	2000010a <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe33 	bl	20000082 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe97 	bl	20000150 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe4e 	bl	200000c4 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe6e 	bl	2000010a <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe98 	bl	2000018c <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen (void) {
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint_8t page = 0; page < 8; page++) {
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command (LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command (LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for (uint_8t address = 0; address < 64; address++) {
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for (uint_8t address = 0; address < 64; address++) {
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint_8t page = 0; page < 8; page++) {
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:

void pixel (uint_8t x, uint_8t y, uint_8t set) {
200004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
200004cc:	b085      	sub	sp, #20
200004ce:	af00      	add	r7, sp, #0
200004d0:	0004      	movs	r4, r0
200004d2:	0008      	movs	r0, r1
200004d4:	0011      	movs	r1, r2
200004d6:	1dfb      	adds	r3, r7, #7
200004d8:	1c22      	adds	r2, r4, #0
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	1c02      	adds	r2, r0, #0
200004e0:	701a      	strb	r2, [r3, #0]
200004e2:	1d7b      	adds	r3, r7, #5
200004e4:	1c0a      	adds	r2, r1, #0
200004e6:	701a      	strb	r2, [r3, #0]
	if ((x > 128) || (y > 64)) {return;}
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b80      	cmp	r3, #128	; 0x80
200004ee:	d900      	bls.n	200004f2 <pixel+0x28>
200004f0:	e0bd      	b.n	2000066e <pixel+0x1a4>
200004f2:	1dbb      	adds	r3, r7, #6
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	2b40      	cmp	r3, #64	; 0x40
200004f8:	d900      	bls.n	200004fc <pixel+0x32>
200004fa:	e0b8      	b.n	2000066e <pixel+0x1a4>
	uint_8t mask, controller, x_real, data_holder;
	uint_8t index = (y - 1) / 8;
200004fc:	1dbb      	adds	r3, r7, #6
200004fe:	781b      	ldrb	r3, [r3, #0]
20000500:	3b01      	subs	r3, #1
20000502:	2b00      	cmp	r3, #0
20000504:	da00      	bge.n	20000508 <pixel+0x3e>
20000506:	3307      	adds	r3, #7
20000508:	10db      	asrs	r3, r3, #3
2000050a:	001a      	movs	r2, r3
2000050c:	230c      	movs	r3, #12
2000050e:	18fb      	adds	r3, r7, r3
20000510:	701a      	strb	r2, [r3, #0]

	switch ((y-1) % 8) {
20000512:	1dbb      	adds	r3, r7, #6
20000514:	781b      	ldrb	r3, [r3, #0]
20000516:	3b01      	subs	r3, #1
20000518:	4a57      	ldr	r2, [pc, #348]	; (20000678 <pixel+0x1ae>)
2000051a:	4013      	ands	r3, r2
2000051c:	d504      	bpl.n	20000528 <pixel+0x5e>
2000051e:	3b01      	subs	r3, #1
20000520:	2208      	movs	r2, #8
20000522:	4252      	negs	r2, r2
20000524:	4313      	orrs	r3, r2
20000526:	3301      	adds	r3, #1
20000528:	2b07      	cmp	r3, #7
2000052a:	d82c      	bhi.n	20000586 <pixel+0xbc>
2000052c:	009a      	lsls	r2, r3, #2
2000052e:	4b53      	ldr	r3, [pc, #332]	; (2000067c <pixel+0x1b2>)
20000530:	18d3      	adds	r3, r2, r3
20000532:	681b      	ldr	r3, [r3, #0]
20000534:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000536:	230f      	movs	r3, #15
20000538:	18fb      	adds	r3, r7, r3
2000053a:	2201      	movs	r2, #1
2000053c:	701a      	strb	r2, [r3, #0]
2000053e:	e023      	b.n	20000588 <pixel+0xbe>
		case 1: mask = 2; break;
20000540:	230f      	movs	r3, #15
20000542:	18fb      	adds	r3, r7, r3
20000544:	2202      	movs	r2, #2
20000546:	701a      	strb	r2, [r3, #0]
20000548:	e01e      	b.n	20000588 <pixel+0xbe>
		case 2: mask = 4; break;
2000054a:	230f      	movs	r3, #15
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	2204      	movs	r2, #4
20000550:	701a      	strb	r2, [r3, #0]
20000552:	e019      	b.n	20000588 <pixel+0xbe>
		case 3: mask = 8; break;
20000554:	230f      	movs	r3, #15
20000556:	18fb      	adds	r3, r7, r3
20000558:	2208      	movs	r2, #8
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	e014      	b.n	20000588 <pixel+0xbe>
		case 4: mask = 0x10; break;
2000055e:	230f      	movs	r3, #15
20000560:	18fb      	adds	r3, r7, r3
20000562:	2210      	movs	r2, #16
20000564:	701a      	strb	r2, [r3, #0]
20000566:	e00f      	b.n	20000588 <pixel+0xbe>
		case 5: mask = 0x20; break;
20000568:	230f      	movs	r3, #15
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	2220      	movs	r2, #32
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e00a      	b.n	20000588 <pixel+0xbe>
		case 6: mask = 0x40; break;
20000572:	230f      	movs	r3, #15
20000574:	18fb      	adds	r3, r7, r3
20000576:	2240      	movs	r2, #64	; 0x40
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e005      	b.n	20000588 <pixel+0xbe>
		case 7: mask = 0x80; break;
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	2280      	movs	r2, #128	; 0x80
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e000      	b.n	20000588 <pixel+0xbe>
		default: break;
20000586:	46c0      	nop			; (mov r8, r8)
	}
	if (set == 0) {
20000588:	1d7b      	adds	r3, r7, #5
2000058a:	781b      	ldrb	r3, [r3, #0]
2000058c:	2b00      	cmp	r3, #0
2000058e:	d105      	bne.n	2000059c <pixel+0xd2>
		mask = ~mask;
20000590:	220f      	movs	r2, #15
20000592:	18bb      	adds	r3, r7, r2
20000594:	18ba      	adds	r2, r7, r2
20000596:	7812      	ldrb	r2, [r2, #0]
20000598:	43d2      	mvns	r2, r2
2000059a:	701a      	strb	r2, [r3, #0]
	}
	
	if (x > 64) {
2000059c:	1dfb      	adds	r3, r7, #7
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2b40      	cmp	r3, #64	; 0x40
200005a2:	d90a      	bls.n	200005ba <pixel+0xf0>
		controller = B_CS2;
200005a4:	230e      	movs	r3, #14
200005a6:	18fb      	adds	r3, r7, r3
200005a8:	2210      	movs	r2, #16
200005aa:	701a      	strb	r2, [r3, #0]
		x_real = x - 65;
200005ac:	230d      	movs	r3, #13
200005ae:	18fb      	adds	r3, r7, r3
200005b0:	1dfa      	adds	r2, r7, #7
200005b2:	7812      	ldrb	r2, [r2, #0]
200005b4:	3a41      	subs	r2, #65	; 0x41
200005b6:	701a      	strb	r2, [r3, #0]
200005b8:	e009      	b.n	200005ce <pixel+0x104>
	} else {
		controller = B_CS1;
200005ba:	230e      	movs	r3, #14
200005bc:	18fb      	adds	r3, r7, r3
200005be:	2208      	movs	r2, #8
200005c0:	701a      	strb	r2, [r3, #0]
		x_real = x - 1;
200005c2:	230d      	movs	r3, #13
200005c4:	18fb      	adds	r3, r7, r3
200005c6:	1dfa      	adds	r2, r7, #7
200005c8:	7812      	ldrb	r2, [r2, #0]
200005ca:	3a01      	subs	r2, #1
200005cc:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005ce:	260d      	movs	r6, #13
200005d0:	19bb      	adds	r3, r7, r6
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	2240      	movs	r2, #64	; 0x40
200005d6:	4313      	orrs	r3, r2
200005d8:	b2da      	uxtb	r2, r3
200005da:	250e      	movs	r5, #14
200005dc:	197b      	adds	r3, r7, r5
200005de:	781b      	ldrb	r3, [r3, #0]
200005e0:	0019      	movs	r1, r3
200005e2:	0010      	movs	r0, r2
200005e4:	f7ff feba 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005e8:	230c      	movs	r3, #12
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	781b      	ldrb	r3, [r3, #0]
200005ee:	2248      	movs	r2, #72	; 0x48
200005f0:	4252      	negs	r2, r2
200005f2:	4313      	orrs	r3, r2
200005f4:	b2da      	uxtb	r2, r3
200005f6:	197b      	adds	r3, r7, r5
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	0019      	movs	r1, r3
200005fc:	0010      	movs	r0, r2
200005fe:	f7ff fead 	bl	2000035c <graphic_write_command>
	data_holder = graphic_read_data(controller);
20000602:	230b      	movs	r3, #11
20000604:	18fc      	adds	r4, r7, r3
20000606:	197b      	adds	r3, r7, r5
20000608:	781b      	ldrb	r3, [r3, #0]
2000060a:	0018      	movs	r0, r3
2000060c:	f7ff fee9 	bl	200003e2 <graphic_read_data>
20000610:	0003      	movs	r3, r0
20000612:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000614:	19bb      	adds	r3, r7, r6
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	2240      	movs	r2, #64	; 0x40
2000061a:	4313      	orrs	r3, r2
2000061c:	b2da      	uxtb	r2, r3
2000061e:	197b      	adds	r3, r7, r5
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	0019      	movs	r1, r3
20000624:	0010      	movs	r0, r2
20000626:	f7ff fe99 	bl	2000035c <graphic_write_command>
	if (set == 1) {
2000062a:	1d7b      	adds	r3, r7, #5
2000062c:	781b      	ldrb	r3, [r3, #0]
2000062e:	2b01      	cmp	r3, #1
20000630:	d109      	bne.n	20000646 <pixel+0x17c>
		mask |= data_holder;
20000632:	210f      	movs	r1, #15
20000634:	187b      	adds	r3, r7, r1
20000636:	1879      	adds	r1, r7, r1
20000638:	220b      	movs	r2, #11
2000063a:	18ba      	adds	r2, r7, r2
2000063c:	7809      	ldrb	r1, [r1, #0]
2000063e:	7812      	ldrb	r2, [r2, #0]
20000640:	430a      	orrs	r2, r1
20000642:	701a      	strb	r2, [r3, #0]
20000644:	e008      	b.n	20000658 <pixel+0x18e>
	} else {
		mask &= data_holder;
20000646:	220f      	movs	r2, #15
20000648:	18bb      	adds	r3, r7, r2
2000064a:	18ba      	adds	r2, r7, r2
2000064c:	210b      	movs	r1, #11
2000064e:	1879      	adds	r1, r7, r1
20000650:	7812      	ldrb	r2, [r2, #0]
20000652:	7809      	ldrb	r1, [r1, #0]
20000654:	400a      	ands	r2, r1
20000656:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
20000658:	230e      	movs	r3, #14
2000065a:	18fb      	adds	r3, r7, r3
2000065c:	781a      	ldrb	r2, [r3, #0]
2000065e:	230f      	movs	r3, #15
20000660:	18fb      	adds	r3, r7, r3
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	0011      	movs	r1, r2
20000666:	0018      	movs	r0, r3
20000668:	f7ff fe98 	bl	2000039c <graphic_write_data>
2000066c:	e000      	b.n	20000670 <pixel+0x1a6>
	if ((x > 128) || (y > 64)) {return;}
2000066e:	46c0      	nop			; (mov r8, r8)
}
20000670:	46bd      	mov	sp, r7
20000672:	b005      	add	sp, #20
20000674:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000676:	46c0      	nop			; (mov r8, r8)
20000678:	80000007 	andhi	r0, r0, r7
2000067c:	200009d8 	ldrdcs	r0, [r0], -r8

20000680 <set_object_speed>:

// ------------------------------ OBJECT_FUNCTIONS ----------------------------

void set_object_speed (POBJECT o, int speedx, int speedy) {
20000680:	b580      	push	{r7, lr}
20000682:	b084      	sub	sp, #16
20000684:	af00      	add	r7, sp, #0
20000686:	60f8      	str	r0, [r7, #12]
20000688:	60b9      	str	r1, [r7, #8]
2000068a:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
2000068c:	68fb      	ldr	r3, [r7, #12]
2000068e:	68ba      	ldr	r2, [r7, #8]
20000690:	605a      	str	r2, [r3, #4]
	o->dy = speedy;	
20000692:	68fb      	ldr	r3, [r7, #12]
20000694:	687a      	ldr	r2, [r7, #4]
20000696:	609a      	str	r2, [r3, #8]
}
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46bd      	mov	sp, r7
2000069c:	b004      	add	sp, #16
2000069e:	bd80      	pop	{r7, pc}

200006a0 <draw_object>:

void draw_object (POBJECT o) {
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
200006a8:	2300      	movs	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
200006ac:	e020      	b.n	200006f0 <draw_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 1);
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	681a      	ldr	r2, [r3, #0]
200006b2:	68fb      	ldr	r3, [r7, #12]
200006b4:	3304      	adds	r3, #4
200006b6:	005b      	lsls	r3, r3, #1
200006b8:	18d3      	adds	r3, r2, r3
200006ba:	3304      	adds	r3, #4
200006bc:	781a      	ldrb	r2, [r3, #0]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	68db      	ldr	r3, [r3, #12]
200006c2:	b2db      	uxtb	r3, r3
200006c4:	18d3      	adds	r3, r2, r3
200006c6:	b2d8      	uxtb	r0, r3
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	681a      	ldr	r2, [r3, #0]
200006cc:	68fb      	ldr	r3, [r7, #12]
200006ce:	3304      	adds	r3, #4
200006d0:	005b      	lsls	r3, r3, #1
200006d2:	18d3      	adds	r3, r2, r3
200006d4:	3305      	adds	r3, #5
200006d6:	781a      	ldrb	r2, [r3, #0]
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	691b      	ldr	r3, [r3, #16]
200006dc:	b2db      	uxtb	r3, r3
200006de:	18d3      	adds	r3, r2, r3
200006e0:	b2db      	uxtb	r3, r3
200006e2:	2201      	movs	r2, #1
200006e4:	0019      	movs	r1, r3
200006e6:	f7ff fef0 	bl	200004ca <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
200006ea:	68fb      	ldr	r3, [r7, #12]
200006ec:	3301      	adds	r3, #1
200006ee:	60fb      	str	r3, [r7, #12]
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	681b      	ldr	r3, [r3, #0]
200006f4:	681b      	ldr	r3, [r3, #0]
200006f6:	68fa      	ldr	r2, [r7, #12]
200006f8:	429a      	cmp	r2, r3
200006fa:	dbd8      	blt.n	200006ae <draw_object+0xe>
	}
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46c0      	nop			; (mov r8, r8)
20000700:	46bd      	mov	sp, r7
20000702:	b004      	add	sp, #16
20000704:	bd80      	pop	{r7, pc}

20000706 <clear_object>:

void clear_object (POBJECT o) {
20000706:	b580      	push	{r7, lr}
20000708:	b084      	sub	sp, #16
2000070a:	af00      	add	r7, sp, #0
2000070c:	6078      	str	r0, [r7, #4]
	for (int t = 0; t < o->geo->numpoints; t++) {
2000070e:	2300      	movs	r3, #0
20000710:	60fb      	str	r3, [r7, #12]
20000712:	e020      	b.n	20000756 <clear_object+0x50>
		pixel((o->geo->px[t].x + o->posx), (o->geo->px[t].y + o->posy), 0);
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	681a      	ldr	r2, [r3, #0]
20000718:	68fb      	ldr	r3, [r7, #12]
2000071a:	3304      	adds	r3, #4
2000071c:	005b      	lsls	r3, r3, #1
2000071e:	18d3      	adds	r3, r2, r3
20000720:	3304      	adds	r3, #4
20000722:	781a      	ldrb	r2, [r3, #0]
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	68db      	ldr	r3, [r3, #12]
20000728:	b2db      	uxtb	r3, r3
2000072a:	18d3      	adds	r3, r2, r3
2000072c:	b2d8      	uxtb	r0, r3
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	681a      	ldr	r2, [r3, #0]
20000732:	68fb      	ldr	r3, [r7, #12]
20000734:	3304      	adds	r3, #4
20000736:	005b      	lsls	r3, r3, #1
20000738:	18d3      	adds	r3, r2, r3
2000073a:	3305      	adds	r3, #5
2000073c:	781a      	ldrb	r2, [r3, #0]
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	691b      	ldr	r3, [r3, #16]
20000742:	b2db      	uxtb	r3, r3
20000744:	18d3      	adds	r3, r2, r3
20000746:	b2db      	uxtb	r3, r3
20000748:	2200      	movs	r2, #0
2000074a:	0019      	movs	r1, r3
2000074c:	f7ff febd 	bl	200004ca <pixel>
	for (int t = 0; t < o->geo->numpoints; t++) {
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	3301      	adds	r3, #1
20000754:	60fb      	str	r3, [r7, #12]
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	681b      	ldr	r3, [r3, #0]
2000075a:	681b      	ldr	r3, [r3, #0]
2000075c:	68fa      	ldr	r2, [r7, #12]
2000075e:	429a      	cmp	r2, r3
20000760:	dbd8      	blt.n	20000714 <clear_object+0xe>
	}
}
20000762:	46c0      	nop			; (mov r8, r8)
20000764:	46c0      	nop			; (mov r8, r8)
20000766:	46bd      	mov	sp, r7
20000768:	b004      	add	sp, #16
2000076a:	bd80      	pop	{r7, pc}

2000076c <move_object>:

void move_object (POBJECT o) {
2000076c:	b580      	push	{r7, lr}
2000076e:	b084      	sub	sp, #16
20000770:	af00      	add	r7, sp, #0
20000772:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	0018      	movs	r0, r3
20000778:	f7ff ffc5 	bl	20000706 <clear_object>
	int newx = o->posx + o->dx;
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	68da      	ldr	r2, [r3, #12]
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	685b      	ldr	r3, [r3, #4]
20000784:	18d3      	adds	r3, r2, r3
20000786:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	691a      	ldr	r2, [r3, #16]
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	689b      	ldr	r3, [r3, #8]
20000790:	18d3      	adds	r3, r2, r3
20000792:	60bb      	str	r3, [r7, #8]
	
	if (newx < 1) {
20000794:	68fb      	ldr	r3, [r7, #12]
20000796:	2b00      	cmp	r3, #0
20000798:	dc08      	bgt.n	200007ac <move_object+0x40>
		o->dx =(o->dx)*(-1);
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	685b      	ldr	r3, [r3, #4]
2000079e:	425a      	negs	r2, r3
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	605a      	str	r2, [r3, #4]
		o->posx = 1;
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	2201      	movs	r2, #1
200007a8:	60da      	str	r2, [r3, #12]
200007aa:	e016      	b.n	200007da <move_object+0x6e>
	}
	else if ((newx + o->geo->sizex)  > 128) {
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	681b      	ldr	r3, [r3, #0]
200007b0:	685a      	ldr	r2, [r3, #4]
200007b2:	68fb      	ldr	r3, [r7, #12]
200007b4:	18d3      	adds	r3, r2, r3
200007b6:	2b80      	cmp	r3, #128	; 0x80
200007b8:	dd0c      	ble.n	200007d4 <move_object+0x68>
		o->dx = (o->dx)*(-1);
200007ba:	687b      	ldr	r3, [r7, #4]
200007bc:	685b      	ldr	r3, [r3, #4]
200007be:	425a      	negs	r2, r3
200007c0:	687b      	ldr	r3, [r7, #4]
200007c2:	605a      	str	r2, [r3, #4]
		o->posx = 128 - o->geo->sizex;
200007c4:	687b      	ldr	r3, [r7, #4]
200007c6:	681b      	ldr	r3, [r3, #0]
200007c8:	685b      	ldr	r3, [r3, #4]
200007ca:	2280      	movs	r2, #128	; 0x80
200007cc:	1ad2      	subs	r2, r2, r3
200007ce:	687b      	ldr	r3, [r7, #4]
200007d0:	60da      	str	r2, [r3, #12]
200007d2:	e002      	b.n	200007da <move_object+0x6e>
	} else {
		o->posx = newx;
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	68fa      	ldr	r2, [r7, #12]
200007d8:	60da      	str	r2, [r3, #12]
	}
	if (newy < 1) {
200007da:	68bb      	ldr	r3, [r7, #8]
200007dc:	2b00      	cmp	r3, #0
200007de:	dc08      	bgt.n	200007f2 <move_object+0x86>
		o->dy = (o->dy)*(-1);
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	689b      	ldr	r3, [r3, #8]
200007e4:	425a      	negs	r2, r3
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	2201      	movs	r2, #1
200007ee:	611a      	str	r2, [r3, #16]
200007f0:	e016      	b.n	20000820 <move_object+0xb4>
	}
	else if ((newy + o->geo->sizey) > 64) {
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	681b      	ldr	r3, [r3, #0]
200007f6:	689a      	ldr	r2, [r3, #8]
200007f8:	68bb      	ldr	r3, [r7, #8]
200007fa:	18d3      	adds	r3, r2, r3
200007fc:	2b40      	cmp	r3, #64	; 0x40
200007fe:	dd0c      	ble.n	2000081a <move_object+0xae>
		o->dy = (o->dy)*(-1);
20000800:	687b      	ldr	r3, [r7, #4]
20000802:	689b      	ldr	r3, [r3, #8]
20000804:	425a      	negs	r2, r3
20000806:	687b      	ldr	r3, [r7, #4]
20000808:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
2000080a:	687b      	ldr	r3, [r7, #4]
2000080c:	681b      	ldr	r3, [r3, #0]
2000080e:	689b      	ldr	r3, [r3, #8]
20000810:	2240      	movs	r2, #64	; 0x40
20000812:	1ad2      	subs	r2, r2, r3
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	611a      	str	r2, [r3, #16]
20000818:	e002      	b.n	20000820 <move_object+0xb4>
	} else {
		o->posy = newy;
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	68ba      	ldr	r2, [r7, #8]
2000081e:	611a      	str	r2, [r3, #16]
	}

	draw_object(o);
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	0018      	movs	r0, r3
20000824:	f7ff ff3c 	bl	200006a0 <draw_object>
}
20000828:	46c0      	nop			; (mov r8, r8)
2000082a:	46bd      	mov	sp, r7
2000082c:	b004      	add	sp, #16
2000082e:	bd80      	pop	{r7, pc}

20000830 <main>:
static GEOMETRY ball_geometry = {12, 4, 4, {{0,1}, {0,2}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,1}, {3,2} }};

static OBJECT ball = {&ball_geometry, 0,0, 0,0, draw_object, clear_object, move_object, set_object_speed};


void main(void) {
20000830:	b580      	push	{r7, lr}
20000832:	b082      	sub	sp, #8
20000834:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
20000836:	4b0b      	ldr	r3, [pc, #44]	; (20000864 <main+0x34>)
20000838:	607b      	str	r3, [r7, #4]
	init_app();
2000083a:	f7ff fbe9 	bl	20000010 <init_app>
	graphic_initalize();
2000083e:	f7ff fde5 	bl	2000040c <graphic_initalize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	p->set_speed(p, -10, -10);
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	6a1b      	ldr	r3, [r3, #32]
20000846:	220a      	movs	r2, #10
20000848:	4252      	negs	r2, r2
2000084a:	210a      	movs	r1, #10
2000084c:	4249      	negs	r1, r1
2000084e:	6878      	ldr	r0, [r7, #4]
20000850:	4798      	blx	r3
	while(1) {
		p->move(p);
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	69db      	ldr	r3, [r3, #28]
20000856:	687a      	ldr	r2, [r7, #4]
20000858:	0010      	movs	r0, r2
2000085a:	4798      	blx	r3
		delay_milli(40);
2000085c:	2028      	movs	r0, #40	; 0x28
2000085e:	f7ff fc31 	bl	200000c4 <delay_milli>
		p->move(p);
20000862:	e7f6      	b.n	20000852 <main+0x22>
20000864:	200009b4 			; <UNDEFINED> instruction: 0x200009b4

20000868 <__udivsi3>:
20000868:	2200      	movs	r2, #0
2000086a:	0843      	lsrs	r3, r0, #1
2000086c:	428b      	cmp	r3, r1
2000086e:	d374      	bcc.n	2000095a <__udivsi3+0xf2>
20000870:	0903      	lsrs	r3, r0, #4
20000872:	428b      	cmp	r3, r1
20000874:	d35f      	bcc.n	20000936 <__udivsi3+0xce>
20000876:	0a03      	lsrs	r3, r0, #8
20000878:	428b      	cmp	r3, r1
2000087a:	d344      	bcc.n	20000906 <__udivsi3+0x9e>
2000087c:	0b03      	lsrs	r3, r0, #12
2000087e:	428b      	cmp	r3, r1
20000880:	d328      	bcc.n	200008d4 <__udivsi3+0x6c>
20000882:	0c03      	lsrs	r3, r0, #16
20000884:	428b      	cmp	r3, r1
20000886:	d30d      	bcc.n	200008a4 <__udivsi3+0x3c>
20000888:	22ff      	movs	r2, #255	; 0xff
2000088a:	0209      	lsls	r1, r1, #8
2000088c:	ba12      	rev	r2, r2
2000088e:	0c03      	lsrs	r3, r0, #16
20000890:	428b      	cmp	r3, r1
20000892:	d302      	bcc.n	2000089a <__udivsi3+0x32>
20000894:	1212      	asrs	r2, r2, #8
20000896:	0209      	lsls	r1, r1, #8
20000898:	d065      	beq.n	20000966 <__udivsi3+0xfe>
2000089a:	0b03      	lsrs	r3, r0, #12
2000089c:	428b      	cmp	r3, r1
2000089e:	d319      	bcc.n	200008d4 <__udivsi3+0x6c>
200008a0:	e000      	b.n	200008a4 <__udivsi3+0x3c>
200008a2:	0a09      	lsrs	r1, r1, #8
200008a4:	0bc3      	lsrs	r3, r0, #15
200008a6:	428b      	cmp	r3, r1
200008a8:	d301      	bcc.n	200008ae <__udivsi3+0x46>
200008aa:	03cb      	lsls	r3, r1, #15
200008ac:	1ac0      	subs	r0, r0, r3
200008ae:	4152      	adcs	r2, r2
200008b0:	0b83      	lsrs	r3, r0, #14
200008b2:	428b      	cmp	r3, r1
200008b4:	d301      	bcc.n	200008ba <__udivsi3+0x52>
200008b6:	038b      	lsls	r3, r1, #14
200008b8:	1ac0      	subs	r0, r0, r3
200008ba:	4152      	adcs	r2, r2
200008bc:	0b43      	lsrs	r3, r0, #13
200008be:	428b      	cmp	r3, r1
200008c0:	d301      	bcc.n	200008c6 <__udivsi3+0x5e>
200008c2:	034b      	lsls	r3, r1, #13
200008c4:	1ac0      	subs	r0, r0, r3
200008c6:	4152      	adcs	r2, r2
200008c8:	0b03      	lsrs	r3, r0, #12
200008ca:	428b      	cmp	r3, r1
200008cc:	d301      	bcc.n	200008d2 <__udivsi3+0x6a>
200008ce:	030b      	lsls	r3, r1, #12
200008d0:	1ac0      	subs	r0, r0, r3
200008d2:	4152      	adcs	r2, r2
200008d4:	0ac3      	lsrs	r3, r0, #11
200008d6:	428b      	cmp	r3, r1
200008d8:	d301      	bcc.n	200008de <__udivsi3+0x76>
200008da:	02cb      	lsls	r3, r1, #11
200008dc:	1ac0      	subs	r0, r0, r3
200008de:	4152      	adcs	r2, r2
200008e0:	0a83      	lsrs	r3, r0, #10
200008e2:	428b      	cmp	r3, r1
200008e4:	d301      	bcc.n	200008ea <__udivsi3+0x82>
200008e6:	028b      	lsls	r3, r1, #10
200008e8:	1ac0      	subs	r0, r0, r3
200008ea:	4152      	adcs	r2, r2
200008ec:	0a43      	lsrs	r3, r0, #9
200008ee:	428b      	cmp	r3, r1
200008f0:	d301      	bcc.n	200008f6 <__udivsi3+0x8e>
200008f2:	024b      	lsls	r3, r1, #9
200008f4:	1ac0      	subs	r0, r0, r3
200008f6:	4152      	adcs	r2, r2
200008f8:	0a03      	lsrs	r3, r0, #8
200008fa:	428b      	cmp	r3, r1
200008fc:	d301      	bcc.n	20000902 <__udivsi3+0x9a>
200008fe:	020b      	lsls	r3, r1, #8
20000900:	1ac0      	subs	r0, r0, r3
20000902:	4152      	adcs	r2, r2
20000904:	d2cd      	bcs.n	200008a2 <__udivsi3+0x3a>
20000906:	09c3      	lsrs	r3, r0, #7
20000908:	428b      	cmp	r3, r1
2000090a:	d301      	bcc.n	20000910 <__udivsi3+0xa8>
2000090c:	01cb      	lsls	r3, r1, #7
2000090e:	1ac0      	subs	r0, r0, r3
20000910:	4152      	adcs	r2, r2
20000912:	0983      	lsrs	r3, r0, #6
20000914:	428b      	cmp	r3, r1
20000916:	d301      	bcc.n	2000091c <__udivsi3+0xb4>
20000918:	018b      	lsls	r3, r1, #6
2000091a:	1ac0      	subs	r0, r0, r3
2000091c:	4152      	adcs	r2, r2
2000091e:	0943      	lsrs	r3, r0, #5
20000920:	428b      	cmp	r3, r1
20000922:	d301      	bcc.n	20000928 <__udivsi3+0xc0>
20000924:	014b      	lsls	r3, r1, #5
20000926:	1ac0      	subs	r0, r0, r3
20000928:	4152      	adcs	r2, r2
2000092a:	0903      	lsrs	r3, r0, #4
2000092c:	428b      	cmp	r3, r1
2000092e:	d301      	bcc.n	20000934 <__udivsi3+0xcc>
20000930:	010b      	lsls	r3, r1, #4
20000932:	1ac0      	subs	r0, r0, r3
20000934:	4152      	adcs	r2, r2
20000936:	08c3      	lsrs	r3, r0, #3
20000938:	428b      	cmp	r3, r1
2000093a:	d301      	bcc.n	20000940 <__udivsi3+0xd8>
2000093c:	00cb      	lsls	r3, r1, #3
2000093e:	1ac0      	subs	r0, r0, r3
20000940:	4152      	adcs	r2, r2
20000942:	0883      	lsrs	r3, r0, #2
20000944:	428b      	cmp	r3, r1
20000946:	d301      	bcc.n	2000094c <__udivsi3+0xe4>
20000948:	008b      	lsls	r3, r1, #2
2000094a:	1ac0      	subs	r0, r0, r3
2000094c:	4152      	adcs	r2, r2
2000094e:	0843      	lsrs	r3, r0, #1
20000950:	428b      	cmp	r3, r1
20000952:	d301      	bcc.n	20000958 <__udivsi3+0xf0>
20000954:	004b      	lsls	r3, r1, #1
20000956:	1ac0      	subs	r0, r0, r3
20000958:	4152      	adcs	r2, r2
2000095a:	1a41      	subs	r1, r0, r1
2000095c:	d200      	bcs.n	20000960 <__udivsi3+0xf8>
2000095e:	4601      	mov	r1, r0
20000960:	4152      	adcs	r2, r2
20000962:	4610      	mov	r0, r2
20000964:	4770      	bx	lr
20000966:	e7ff      	b.n	20000968 <__udivsi3+0x100>
20000968:	b501      	push	{r0, lr}
2000096a:	2000      	movs	r0, #0
2000096c:	f000 f806 	bl	2000097c <__aeabi_idiv0>
20000970:	bd02      	pop	{r1, pc}
20000972:	46c0      	nop			; (mov r8, r8)

20000974 <__aeabi_uidivmod>:
20000974:	2900      	cmp	r1, #0
20000976:	d0f7      	beq.n	20000968 <__udivsi3+0x100>
20000978:	e776      	b.n	20000868 <__udivsi3>
2000097a:	4770      	bx	lr

2000097c <__aeabi_idiv0>:
2000097c:	4770      	bx	lr
2000097e:	46c0      	nop			; (mov r8, r8)

20000980 <ball_geometry>:
20000980:	0000000c 	andeq	r0, r0, ip
20000984:	00000004 	andeq	r0, r0, r4
20000988:	00000004 	andeq	r0, r0, r4
2000098c:	02000100 	andeq	r0, r0, #0, 2
20000990:	01010001 	tsteq	r1, r1
20000994:	03010201 	movweq	r0, #4609	; 0x1201
20000998:	01020002 	tsteq	r2, r2
2000099c:	03020202 	movweq	r0, #8706	; 0x2202
200009a0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200009b4 <ball>:
200009b4:	20000980 	andcs	r0, r0, r0, lsl #19
	...
200009c8:	200006a1 	andcs	r0, r0, r1, lsr #13
200009cc:	20000707 	andcs	r0, r0, r7, lsl #14
200009d0:	2000076d 	andcs	r0, r0, sp, ror #14
200009d4:	20000681 	andcs	r0, r0, r1, lsl #13
200009d8:	20000536 	andcs	r0, r0, r6, lsr r5
200009dc:	20000540 	andcs	r0, r0, r0, asr #10
200009e0:	2000054a 	andcs	r0, r0, sl, asr #10
200009e4:	20000554 	andcs	r0, r0, r4, asr r5
200009e8:	2000055e 	andcs	r0, r0, lr, asr r5
200009ec:	20000568 	andcs	r0, r0, r8, ror #10
200009f0:	20000572 	andcs	r0, r0, r2, ror r5
200009f4:	2000057c 	andcs	r0, r0, ip, ror r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000632 	andeq	r0, r0, r2, lsr r6
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000162 	andeq	r0, r0, r2, ror #2
  10:	0003000c 	andeq	r0, r3, ip
  14:	0001eb00 	andeq	lr, r1, r0, lsl #22
	...
  24:	01100200 	tsteq	r0, r0, lsl #4
  28:	31010000 	mrscc	r0, (UNDEF: 1)
  2c:	00003118 	andeq	r3, r0, r8, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
  38:	00008604 	andeq	r8, r0, r4, lsl #12
  3c:	33010200 	movwcc	r0, #4608	; 0x1200
  40:	00005c12 	andeq	r5, r0, r2, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250b3401 	strcs	r3, [fp, #-1025]	; 0xfffffbff
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00250b35 	eoreq	r0, r5, r5, lsr fp
  58:	00010000 	andeq	r0, r1, r0
  5c:	00009902 	andeq	r9, r0, r2, lsl #18
  60:	04360100 	ldrteq	r0, [r6], #-256	; 0xffffff00
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00012f04 	andeq	r2, r1, r4, lsl #30
  6c:	38013400 	stmdacc	r1, {sl, ip, sp}
  70:	0000a911 	andeq	sl, r0, r1, lsl r9
  74:	02f60600 	rscseq	r0, r6, #0, 12
  78:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
  7c:	0000a907 	andeq	sl, r0, r7, lsl #18
  80:	4a060000 	bmi	180088 <startup-0x1fe7ff78>
  84:	01000001 	tsteq	r0, r1
  88:	00a9073a 	adceq	r0, r9, sl, lsr r7
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000150 	andeq	r0, r0, r0, asr r1
  94:	a9073b01 	stmdbge	r7, {r0, r8, r9, fp, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0093c01 	andlt	r3, r9, r1, lsl #24
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	22070403 	andcs	r0, r7, #50331648	; 0x3000000
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68043d01 	stmdavs	r4, {r0, r8, sl, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0f3d01 	svcle	0x000f3d01
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02df0400 	sbcseq	r0, pc, #0, 8
  e8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  ec:	0166113f 	cmneq	r6, pc, lsr r1
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	01006f65 	tsteq	r0, r5, ror #30
  f8:	00d30d40 	sbcseq	r0, r3, r0, asr #26
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	01007864 	tsteq	r0, r4, ror #16
 104:	00a90741 	adceq	r0, r9, r1, asr #14
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	01007964 	tsteq	r0, r4, ror #18
 110:	00a90b41 	adceq	r0, r9, r1, asr #22
 114:	06080000 	streq	r0, [r8], -r0
 118:	000002e4 	andeq	r0, r0, r4, ror #5
 11c:	a9074201 	stmdbge	r7, {r0, r9, lr}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	0000ad06 	andeq	sl, r0, r6, lsl #26
 128:	0d420100 	stfeqe	f0, [r2, #-0]
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	00410610 	subeq	r0, r1, r0, lsl r6
 134:	43010000 	movwmi	r0, #4096	; 0x1000
 138:	0001770b 	andeq	r7, r1, fp, lsl #14
 13c:	0a061400 	beq	185144 <startup-0x1fe7aebc>
 140:	01000001 	tsteq	r0, r1
 144:	01770b44 	cmneq	r7, r4, asr #22
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000046 	andeq	r0, r0, r6, asr #32
 150:	770b4501 	strvc	r4, [fp, -r1, lsl #10]
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00029506 	andeq	r9, r2, r6, lsl #10
 15c:	0b460100 	bleq	1180564 <startup-0x1ee7fa9c>
 160:	00000192 	muleq	r0, r2, r1
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	01920b00 	orrseq	r0, r2, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	000000a9 	andeq	r0, r0, r9, lsr #1
 18c:	0000a90c 	andeq	sl, r0, ip, lsl #18
 190:	040a0000 	streq	r0, [sl], #-0
 194:	0000017d 	andeq	r0, r0, sp, ror r1
 198:	00038f02 	andeq	r8, r3, r2, lsl #30
 19c:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
 1a0:	000000e5 	andeq	r0, r0, r5, ror #1
 1a4:	00038e02 	andeq	r8, r3, r2, lsl #28
 1a8:	0d470100 	stfeqe	f0, [r7, #-0]
 1ac:	00000171 	andeq	r0, r0, r1, ror r1
 1b0:	0000b20d 	andeq	fp, r0, sp, lsl #4
 1b4:	015b0100 	cmpeq	fp, r0, lsl #2
 1b8:	0000c711 	andeq	ip, r0, r1, lsl r7
 1bc:	80030500 	andhi	r0, r3, r0, lsl #10
 1c0:	0d200009 	stceq	0, cr0, [r0, #-36]!	; 0xffffffdc
 1c4:	000001e6 	andeq	r0, r0, r6, ror #3
 1c8:	0f015d01 	svceq	0x00015d01
 1cc:	00000198 	muleq	r0, r8, r1
 1d0:	09b40305 	ldmibeq	r4!, {r0, r2, r8, r9}
 1d4:	f40e2000 	vst4.8	{d2-d5}, [lr], r0
 1d8:	01000000 	mrseq	r0, (UNDEF: 0)
 1dc:	30060160 	andcc	r0, r6, r0, ror #2
 1e0:	38200008 	stmdacc	r0!, {r3}
 1e4:	01000000 	mrseq	r0, (UNDEF: 0)
 1e8:	0001fc9c 	muleq	r1, ip, ip
 1ec:	00700f00 	rsbseq	r0, r0, r0, lsl #30
 1f0:	0a016101 	beq	585fc <startup-0x1ffa7a04>
 1f4:	000001a4 	andeq	r0, r0, r4, lsr #3
 1f8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1fc:	0003740e 	andeq	r7, r3, lr, lsl #8
 200:	013c0100 	teqeq	ip, r0, lsl #2
 204:	00076c06 	andeq	r6, r7, r6, lsl #24
 208:	0000c420 	andeq	ip, r0, r0, lsr #8
 20c:	429c0100 	addsmi	r0, ip, #0, 2
 210:	10000002 	andne	r0, r0, r2
 214:	3c01006f 	stccc	0, cr0, [r1], {111}	; 0x6f
 218:	01a41b01 			; <UNDEFINED> instruction: 0x01a41b01
 21c:	91020000 	mrsls	r0, (UNDEF: 2)
 220:	01180d6c 	tsteq	r8, ip, ror #26
 224:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 228:	00a90601 	adceq	r0, r9, r1, lsl #12
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	011d0d74 	tsteq	sp, r4, ror sp
 234:	3f010000 	svccc	0x00010000
 238:	00a90601 	adceq	r0, r9, r1, lsl #12
 23c:	91020000 	mrsls	r0, (UNDEF: 2)
 240:	b40e0070 	strlt	r0, [lr], #-112	; 0xffffff90
 244:	01000002 	tsteq	r0, r2
 248:	06060136 			; <UNDEFINED> instruction: 0x06060136
 24c:	66200007 	strtvs	r0, [r0], -r7
 250:	01000000 	mrseq	r0, (UNDEF: 0)
 254:	0002809c 	muleq	r2, ip, r0
 258:	006f1000 	rsbeq	r1, pc, r0
 25c:	1c013601 	stcne	6, cr3, [r1], {1}
 260:	000001a4 	andeq	r0, r0, r4, lsr #3
 264:	116c9102 	cmnne	ip, r2, lsl #2
 268:	2000070e 	andcs	r0, r0, lr, lsl #14
 26c:	00000054 	andeq	r0, r0, r4, asr r0
 270:	0100740f 	tsteq	r0, pc, lsl #8
 274:	a90b0137 	stmdbge	fp, {r0, r1, r2, r4, r5, r8}
 278:	02000000 	andeq	r0, r0, #0
 27c:	00007491 	muleq	r0, r1, r4
 280:	0000350e 	andeq	r3, r0, lr, lsl #10
 284:	01300100 	teqeq	r0, r0, lsl #2
 288:	0006a006 	andeq	sl, r6, r6
 28c:	00006620 	andeq	r6, r0, r0, lsr #12
 290:	be9c0100 	fmllte	f0, f4, f0
 294:	10000002 	andne	r0, r0, r2
 298:	3001006f 	andcc	r0, r1, pc, rrx
 29c:	01a41b01 			; <UNDEFINED> instruction: 0x01a41b01
 2a0:	91020000 	mrsls	r0, (UNDEF: 2)
 2a4:	06a8116c 	strteq	r1, [r8], ip, ror #2
 2a8:	00542000 	subseq	r2, r4, r0
 2ac:	740f0000 	strvc	r0, [pc], #-0	; 2b4 <startup-0x1ffffd4c>
 2b0:	01310100 	teqeq	r1, r0, lsl #2
 2b4:	0000a90b 	andeq	sl, r0, fp, lsl #18
 2b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2bc:	84120000 	ldrhi	r0, [r2], #-0
 2c0:	01000002 	tsteq	r0, r2
 2c4:	8006012b 	andhi	r0, r6, fp, lsr #2
 2c8:	20200006 	eorcs	r0, r0, r6
 2cc:	01000000 	mrseq	r0, (UNDEF: 0)
 2d0:	0003049c 	muleq	r3, ip, r4
 2d4:	006f1000 	rsbeq	r1, pc, r0
 2d8:	20012b01 	andcs	r2, r1, r1, lsl #22
 2dc:	000001a4 	andeq	r0, r0, r4, lsr #3
 2e0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 2e4:	00000380 	andeq	r0, r0, r0, lsl #7
 2e8:	27012b01 	strcs	r2, [r1, -r1, lsl #22]
 2ec:	000000a9 	andeq	r0, r0, r9, lsr #1
 2f0:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 2f4:	00000387 	andeq	r0, r0, r7, lsl #7
 2f8:	33012b01 	movwcc	r2, #6913	; 0x1b01
 2fc:	000000a9 	andeq	r0, r0, r9, lsr #1
 300:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 304:	0000740e 	andeq	r7, r0, lr, lsl #8
 308:	01020100 	mrseq	r0, (UNDEF: 18)
 30c:	0004ca06 	andeq	ip, r4, r6, lsl #20
 310:	0001b620 	andeq	fp, r1, r0, lsr #12
 314:	989c0100 	ldmls	ip, {r8}
 318:	10000003 	andne	r0, r0, r3
 31c:	02010078 	andeq	r0, r1, #120	; 0x78
 320:	00251501 	eoreq	r1, r5, r1, lsl #10
 324:	91020000 	mrsls	r0, (UNDEF: 2)
 328:	0079105f 	rsbseq	r1, r9, pc, asr r0
 32c:	20010201 	andcs	r0, r1, r1, lsl #4
 330:	00000025 	andeq	r0, r0, r5, lsr #32
 334:	105e9102 	subsne	r9, lr, r2, lsl #2
 338:	00746573 	rsbseq	r6, r4, r3, ror r5
 33c:	2b010201 	blcs	40b48 <startup-0x1ffbf4b8>
 340:	00000025 	andeq	r0, r0, r5, lsr #32
 344:	0d5d9102 	ldfeqp	f1, [sp, #-8]
 348:	00000254 	andeq	r0, r0, r4, asr r2
 34c:	0a010401 	beq	41358 <startup-0x1ffbeca8>
 350:	00000025 	andeq	r0, r0, r5, lsr #32
 354:	0d679102 	stfeqp	f1, [r7, #-8]!
 358:	00000052 	andeq	r0, r0, r2, asr r0
 35c:	10010401 	andne	r0, r1, r1, lsl #8
 360:	00000025 	andeq	r0, r0, r5, lsr #32
 364:	0d669102 	stfeqp	f1, [r6, #-8]!
 368:	000000ed 	andeq	r0, r0, sp, ror #1
 36c:	1c010401 	cfstrsne	mvf0, [r1], {1}
 370:	00000025 	andeq	r0, r0, r5, lsr #32
 374:	0d659102 	stfeqp	f1, [r5, #-8]!
 378:	0000008d 	andeq	r0, r0, sp, lsl #1
 37c:	24010401 	strcs	r0, [r1], #-1025	; 0xfffffbff
 380:	00000025 	andeq	r0, r0, r5, lsr #32
 384:	0d639102 	stfeqp	f1, [r3, #-8]!
 388:	00000259 	andeq	r0, r0, r9, asr r2
 38c:	0a010501 	beq	41798 <startup-0x1ffbe868>
 390:	00000025 	andeq	r0, r0, r5, lsr #32
 394:	00649102 	rsbeq	r9, r4, r2, lsl #2
 398:	00029f14 	andeq	r9, r2, r4, lsl pc
 39c:	06f80100 	ldrbteq	r0, [r8], r0, lsl #2
 3a0:	20000462 	andcs	r0, r0, r2, ror #8
 3a4:	00000068 	andeq	r0, r0, r8, rrx
 3a8:	03e19c01 	mvneq	r9, #256	; 0x100
 3ac:	68110000 	ldmdavs	r1, {}	; <UNPREDICTABLE>
 3b0:	58200004 	stmdapl	r0!, {r2}
 3b4:	15000000 	strne	r0, [r0, #-0]
 3b8:	0000006f 	andeq	r0, r0, pc, rrx
 3bc:	250ff901 	strcs	pc, [pc, #-2305]	; fffffac3 <ball+0xdffff10f>
 3c0:	02000000 	andeq	r0, r0, #0
 3c4:	8c117791 	ldchi	7, cr7, [r1], {145}	; 0x91
 3c8:	22200004 	eorcs	r0, r0, #4
 3cc:	15000000 	strne	r0, [r0, #-0]
 3d0:	00000139 	andeq	r0, r0, r9, lsr r1
 3d4:	2510fc01 	ldrcs	pc, [r0, #-3073]	; 0xfffff3ff
 3d8:	02000000 	andeq	r0, r0, #0
 3dc:	00007691 	muleq	r0, r1, r6
 3e0:	02c11600 	sbceq	r1, r1, #0, 12
 3e4:	ea010000 	b	403ec <startup-0x1ffbfc14>
 3e8:	00040c06 	andeq	r0, r4, r6, lsl #24
 3ec:	00005620 	andeq	r5, r0, r0, lsr #12
 3f0:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
 3f4:	0000005d 	andeq	r0, r0, sp, asr r0
 3f8:	2509e501 	strcs	lr, [r9, #-1281]	; 0xfffffaff
 3fc:	e2000000 	and	r0, r0, #0
 400:	2a200003 	bcs	800414 <startup-0x1f7ffbec>
 404:	01000000 	mrseq	r0, (UNDEF: 0)
 408:	00041d9c 	muleq	r4, ip, sp
 40c:	00521800 	subseq	r1, r2, r0, lsl #16
 410:	e5010000 	str	r0, [r1, #-0]
 414:	00002524 	andeq	r2, r0, r4, lsr #10
 418:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 41c:	02711400 	rsbseq	r1, r1, #0, 8
 420:	dd010000 	stcle	0, cr0, [r1, #-0]
 424:	00039c06 	andeq	r9, r3, r6, lsl #24
 428:	00004620 	andeq	r4, r0, r0, lsr #12
 42c:	529c0100 	addspl	r0, ip, #0, 2
 430:	18000004 	stmdane	r0, {r2}
 434:	0000006a 	andeq	r0, r0, sl, rrx
 438:	2522dd01 	strcs	sp, [r2, #-3329]!	; 0xfffff2ff
 43c:	02000000 	andeq	r0, r0, #0
 440:	52187791 	andspl	r7, r8, #38010880	; 0x2440000
 444:	01000000 	mrseq	r0, (UNDEF: 0)
 448:	002530dd 	ldrdeq	r3, [r5], -sp	; <UNPREDICTABLE>
 44c:	91020000 	mrsls	r0, (UNDEF: 2)
 450:	1f140076 	svcne	0x00140076
 454:	01000000 	mrseq	r0, (UNDEF: 0)
 458:	035c06d6 	cmpeq	ip, #224395264	; 0xd600000
 45c:	00402000 	subeq	r2, r0, r0
 460:	9c010000 	stcls	0, cr0, [r1], {-0}
 464:	00000487 	andeq	r0, r0, r7, lsl #9
 468:	00002d18 	andeq	r2, r0, r8, lsl sp
 46c:	25d60100 	ldrbcs	r0, [r6, #256]	; 0x100
 470:	00000025 	andeq	r0, r0, r5, lsr #32
 474:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 478:	00000052 	andeq	r0, r0, r2, asr r0
 47c:	2536d601 	ldrcs	sp, [r6, #-1537]!	; 0xfffff9ff
 480:	02000000 	andeq	r0, r0, #0
 484:	14007691 	strne	r7, [r0], #-1681	; 0xfffff96f
 488:	000000c0 	andeq	r0, r0, r0, asr #1
 48c:	dc06c201 	sfmle	f4, 1, [r6], {1}
 490:	80200002 	eorhi	r0, r0, r2
 494:	01000000 	mrseq	r0, (UNDEF: 0)
 498:	0004bc9c 	muleq	r4, ip, ip
 49c:	025f1800 	subseq	r1, pc, #0, 16
 4a0:	c2010000 	andgt	r0, r1, #0
 4a4:	0000251d 	andeq	r2, r0, sp, lsl r5
 4a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4ac:	00005218 	andeq	r5, r0, r8, lsl r2
 4b0:	2cc20100 	stfcse	f0, [r2], {0}
 4b4:	00000025 	andeq	r0, r0, r5, lsr #32
 4b8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 4bc:	0002e917 	andeq	lr, r2, r7, lsl r9
 4c0:	09ac0100 	stmibeq	ip!, {r8}
 4c4:	00000025 	andeq	r0, r0, r5, lsr #32
 4c8:	2000024c 	andcs	r0, r0, ip, asr #4
 4cc:	00000090 	muleq	r0, r0, r0
 4d0:	04f59c01 	ldrbteq	r9, [r5], #3073	; 0xc01
 4d4:	52180000 	andspl	r0, r8, #0
 4d8:	01000000 	mrseq	r0, (UNDEF: 0)
 4dc:	00251fac 	eoreq	r1, r5, ip, lsr #31
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	00e1156f 	rsceq	r1, r1, pc, ror #10
 4e8:	b4010000 	strlt	r0, [r1], #-0
 4ec:	0000250a 	andeq	r2, r0, sl, lsl #10
 4f0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4f4:	00ce1600 	sbceq	r1, lr, r0, lsl #12
 4f8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 4fc:	0001e606 	andeq	lr, r1, r6, lsl #12
 500:	00006620 	andeq	r6, r0, r0, lsr #12
 504:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 508:	0000004b 	andeq	r0, r0, fp, asr #32
 50c:	8c068d01 	stchi	13, cr8, [r6], {1}
 510:	5a200001 	bpl	80051c <startup-0x1f7ffae4>
 514:	01000000 	mrseq	r0, (UNDEF: 0)
 518:	00052d9c 	muleq	r5, ip, sp
 51c:	00521800 	subseq	r1, r2, r0, lsl #16
 520:	8d010000 	stchi	0, cr0, [r1, #-0]
 524:	00002521 	andeq	r2, r0, r1, lsr #10
 528:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 52c:	00f91900 	rscseq	r1, r9, r0, lsl #18
 530:	87010000 	strhi	r0, [r1, -r0]
 534:	00015006 	andeq	r5, r1, r6
 538:	00003c20 	andeq	r3, r0, r0, lsr #24
 53c:	519c0100 	orrspl	r0, ip, r0, lsl #2
 540:	1a000005 	bne	55c <startup-0x1ffffaa4>
 544:	87010078 	smlsdxhi	r1, r8, r0, r0
 548:	00002526 	andeq	r2, r0, r6, lsr #10
 54c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 550:	000a1900 	andeq	r1, sl, r0, lsl #18
 554:	82010000 	andhi	r0, r1, #0
 558:	00010a06 	andeq	r0, r1, r6, lsl #20
 55c:	00004620 	andeq	r4, r0, r0, lsr #12
 560:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
 564:	1a000005 	bne	580 <startup-0x1ffffa80>
 568:	82010078 	andhi	r0, r1, #120	; 0x78
 56c:	00002524 	andeq	r2, r0, r4, lsr #10
 570:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 574:	02651400 	rsbeq	r1, r5, #0, 8
 578:	76010000 	strvc	r0, [r1], -r0
 57c:	0000c406 	andeq	ip, r0, r6, lsl #8
 580:	00004620 	andeq	r4, r0, r0, lsr #12
 584:	b19c0100 	orrslt	r0, ip, r0, lsl #2
 588:	1a000005 	bne	5a4 <startup-0x1ffffa5c>
 58c:	0100736d 	tsteq	r0, sp, ror #6
 590:	00c01f76 	sbceq	r1, r0, r6, ror pc
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	00e2116c 	rsceq	r1, r2, ip, ror #2
 59c:	001e2000 	andseq	r2, lr, r0
 5a0:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 5a4:	0a7b0100 	beq	1ec09ac <startup-0x1e13f654>
 5a8:	000000a9 	andeq	r0, r0, r9, lsr #1
 5ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5b0:	007a1400 	rsbseq	r1, sl, r0, lsl #8
 5b4:	6c010000 	stcvs	0, cr0, [r1], {-0}
 5b8:	00008206 	andeq	r8, r0, r6, lsl #4
 5bc:	00004220 	andeq	r4, r0, r0, lsr #4
 5c0:	ed9c0100 	ldfs	f0, [ip]
 5c4:	1a000005 	bne	5e0 <startup-0x1ffffa20>
 5c8:	01007375 	tsteq	r0, r5, ror r3
 5cc:	00c01f6c 	sbceq	r1, r0, ip, ror #30
 5d0:	91020000 	mrsls	r0, (UNDEF: 2)
 5d4:	00a0116c 	adceq	r1, r0, ip, ror #2
 5d8:	001a2000 	andseq	r2, sl, r0
 5dc:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 5e0:	0a710100 	beq	1c409e8 <startup-0x1e3bf618>
 5e4:	000000a9 	andeq	r0, r0, r9, lsr #1
 5e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5ec:	02d31600 	sbcseq	r1, r3, #0, 12
 5f0:	67010000 	strvs	r0, [r1, -r0]
 5f4:	00007006 	andeq	r7, r0, r6
 5f8:	00001220 	andeq	r1, r0, r0, lsr #4
 5fc:	1c9c0100 	ldfnes	f0, [ip], {0}
 600:	00000156 	andeq	r0, r0, r6, asr r1
 604:	28065d01 	stmdacs	r6, {r0, r8, sl, fp, ip, lr}
 608:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	01411c9c 			; <UNDEFINED> instruction: 0x01411c9c
 614:	52010000 	andpl	r0, r1, #0
 618:	00001006 	andeq	r1, r0, r6
 61c:	00001820 	andeq	r1, r0, r0, lsr #16
 620:	1c9c0100 	ldfnes	f0, [ip], {0}
 624:	000001de 	ldrdeq	r0, [r0], -lr
 628:	00064b01 	andeq	r4, r6, r1, lsl #22
 62c:	0c200000 	stceq	0, cr0, [r0], #-0
 630:	01000000 	mrseq	r0, (UNDEF: 0)
 634:	Address 0x00000634 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b39053b 	bleq	e415a4 <startup-0x1f1bea5c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	03000510 	movweq	r0, #1296	; 0x510
  d8:	3b0b3a08 	blcc	2ce900 <startup-0x1fd31700>
  dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  e0:	00180213 	andseq	r0, r8, r3, lsl r2
  e4:	010b1100 	mrseq	r1, (UNDEF: 27)
  e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  ec:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  f0:	03193f01 	tsteq	r9, #1, 30
  f4:	3b0b3a0e 	blcc	2ce934 <startup-0x1fd316cc>
  f8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
  fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 100:	97184006 	ldrls	r4, [r8, -r6]
 104:	13011942 	movwne	r1, #6466	; 0x1942
 108:	05130000 	ldreq	r0, [r3, #-0]
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 118:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 11c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	0b390b3b 	bleq	e42e18 <startup-0x1f1bd1e8>
 128:	01111927 	tsteq	r1, r7, lsr #18
 12c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 130:	01194296 			; <UNDEFINED> instruction: 0x01194296
 134:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 138:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 13c:	0b3b0b3a 	bleq	ec2e2c <startup-0x1f13d1d4>
 140:	13490b39 	movtne	r0, #39737	; 0x9b39
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	3f002e16 	svccc	0x00002e16
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 154:	1119270b 	tstne	r9, fp, lsl #14
 158:	40061201 	andmi	r1, r6, r1, lsl #4
 15c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 160:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <startup-0x1fd31658>
 16c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 170:	11134919 	tstne	r3, r9, lsl r9
 174:	40061201 	andmi	r1, r6, r1, lsl #4
 178:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 17c:	00001301 	andeq	r1, r0, r1, lsl #6
 180:	03000518 	movweq	r0, #1304	; 0x518
 184:	3b0b3a0e 	blcc	2ce9c4 <startup-0x1fd3163c>
 188:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 18c:	00180213 	andseq	r0, r8, r3, lsl r2
 190:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 194:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 198:	0b3b0b3a 	bleq	ec2e88 <startup-0x1f13d178>
 19c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1a8:	00130119 	andseq	r0, r3, r9, lsl r1
 1ac:	00051a00 	andeq	r1, r5, r0, lsl #20
 1b0:	0b3a0803 	bleq	e821c4 <startup-0x1f17de3c>
 1b4:	0b390b3b 	bleq	e42ea8 <startup-0x1f1bd158>
 1b8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1bc:	341b0000 	ldrcc	r0, [fp], #-0
 1c0:	3a080300 	bcc	200dc8 <startup-0x1fdff238>
 1c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1cc:	1c000018 	stcne	0, cr0, [r0], {24}
 1d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1d4:	0b3a0e03 	bleq	e839e8 <startup-0x1f17c618>
 1d8:	0b390b3b 	bleq	e42ecc <startup-0x1f1bd134>
 1dc:	01111927 	tsteq	r1, r7, lsr #18
 1e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1e4:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000858 	andeq	r0, r0, r8, asr r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000868 	andcs	r0, r0, r8, ror #16
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000049a 	muleq	r0, sl, r4
   4:	008a0003 	addeq	r0, sl, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	6f2f3731 	svcvs	0x002f3731
  58:	5f666f6c 	svcpl	0x00666f6c
  5c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
  60:	2f746e65 	svccs	0x00746e65
  64:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
  68:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
  6c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
  70:	6170736b 	cmnvs	r0, fp, ror #6
  74:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
  78:	612f666f 			; <UNDEFINED> instruction: 0x612f666f
  7c:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  80:	00676e6f 	rsbeq	r6, r7, pc, ror #28
  84:	74756100 	ldrbtvc	r6, [r5], #-256	; 0xffffff00
  88:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  8c:	00632e67 	rsbeq	r2, r3, r7, ror #28
  90:	00000001 	andeq	r0, r0, r1
  94:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
  98:	00000002 	andeq	r0, r0, r2
  9c:	00ca0320 	sbceq	r0, sl, r0, lsr #6
  a0:	13010501 	movwne	r0, #5377	; 0x1501
  a4:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  a8:	01000302 	tsteq	r0, r2, lsl #6
  ac:	00140501 	andseq	r0, r4, r1, lsl #10
  b0:	00100205 	andseq	r0, r0, r5, lsl #4
  b4:	d1032000 	mrsle	r2, (UNDEF: 3)
  b8:	02050100 	andeq	r0, r5, #0, 2
  bc:	200e052f 	andcs	r0, lr, pc, lsr #10
  c0:	05340105 	ldreq	r0, [r4, #-261]!	; 0xfffffefb
  c4:	02057817 	andeq	r7, r5, #1507328	; 0x170000
  c8:	200c052f 	andcs	r0, ip, pc, lsr #10
  cc:	052f0205 	streq	r0, [pc, #-517]!	; fffffecf <ball+0xdffff51b>
  d0:	0205200c 	andeq	r2, r5, #12
  d4:	200b052f 	andcs	r0, fp, pc, lsr #10
  d8:	052f0205 	streq	r0, [pc, #-517]!	; fffffedb <ball+0xdffff527>
  dc:	0705200c 	streq	r2, [r5, -ip]
  e0:	000a052f 	andeq	r0, sl, pc, lsr #10
  e4:	20010402 	andcs	r0, r1, r2, lsl #8
  e8:	02001905 	andeq	r1, r0, #81920	; 0x14000
  ec:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  f0:	04020007 	streq	r0, [r2], #-7
  f4:	02053c01 	andeq	r3, r5, #256	; 0x100
  f8:	200c0522 	andcs	r0, ip, r2, lsr #10
  fc:	052f0105 	streq	r0, [pc, #-261]!	; ffffffff <ball+0xdffff64b>
 100:	0205ae17 	andeq	sl, r5, #368	; 0x170
 104:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff1dd <ball+0xdfffe829>
 108:	06053e22 	streq	r3, [r5], -r2, lsr #28
 10c:	0a05834c 	beq	160e44 <startup-0x1fe9f1bc>
 110:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 114:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 118:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 11c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 120:	16052d03 	strne	r2, [r5], -r3, lsl #26
 124:	01040200 	mrseq	r0, R12_usr
 128:	0013053c 	andseq	r0, r3, ip, lsr r5
 12c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 130:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 134:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 138:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 13c:	4c06055a 	cfstr32mi	mvfx0, [r6], {90}	; 0x5a
 140:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 144:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 148:	04020003 	streq	r0, [r2], #-3
 14c:	1a052103 	bne	148560 <startup-0x1feb7aa0>
 150:	03040200 	movweq	r0, #16896	; 0x4200
 154:	00130557 	andseq	r0, r3, r7, asr r5
 158:	3c010402 	cfstrscc	mvf0, [r1], {2}
 15c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 160:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 164:	27053f01 	strcs	r3, [r5, -r1, lsl #30]
 168:	670f055c 	smlsdvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 16c:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
 170:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 174:	29058302 	stmdbcs	r5, {r1, r8, r9, pc}
 178:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 17c:	15080205 	strne	r0, [r8, #-517]	; 0xfffffdfb
 180:	05762e05 	ldrbeq	r2, [r6, #-3589]!	; 0xfffff1fb
 184:	13056702 	movwne	r6, #22274	; 0x5702
 188:	030c05c1 	movweq	r0, #50625	; 0xc5c1
 18c:	0305207a 	movweq	r2, #20602	; 0x507a
 190:	210f053c 	tstcs	pc, ip, lsr r5	; <UNPREDICTABLE>
 194:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 198:	09054b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, lr}
 19c:	4b19053d 	blmi	641698 <startup-0x1f9be968>
 1a0:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 1a4:	01052113 	tsteq	r5, r3, lsl r1
 1a8:	3e200522 	cfsh64cc	mvdx0, mvdx0, #18
 1ac:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1a0 <startup-0x1ffffe60>
 1b0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 1b4:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 1b8:	3d300305 	ldccc	3, cr0, [r0, #-20]!	; 0xffffffec
 1bc:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 1c0:	3c23052f 	cfstr32cc	mvfx0, [r3], #-188	; 0xffffff44
 1c4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
 1c8:	04052a03 	streq	r2, [r5], #-2563	; 0xfffff5fd
 1cc:	23020525 	movwcs	r0, #9509	; 0x2525
 1d0:	200e053d 	andcs	r0, lr, sp, lsr r5
 1d4:	052f0105 	streq	r0, [pc, #-261]!	; d7 <startup-0x1fffff29>
 1d8:	0205ae2b 	andeq	sl, r5, #688	; 0x2b0
 1dc:	0e053d67 	cdpeq	13, 0, cr3, cr5, cr7, {3}
 1e0:	2f020520 	svccs	0x00020520
 1e4:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 1e8:	052f1805 	streq	r1, [pc, #-2053]!	; fffff9eb <ball+0xdffff037>
 1ec:	0205200a 	andeq	r2, r5, #10
 1f0:	0e053d4b 	cdpeq	13, 0, cr3, cr5, cr11, {2}
 1f4:	2f050520 	svccs	0x00050520
 1f8:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 1fc:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 200:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 204:	01053009 	tsteq	r5, r9
 208:	ca38053d 	bgt	e01704 <startup-0x1f1fe8fc>
 20c:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 210:	02052010 	andeq	r2, r5, #16
 214:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 218:	3d11052f 	cfldr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 21c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 220:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 224:	05053011 	streq	r3, [r5, #-17]	; 0xffffffef
 228:	2103054a 	tstcs	r3, sl, asr #10
 22c:	3002053d 	andcc	r0, r2, sp, lsr r5
 230:	05201005 	streq	r1, [r0, #-5]!
 234:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 238:	42053d01 	andmi	r3, r5, #1, 26	; 0x40
 23c:	91020576 	tstls	r2, r6, ror r5
 240:	833d593d 	teqhi	sp, #999424	; 0xf4000
 244:	054c3c05 	strbeq	r3, [ip, #-3077]	; 0xfffff3fb
 248:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 24c:	05833d3d 	streq	r3, [r3, #3389]	; 0xd3d
 250:	02054c30 	andeq	r4, r5, #48, 24	; 0x3000
 254:	59090567 	stmdbpl	r9, {r0, r1, r2, r5, r6, r8, sl}
 258:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 25c:	02054c1f 	andeq	r4, r5, #7936	; 0x1f00
 260:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 264:	4b4b3d3d 	blmi	12cf760 <startup-0x1ed308a0>
 268:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 26c:	22053d01 	andcs	r3, r5, #1, 26	; 0x40
 270:	3d0f053e 	cfstr32cc	mvfx0, [pc, #-248]	; 180 <startup-0x1ffffe80>
 274:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 278:	059f2103 	ldreq	r2, [pc, #259]	; 383 <startup-0x1ffffc7d>
 27c:	03054b10 	movweq	r4, #23312	; 0x5b10
 280:	0004053c 	andeq	r0, r4, ip, lsr r5
 284:	21030402 	tstcs	r3, r2, lsl #8
 288:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 28c:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 290:	04020003 	streq	r0, [r2], #-3
 294:	27055801 	strcs	r5, [r5, -r1, lsl #16]
 298:	02040200 	andeq	r0, r4, #0, 4
 29c:	00020547 	andeq	r0, r2, r7, asr #10
 2a0:	58010402 	stmdapl	r1, {r1, sl}
 2a4:	05510105 	ldrbeq	r0, [r1, #-261]	; 0xfffffefb
 2a8:	05055a30 	streq	r5, [r5, #-2608]	; 0xfffff5d0
 2ac:	001005e5 	andseq	r0, r0, r5, ror #11
 2b0:	58020402 	stmdapl	r2, {r1, sl}
 2b4:	055a1505 	ldrbeq	r1, [sl, #-1285]	; 0xfffffafb
 2b8:	0a053c1a 	beq	14f328 <startup-0x1feb0cd8>
 2bc:	3e0c0558 	cfrshl32cc	mvfx12, mvfx8, r0
 2c0:	e53c1005 	ldr	r1, [ip, #-5]!
 2c4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2c8:	03052110 	movweq	r2, #20752	; 0x5110
 2cc:	2110054a 	tstcs	r0, sl, asr #10
 2d0:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2d4:	03052110 	movweq	r2, #20752	; 0x5110
 2d8:	2110054a 	tstcs	r0, sl, asr #10
 2dc:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2e0:	03052110 	movweq	r2, #20752	; 0x5110
 2e4:	2110054a 	tstcs	r0, sl, asr #10
 2e8:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 2ec:	03052110 	movweq	r2, #20752	; 0x5110
 2f0:	0505214a 	streq	r2, [r5, #-330]	; 0xfffffeb6
 2f4:	4b080522 	blmi	201784 <startup-0x1fdfe87c>
 2f8:	05690505 	strbeq	r0, [r9, #-1285]!	; 0xfffffafb
 2fc:	0a054b0e 	beq	152f3c <startup-0x1fead0c4>
 300:	760e054b 	strvc	r0, [lr], -fp, asr #10
 304:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 308:	05c96802 	strbeq	r6, [r9, #2050]	; 0x802
 30c:	0205c910 	andeq	ip, r5, #16, 18	; 0x40000
 310:	ad050591 	cfstr32ge	mvfx0, [r5, #-580]	; 0xfffffdbc
 314:	a04b0805 	subge	r0, fp, r5, lsl #16
 318:	05920205 	ldreq	r0, [r2, #517]	; 0x205
 31c:	ac5d031e 	mrrcge	3, 1, r0, sp, cr14
 320:	24030105 	strcs	r0, [r3], #-261	; 0xfffffefb
 324:	863b0520 	ldrthi	r0, [fp], -r0, lsr #10
 328:	3d670805 	stclcc	8, cr0, [r7, #-20]!	; 0xffffffec
 32c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 330:	0b054c1e 	bleq	1533b0 <startup-0x1feacc50>
 334:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 338:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 33c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 340:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 344:	1d052e03 	stcne	14, cr2, [r5, #-12]
 348:	03040200 	movweq	r0, #16896	; 0x4200
 34c:	00030566 	andeq	r0, r3, r6, ror #10
 350:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 354:	02002805 	andeq	r2, r0, #327680	; 0x50000
 358:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 35c:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 360:	3a052e03 	bcc	14bb74 <startup-0x1feb448c>
 364:	03040200 	movweq	r0, #16896	; 0x4200
 368:	00030566 	andeq	r0, r3, r6, ror #10
 36c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 370:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 374:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 378:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 37c:	1c053c01 	stcne	12, cr3, [r5], {1}
 380:	01040200 	mrseq	r0, R12_usr
 384:	0002052e 	andeq	r0, r2, lr, lsr #10
 388:	20010402 	andcs	r0, r1, r2, lsl #8
 38c:	053f0105 	ldreq	r0, [pc, #-261]!	; 28f <startup-0x1ffffd71>
 390:	0b055a1f 	bleq	156c14 <startup-0x1fea93ec>
 394:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 398:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 39c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 3a0:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 3a4:	1d052e03 	stcne	14, cr2, [r5, #-12]
 3a8:	03040200 	movweq	r0, #16896	; 0x4200
 3ac:	00030566 	andeq	r0, r3, r6, ror #10
 3b0:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3b4:	02002805 	andeq	r2, r0, #327680	; 0x50000
 3b8:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 3bc:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 3c0:	3a052e03 	bcc	14bbd4 <startup-0x1feb442c>
 3c4:	03040200 	movweq	r0, #16896	; 0x4200
 3c8:	00030566 	andeq	r0, r3, r6, ror #10
 3cc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3d0:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 3d4:	05730304 	ldrbeq	r0, [r3, #-772]!	; 0xfffffcfc
 3d8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 3dc:	1c053c01 	stcne	12, cr3, [r5], {1}
 3e0:	01040200 	mrseq	r0, R12_usr
 3e4:	0002052e 	andeq	r0, r2, lr, lsr #10
 3e8:	20010402 	andcs	r0, r1, r2, lsl #8
 3ec:	053f0105 	ldreq	r0, [pc, #-261]!	; 2ef <startup-0x1ffffd11>
 3f0:	02055a1e 	andeq	r5, r5, #122880	; 0x1e000
 3f4:	4b0e054b 	blmi	381928 <startup-0x1fc7e6d8>
 3f8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 3fc:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 400:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 404:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 408:	0c053005 	stceq	0, cr3, [r5], {5}
 40c:	2e11053d 	mrccs	5, 0, r0, cr1, cr13, {1}
 410:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 414:	14052f0b 	strne	r2, [r5], #-3851	; 0xfffff0f5
 418:	2e19054c 	cfmac32cs	mvfx0, mvfx9, mvfx12
 41c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 420:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
 424:	2e12052f 	cfmul64cs	mvdx0, mvdx2, mvdx15
 428:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 42c:	19052f14 	stmdbne	r5, {r2, r4, r8, r9, sl, fp, sp}
 430:	2011052e 	andscs	r0, r1, lr, lsr #10
 434:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 438:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 43c:	12053d0d 	andne	r3, r5, #832	; 0x340
 440:	2009052e 	andcs	r0, r9, lr, lsr #10
 444:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff947 <ball+0xdfffef93>
 448:	19054c14 	stmdbne	r5, {r2, r4, sl, fp, lr}
 44c:	2011052e 	andscs	r0, r1, lr, lsr #10
 450:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 454:	12052f0d 	andne	r2, r5, #13, 30	; 0x34
 458:	2009052e 	andcs	r0, r9, lr, lsr #10
 45c:	052f1305 	streq	r1, [pc, #-773]!	; 15f <startup-0x1ffffea1>
 460:	10052e18 	andne	r2, r5, r8, lsl lr
 464:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 468:	3f02053e 	svccc	0x0002053e
 46c:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 470:	4a090311 	bmi	2410bc <startup-0x1fdbef44>
 474:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 478:	052f2f02 	streq	r2, [pc, #-3842]!	; fffff57e <ball+0xdfffebca>
 47c:	02053203 	andeq	r3, r5, #805306368	; 0x30000000
 480:	0004052e 	andeq	r0, r4, lr, lsr #10
 484:	68010402 	stmdavs	r1, {r1, sl}
 488:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 48c:	002e0104 	eoreq	r0, lr, r4, lsl #2
 490:	3d010402 	cfstrscc	mvf0, [r1, #-8]
 494:	01040200 	mrseq	r0, R12_usr
 498:	0003023b 	andeq	r0, r3, fp, lsr r2
 49c:	Address 0x0000049c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	72670059 	rsbvc	r0, r7, #89	; 0x59
   c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  10:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  14:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  18:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  1c:	67007465 	strvs	r7, [r0, -r5, ror #8]
  20:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  24:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  28:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  2c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffeb8 <ball+0xdffff504>
  30:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  34:	61726400 	cmnvs	r2, r0, lsl #8
  38:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
  3c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  40:	61726400 	cmnvs	r2, r0, lsl #8
  44:	6f6d0077 	svcvs	0x006d0077
  48:	73006576 	movwvc	r6, #1398	; 0x576
  4c:	63656c65 	cmnvs	r5, #25856	; 0x6500
  50:	6f635f74 	svcvs	0x00635f74
  54:	6f72746e 	svcvs	0x0072746e
  58:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  5c:	61726700 	cmnvs	r2, r0, lsl #14
  60:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  64:	6165725f 	cmnvs	r5, pc, asr r2
  68:	61645f64 	cmnvs	r4, r4, ror #30
  6c:	70006174 	andvc	r6, r0, r4, ror r1
  70:	00656761 	rsbeq	r6, r5, r1, ror #14
  74:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  78:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
  7c:	5f79616c 	svcpl	0x0079616c
  80:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
  84:	5074006f 	rsbspl	r0, r4, pc, rrx
  88:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  8c:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
  90:	6f685f61 	svcvs	0x00685f61
  94:	7265646c 	rsbvc	r6, r5, #108, 8	; 0x6c000000
  98:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  9c:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  a0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  a4:	2064656e 	rsbcs	r6, r4, lr, ror #10
  a8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  ac:	736f7000 	cmnvc	pc, #0
  b0:	61620079 	smcvs	8201	; 0x2009
  b4:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
  b8:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  bc:	00797274 	rsbseq	r7, r9, r4, ror r2
  c0:	70617267 	rsbvc	r7, r1, r7, ror #4
  c4:	5f636968 	svcpl	0x00636968
  c8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  cc:	72670065 	rsbvc	r0, r7, #101	; 0x65
  d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  d4:	61775f63 	cmnvs	r7, r3, ror #30
  d8:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
  dc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
  e0:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
  e4:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
  e8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  ec:	725f7800 	subsvc	r7, pc, #0, 16
  f0:	006c6165 	rsbeq	r6, ip, r5, ror #2
  f4:	6e69616d 	powvsez	f6, f1, #5.0
  f8:	61726700 	cmnvs	r2, r0, lsl #14
  fc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 100:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 104:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 108:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 10c:	00726165 	rsbseq	r6, r2, r5, ror #2
 110:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 114:	0074385f 	rsbseq	r3, r4, pc, asr r8
 118:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 11c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 120:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
 124:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 128:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 12c:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 130:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 1c <startup-0x1fffffe4>
 134:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 138:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 13c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 140:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 144:	70615f74 	rsbvc	r5, r1, r4, ror pc
 148:	69730070 	ldmdbvs	r3!, {r4, r5, r6}^
 14c:	0078657a 	rsbseq	r6, r8, sl, ror r5
 150:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 154:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 158:	5f79616c 	svcpl	0x0079616c
 15c:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 160:	4e470073 	mcrmi	0, 2, r0, cr7, cr3, {3}
 164:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 168:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 16c:	20312e32 	eorscs	r2, r1, r2, lsr lr
 170:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 174:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 178:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 17c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 180:	5b202965 	blpl	80a71c <startup-0x1f7f58e4>
 184:	2f4d5241 	svccs	0x004d5241
 188:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 18c:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 190:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 194:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 198:	6f697369 	svcvs	0x00697369
 19c:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 1a0:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 1a4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1ac:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1b0:	616f6c66 	cmnvs	pc, r6, ror #24
 1b4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1b8:	6f733d69 	svcvs	0x00733d69
 1bc:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1c0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 1c4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 1c8:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 1cc:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 1d0:	304f2d20 	subcc	r2, pc, r0, lsr #26
 1d4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 1d8:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 1dc:	74730039 	ldrbtvc	r0, [r3], #-57	; 0xffffffc7
 1e0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1e4:	61620070 	smcvs	8192	; 0x2000
 1e8:	43006c6c 	movwmi	r6, #3180	; 0xc6c
 1ec:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
 1f0:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 1f4:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
 1f8:	6f445c73 	svcvs	0x00445c73
 1fc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 200:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
 204:	5f746967 	svcpl	0x00746967
 208:	6a6f7270 	bvs	1bdcbd0 <startup-0x1e423430>
 20c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 210:	6863535c 	stmdavs	r3!, {r2, r3, r4, r6, r8, r9, ip, lr}^
 214:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 218:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 21c:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 220:	30544144 	subscc	r4, r4, r4, asr #2
 224:	6f5c3731 	svcvs	0x005c3731
 228:	5f666f6c 	svcpl	0x00666f6c
 22c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 230:	5c746e65 	ldclpl	14, cr6, [r4], #-404	; 0xfffffe6c
 234:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 238:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
 23c:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
 240:	6170736b 	cmnvs	r0, fp, ror #6
 244:	6c4f6563 	cfstr64vs	mvdx6, [pc], {99}	; 0x63
 248:	615c666f 	cmpvs	ip, pc, ror #12
 24c:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 250:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 254:	6b73616d 	blvs	1cd8810 <startup-0x1e3277f0>
 258:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 25c:	76007865 	strvc	r7, [r0], -r5, ror #16
 260:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 264:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 268:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1ae <startup-0x1ffffe52>	; <UNPREDICTABLE>
 26c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 270:	61726700 	cmnvs	r2, r0, lsl #14
 274:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 278:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 27c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 284 <startup-0x1ffffd7c>
 280:	00617461 	rsbeq	r7, r1, r1, ror #8
 284:	5f746573 	svcpl	0x00746573
 288:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 28c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 290:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 294:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 298:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 29c:	67006465 	strvs	r6, [r0, -r5, ror #8]
 2a0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2a8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2ac:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2b0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2b4:	61656c63 	cmnvs	r5, r3, ror #24
 2b8:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2bc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2c0:	61726700 	cmnvs	r2, r0, lsl #14
 2c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 2cc:	696c6174 	stmdbvs	ip!, {r2, r4, r5, r6, r8, sp, lr}^
 2d0:	6400657a 	strvs	r6, [r0], #-1402	; 0xfffffa86
 2d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2d8:	3030355f 	eorscc	r3, r0, pc, asr r5
 2dc:	7400736e 	strvc	r7, [r0], #-878	; 0xfffffc92
 2e0:	006a624f 	rsbeq	r6, sl, pc, asr #4
 2e4:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2e8:	61726700 	cmnvs	r2, r0, lsl #14
 2ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2f0:	6165725f 	cmnvs	r5, pc, asr r2
 2f4:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 2f8:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 2fc:	0073746e 	rsbseq	r7, r3, lr, ror #8
 300:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8c5 <ball+0xdfffef11>
 304:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 308:	6f6c6f2f 	svcvs	0x006c6f2f
 30c:	442f7366 	strtmi	r7, [pc], #-870	; 314 <startup-0x1ffffcec>
 310:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 314:	73746e65 	cmnvc	r4, #1616	; 0x650
 318:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 31c:	6f72705f 	svcvs	0x0072705f
 320:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 324:	63532f73 	cmpvs	r3, #460	; 0x1cc
 328:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 190 <startup-0x1ffffe70>
 32c:	6a6f7250 	bvs	1bdcc74 <startup-0x1e42338c>
 330:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 334:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 338:	2f373130 	svccs	0x00373130
 33c:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
 340:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 344:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 348:	646f432f 	strbtvs	r4, [pc], #-815	; 350 <startup-0x1ffffcb0>
 34c:	74694c65 	strbtvc	r4, [r9], #-3173	; 0xfffff39b
 350:	6f772f65 	svcvs	0x00772f65
 354:	70736b72 	rsbsvc	r6, r3, r2, ror fp
 358:	4f656361 	svcmi	0x00656361
 35c:	2f666f6c 	svccs	0x00666f6c
 360:	6f747561 	svcvs	0x00747561
 364:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 368:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 36c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 370:	00632e67 	rsbeq	r2, r3, r7, ror #28
 374:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 378:	6a626f5f 	bvs	189c0fc <startup-0x1e763f04>
 37c:	00746365 	rsbseq	r6, r4, r5, ror #6
 380:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 384:	73007864 	movwvc	r7, #2148	; 0x864
 388:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 38c:	4f500079 	svcmi	0x00500079
 390:	43454a42 	movtmi	r4, #23106	; 0x5a42
 394:	Address 0x00000394 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	00000048 	andeq	r0, r0, r8, asr #32
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0000070d 	andeq	r0, r0, sp, lsl #14
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	20000070 	andcs	r0, r0, r0, ror r0
  64:	00000012 	andeq	r0, r0, r2, lsl r0
  68:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  6c:	41018e02 	tstmi	r1, r2, lsl #28
  70:	0000070d 	andeq	r0, r0, sp, lsl #14
  74:	0000001c 	andeq	r0, r0, ip, lsl r0
  78:	00000000 	andeq	r0, r0, r0
  7c:	20000082 	andcs	r0, r0, r2, lsl #1
  80:	00000042 	andeq	r0, r0, r2, asr #32
  84:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  88:	41018e02 	tstmi	r1, r2, lsl #28
  8c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  90:	00000007 	andeq	r0, r0, r7
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	00000000 	andeq	r0, r0, r0
  9c:	200000c4 	andcs	r0, r0, r4, asr #1
  a0:	00000046 	andeq	r0, r0, r6, asr #32
  a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  a8:	41018e02 	tstmi	r1, r2, lsl #28
  ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b0:	00000007 	andeq	r0, r0, r7
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	2000010a 	andcs	r0, r0, sl, lsl #2
  c0:	00000046 	andeq	r0, r0, r6, asr #32
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000150 	andcs	r0, r0, r0, asr r1
  e0:	0000003c 	andeq	r0, r0, ip, lsr r0
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000018c 	andcs	r0, r0, ip, lsl #3
 100:	0000005a 	andeq	r0, r0, sl, asr r0
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001e6 	andcs	r0, r0, r6, ror #3
 120:	00000066 	andeq	r0, r0, r6, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0000070d 	andeq	r0, r0, sp, lsl #14
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	2000024c 	andcs	r0, r0, ip, asr #4
 13c:	00000090 	muleq	r0, r0, r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002dc 	ldrdcs	r0, [r0], -ip
 15c:	00000080 	andeq	r0, r0, r0, lsl #1
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	2000035c 	andcs	r0, r0, ip, asr r3
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	2000039c 	mulcs	r0, ip, r3
 19c:	00000046 	andeq	r0, r0, r6, asr #32
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200003e2 	andcs	r0, r0, r2, ror #7
 1bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	2000040c 	andcs	r0, r0, ip, lsl #8
 1dc:	00000056 	andeq	r0, r0, r6, asr r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	20000462 	andcs	r0, r0, r2, ror #8
 1f8:	00000068 	andeq	r0, r0, r8, rrx
 1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 200:	41018e02 	tstmi	r1, r2, lsl #28
 204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 208:	00000007 	andeq	r0, r0, r7
 20c:	00000020 	andeq	r0, r0, r0, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	200004ca 	andcs	r0, r0, sl, asr #9
 218:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
 21c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 220:	86048505 	strhi	r8, [r4], -r5, lsl #10
 224:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 228:	280e4101 	stmdacs	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	20000680 	andcs	r0, r0, r0, lsl #13
 23c:	00000020 	andeq	r0, r0, r0, lsr #32
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000000 	andeq	r0, r0, r0
 258:	200006a0 	andcs	r0, r0, r0, lsr #13
 25c:	00000066 	andeq	r0, r0, r6, rrx
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000000 	andeq	r0, r0, r0
 278:	20000706 	andcs	r0, r0, r6, lsl #14
 27c:	00000066 	andeq	r0, r0, r6, rrx
 280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 284:	41018e02 	tstmi	r1, r2, lsl #28
 288:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 28c:	00000007 	andeq	r0, r0, r7
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	00000000 	andeq	r0, r0, r0
 298:	2000076c 	andcs	r0, r0, ip, ror #14
 29c:	000000c4 	andeq	r0, r0, r4, asr #1
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	20000830 	andcs	r0, r0, r0, lsr r8
 2bc:	00000038 	andeq	r0, r0, r8, lsr r0
 2c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c4:	41018e02 	tstmi	r1, r2, lsl #28
 2c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2cc:	00000007 	andeq	r0, r0, r7
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c010001 	stcvc	0, cr0, [r1], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	20000869 	andcs	r0, r0, r9, ror #16
 2ec:	0000010a 	andeq	r0, r0, sl, lsl #2
