
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "copyright.xbm"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f001 f94e 	bl	200012a4 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
	us ++;
	#endif
	for(int i = 0; i < 4*us; i++){
20000060:	2300      	movs	r3, #0
20000062:	60fb      	str	r3, [r7, #12]
20000064:	e004      	b.n	20000070 <delay_mikro+0x18>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	3301      	adds	r3, #1
2000006e:	60fb      	str	r3, [r7, #12]
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	009a      	lsls	r2, r3, #2
20000074:	68fb      	ldr	r3, [r7, #12]
20000076:	429a      	cmp	r2, r3
20000078:	d8f5      	bhi.n	20000066 <delay_mikro+0xe>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	b004      	add	sp, #16
20000082:	bd80      	pop	{r7, pc}

20000084 <delay_milli>:

void delay_milli(unsigned int ms){
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
		ms ++;
	#endif
	for(int i = 0; i < ms; i++){
2000008c:	2300      	movs	r3, #0
2000008e:	60fb      	str	r3, [r7, #12]
20000090:	e007      	b.n	200000a2 <delay_milli+0x1e>
		delay_mikro(1000);
20000092:	23fa      	movs	r3, #250	; 0xfa
20000094:	009b      	lsls	r3, r3, #2
20000096:	0018      	movs	r0, r3
20000098:	f7ff ffde 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	3301      	adds	r3, #1
200000a0:	60fb      	str	r3, [r7, #12]
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	687a      	ldr	r2, [r7, #4]
200000a6:	429a      	cmp	r2, r3
200000a8:	d8f3      	bhi.n	20000092 <delay_milli+0xe>
	}
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b004      	add	sp, #16
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(){
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
	delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
	delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:
static uint8_t backBuffer[1024]; // 128 * 64 / 8


void graphic_ctrl_bit_set(uint8_t x){
200000c6:	b580      	push	{r7, lr}
200000c8:	b082      	sub	sp, #8
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000d2:	4b0d      	ldr	r3, [pc, #52]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000d4:	781b      	ldrb	r3, [r3, #0]
200000d6:	b2db      	uxtb	r3, r3
200000d8:	b25a      	sxtb	r2, r3
200000da:	1dfb      	adds	r3, r7, #7
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	b25b      	sxtb	r3, r3
200000e0:	2104      	movs	r1, #4
200000e2:	438b      	bics	r3, r1
200000e4:	b25b      	sxtb	r3, r3
200000e6:	4313      	orrs	r3, r2
200000e8:	b25a      	sxtb	r2, r3
200000ea:	4b07      	ldr	r3, [pc, #28]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000ec:	b2d2      	uxtb	r2, r2
200000ee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
200000f0:	4b05      	ldr	r3, [pc, #20]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f2:	781b      	ldrb	r3, [r3, #0]
200000f4:	b2db      	uxtb	r3, r3
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <graphic_ctrl_bit_set+0x42>)
200000f8:	2104      	movs	r1, #4
200000fa:	438b      	bics	r3, r1
200000fc:	b2db      	uxtb	r3, r3
200000fe:	7013      	strb	r3, [r2, #0]
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b002      	add	sp, #8
20000106:	bd80      	pop	{r7, pc}
20000108:	40021014 	andmi	r1, r2, r4, lsl r0

2000010c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
2000010c:	b580      	push	{r7, lr}
2000010e:	b082      	sub	sp, #8
20000110:	af00      	add	r7, sp, #0
20000112:	0002      	movs	r2, r0
20000114:	1dfb      	adds	r3, r7, #7
20000116:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000118:	4b0a      	ldr	r3, [pc, #40]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
2000011a:	781b      	ldrb	r3, [r3, #0]
2000011c:	b2db      	uxtb	r3, r3
2000011e:	b25b      	sxtb	r3, r3
20000120:	1dfa      	adds	r2, r7, #7
20000122:	7812      	ldrb	r2, [r2, #0]
20000124:	2104      	movs	r1, #4
20000126:	430a      	orrs	r2, r1
20000128:	b2d2      	uxtb	r2, r2
2000012a:	b252      	sxtb	r2, r2
2000012c:	43d2      	mvns	r2, r2
2000012e:	b252      	sxtb	r2, r2
20000130:	4013      	ands	r3, r2
20000132:	b25a      	sxtb	r2, r3
20000134:	4b03      	ldr	r3, [pc, #12]	; (20000144 <graphic_ctrl_bit_clear+0x38>)
20000136:	b2d2      	uxtb	r2, r2
20000138:	701a      	strb	r2, [r3, #0]
}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	46bd      	mov	sp, r7
2000013e:	b002      	add	sp, #8
20000140:	bd80      	pop	{r7, pc}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	40021014 	andmi	r1, r2, r4, lsl r0

20000148 <select_controller>:

void select_controller(uint8_t controller){
20000148:	b580      	push	{r7, lr}
2000014a:	b084      	sub	sp, #16
2000014c:	af00      	add	r7, sp, #0
2000014e:	0002      	movs	r2, r0
20000150:	1dfb      	adds	r3, r7, #7
20000152:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000154:	230f      	movs	r3, #15
20000156:	18fb      	adds	r3, r7, r3
20000158:	2200      	movs	r2, #0
2000015a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	781b      	ldrb	r3, [r3, #0]
20000160:	2b18      	cmp	r3, #24
20000162:	d01a      	beq.n	2000019a <select_controller+0x52>
20000164:	dc1d      	bgt.n	200001a2 <select_controller+0x5a>
20000166:	2b10      	cmp	r3, #16
20000168:	d010      	beq.n	2000018c <select_controller+0x44>
2000016a:	dc1a      	bgt.n	200001a2 <select_controller+0x5a>
2000016c:	2b00      	cmp	r3, #0
2000016e:	d002      	beq.n	20000176 <select_controller+0x2e>
20000170:	2b08      	cmp	r3, #8
20000172:	d004      	beq.n	2000017e <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
20000174:	e015      	b.n	200001a2 <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000176:	2018      	movs	r0, #24
20000178:	f7ff ffc8 	bl	2000010c <graphic_ctrl_bit_clear>
2000017c:	e012      	b.n	200001a4 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
2000017e:	2010      	movs	r0, #16
20000180:	f7ff ffc4 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
20000184:	2008      	movs	r0, #8
20000186:	f7ff ff9e 	bl	200000c6 <graphic_ctrl_bit_set>
2000018a:	e00b      	b.n	200001a4 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
2000018c:	2008      	movs	r0, #8
2000018e:	f7ff ffbd 	bl	2000010c <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
20000192:	2010      	movs	r0, #16
20000194:	f7ff ff97 	bl	200000c6 <graphic_ctrl_bit_set>
20000198:	e004      	b.n	200001a4 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
2000019a:	2018      	movs	r0, #24
2000019c:	f7ff ff93 	bl	200000c6 <graphic_ctrl_bit_set>
200001a0:	e000      	b.n	200001a4 <select_controller+0x5c>
		default: return;
200001a2:	46c0      	nop			; (mov r8, r8)
	}
}
200001a4:	46bd      	mov	sp, r7
200001a6:	b004      	add	sp, #16
200001a8:	bd80      	pop	{r7, pc}

200001aa <graphic_wait_ready>:

void graphic_wait_ready(void){
200001aa:	b580      	push	{r7, lr}
200001ac:	b082      	sub	sp, #8
200001ae:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001b0:	2040      	movs	r0, #64	; 0x40
200001b2:	f7ff ffab 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001b6:	4b16      	ldr	r3, [pc, #88]	; (20000210 <graphic_wait_ready+0x66>)
200001b8:	4a16      	ldr	r2, [pc, #88]	; (20000214 <graphic_wait_ready+0x6a>)
200001ba:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001bc:	2002      	movs	r0, #2
200001be:	f7ff ff82 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001c2:	2001      	movs	r0, #1
200001c4:	f7ff ffa2 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_500ns();
200001c8:	f7ff ff74 	bl	200000b4 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001cc:	2040      	movs	r0, #64	; 0x40
200001ce:	f7ff ff7a 	bl	200000c6 <graphic_ctrl_bit_set>
		delay_500ns();
200001d2:	f7ff ff6f 	bl	200000b4 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
200001d6:	4b10      	ldr	r3, [pc, #64]	; (20000218 <graphic_wait_ready+0x6e>)
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	b2da      	uxtb	r2, r3
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	217f      	movs	r1, #127	; 0x7f
200001e0:	438a      	bics	r2, r1
200001e2:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001e4:	2040      	movs	r0, #64	; 0x40
200001e6:	f7ff ff91 	bl	2000010c <graphic_ctrl_bit_clear>
		delay_500ns();
200001ea:	f7ff ff63 	bl	200000b4 <delay_500ns>
		if(c == 0){
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	2b00      	cmp	r3, #0
200001f4:	d000      	beq.n	200001f8 <graphic_wait_ready+0x4e>
	while(1){
200001f6:	e7e9      	b.n	200001cc <graphic_wait_ready+0x22>
			break;
200001f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
200001fa:	2040      	movs	r0, #64	; 0x40
200001fc:	f7ff ff63 	bl	200000c6 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
20000200:	4b03      	ldr	r3, [pc, #12]	; (20000210 <graphic_wait_ready+0x66>)
20000202:	4a06      	ldr	r2, [pc, #24]	; (2000021c <graphic_wait_ready+0x72>)
20000204:	601a      	str	r2, [r3, #0]
}
20000206:	46c0      	nop			; (mov r8, r8)
20000208:	46bd      	mov	sp, r7
2000020a:	b002      	add	sp, #8
2000020c:	bd80      	pop	{r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	40021000 	andmi	r1, r2, r0
20000214:	00005555 	andeq	r5, r0, r5, asr r5
20000218:	40021011 	andmi	r1, r2, r1, lsl r0
2000021c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000220 <graphic_read>:

uint8_t graphic_read(uint8_t controller){
20000220:	b580      	push	{r7, lr}
20000222:	b084      	sub	sp, #16
20000224:	af00      	add	r7, sp, #0
20000226:	0002      	movs	r2, r0
20000228:	1dfb      	adds	r3, r7, #7
2000022a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff6d 	bl	2000010c <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
20000232:	4b1b      	ldr	r3, [pc, #108]	; (200002a0 <graphic_read+0x80>)
20000234:	4a1b      	ldr	r2, [pc, #108]	; (200002a4 <graphic_read+0x84>)
20000236:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000238:	2003      	movs	r0, #3
2000023a:	f7ff ff44 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(controller);
2000023e:	1dfb      	adds	r3, r7, #7
20000240:	781b      	ldrb	r3, [r3, #0]
20000242:	0018      	movs	r0, r3
20000244:	f7ff ff80 	bl	20000148 <select_controller>
	delay_500ns();
20000248:	f7ff ff34 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000024c:	2040      	movs	r0, #64	; 0x40
2000024e:	f7ff ff3a 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
20000252:	f7ff ff2f 	bl	200000b4 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000256:	4a14      	ldr	r2, [pc, #80]	; (200002a8 <graphic_read+0x88>)
20000258:	230f      	movs	r3, #15
2000025a:	18fb      	adds	r3, r7, r3
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff ff53 	bl	2000010c <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000266:	4b0e      	ldr	r3, [pc, #56]	; (200002a0 <graphic_read+0x80>)
20000268:	4a10      	ldr	r2, [pc, #64]	; (200002ac <graphic_read+0x8c>)
2000026a:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	2b08      	cmp	r3, #8
20000272:	d104      	bne.n	2000027e <graphic_read+0x5e>
		select_controller(B_CS1);
20000274:	2008      	movs	r0, #8
20000276:	f7ff ff67 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000027a:	f7ff ff96 	bl	200001aa <graphic_wait_ready>
	}
	if(controller == B_CS2){
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	781b      	ldrb	r3, [r3, #0]
20000282:	2b10      	cmp	r3, #16
20000284:	d104      	bne.n	20000290 <graphic_read+0x70>
		select_controller(B_CS2);
20000286:	2010      	movs	r0, #16
20000288:	f7ff ff5e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000028c:	f7ff ff8d 	bl	200001aa <graphic_wait_ready>
	}
	return rv;
20000290:	230f      	movs	r3, #15
20000292:	18fb      	adds	r3, r7, r3
20000294:	781b      	ldrb	r3, [r3, #0]
}
20000296:	0018      	movs	r0, r3
20000298:	46bd      	mov	sp, r7
2000029a:	b004      	add	sp, #16
2000029c:	bd80      	pop	{r7, pc}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	40021000 	andmi	r1, r2, r0
200002a4:	00005555 	andeq	r5, r0, r5, asr r5
200002a8:	40021011 	andmi	r1, r2, r1, lsl r0
200002ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002b0 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002b0:	b580      	push	{r7, lr}
200002b2:	b082      	sub	sp, #8
200002b4:	af00      	add	r7, sp, #0
200002b6:	0002      	movs	r2, r0
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	701a      	strb	r2, [r3, #0]
200002bc:	1dbb      	adds	r3, r7, #6
200002be:	1c0a      	adds	r2, r1, #0
200002c0:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002c2:	4a1a      	ldr	r2, [pc, #104]	; (2000032c <graphic_write+0x7c>)
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002ca:	1dbb      	adds	r3, r7, #6
200002cc:	781b      	ldrb	r3, [r3, #0]
200002ce:	0018      	movs	r0, r3
200002d0:	f7ff ff3a 	bl	20000148 <select_controller>
	delay_500ns();
200002d4:	f7ff feee 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff fef4 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_500ns();
200002de:	f7ff fee9 	bl	200000b4 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f7ff ff12 	bl	2000010c <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2208      	movs	r2, #8
200002ee:	4013      	ands	r3, r2
200002f0:	d004      	beq.n	200002fc <graphic_write+0x4c>
		select_controller(B_CS1);
200002f2:	2008      	movs	r0, #8
200002f4:	f7ff ff28 	bl	20000148 <select_controller>
		graphic_wait_ready();
200002f8:	f7ff ff57 	bl	200001aa <graphic_wait_ready>
	}
	if(controller & B_CS2){
200002fc:	1dbb      	adds	r3, r7, #6
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2210      	movs	r2, #16
20000302:	4013      	ands	r3, r2
20000304:	d004      	beq.n	20000310 <graphic_write+0x60>
		select_controller(B_CS2);
20000306:	2010      	movs	r0, #16
20000308:	f7ff ff1e 	bl	20000148 <select_controller>
		graphic_wait_ready();
2000030c:	f7ff ff4d 	bl	200001aa <graphic_wait_ready>
	}
	*portOdrHigh = 0;
20000310:	4b06      	ldr	r3, [pc, #24]	; (2000032c <graphic_write+0x7c>)
20000312:	2200      	movs	r2, #0
20000314:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff fed5 	bl	200000c6 <graphic_ctrl_bit_set>
	select_controller(0);
2000031c:	2000      	movs	r0, #0
2000031e:	f7ff ff13 	bl	20000148 <select_controller>
}
20000322:	46c0      	nop			; (mov r8, r8)
20000324:	46bd      	mov	sp, r7
20000326:	b002      	add	sp, #8
20000328:	bd80      	pop	{r7, pc}
2000032a:	46c0      	nop			; (mov r8, r8)
2000032c:	40021015 	andmi	r1, r2, r5, lsl r0

20000330 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000330:	b580      	push	{r7, lr}
20000332:	b082      	sub	sp, #8
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
2000033c:	1dbb      	adds	r3, r7, #6
2000033e:	1c0a      	adds	r2, r1, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fee2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781b      	ldrb	r3, [r3, #0]
2000034c:	0018      	movs	r0, r3
2000034e:	f7ff fefb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000352:	2003      	movs	r0, #3
20000354:	f7ff feda 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	781a      	ldrb	r2, [r3, #0]
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	781b      	ldrb	r3, [r3, #0]
20000360:	0011      	movs	r1, r2
20000362:	0018      	movs	r0, r3
20000364:	f7ff ffa4 	bl	200002b0 <graphic_write>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}

20000370 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000370:	b580      	push	{r7, lr}
20000372:	b082      	sub	sp, #8
20000374:	af00      	add	r7, sp, #0
20000376:	0002      	movs	r2, r0
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	701a      	strb	r2, [r3, #0]
2000037c:	1dbb      	adds	r3, r7, #6
2000037e:	1c0a      	adds	r2, r1, #0
20000380:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000382:	2040      	movs	r0, #64	; 0x40
20000384:	f7ff fec2 	bl	2000010c <graphic_ctrl_bit_clear>
	select_controller(controller);
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0018      	movs	r0, r3
2000038e:	f7ff fedb 	bl	20000148 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000392:	2001      	movs	r0, #1
20000394:	f7ff fe97 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000398:	2002      	movs	r0, #2
2000039a:	f7ff feb7 	bl	2000010c <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000039e:	1dbb      	adds	r3, r7, #6
200003a0:	781a      	ldrb	r2, [r3, #0]
200003a2:	1dfb      	adds	r3, r7, #7
200003a4:	781b      	ldrb	r3, [r3, #0]
200003a6:	0011      	movs	r1, r2
200003a8:	0018      	movs	r0, r3
200003aa:	f7ff ff81 	bl	200002b0 <graphic_write>
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}

200003b6 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
200003bc:	0002      	movs	r2, r0
200003be:	1dfb      	adds	r3, r7, #7
200003c0:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	0018      	movs	r0, r3
200003c8:	f7ff ff2a 	bl	20000220 <graphic_read>
	return graphic_read(controller);
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
200003d0:	0018      	movs	r0, r3
200003d2:	f7ff ff25 	bl	20000220 <graphic_read>
200003d6:	0003      	movs	r3, r0
}
200003d8:	0018      	movs	r0, r3
200003da:	46bd      	mov	sp, r7
200003dc:	b002      	add	sp, #8
200003de:	bd80      	pop	{r7, pc}

200003e0 <graphic_initialize>:

void graphic_initialize(){
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003e4:	2040      	movs	r0, #64	; 0x40
200003e6:	f7ff fe6e 	bl	200000c6 <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ea:	200a      	movs	r0, #10
200003ec:	f7ff fe34 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003f0:	2078      	movs	r0, #120	; 0x78
200003f2:	f7ff fe8b 	bl	2000010c <graphic_ctrl_bit_clear>
	delay_milli(30);
200003f6:	201e      	movs	r0, #30
200003f8:	f7ff fe44 	bl	20000084 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003fc:	2020      	movs	r0, #32
200003fe:	f7ff fe62 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000402:	2118      	movs	r1, #24
20000404:	203e      	movs	r0, #62	; 0x3e
20000406:	f7ff ff93 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	203f      	movs	r0, #63	; 0x3f
2000040e:	f7ff ff8f 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000412:	2118      	movs	r1, #24
20000414:	20c0      	movs	r0, #192	; 0xc0
20000416:	f7ff ff8b 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	2040      	movs	r0, #64	; 0x40
2000041e:	f7ff ff87 	bl	20000330 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000422:	2118      	movs	r1, #24
20000424:	20b8      	movs	r0, #184	; 0xb8
20000426:	f7ff ff83 	bl	20000330 <graphic_write_command>
	select_controller(0);
2000042a:	2000      	movs	r0, #0
2000042c:	f7ff fe8c 	bl	20000148 <select_controller>
}
20000430:	46c0      	nop			; (mov r8, r8)
20000432:	46bd      	mov	sp, r7
20000434:	bd80      	pop	{r7, pc}

20000436 <graphic_clear_screen>:

void graphic_clear_screen(){
20000436:	b580      	push	{r7, lr}
20000438:	b082      	sub	sp, #8
2000043a:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	2200      	movs	r2, #0
20000440:	701a      	strb	r2, [r3, #0]
20000442:	e023      	b.n	2000048c <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000444:	1dfb      	adds	r3, r7, #7
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2248      	movs	r2, #72	; 0x48
2000044a:	4252      	negs	r2, r2
2000044c:	4313      	orrs	r3, r2
2000044e:	b2db      	uxtb	r3, r3
20000450:	2118      	movs	r1, #24
20000452:	0018      	movs	r0, r3
20000454:	f7ff ff6c 	bl	20000330 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000458:	2118      	movs	r1, #24
2000045a:	2040      	movs	r0, #64	; 0x40
2000045c:	f7ff ff68 	bl	20000330 <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
20000460:	1dbb      	adds	r3, r7, #6
20000462:	2200      	movs	r2, #0
20000464:	701a      	strb	r2, [r3, #0]
20000466:	e008      	b.n	2000047a <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000468:	2118      	movs	r1, #24
2000046a:	2000      	movs	r0, #0
2000046c:	f7ff ff80 	bl	20000370 <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
20000470:	1dbb      	adds	r3, r7, #6
20000472:	781a      	ldrb	r2, [r3, #0]
20000474:	1dbb      	adds	r3, r7, #6
20000476:	3201      	adds	r2, #1
20000478:	701a      	strb	r2, [r3, #0]
2000047a:	1dbb      	adds	r3, r7, #6
2000047c:	781b      	ldrb	r3, [r3, #0]
2000047e:	2b3f      	cmp	r3, #63	; 0x3f
20000480:	d9f2      	bls.n	20000468 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
20000482:	1dfb      	adds	r3, r7, #7
20000484:	781a      	ldrb	r2, [r3, #0]
20000486:	1dfb      	adds	r3, r7, #7
20000488:	3201      	adds	r2, #1
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dfb      	adds	r3, r7, #7
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	2b07      	cmp	r3, #7
20000492:	d9d7      	bls.n	20000444 <graphic_clear_screen+0xe>
		}
	}
}
20000494:	46c0      	nop			; (mov r8, r8)
20000496:	46c0      	nop			; (mov r8, r8)
20000498:	46bd      	mov	sp, r7
2000049a:	b002      	add	sp, #8
2000049c:	bd80      	pop	{r7, pc}

2000049e <pixel>:
	graphic_write_data(mask, controller);
}
#endif

#ifndef OLD_PIXEL
void pixel(int x, int y, int set) {
2000049e:	b580      	push	{r7, lr}
200004a0:	b086      	sub	sp, #24
200004a2:	af00      	add	r7, sp, #0
200004a4:	60f8      	str	r0, [r7, #12]
200004a6:	60b9      	str	r1, [r7, #8]
200004a8:	607a      	str	r2, [r7, #4]
	uint8_t mask;
	int index = 0;
200004aa:	2300      	movs	r3, #0
200004ac:	617b      	str	r3, [r7, #20]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b80      	cmp	r3, #128	; 0x80
200004b2:	dc3d      	bgt.n	20000530 <pixel+0x92>
200004b4:	68fb      	ldr	r3, [r7, #12]
200004b6:	2b00      	cmp	r3, #0
200004b8:	dd3a      	ble.n	20000530 <pixel+0x92>
200004ba:	68bb      	ldr	r3, [r7, #8]
200004bc:	2b40      	cmp	r3, #64	; 0x40
200004be:	dc37      	bgt.n	20000530 <pixel+0x92>
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	2b00      	cmp	r3, #0
200004c4:	dd34      	ble.n	20000530 <pixel+0x92>
		mask = 1 << ((y-1)%8);
200004c6:	68bb      	ldr	r3, [r7, #8]
200004c8:	3b01      	subs	r3, #1
200004ca:	4a1b      	ldr	r2, [pc, #108]	; (20000538 <pixel+0x9a>)
200004cc:	4013      	ands	r3, r2
200004ce:	d504      	bpl.n	200004da <pixel+0x3c>
200004d0:	3b01      	subs	r3, #1
200004d2:	2208      	movs	r2, #8
200004d4:	4252      	negs	r2, r2
200004d6:	4313      	orrs	r3, r2
200004d8:	3301      	adds	r3, #1
200004da:	001a      	movs	r2, r3
200004dc:	2301      	movs	r3, #1
200004de:	4093      	lsls	r3, r2
200004e0:	001a      	movs	r2, r3
200004e2:	2313      	movs	r3, #19
200004e4:	18fb      	adds	r3, r7, r3
200004e6:	701a      	strb	r2, [r3, #0]
	if(x >= 64) {
200004e8:	68fb      	ldr	r3, [r7, #12]
200004ea:	2b3f      	cmp	r3, #63	; 0x3f
200004ec:	dd05      	ble.n	200004fa <pixel+0x5c>
		x -= 64;
200004ee:	68fb      	ldr	r3, [r7, #12]
200004f0:	3b40      	subs	r3, #64	; 0x40
200004f2:	60fb      	str	r3, [r7, #12]
		index = 512;
200004f4:	2380      	movs	r3, #128	; 0x80
200004f6:	009b      	lsls	r3, r3, #2
200004f8:	617b      	str	r3, [r7, #20]
	}
	index += x + ((y-1)/8)*64;
200004fa:	68bb      	ldr	r3, [r7, #8]
200004fc:	3b01      	subs	r3, #1
200004fe:	2b00      	cmp	r3, #0
20000500:	da00      	bge.n	20000504 <pixel+0x66>
20000502:	3307      	adds	r3, #7
20000504:	10db      	asrs	r3, r3, #3
20000506:	019a      	lsls	r2, r3, #6
20000508:	68fb      	ldr	r3, [r7, #12]
2000050a:	18d3      	adds	r3, r2, r3
2000050c:	697a      	ldr	r2, [r7, #20]
2000050e:	18d3      	adds	r3, r2, r3
20000510:	617b      	str	r3, [r7, #20]
	backBuffer[index] |= mask;
20000512:	4a0a      	ldr	r2, [pc, #40]	; (2000053c <pixel+0x9e>)
20000514:	697b      	ldr	r3, [r7, #20]
20000516:	18d3      	adds	r3, r2, r3
20000518:	781a      	ldrb	r2, [r3, #0]
2000051a:	2313      	movs	r3, #19
2000051c:	18fb      	adds	r3, r7, r3
2000051e:	781b      	ldrb	r3, [r3, #0]
20000520:	4313      	orrs	r3, r2
20000522:	b2d9      	uxtb	r1, r3
20000524:	4a05      	ldr	r2, [pc, #20]	; (2000053c <pixel+0x9e>)
20000526:	697b      	ldr	r3, [r7, #20]
20000528:	18d3      	adds	r3, r2, r3
2000052a:	1c0a      	adds	r2, r1, #0
2000052c:	701a      	strb	r2, [r3, #0]
2000052e:	e000      	b.n	20000532 <pixel+0x94>
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
20000530:	46c0      	nop			; (mov r8, r8)
}
20000532:	46bd      	mov	sp, r7
20000534:	b006      	add	sp, #24
20000536:	bd80      	pop	{r7, pc}
20000538:	80000007 	andhi	r0, r0, r7
2000053c:	20001368 	andcs	r1, r0, r8, ror #6

20000540 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000540:	b580      	push	{r7, lr}
20000542:	b084      	sub	sp, #16
20000544:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000546:	2300      	movs	r3, #0
20000548:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
2000054a:	230d      	movs	r3, #13
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	2200      	movs	r2, #0
20000550:	701a      	strb	r2, [r3, #0]
20000552:	e04f      	b.n	200005f4 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000554:	230d      	movs	r3, #13
20000556:	18fb      	adds	r3, r7, r3
20000558:	781b      	ldrb	r3, [r3, #0]
2000055a:	2b00      	cmp	r3, #0
2000055c:	d101      	bne.n	20000562 <graphic_draw_screen+0x22>
2000055e:	2208      	movs	r2, #8
20000560:	e000      	b.n	20000564 <graphic_draw_screen+0x24>
20000562:	2210      	movs	r2, #16
20000564:	1dfb      	adds	r3, r7, #7
20000566:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000568:	230e      	movs	r3, #14
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	2200      	movs	r2, #0
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e035      	b.n	200005de <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20000572:	230e      	movs	r3, #14
20000574:	18fb      	adds	r3, r7, r3
20000576:	781b      	ldrb	r3, [r3, #0]
20000578:	2248      	movs	r2, #72	; 0x48
2000057a:	4252      	negs	r2, r2
2000057c:	4313      	orrs	r3, r2
2000057e:	b2da      	uxtb	r2, r3
20000580:	1dfb      	adds	r3, r7, #7
20000582:	781b      	ldrb	r3, [r3, #0]
20000584:	0019      	movs	r1, r3
20000586:	0010      	movs	r0, r2
20000588:	f7ff fed2 	bl	20000330 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	0019      	movs	r1, r3
20000592:	2040      	movs	r0, #64	; 0x40
20000594:	f7ff fecc 	bl	20000330 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000598:	230f      	movs	r3, #15
2000059a:	18fb      	adds	r3, r7, r3
2000059c:	2200      	movs	r2, #0
2000059e:	701a      	strb	r2, [r3, #0]
200005a0:	e012      	b.n	200005c8 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
200005a2:	4a19      	ldr	r2, [pc, #100]	; (20000608 <graphic_draw_screen+0xc8>)
200005a4:	68bb      	ldr	r3, [r7, #8]
200005a6:	18d3      	adds	r3, r2, r3
200005a8:	781a      	ldrb	r2, [r3, #0]
200005aa:	1dfb      	adds	r3, r7, #7
200005ac:	781b      	ldrb	r3, [r3, #0]
200005ae:	0019      	movs	r1, r3
200005b0:	0010      	movs	r0, r2
200005b2:	f7ff fedd 	bl	20000370 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200005b6:	210f      	movs	r1, #15
200005b8:	187b      	adds	r3, r7, r1
200005ba:	781a      	ldrb	r2, [r3, #0]
200005bc:	187b      	adds	r3, r7, r1
200005be:	3201      	adds	r2, #1
200005c0:	701a      	strb	r2, [r3, #0]
200005c2:	68bb      	ldr	r3, [r7, #8]
200005c4:	3301      	adds	r3, #1
200005c6:	60bb      	str	r3, [r7, #8]
200005c8:	230f      	movs	r3, #15
200005ca:	18fb      	adds	r3, r7, r3
200005cc:	781b      	ldrb	r3, [r3, #0]
200005ce:	2b3f      	cmp	r3, #63	; 0x3f
200005d0:	d9e7      	bls.n	200005a2 <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
200005d2:	210e      	movs	r1, #14
200005d4:	187b      	adds	r3, r7, r1
200005d6:	781a      	ldrb	r2, [r3, #0]
200005d8:	187b      	adds	r3, r7, r1
200005da:	3201      	adds	r2, #1
200005dc:	701a      	strb	r2, [r3, #0]
200005de:	230e      	movs	r3, #14
200005e0:	18fb      	adds	r3, r7, r3
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	2b07      	cmp	r3, #7
200005e6:	d9c4      	bls.n	20000572 <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
200005e8:	210d      	movs	r1, #13
200005ea:	187b      	adds	r3, r7, r1
200005ec:	781a      	ldrb	r2, [r3, #0]
200005ee:	187b      	adds	r3, r7, r1
200005f0:	3201      	adds	r2, #1
200005f2:	701a      	strb	r2, [r3, #0]
200005f4:	230d      	movs	r3, #13
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2b01      	cmp	r3, #1
200005fc:	d9aa      	bls.n	20000554 <graphic_draw_screen+0x14>
			}
		}
	}
}
200005fe:	46c0      	nop			; (mov r8, r8)
20000600:	46c0      	nop			; (mov r8, r8)
20000602:	46bd      	mov	sp, r7
20000604:	b004      	add	sp, #16
20000606:	bd80      	pop	{r7, pc}
20000608:	20001368 	andcs	r1, r0, r8, ror #6

2000060c <draw_object>:

#endif


void draw_object(POBJECT o){
2000060c:	b580      	push	{r7, lr}
2000060e:	b084      	sub	sp, #16
20000610:	af00      	add	r7, sp, #0
20000612:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000614:	2300      	movs	r3, #0
20000616:	60fb      	str	r3, [r7, #12]
20000618:	e01e      	b.n	20000658 <draw_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
2000061a:	687b      	ldr	r3, [r7, #4]
2000061c:	681a      	ldr	r2, [r3, #0]
2000061e:	68fb      	ldr	r3, [r7, #12]
20000620:	3304      	adds	r3, #4
20000622:	005b      	lsls	r3, r3, #1
20000624:	18d3      	adds	r3, r2, r3
20000626:	3304      	adds	r3, #4
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	001a      	movs	r2, r3
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	68db      	ldr	r3, [r3, #12]
20000630:	18d0      	adds	r0, r2, r3
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	681a      	ldr	r2, [r3, #0]
20000636:	68fb      	ldr	r3, [r7, #12]
20000638:	3304      	adds	r3, #4
2000063a:	005b      	lsls	r3, r3, #1
2000063c:	18d3      	adds	r3, r2, r3
2000063e:	3305      	adds	r3, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	001a      	movs	r2, r3
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	691b      	ldr	r3, [r3, #16]
20000648:	18d3      	adds	r3, r2, r3
2000064a:	2201      	movs	r2, #1
2000064c:	0019      	movs	r1, r3
2000064e:	f7ff ff26 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	3301      	adds	r3, #1
20000656:	60fb      	str	r3, [r7, #12]
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	681b      	ldr	r3, [r3, #0]
2000065e:	68fa      	ldr	r2, [r7, #12]
20000660:	429a      	cmp	r2, r3
20000662:	dbda      	blt.n	2000061a <draw_object+0xe>
	}
}
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	46c0      	nop			; (mov r8, r8)
20000668:	46bd      	mov	sp, r7
2000066a:	b004      	add	sp, #16
2000066c:	bd80      	pop	{r7, pc}

2000066e <clear_object>:

void clear_object(POBJECT o){
2000066e:	b580      	push	{r7, lr}
20000670:	b084      	sub	sp, #16
20000672:	af00      	add	r7, sp, #0
20000674:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
20000676:	2300      	movs	r3, #0
20000678:	60fb      	str	r3, [r7, #12]
2000067a:	e01e      	b.n	200006ba <clear_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	681a      	ldr	r2, [r3, #0]
20000680:	68fb      	ldr	r3, [r7, #12]
20000682:	3304      	adds	r3, #4
20000684:	005b      	lsls	r3, r3, #1
20000686:	18d3      	adds	r3, r2, r3
20000688:	3304      	adds	r3, #4
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	001a      	movs	r2, r3
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	68db      	ldr	r3, [r3, #12]
20000692:	18d0      	adds	r0, r2, r3
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	681a      	ldr	r2, [r3, #0]
20000698:	68fb      	ldr	r3, [r7, #12]
2000069a:	3304      	adds	r3, #4
2000069c:	005b      	lsls	r3, r3, #1
2000069e:	18d3      	adds	r3, r2, r3
200006a0:	3305      	adds	r3, #5
200006a2:	781b      	ldrb	r3, [r3, #0]
200006a4:	001a      	movs	r2, r3
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	691b      	ldr	r3, [r3, #16]
200006aa:	18d3      	adds	r3, r2, r3
200006ac:	2200      	movs	r2, #0
200006ae:	0019      	movs	r1, r3
200006b0:	f7ff fef5 	bl	2000049e <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	3301      	adds	r3, #1
200006b8:	60fb      	str	r3, [r7, #12]
200006ba:	687b      	ldr	r3, [r7, #4]
200006bc:	681b      	ldr	r3, [r3, #0]
200006be:	681b      	ldr	r3, [r3, #0]
200006c0:	68fa      	ldr	r2, [r7, #12]
200006c2:	429a      	cmp	r2, r3
200006c4:	dbda      	blt.n	2000067c <clear_object+0xe>
	}
	

}
200006c6:	46c0      	nop			; (mov r8, r8)
200006c8:	46c0      	nop			; (mov r8, r8)
200006ca:	46bd      	mov	sp, r7
200006cc:	b004      	add	sp, #16
200006ce:	bd80      	pop	{r7, pc}

200006d0 <clear_backBuffer>:

void clear_backBuffer() {
200006d0:	b580      	push	{r7, lr}
200006d2:	b082      	sub	sp, #8
200006d4:	af00      	add	r7, sp, #0
int i;
for (i = 0; i < 1024; i++)
200006d6:	2300      	movs	r3, #0
200006d8:	607b      	str	r3, [r7, #4]
200006da:	e007      	b.n	200006ec <clear_backBuffer+0x1c>
backBuffer[i] = 0;
200006dc:	4a08      	ldr	r2, [pc, #32]	; (20000700 <clear_backBuffer+0x30>)
200006de:	687b      	ldr	r3, [r7, #4]
200006e0:	18d3      	adds	r3, r2, r3
200006e2:	2200      	movs	r2, #0
200006e4:	701a      	strb	r2, [r3, #0]
for (i = 0; i < 1024; i++)
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	3301      	adds	r3, #1
200006ea:	607b      	str	r3, [r7, #4]
200006ec:	687a      	ldr	r2, [r7, #4]
200006ee:	2380      	movs	r3, #128	; 0x80
200006f0:	00db      	lsls	r3, r3, #3
200006f2:	429a      	cmp	r2, r3
200006f4:	dbf2      	blt.n	200006dc <clear_backBuffer+0xc>
}
200006f6:	46c0      	nop			; (mov r8, r8)
200006f8:	46c0      	nop			; (mov r8, r8)
200006fa:	46bd      	mov	sp, r7
200006fc:	b002      	add	sp, #8
200006fe:	bd80      	pop	{r7, pc}
20000700:	20001368 	andcs	r1, r0, r8, ror #6

20000704 <load_sprite>:
	unsigned char width;
	unsigned char height;
	unsigned char* data;
} sprite;

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000704:	b580      	push	{r7, lr}
20000706:	b084      	sub	sp, #16
20000708:	af00      	add	r7, sp, #0
2000070a:	60f8      	str	r0, [r7, #12]
2000070c:	60b9      	str	r1, [r7, #8]
2000070e:	607a      	str	r2, [r7, #4]
20000710:	603b      	str	r3, [r7, #0]
	s->width = width;
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	b2da      	uxtb	r2, r3
20000716:	68fb      	ldr	r3, [r7, #12]
20000718:	701a      	strb	r2, [r3, #0]
	s->height = height;
2000071a:	683b      	ldr	r3, [r7, #0]
2000071c:	b2da      	uxtb	r2, r3
2000071e:	68fb      	ldr	r3, [r7, #12]
20000720:	705a      	strb	r2, [r3, #1]
	s->data = data;
20000722:	68fb      	ldr	r3, [r7, #12]
20000724:	68ba      	ldr	r2, [r7, #8]
20000726:	605a      	str	r2, [r3, #4]
}
20000728:	46c0      	nop			; (mov r8, r8)
2000072a:	46bd      	mov	sp, r7
2000072c:	b004      	add	sp, #16
2000072e:	bd80      	pop	{r7, pc}

20000730 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y, int set) {
20000730:	b580      	push	{r7, lr}
20000732:	b08a      	sub	sp, #40	; 0x28
20000734:	af00      	add	r7, sp, #0
20000736:	60f8      	str	r0, [r7, #12]
20000738:	60b9      	str	r1, [r7, #8]
2000073a:	607a      	str	r2, [r7, #4]
2000073c:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000073e:	68fb      	ldr	r3, [r7, #12]
20000740:	781b      	ldrb	r3, [r3, #0]
20000742:	2207      	movs	r2, #7
20000744:	4013      	ands	r3, r2
20000746:	b2db      	uxtb	r3, r3
20000748:	2b00      	cmp	r3, #0
2000074a:	d105      	bne.n	20000758 <draw_sprite+0x28>
		width_in_bytes = s->width / 8;
2000074c:	68fb      	ldr	r3, [r7, #12]
2000074e:	781b      	ldrb	r3, [r3, #0]
20000750:	08db      	lsrs	r3, r3, #3
20000752:	b2db      	uxtb	r3, r3
20000754:	61bb      	str	r3, [r7, #24]
20000756:	e005      	b.n	20000764 <draw_sprite+0x34>
	else
		width_in_bytes = s->width / 8 + 1;
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	08db      	lsrs	r3, r3, #3
2000075e:	b2db      	uxtb	r3, r3
20000760:	3301      	adds	r3, #1
20000762:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++){
20000764:	2300      	movs	r3, #0
20000766:	627b      	str	r3, [r7, #36]	; 0x24
20000768:	e039      	b.n	200007de <draw_sprite+0xae>
		for (j = 0; j < width_in_bytes; j++) {
2000076a:	2300      	movs	r3, #0
2000076c:	623b      	str	r3, [r7, #32]
2000076e:	e02f      	b.n	200007d0 <draw_sprite+0xa0>
			unsigned char byte = s->data[i * width_in_bytes + j];
20000770:	68fb      	ldr	r3, [r7, #12]
20000772:	685b      	ldr	r3, [r3, #4]
20000774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000776:	69b9      	ldr	r1, [r7, #24]
20000778:	4351      	muls	r1, r2
2000077a:	6a3a      	ldr	r2, [r7, #32]
2000077c:	188a      	adds	r2, r1, r2
2000077e:	189a      	adds	r2, r3, r2
20000780:	2317      	movs	r3, #23
20000782:	18fb      	adds	r3, r7, r3
20000784:	7812      	ldrb	r2, [r2, #0]
20000786:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20000788:	2300      	movs	r3, #0
2000078a:	61fb      	str	r3, [r7, #28]
2000078c:	e01a      	b.n	200007c4 <draw_sprite+0x94>
				if (byte & (1 << k))
2000078e:	2317      	movs	r3, #23
20000790:	18fb      	adds	r3, r7, r3
20000792:	781a      	ldrb	r2, [r3, #0]
20000794:	69fb      	ldr	r3, [r7, #28]
20000796:	411a      	asrs	r2, r3
20000798:	0013      	movs	r3, r2
2000079a:	2201      	movs	r2, #1
2000079c:	4013      	ands	r3, r2
2000079e:	d00e      	beq.n	200007be <draw_sprite+0x8e>
					pixel(8 * j + k + x + 1, i + y + 1, set);
200007a0:	6a3b      	ldr	r3, [r7, #32]
200007a2:	00da      	lsls	r2, r3, #3
200007a4:	69fb      	ldr	r3, [r7, #28]
200007a6:	18d2      	adds	r2, r2, r3
200007a8:	68bb      	ldr	r3, [r7, #8]
200007aa:	18d3      	adds	r3, r2, r3
200007ac:	1c58      	adds	r0, r3, #1
200007ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	18d3      	adds	r3, r2, r3
200007b4:	3301      	adds	r3, #1
200007b6:	683a      	ldr	r2, [r7, #0]
200007b8:	0019      	movs	r1, r3
200007ba:	f7ff fe70 	bl	2000049e <pixel>
			for (k =0; k < 8; k++) {
200007be:	69fb      	ldr	r3, [r7, #28]
200007c0:	3301      	adds	r3, #1
200007c2:	61fb      	str	r3, [r7, #28]
200007c4:	69fb      	ldr	r3, [r7, #28]
200007c6:	2b07      	cmp	r3, #7
200007c8:	dde1      	ble.n	2000078e <draw_sprite+0x5e>
		for (j = 0; j < width_in_bytes; j++) {
200007ca:	6a3b      	ldr	r3, [r7, #32]
200007cc:	3301      	adds	r3, #1
200007ce:	623b      	str	r3, [r7, #32]
200007d0:	6a3a      	ldr	r2, [r7, #32]
200007d2:	69bb      	ldr	r3, [r7, #24]
200007d4:	429a      	cmp	r2, r3
200007d6:	dbcb      	blt.n	20000770 <draw_sprite+0x40>
	for (i = 0; i < s->height; i++){
200007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200007da:	3301      	adds	r3, #1
200007dc:	627b      	str	r3, [r7, #36]	; 0x24
200007de:	68fb      	ldr	r3, [r7, #12]
200007e0:	785b      	ldrb	r3, [r3, #1]
200007e2:	001a      	movs	r2, r3
200007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200007e6:	4293      	cmp	r3, r2
200007e8:	dbbf      	blt.n	2000076a <draw_sprite+0x3a>
			}
		}
	}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	46c0      	nop			; (mov r8, r8)
200007ee:	46bd      	mov	sp, r7
200007f0:	b00a      	add	sp, #40	; 0x28
200007f2:	bd80      	pop	{r7, pc}

200007f4 <activateRowHigh>:


void activateRowHigh(int row){	
200007f4:	b580      	push	{r7, lr}
200007f6:	b082      	sub	sp, #8
200007f8:	af00      	add	r7, sp, #0
200007fa:	6078      	str	r0, [r7, #4]
	switch(row){
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	2b03      	cmp	r3, #3
20000800:	d01b      	beq.n	2000083a <activateRowHigh+0x46>
20000802:	687b      	ldr	r3, [r7, #4]
20000804:	2b03      	cmp	r3, #3
20000806:	dc1c      	bgt.n	20000842 <activateRowHigh+0x4e>
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	2b02      	cmp	r3, #2
2000080c:	d011      	beq.n	20000832 <activateRowHigh+0x3e>
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	2b02      	cmp	r3, #2
20000812:	dc16      	bgt.n	20000842 <activateRowHigh+0x4e>
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	2b00      	cmp	r3, #0
20000818:	d003      	beq.n	20000822 <activateRowHigh+0x2e>
2000081a:	687b      	ldr	r3, [r7, #4]
2000081c:	2b01      	cmp	r3, #1
2000081e:	d004      	beq.n	2000082a <activateRowHigh+0x36>
20000820:	e00f      	b.n	20000842 <activateRowHigh+0x4e>
		case 0: * GPIOD_ODR_HIGH = 0x10; break;
20000822:	4b0c      	ldr	r3, [pc, #48]	; (20000854 <activateRowHigh+0x60>)
20000824:	2210      	movs	r2, #16
20000826:	701a      	strb	r2, [r3, #0]
20000828:	e00f      	b.n	2000084a <activateRowHigh+0x56>
		case 1: * GPIOD_ODR_HIGH = 0x20; break;
2000082a:	4b0a      	ldr	r3, [pc, #40]	; (20000854 <activateRowHigh+0x60>)
2000082c:	2220      	movs	r2, #32
2000082e:	701a      	strb	r2, [r3, #0]
20000830:	e00b      	b.n	2000084a <activateRowHigh+0x56>
		case 2: * GPIOD_ODR_HIGH = 0x40; break;
20000832:	4b08      	ldr	r3, [pc, #32]	; (20000854 <activateRowHigh+0x60>)
20000834:	2240      	movs	r2, #64	; 0x40
20000836:	701a      	strb	r2, [r3, #0]
20000838:	e007      	b.n	2000084a <activateRowHigh+0x56>
		case 3: * GPIOD_ODR_HIGH = 0x80; break;
2000083a:	4b06      	ldr	r3, [pc, #24]	; (20000854 <activateRowHigh+0x60>)
2000083c:	2280      	movs	r2, #128	; 0x80
2000083e:	701a      	strb	r2, [r3, #0]
20000840:	e003      	b.n	2000084a <activateRowHigh+0x56>
		default: * GPIOD_ODR_HIGH = 0x0;
20000842:	4b04      	ldr	r3, [pc, #16]	; (20000854 <activateRowHigh+0x60>)
20000844:	2200      	movs	r2, #0
20000846:	701a      	strb	r2, [r3, #0]
	}
}
20000848:	46c0      	nop			; (mov r8, r8)
2000084a:	46c0      	nop			; (mov r8, r8)
2000084c:	46bd      	mov	sp, r7
2000084e:	b002      	add	sp, #8
20000850:	bd80      	pop	{r7, pc}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	40020c15 	andmi	r0, r2, r5, lsl ip

20000858 <activateRowLow>:

void activateRowLow(int row){
20000858:	b580      	push	{r7, lr}
2000085a:	b082      	sub	sp, #8
2000085c:	af00      	add	r7, sp, #0
2000085e:	6078      	str	r0, [r7, #4]
	switch(row){
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	2b03      	cmp	r3, #3
20000864:	d01b      	beq.n	2000089e <activateRowLow+0x46>
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	2b03      	cmp	r3, #3
2000086a:	dc1c      	bgt.n	200008a6 <activateRowLow+0x4e>
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	2b02      	cmp	r3, #2
20000870:	d011      	beq.n	20000896 <activateRowLow+0x3e>
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	2b02      	cmp	r3, #2
20000876:	dc16      	bgt.n	200008a6 <activateRowLow+0x4e>
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	2b00      	cmp	r3, #0
2000087c:	d003      	beq.n	20000886 <activateRowLow+0x2e>
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	2b01      	cmp	r3, #1
20000882:	d004      	beq.n	2000088e <activateRowLow+0x36>
20000884:	e00f      	b.n	200008a6 <activateRowLow+0x4e>
		case 0: * GPIOD_ODR_LOW = 0x10; break;
20000886:	4b0c      	ldr	r3, [pc, #48]	; (200008b8 <activateRowLow+0x60>)
20000888:	2210      	movs	r2, #16
2000088a:	701a      	strb	r2, [r3, #0]
2000088c:	e00f      	b.n	200008ae <activateRowLow+0x56>
		case 1: * GPIOD_ODR_LOW = 0x20; break;
2000088e:	4b0a      	ldr	r3, [pc, #40]	; (200008b8 <activateRowLow+0x60>)
20000890:	2220      	movs	r2, #32
20000892:	701a      	strb	r2, [r3, #0]
20000894:	e00b      	b.n	200008ae <activateRowLow+0x56>
		case 2: * GPIOD_ODR_LOW = 0x40; break;
20000896:	4b08      	ldr	r3, [pc, #32]	; (200008b8 <activateRowLow+0x60>)
20000898:	2240      	movs	r2, #64	; 0x40
2000089a:	701a      	strb	r2, [r3, #0]
2000089c:	e007      	b.n	200008ae <activateRowLow+0x56>
		case 3: * GPIOD_ODR_LOW = 0x80; break;
2000089e:	4b06      	ldr	r3, [pc, #24]	; (200008b8 <activateRowLow+0x60>)
200008a0:	2280      	movs	r2, #128	; 0x80
200008a2:	701a      	strb	r2, [r3, #0]
200008a4:	e003      	b.n	200008ae <activateRowLow+0x56>
		default: * GPIOD_ODR_LOW = 0x0;
200008a6:	4b04      	ldr	r3, [pc, #16]	; (200008b8 <activateRowLow+0x60>)
200008a8:	2200      	movs	r2, #0
200008aa:	701a      	strb	r2, [r3, #0]
	}
}
200008ac:	46c0      	nop			; (mov r8, r8)
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	46bd      	mov	sp, r7
200008b2:	b002      	add	sp, #8
200008b4:	bd80      	pop	{r7, pc}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	40020c14 	andmi	r0, r2, r4, lsl ip

200008bc <readColumnHigh>:

int readColumnHigh(){
200008bc:	b580      	push	{r7, lr}
200008be:	b082      	sub	sp, #8
200008c0:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_HIGH;
200008c2:	4a12      	ldr	r2, [pc, #72]	; (2000090c <readColumnHigh+0x50>)
200008c4:	1dfb      	adds	r3, r7, #7
200008c6:	7812      	ldrb	r2, [r2, #0]
200008c8:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
200008ca:	1dfb      	adds	r3, r7, #7
200008cc:	781b      	ldrb	r3, [r3, #0]
200008ce:	2208      	movs	r2, #8
200008d0:	4013      	ands	r3, r2
200008d2:	d001      	beq.n	200008d8 <readColumnHigh+0x1c>
200008d4:	2303      	movs	r3, #3
200008d6:	e015      	b.n	20000904 <readColumnHigh+0x48>
	if(c & 0x4){return 2;}
200008d8:	1dfb      	adds	r3, r7, #7
200008da:	781b      	ldrb	r3, [r3, #0]
200008dc:	2204      	movs	r2, #4
200008de:	4013      	ands	r3, r2
200008e0:	d001      	beq.n	200008e6 <readColumnHigh+0x2a>
200008e2:	2302      	movs	r3, #2
200008e4:	e00e      	b.n	20000904 <readColumnHigh+0x48>
	if(c & 0x2){return 1;}
200008e6:	1dfb      	adds	r3, r7, #7
200008e8:	781b      	ldrb	r3, [r3, #0]
200008ea:	2202      	movs	r2, #2
200008ec:	4013      	ands	r3, r2
200008ee:	d001      	beq.n	200008f4 <readColumnHigh+0x38>
200008f0:	2301      	movs	r3, #1
200008f2:	e007      	b.n	20000904 <readColumnHigh+0x48>
	if(c & 0x1){return 0;}
200008f4:	1dfb      	adds	r3, r7, #7
200008f6:	781b      	ldrb	r3, [r3, #0]
200008f8:	2201      	movs	r2, #1
200008fa:	4013      	ands	r3, r2
200008fc:	d001      	beq.n	20000902 <readColumnHigh+0x46>
200008fe:	2300      	movs	r3, #0
20000900:	e000      	b.n	20000904 <readColumnHigh+0x48>
	return 4;
20000902:	2304      	movs	r3, #4
}
20000904:	0018      	movs	r0, r3
20000906:	46bd      	mov	sp, r7
20000908:	b002      	add	sp, #8
2000090a:	bd80      	pop	{r7, pc}
2000090c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000910 <readColumnLow>:

int readColumnLow(){
20000910:	b580      	push	{r7, lr}
20000912:	b082      	sub	sp, #8
20000914:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_LOW;
20000916:	4a12      	ldr	r2, [pc, #72]	; (20000960 <readColumnLow+0x50>)
20000918:	1dfb      	adds	r3, r7, #7
2000091a:	7812      	ldrb	r2, [r2, #0]
2000091c:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000091e:	1dfb      	adds	r3, r7, #7
20000920:	781b      	ldrb	r3, [r3, #0]
20000922:	2208      	movs	r2, #8
20000924:	4013      	ands	r3, r2
20000926:	d001      	beq.n	2000092c <readColumnLow+0x1c>
20000928:	2303      	movs	r3, #3
2000092a:	e015      	b.n	20000958 <readColumnLow+0x48>
	if(c & 0x4){return 2;}
2000092c:	1dfb      	adds	r3, r7, #7
2000092e:	781b      	ldrb	r3, [r3, #0]
20000930:	2204      	movs	r2, #4
20000932:	4013      	ands	r3, r2
20000934:	d001      	beq.n	2000093a <readColumnLow+0x2a>
20000936:	2302      	movs	r3, #2
20000938:	e00e      	b.n	20000958 <readColumnLow+0x48>
	if(c & 0x2){return 1;}
2000093a:	1dfb      	adds	r3, r7, #7
2000093c:	781b      	ldrb	r3, [r3, #0]
2000093e:	2202      	movs	r2, #2
20000940:	4013      	ands	r3, r2
20000942:	d001      	beq.n	20000948 <readColumnLow+0x38>
20000944:	2301      	movs	r3, #1
20000946:	e007      	b.n	20000958 <readColumnLow+0x48>
	if(c & 0x1){return 0;}
20000948:	1dfb      	adds	r3, r7, #7
2000094a:	781b      	ldrb	r3, [r3, #0]
2000094c:	2201      	movs	r2, #1
2000094e:	4013      	ands	r3, r2
20000950:	d001      	beq.n	20000956 <readColumnLow+0x46>
20000952:	2300      	movs	r3, #0
20000954:	e000      	b.n	20000958 <readColumnLow+0x48>
	return 4;
20000956:	2304      	movs	r3, #4
}
20000958:	0018      	movs	r0, r3
2000095a:	46bd      	mov	sp, r7
2000095c:	b002      	add	sp, #8
2000095e:	bd80      	pop	{r7, pc}
20000960:	40020c10 	andmi	r0, r2, r0, lsl ip

20000964 <getKeyValue>:

int getKeyValue(int row, int column){
20000964:	b5b0      	push	{r4, r5, r7, lr}
20000966:	b086      	sub	sp, #24
20000968:	af00      	add	r7, sp, #0
2000096a:	6078      	str	r0, [r7, #4]
2000096c:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
2000096e:	2108      	movs	r1, #8
20000970:	187b      	adds	r3, r7, r1
20000972:	4a08      	ldr	r2, [pc, #32]	; (20000994 <getKeyValue+0x30>)
20000974:	ca31      	ldmia	r2!, {r0, r4, r5}
20000976:	c331      	stmia	r3!, {r0, r4, r5}
20000978:	6812      	ldr	r2, [r2, #0]
2000097a:	601a      	str	r2, [r3, #0]
	return keys[row][column];
2000097c:	187a      	adds	r2, r7, r1
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	009b      	lsls	r3, r3, #2
20000982:	18d2      	adds	r2, r2, r3
20000984:	683b      	ldr	r3, [r7, #0]
20000986:	18d3      	adds	r3, r2, r3
20000988:	781b      	ldrb	r3, [r3, #0]
}
2000098a:	0018      	movs	r0, r3
2000098c:	46bd      	mov	sp, r7
2000098e:	b006      	add	sp, #24
20000990:	bdb0      	pop	{r4, r5, r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	20003460 	andcs	r3, r0, r0, ror #8

20000998 <keybHigh>:


unsigned char keybHigh(){
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
2000099e:	2300      	movs	r3, #0
200009a0:	607b      	str	r3, [r7, #4]
200009a2:	e01c      	b.n	200009de <keybHigh+0x46>
		activateRowHigh(row);
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	0018      	movs	r0, r3
200009a8:	f7ff ff24 	bl	200007f4 <activateRowHigh>
		column = readColumnHigh();
200009ac:	f7ff ff86 	bl	200008bc <readColumnHigh>
200009b0:	0002      	movs	r2, r0
200009b2:	1cfb      	adds	r3, r7, #3
200009b4:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
200009b6:	1cfb      	adds	r3, r7, #3
200009b8:	781b      	ldrb	r3, [r3, #0]
200009ba:	2b04      	cmp	r3, #4
200009bc:	d00c      	beq.n	200009d8 <keybHigh+0x40>
			key = getKeyValue(row, column);
200009be:	1cfb      	adds	r3, r7, #3
200009c0:	781a      	ldrb	r2, [r3, #0]
200009c2:	687b      	ldr	r3, [r7, #4]
200009c4:	0011      	movs	r1, r2
200009c6:	0018      	movs	r0, r3
200009c8:	f7ff ffcc 	bl	20000964 <getKeyValue>
200009cc:	0002      	movs	r2, r0
200009ce:	1cbb      	adds	r3, r7, #2
200009d0:	701a      	strb	r2, [r3, #0]
			return key;
200009d2:	1cbb      	adds	r3, r7, #2
200009d4:	781b      	ldrb	r3, [r3, #0]
200009d6:	e006      	b.n	200009e6 <keybHigh+0x4e>
	for(int row = 0; row < 4; row++){
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	3301      	adds	r3, #1
200009dc:	607b      	str	r3, [r7, #4]
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	2b03      	cmp	r3, #3
200009e2:	dddf      	ble.n	200009a4 <keybHigh+0xc>
		}
	}
	return -1;
200009e4:	23ff      	movs	r3, #255	; 0xff
}
200009e6:	0018      	movs	r0, r3
200009e8:	46bd      	mov	sp, r7
200009ea:	b002      	add	sp, #8
200009ec:	bd80      	pop	{r7, pc}

200009ee <keybLow>:

unsigned char keybLow(){
200009ee:	b580      	push	{r7, lr}
200009f0:	b082      	sub	sp, #8
200009f2:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
200009f4:	2300      	movs	r3, #0
200009f6:	607b      	str	r3, [r7, #4]
200009f8:	e01c      	b.n	20000a34 <keybLow+0x46>
		activateRowLow(row);
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	0018      	movs	r0, r3
200009fe:	f7ff ff2b 	bl	20000858 <activateRowLow>
		column = readColumnLow();
20000a02:	f7ff ff85 	bl	20000910 <readColumnLow>
20000a06:	0002      	movs	r2, r0
20000a08:	1cfb      	adds	r3, r7, #3
20000a0a:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000a0c:	1cfb      	adds	r3, r7, #3
20000a0e:	781b      	ldrb	r3, [r3, #0]
20000a10:	2b04      	cmp	r3, #4
20000a12:	d00c      	beq.n	20000a2e <keybLow+0x40>
			key = getKeyValue(row, column);
20000a14:	1cfb      	adds	r3, r7, #3
20000a16:	781a      	ldrb	r2, [r3, #0]
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	0011      	movs	r1, r2
20000a1c:	0018      	movs	r0, r3
20000a1e:	f7ff ffa1 	bl	20000964 <getKeyValue>
20000a22:	0002      	movs	r2, r0
20000a24:	1cbb      	adds	r3, r7, #2
20000a26:	701a      	strb	r2, [r3, #0]
			return key;
20000a28:	1cbb      	adds	r3, r7, #2
20000a2a:	781b      	ldrb	r3, [r3, #0]
20000a2c:	e006      	b.n	20000a3c <keybLow+0x4e>
	for(int row = 0; row < 4; row++){
20000a2e:	687b      	ldr	r3, [r7, #4]
20000a30:	3301      	adds	r3, #1
20000a32:	607b      	str	r3, [r7, #4]
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	2b03      	cmp	r3, #3
20000a38:	dddf      	ble.n	200009fa <keybLow+0xc>
		}
	}
	return -1;
20000a3a:	23ff      	movs	r3, #255	; 0xff
20000a3c:	0018      	movs	r0, r3
20000a3e:	46bd      	mov	sp, r7
20000a40:	b002      	add	sp, #8
20000a42:	bd80      	pop	{r7, pc}

20000a44 <set_object_speed>:
static uint8_t player_right_points = 0;
static uint8_t player_left_points = 0; 

void set_object_speed(POBJECT o, int speedx, int speedy){
20000a44:	b580      	push	{r7, lr}
20000a46:	b084      	sub	sp, #16
20000a48:	af00      	add	r7, sp, #0
20000a4a:	60f8      	str	r0, [r7, #12]
20000a4c:	60b9      	str	r1, [r7, #8]
20000a4e:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000a50:	68fb      	ldr	r3, [r7, #12]
20000a52:	68ba      	ldr	r2, [r7, #8]
20000a54:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
20000a56:	68fb      	ldr	r3, [r7, #12]
20000a58:	687a      	ldr	r2, [r7, #4]
20000a5a:	609a      	str	r2, [r3, #8]
}
20000a5c:	46c0      	nop			; (mov r8, r8)
20000a5e:	46bd      	mov	sp, r7
20000a60:	b004      	add	sp, #16
20000a62:	bd80      	pop	{r7, pc}

20000a64 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
20000a64:	b580      	push	{r7, lr}
20000a66:	b084      	sub	sp, #16
20000a68:	af00      	add	r7, sp, #0
20000a6a:	6078      	str	r0, [r7, #4]
20000a6c:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	int newx = o->posx + o->dx;
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	68da      	ldr	r2, [r3, #12]
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	685b      	ldr	r3, [r3, #4]
20000a76:	18d3      	adds	r3, r2, r3
20000a78:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000a7a:	687b      	ldr	r3, [r7, #4]
20000a7c:	691a      	ldr	r2, [r3, #16]
20000a7e:	687b      	ldr	r3, [r7, #4]
20000a80:	689b      	ldr	r3, [r3, #8]
20000a82:	18d3      	adds	r3, r2, r3
20000a84:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
20000a86:	68fb      	ldr	r3, [r7, #12]
20000a88:	2b00      	cmp	r3, #0
20000a8a:	dc16      	bgt.n	20000aba <move_ball+0x56>
		o->posx = 64;
20000a8c:	687b      	ldr	r3, [r7, #4]
20000a8e:	2240      	movs	r2, #64	; 0x40
20000a90:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000a92:	687b      	ldr	r3, [r7, #4]
20000a94:	2220      	movs	r2, #32
20000a96:	611a      	str	r2, [r3, #16]
		player_right_points++;
20000a98:	4b2e      	ldr	r3, [pc, #184]	; (20000b54 <move_ball+0xf0>)
20000a9a:	781b      	ldrb	r3, [r3, #0]
20000a9c:	3301      	adds	r3, #1
20000a9e:	b2da      	uxtb	r2, r3
20000aa0:	4b2c      	ldr	r3, [pc, #176]	; (20000b54 <move_ball+0xf0>)
20000aa2:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(15,2);
20000aa4:	2102      	movs	r1, #2
20000aa6:	200f      	movs	r0, #15
20000aa8:	f000 f9f5 	bl	20000e96 <ascii_gotoxy>
		ascii_write_char(player_right_points + 48);
20000aac:	4b29      	ldr	r3, [pc, #164]	; (20000b54 <move_ball+0xf0>)
20000aae:	781b      	ldrb	r3, [r3, #0]
20000ab0:	3330      	adds	r3, #48	; 0x30
20000ab2:	0018      	movs	r0, r3
20000ab4:	f000 fa16 	bl	20000ee4 <ascii_write_char>
20000ab8:	e044      	b.n	20000b44 <move_ball+0xe0>
	}
	else if((newx + o->geo->sizex) > 128){
20000aba:	687b      	ldr	r3, [r7, #4]
20000abc:	681b      	ldr	r3, [r3, #0]
20000abe:	685a      	ldr	r2, [r3, #4]
20000ac0:	68fb      	ldr	r3, [r7, #12]
20000ac2:	18d3      	adds	r3, r2, r3
20000ac4:	2b80      	cmp	r3, #128	; 0x80
20000ac6:	dd16      	ble.n	20000af6 <move_ball+0x92>
		o->posx = 64;
20000ac8:	687b      	ldr	r3, [r7, #4]
20000aca:	2240      	movs	r2, #64	; 0x40
20000acc:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	2220      	movs	r2, #32
20000ad2:	611a      	str	r2, [r3, #16]
		player_left_points++;
20000ad4:	4b20      	ldr	r3, [pc, #128]	; (20000b58 <move_ball+0xf4>)
20000ad6:	781b      	ldrb	r3, [r3, #0]
20000ad8:	3301      	adds	r3, #1
20000ada:	b2da      	uxtb	r2, r3
20000adc:	4b1e      	ldr	r3, [pc, #120]	; (20000b58 <move_ball+0xf4>)
20000ade:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(14,1);
20000ae0:	2101      	movs	r1, #1
20000ae2:	200e      	movs	r0, #14
20000ae4:	f000 f9d7 	bl	20000e96 <ascii_gotoxy>
		ascii_write_char(player_left_points + 48);
20000ae8:	4b1b      	ldr	r3, [pc, #108]	; (20000b58 <move_ball+0xf4>)
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	3330      	adds	r3, #48	; 0x30
20000aee:	0018      	movs	r0, r3
20000af0:	f000 f9f8 	bl	20000ee4 <ascii_write_char>
20000af4:	e026      	b.n	20000b44 <move_ball+0xe0>
	}
	else if(newy < 1){
20000af6:	68bb      	ldr	r3, [r7, #8]
20000af8:	2b00      	cmp	r3, #0
20000afa:	dc08      	bgt.n	20000b0e <move_ball+0xaa>
		o->dy = -o->dy;
20000afc:	687b      	ldr	r3, [r7, #4]
20000afe:	689b      	ldr	r3, [r3, #8]
20000b00:	425a      	negs	r2, r3
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000b06:	687b      	ldr	r3, [r7, #4]
20000b08:	2201      	movs	r2, #1
20000b0a:	611a      	str	r2, [r3, #16]
20000b0c:	e01a      	b.n	20000b44 <move_ball+0xe0>
	}
	else if(newy > 64 - o->geo->sizey){
20000b0e:	687b      	ldr	r3, [r7, #4]
20000b10:	681b      	ldr	r3, [r3, #0]
20000b12:	689b      	ldr	r3, [r3, #8]
20000b14:	2240      	movs	r2, #64	; 0x40
20000b16:	1ad3      	subs	r3, r2, r3
20000b18:	68ba      	ldr	r2, [r7, #8]
20000b1a:	429a      	cmp	r2, r3
20000b1c:	dd0c      	ble.n	20000b38 <move_ball+0xd4>
		o->dy = -o->dy;
20000b1e:	687b      	ldr	r3, [r7, #4]
20000b20:	689b      	ldr	r3, [r3, #8]
20000b22:	425a      	negs	r2, r3
20000b24:	687b      	ldr	r3, [r7, #4]
20000b26:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	681b      	ldr	r3, [r3, #0]
20000b2c:	689b      	ldr	r3, [r3, #8]
20000b2e:	2240      	movs	r2, #64	; 0x40
20000b30:	1ad2      	subs	r2, r2, r3
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	611a      	str	r2, [r3, #16]
20000b36:	e005      	b.n	20000b44 <move_ball+0xe0>
	}else{
		o->posx = newx;
20000b38:	687b      	ldr	r3, [r7, #4]
20000b3a:	68fa      	ldr	r2, [r7, #12]
20000b3c:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000b3e:	687b      	ldr	r3, [r7, #4]
20000b40:	68ba      	ldr	r2, [r7, #8]
20000b42:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	0018      	movs	r0, r3
20000b48:	f7ff fd60 	bl	2000060c <draw_object>
}
20000b4c:	46c0      	nop			; (mov r8, r8)
20000b4e:	46bd      	mov	sp, r7
20000b50:	b004      	add	sp, #16
20000b52:	bd80      	pop	{r7, pc}
20000b54:	20001768 	andcs	r1, r0, r8, ror #14
20000b58:	20001769 	andcs	r1, r0, r9, ror #14

20000b5c <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
20000b5c:	b580      	push	{r7, lr}
20000b5e:	b084      	sub	sp, #16
20000b60:	af00      	add	r7, sp, #0
20000b62:	60f8      	str	r0, [r7, #12]
20000b64:	60b9      	str	r1, [r7, #8]
20000b66:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000b68:	687b      	ldr	r3, [r7, #4]
20000b6a:	68da      	ldr	r2, [r3, #12]
20000b6c:	687b      	ldr	r3, [r7, #4]
20000b6e:	681b      	ldr	r3, [r3, #0]
20000b70:	685b      	ldr	r3, [r3, #4]
20000b72:	18d2      	adds	r2, r2, r3
20000b74:	68fb      	ldr	r3, [r7, #12]
20000b76:	68db      	ldr	r3, [r3, #12]
20000b78:	429a      	cmp	r2, r3
20000b7a:	db21      	blt.n	20000bc0 <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000b7c:	687b      	ldr	r3, [r7, #4]
20000b7e:	68da      	ldr	r2, [r3, #12]
20000b80:	68fb      	ldr	r3, [r7, #12]
20000b82:	68d9      	ldr	r1, [r3, #12]
20000b84:	68fb      	ldr	r3, [r7, #12]
20000b86:	681b      	ldr	r3, [r3, #0]
20000b88:	685b      	ldr	r3, [r3, #4]
20000b8a:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000b8c:	429a      	cmp	r2, r3
20000b8e:	da17      	bge.n	20000bc0 <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	691a      	ldr	r2, [r3, #16]
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	681b      	ldr	r3, [r3, #0]
20000b98:	689b      	ldr	r3, [r3, #8]
20000b9a:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000b9c:	68ba      	ldr	r2, [r7, #8]
20000b9e:	429a      	cmp	r2, r3
20000ba0:	dc0e      	bgt.n	20000bc0 <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000ba2:	687b      	ldr	r3, [r7, #4]
20000ba4:	691a      	ldr	r2, [r3, #16]
20000ba6:	68fb      	ldr	r3, [r7, #12]
20000ba8:	681b      	ldr	r3, [r3, #0]
20000baa:	6899      	ldr	r1, [r3, #8]
20000bac:	68bb      	ldr	r3, [r7, #8]
20000bae:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000bb0:	429a      	cmp	r2, r3
20000bb2:	da05      	bge.n	20000bc0 <collision_with_ball+0x64>
			clear_object(ball);
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	0018      	movs	r0, r3
20000bb8:	f7ff fd59 	bl	2000066e <clear_object>
			   return 1;
20000bbc:	2301      	movs	r3, #1
20000bbe:	e000      	b.n	20000bc2 <collision_with_ball+0x66>
		   }
	return 0;
20000bc0:	2300      	movs	r3, #0
}
20000bc2:	0018      	movs	r0, r3
20000bc4:	46bd      	mov	sp, r7
20000bc6:	b004      	add	sp, #16
20000bc8:	bd80      	pop	{r7, pc}

20000bca <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000bca:	b580      	push	{r7, lr}
20000bcc:	b084      	sub	sp, #16
20000bce:	af00      	add	r7, sp, #0
20000bd0:	6078      	str	r0, [r7, #4]
20000bd2:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	
	int newy = o->posy + o->dy;
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	691a      	ldr	r2, [r3, #16]
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	689b      	ldr	r3, [r3, #8]
20000bdc:	18d3      	adds	r3, r2, r3
20000bde:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000be0:	683a      	ldr	r2, [r7, #0]
20000be2:	68f9      	ldr	r1, [r7, #12]
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	0018      	movs	r0, r3
20000be8:	f7ff ffb8 	bl	20000b5c <collision_with_ball>
20000bec:	1e03      	subs	r3, r0, #0
20000bee:	d019      	beq.n	20000c24 <move_paddle+0x5a>
		if(o->posx < 64){
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	68db      	ldr	r3, [r3, #12]
20000bf4:	2b3f      	cmp	r3, #63	; 0x3f
20000bf6:	dc08      	bgt.n	20000c0a <move_paddle+0x40>
			ball->dx = -(ball->dx);
20000bf8:	683b      	ldr	r3, [r7, #0]
20000bfa:	685b      	ldr	r3, [r3, #4]
20000bfc:	425a      	negs	r2, r3
20000bfe:	683b      	ldr	r3, [r7, #0]
20000c00:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000c02:	683b      	ldr	r3, [r7, #0]
20000c04:	220c      	movs	r2, #12
20000c06:	60da      	str	r2, [r3, #12]
20000c08:	e007      	b.n	20000c1a <move_paddle+0x50>
		}else{
			ball->dx = (ball->dx)*(-1);
20000c0a:	683b      	ldr	r3, [r7, #0]
20000c0c:	685b      	ldr	r3, [r3, #4]
20000c0e:	425a      	negs	r2, r3
20000c10:	683b      	ldr	r3, [r7, #0]
20000c12:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000c14:	683b      	ldr	r3, [r7, #0]
20000c16:	2272      	movs	r2, #114	; 0x72
20000c18:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000c1a:	683b      	ldr	r3, [r7, #0]
20000c1c:	0018      	movs	r0, r3
20000c1e:	f7ff fcf5 	bl	2000060c <draw_object>
20000c22:	e023      	b.n	20000c6c <move_paddle+0xa2>
	}

	else if(newy < 1){
20000c24:	68fb      	ldr	r3, [r7, #12]
20000c26:	2b00      	cmp	r3, #0
20000c28:	dc08      	bgt.n	20000c3c <move_paddle+0x72>
		o->dy = -o->dy;
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	689b      	ldr	r3, [r3, #8]
20000c2e:	425a      	negs	r2, r3
20000c30:	687b      	ldr	r3, [r7, #4]
20000c32:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000c34:	687b      	ldr	r3, [r7, #4]
20000c36:	2201      	movs	r2, #1
20000c38:	611a      	str	r2, [r3, #16]
20000c3a:	e017      	b.n	20000c6c <move_paddle+0xa2>
	}
	else if(newy > 64 - o->geo->sizey){
20000c3c:	687b      	ldr	r3, [r7, #4]
20000c3e:	681b      	ldr	r3, [r3, #0]
20000c40:	689b      	ldr	r3, [r3, #8]
20000c42:	2240      	movs	r2, #64	; 0x40
20000c44:	1ad3      	subs	r3, r2, r3
20000c46:	68fa      	ldr	r2, [r7, #12]
20000c48:	429a      	cmp	r2, r3
20000c4a:	dd0c      	ble.n	20000c66 <move_paddle+0x9c>
		o->dy = -o->dy;
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	689b      	ldr	r3, [r3, #8]
20000c50:	425a      	negs	r2, r3
20000c52:	687b      	ldr	r3, [r7, #4]
20000c54:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000c56:	687b      	ldr	r3, [r7, #4]
20000c58:	681b      	ldr	r3, [r3, #0]
20000c5a:	689b      	ldr	r3, [r3, #8]
20000c5c:	2240      	movs	r2, #64	; 0x40
20000c5e:	1ad2      	subs	r2, r2, r3
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	611a      	str	r2, [r3, #16]
20000c64:	e002      	b.n	20000c6c <move_paddle+0xa2>
	}else{
		o->posy = newy;
20000c66:	687b      	ldr	r3, [r7, #4]
20000c68:	68fa      	ldr	r2, [r7, #12]
20000c6a:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	0018      	movs	r0, r3
20000c70:	f7ff fccc 	bl	2000060c <draw_object>
}
20000c74:	46c0      	nop			; (mov r8, r8)
20000c76:	46bd      	mov	sp, r7
20000c78:	b004      	add	sp, #16
20000c7a:	bd80      	pop	{r7, pc}

20000c7c <ascii_ctrl_bit_set>:
#define B_CS1 8




void ascii_ctrl_bit_set(unsigned char x){
20000c7c:	b580      	push	{r7, lr}
20000c7e:	b082      	sub	sp, #8
20000c80:	af00      	add	r7, sp, #0
20000c82:	0002      	movs	r2, r0
20000c84:	1dfb      	adds	r3, r7, #7
20000c86:	701a      	strb	r2, [r3, #0]
	(* portOdrLow) |=x|B_SELECT;
20000c88:	4b07      	ldr	r3, [pc, #28]	; (20000ca8 <ascii_ctrl_bit_set+0x2c>)
20000c8a:	781b      	ldrb	r3, [r3, #0]
20000c8c:	b2da      	uxtb	r2, r3
20000c8e:	1dfb      	adds	r3, r7, #7
20000c90:	781b      	ldrb	r3, [r3, #0]
20000c92:	4313      	orrs	r3, r2
20000c94:	b2db      	uxtb	r3, r3
20000c96:	4a04      	ldr	r2, [pc, #16]	; (20000ca8 <ascii_ctrl_bit_set+0x2c>)
20000c98:	2104      	movs	r1, #4
20000c9a:	430b      	orrs	r3, r1
20000c9c:	b2db      	uxtb	r3, r3
20000c9e:	7013      	strb	r3, [r2, #0]
}
20000ca0:	46c0      	nop			; (mov r8, r8)
20000ca2:	46bd      	mov	sp, r7
20000ca4:	b002      	add	sp, #8
20000ca6:	bd80      	pop	{r7, pc}
20000ca8:	40021014 	andmi	r1, r2, r4, lsl r0

20000cac <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000cac:	b580      	push	{r7, lr}
20000cae:	b084      	sub	sp, #16
20000cb0:	af00      	add	r7, sp, #0
20000cb2:	0002      	movs	r2, r0
20000cb4:	1dfb      	adds	r3, r7, #7
20000cb6:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
20000cb8:	200f      	movs	r0, #15
20000cba:	183b      	adds	r3, r7, r0
20000cbc:	1dfa      	adds	r2, r7, #7
20000cbe:	7812      	ldrb	r2, [r2, #0]
20000cc0:	43d2      	mvns	r2, r2
20000cc2:	701a      	strb	r2, [r3, #0]
	* portOdrLow &=notX;
20000cc4:	4b0a      	ldr	r3, [pc, #40]	; (20000cf0 <ascii_ctrl_bit_clear+0x44>)
20000cc6:	781b      	ldrb	r3, [r3, #0]
20000cc8:	b2db      	uxtb	r3, r3
20000cca:	4909      	ldr	r1, [pc, #36]	; (20000cf0 <ascii_ctrl_bit_clear+0x44>)
20000ccc:	183a      	adds	r2, r7, r0
20000cce:	7812      	ldrb	r2, [r2, #0]
20000cd0:	4013      	ands	r3, r2
20000cd2:	b2db      	uxtb	r3, r3
20000cd4:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
20000cd6:	4b06      	ldr	r3, [pc, #24]	; (20000cf0 <ascii_ctrl_bit_clear+0x44>)
20000cd8:	781b      	ldrb	r3, [r3, #0]
20000cda:	b2db      	uxtb	r3, r3
20000cdc:	4a04      	ldr	r2, [pc, #16]	; (20000cf0 <ascii_ctrl_bit_clear+0x44>)
20000cde:	2104      	movs	r1, #4
20000ce0:	430b      	orrs	r3, r1
20000ce2:	b2db      	uxtb	r3, r3
20000ce4:	7013      	strb	r3, [r2, #0]
}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	46bd      	mov	sp, r7
20000cea:	b004      	add	sp, #16
20000cec:	bd80      	pop	{r7, pc}
20000cee:	46c0      	nop			; (mov r8, r8)
20000cf0:	40021014 	andmi	r1, r2, r4, lsl r0

20000cf4 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000cf4:	b580      	push	{r7, lr}
20000cf6:	b082      	sub	sp, #8
20000cf8:	af00      	add	r7, sp, #0
20000cfa:	0002      	movs	r2, r0
20000cfc:	1dfb      	adds	r3, r7, #7
20000cfe:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d00:	2001      	movs	r0, #1
20000d02:	f7ff ffd3 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d06:	2002      	movs	r0, #2
20000d08:	f7ff ffd0 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d0c:	1dfb      	adds	r3, r7, #7
20000d0e:	781b      	ldrb	r3, [r3, #0]
20000d10:	0018      	movs	r0, r3
20000d12:	f000 f819 	bl	20000d48 <ascii_write_controller>
}
20000d16:	46c0      	nop			; (mov r8, r8)
20000d18:	46bd      	mov	sp, r7
20000d1a:	b002      	add	sp, #8
20000d1c:	bd80      	pop	{r7, pc}

20000d1e <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d1e:	b580      	push	{r7, lr}
20000d20:	b082      	sub	sp, #8
20000d22:	af00      	add	r7, sp, #0
20000d24:	0002      	movs	r2, r0
20000d26:	1dfb      	adds	r3, r7, #7
20000d28:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d2a:	2001      	movs	r0, #1
20000d2c:	f7ff ffa6 	bl	20000c7c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d30:	2002      	movs	r0, #2
20000d32:	f7ff ffbb 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d36:	1dfb      	adds	r3, r7, #7
20000d38:	781b      	ldrb	r3, [r3, #0]
20000d3a:	0018      	movs	r0, r3
20000d3c:	f000 f804 	bl	20000d48 <ascii_write_controller>
}
20000d40:	46c0      	nop			; (mov r8, r8)
20000d42:	46bd      	mov	sp, r7
20000d44:	b002      	add	sp, #8
20000d46:	bd80      	pop	{r7, pc}

20000d48 <ascii_write_controller>:

void ascii_write_controller(unsigned char command){
20000d48:	b580      	push	{r7, lr}
20000d4a:	b082      	sub	sp, #8
20000d4c:	af00      	add	r7, sp, #0
20000d4e:	0002      	movs	r2, r0
20000d50:	1dfb      	adds	r3, r7, #7
20000d52:	701a      	strb	r2, [r3, #0]
		//	delay_250ns();
	ascii_ctrl_bit_set(B_E);
20000d54:	2040      	movs	r0, #64	; 0x40
20000d56:	f7ff ff91 	bl	20000c7c <ascii_ctrl_bit_set>
	* portOdrHigh = command;
20000d5a:	4a06      	ldr	r2, [pc, #24]	; (20000d74 <ascii_write_controller+0x2c>)
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	7013      	strb	r3, [r2, #0]
		//	delay_250ns();
	ascii_ctrl_bit_clear(B_E);
20000d62:	2040      	movs	r0, #64	; 0x40
20000d64:	f7ff ffa2 	bl	20000cac <ascii_ctrl_bit_clear>
	delay_250ns();
20000d68:	f7ff f952 	bl	20000010 <delay_250ns>
}
20000d6c:	46c0      	nop			; (mov r8, r8)
20000d6e:	46bd      	mov	sp, r7
20000d70:	b002      	add	sp, #8
20000d72:	bd80      	pop	{r7, pc}
20000d74:	40021015 	andmi	r1, r2, r5, lsl r0

20000d78 <ascii_read_controller>:

unsigned char ascii_read_controller(){
20000d78:	b580      	push	{r7, lr}
20000d7a:	b082      	sub	sp, #8
20000d7c:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set(B_E);
20000d7e:	2040      	movs	r0, #64	; 0x40
20000d80:	f7ff ff7c 	bl	20000c7c <ascii_ctrl_bit_set>
	delay_250ns();
20000d84:	f7ff f944 	bl	20000010 <delay_250ns>
	delay_250ns();
20000d88:	f7ff f942 	bl	20000010 <delay_250ns>
	rv = * portIdrHigh;
20000d8c:	4a06      	ldr	r2, [pc, #24]	; (20000da8 <ascii_read_controller+0x30>)
20000d8e:	1dfb      	adds	r3, r7, #7
20000d90:	7812      	ldrb	r2, [r2, #0]
20000d92:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d94:	2040      	movs	r0, #64	; 0x40
20000d96:	f7ff ff89 	bl	20000cac <ascii_ctrl_bit_clear>
	return rv;
20000d9a:	1dfb      	adds	r3, r7, #7
20000d9c:	781b      	ldrb	r3, [r3, #0]
}
20000d9e:	0018      	movs	r0, r3
20000da0:	46bd      	mov	sp, r7
20000da2:	b002      	add	sp, #8
20000da4:	bd80      	pop	{r7, pc}
20000da6:	46c0      	nop			; (mov r8, r8)
20000da8:	40021011 	andmi	r1, r2, r1, lsl r0

20000dac <ascii_read_data>:

unsigned char ascii_read_data(){
20000dac:	b580      	push	{r7, lr}
20000dae:	b082      	sub	sp, #8
20000db0:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000db2:	4b0a      	ldr	r3, [pc, #40]	; (20000ddc <ascii_read_data+0x30>)
20000db4:	4a0a      	ldr	r2, [pc, #40]	; (20000de0 <ascii_read_data+0x34>)
20000db6:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_set(B_RS);
20000db8:	2001      	movs	r0, #1
20000dba:	f7ff ff5f 	bl	20000c7c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000dbe:	2002      	movs	r0, #2
20000dc0:	f7ff ff5c 	bl	20000c7c <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000dc4:	4a07      	ldr	r2, [pc, #28]	; (20000de4 <ascii_read_data+0x38>)
20000dc6:	1dfb      	adds	r3, r7, #7
20000dc8:	701a      	strb	r2, [r3, #0]
	* portModer = 0x55555555;
20000dca:	4b04      	ldr	r3, [pc, #16]	; (20000ddc <ascii_read_data+0x30>)
20000dcc:	4a06      	ldr	r2, [pc, #24]	; (20000de8 <ascii_read_data+0x3c>)
20000dce:	601a      	str	r2, [r3, #0]
	return rv;
20000dd0:	1dfb      	adds	r3, r7, #7
20000dd2:	781b      	ldrb	r3, [r3, #0]
}
20000dd4:	0018      	movs	r0, r3
20000dd6:	46bd      	mov	sp, r7
20000dd8:	b002      	add	sp, #8
20000dda:	bd80      	pop	{r7, pc}
20000ddc:	40021000 	andmi	r1, r2, r0
20000de0:	00005555 	andeq	r5, r0, r5, asr r5
20000de4:	20000d79 	andcs	r0, r0, r9, ror sp
20000de8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000dec <ascii_read_status>:

unsigned char ascii_read_status(){
20000dec:	b590      	push	{r4, r7, lr}
20000dee:	b083      	sub	sp, #12
20000df0:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000df2:	4b0b      	ldr	r3, [pc, #44]	; (20000e20 <ascii_read_status+0x34>)
20000df4:	4a0b      	ldr	r2, [pc, #44]	; (20000e24 <ascii_read_status+0x38>)
20000df6:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_clear(B_RS);
20000df8:	2001      	movs	r0, #1
20000dfa:	f7ff ff57 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000dfe:	2002      	movs	r0, #2
20000e00:	f7ff ff3c 	bl	20000c7c <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000e04:	1dfc      	adds	r4, r7, #7
20000e06:	f7ff ffb7 	bl	20000d78 <ascii_read_controller>
20000e0a:	0003      	movs	r3, r0
20000e0c:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000e0e:	4b04      	ldr	r3, [pc, #16]	; (20000e20 <ascii_read_status+0x34>)
20000e10:	4a05      	ldr	r2, [pc, #20]	; (20000e28 <ascii_read_status+0x3c>)
20000e12:	601a      	str	r2, [r3, #0]
	return rv;
20000e14:	1dfb      	adds	r3, r7, #7
20000e16:	781b      	ldrb	r3, [r3, #0]
} 
20000e18:	0018      	movs	r0, r3
20000e1a:	46bd      	mov	sp, r7
20000e1c:	b003      	add	sp, #12
20000e1e:	bd90      	pop	{r4, r7, pc}
20000e20:	40021000 	andmi	r1, r2, r0
20000e24:	00005555 	andeq	r5, r0, r5, asr r5
20000e28:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e2c <ascii_command>:

void ascii_command(unsigned char command){
20000e2c:	b580      	push	{r7, lr}
20000e2e:	b082      	sub	sp, #8
20000e30:	af00      	add	r7, sp, #0
20000e32:	0002      	movs	r2, r0
20000e34:	1dfb      	adds	r3, r7, #7
20000e36:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e38:	46c0      	nop			; (mov r8, r8)
20000e3a:	f7ff ffd7 	bl	20000dec <ascii_read_status>
20000e3e:	0003      	movs	r3, r0
20000e40:	001a      	movs	r2, r3
20000e42:	2380      	movs	r3, #128	; 0x80
20000e44:	4013      	ands	r3, r2
20000e46:	2b80      	cmp	r3, #128	; 0x80
20000e48:	d0f7      	beq.n	20000e3a <ascii_command+0xe>
	delay_mikro(8);
20000e4a:	2008      	movs	r0, #8
20000e4c:	f7ff f904 	bl	20000058 <delay_mikro>
	ascii_write_cmd(command);
20000e50:	1dfb      	adds	r3, r7, #7
20000e52:	781b      	ldrb	r3, [r3, #0]
20000e54:	0018      	movs	r0, r3
20000e56:	f7ff ff4d 	bl	20000cf4 <ascii_write_cmd>
	delay_milli(2);
20000e5a:	2002      	movs	r0, #2
20000e5c:	f7ff f912 	bl	20000084 <delay_milli>
}
20000e60:	46c0      	nop			; (mov r8, r8)
20000e62:	46bd      	mov	sp, r7
20000e64:	b002      	add	sp, #8
20000e66:	bd80      	pop	{r7, pc}

20000e68 <ascii_init>:

void ascii_init(){
20000e68:	b580      	push	{r7, lr}
20000e6a:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS);
20000e6c:	2001      	movs	r0, #1
20000e6e:	f7ff ff1d 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000e72:	2002      	movs	r0, #2
20000e74:	f7ff ff1a 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_command(0x38);
20000e78:	2038      	movs	r0, #56	; 0x38
20000e7a:	f7ff ffd7 	bl	20000e2c <ascii_command>
	ascii_command(0x0E);
20000e7e:	200e      	movs	r0, #14
20000e80:	f7ff ffd4 	bl	20000e2c <ascii_command>
	ascii_command(0x01);
20000e84:	2001      	movs	r0, #1
20000e86:	f7ff ffd1 	bl	20000e2c <ascii_command>
	ascii_command(0x06);
20000e8a:	2006      	movs	r0, #6
20000e8c:	f7ff ffce 	bl	20000e2c <ascii_command>
}
20000e90:	46c0      	nop			; (mov r8, r8)
20000e92:	46bd      	mov	sp, r7
20000e94:	bd80      	pop	{r7, pc}

20000e96 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000e96:	b580      	push	{r7, lr}
20000e98:	b084      	sub	sp, #16
20000e9a:	af00      	add	r7, sp, #0
20000e9c:	6078      	str	r0, [r7, #4]
20000e9e:	6039      	str	r1, [r7, #0]
	ascii_ctrl_bit_clear(B_RS);
20000ea0:	2001      	movs	r0, #1
20000ea2:	f7ff ff03 	bl	20000cac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000ea6:	2002      	movs	r0, #2
20000ea8:	f7ff ff00 	bl	20000cac <ascii_ctrl_bit_clear>
	unsigned char adress = x - 1;
20000eac:	687b      	ldr	r3, [r7, #4]
20000eae:	b2da      	uxtb	r2, r3
20000eb0:	210f      	movs	r1, #15
20000eb2:	187b      	adds	r3, r7, r1
20000eb4:	3a01      	subs	r2, #1
20000eb6:	701a      	strb	r2, [r3, #0]
	if(y == 2){
20000eb8:	683b      	ldr	r3, [r7, #0]
20000eba:	2b02      	cmp	r3, #2
20000ebc:	d104      	bne.n	20000ec8 <ascii_gotoxy+0x32>
		adress += 0x40;
20000ebe:	187b      	adds	r3, r7, r1
20000ec0:	187a      	adds	r2, r7, r1
20000ec2:	7812      	ldrb	r2, [r2, #0]
20000ec4:	3240      	adds	r2, #64	; 0x40
20000ec6:	701a      	strb	r2, [r3, #0]
	}
	ascii_command(0x80 | adress);
20000ec8:	230f      	movs	r3, #15
20000eca:	18fb      	adds	r3, r7, r3
20000ecc:	781b      	ldrb	r3, [r3, #0]
20000ece:	2280      	movs	r2, #128	; 0x80
20000ed0:	4252      	negs	r2, r2
20000ed2:	4313      	orrs	r3, r2
20000ed4:	b2db      	uxtb	r3, r3
20000ed6:	0018      	movs	r0, r3
20000ed8:	f7ff ffa8 	bl	20000e2c <ascii_command>
}
20000edc:	46c0      	nop			; (mov r8, r8)
20000ede:	46bd      	mov	sp, r7
20000ee0:	b004      	add	sp, #16
20000ee2:	bd80      	pop	{r7, pc}

20000ee4 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000ee4:	b580      	push	{r7, lr}
20000ee6:	b082      	sub	sp, #8
20000ee8:	af00      	add	r7, sp, #0
20000eea:	0002      	movs	r2, r0
20000eec:	1dfb      	adds	r3, r7, #7
20000eee:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){
20000ef0:	46c0      	nop			; (mov r8, r8)
20000ef2:	f7ff ff7b 	bl	20000dec <ascii_read_status>
20000ef6:	0003      	movs	r3, r0
20000ef8:	001a      	movs	r2, r3
20000efa:	2380      	movs	r3, #128	; 0x80
20000efc:	4013      	ands	r3, r2
20000efe:	2b80      	cmp	r3, #128	; 0x80
20000f00:	d0f7      	beq.n	20000ef2 <ascii_write_char+0xe>
		
	}
	delay_mikro(8);
20000f02:	2008      	movs	r0, #8
20000f04:	f7ff f8a8 	bl	20000058 <delay_mikro>
	ascii_write_data(c);
20000f08:	1dfb      	adds	r3, r7, #7
20000f0a:	781b      	ldrb	r3, [r3, #0]
20000f0c:	0018      	movs	r0, r3
20000f0e:	f7ff ff06 	bl	20000d1e <ascii_write_data>
	delay_mikro(50);
20000f12:	2032      	movs	r0, #50	; 0x32
20000f14:	f7ff f8a0 	bl	20000058 <delay_mikro>
}
20000f18:	46c0      	nop			; (mov r8, r8)
20000f1a:	46bd      	mov	sp, r7
20000f1c:	b002      	add	sp, #8
20000f1e:	bd80      	pop	{r7, pc}

20000f20 <ascii_playerscore_init>:

void ascii_playerscore_init(void){
20000f20:	b5b0      	push	{r4, r5, r7, lr}
20000f22:	b08a      	sub	sp, #40	; 0x28
20000f24:	af00      	add	r7, sp, #0
	char * s;
	char test1[] = "Player Left: 0";	//plats 14
20000f26:	2414      	movs	r4, #20
20000f28:	193b      	adds	r3, r7, r4
20000f2a:	4a1d      	ldr	r2, [pc, #116]	; (20000fa0 <ascii_playerscore_init+0x80>)
20000f2c:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f2e:	c323      	stmia	r3!, {r0, r1, r5}
20000f30:	8811      	ldrh	r1, [r2, #0]
20000f32:	8019      	strh	r1, [r3, #0]
20000f34:	7892      	ldrb	r2, [r2, #2]
20000f36:	709a      	strb	r2, [r3, #2]
	char test2[] = "Player Right: 0";	//plats 15
20000f38:	1d3b      	adds	r3, r7, #4
20000f3a:	4a1a      	ldr	r2, [pc, #104]	; (20000fa4 <ascii_playerscore_init+0x84>)
20000f3c:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f3e:	c323      	stmia	r3!, {r0, r1, r5}
20000f40:	6812      	ldr	r2, [r2, #0]
20000f42:	601a      	str	r2, [r3, #0]
	
	ascii_init();
20000f44:	f7ff ff90 	bl	20000e68 <ascii_init>
	ascii_gotoxy(1,1);
20000f48:	2101      	movs	r1, #1
20000f4a:	2001      	movs	r0, #1
20000f4c:	f7ff ffa3 	bl	20000e96 <ascii_gotoxy>
	s = test1;
20000f50:	193b      	adds	r3, r7, r4
20000f52:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f54:	e007      	b.n	20000f66 <ascii_playerscore_init+0x46>
		ascii_write_char(*s);
20000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f58:	781b      	ldrb	r3, [r3, #0]
20000f5a:	0018      	movs	r0, r3
20000f5c:	f7ff ffc2 	bl	20000ee4 <ascii_write_char>
		*s++;
20000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f62:	3301      	adds	r3, #1
20000f64:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f68:	781b      	ldrb	r3, [r3, #0]
20000f6a:	2b00      	cmp	r3, #0
20000f6c:	d1f3      	bne.n	20000f56 <ascii_playerscore_init+0x36>
	}
	ascii_gotoxy(1,2);
20000f6e:	2102      	movs	r1, #2
20000f70:	2001      	movs	r0, #1
20000f72:	f7ff ff90 	bl	20000e96 <ascii_gotoxy>
	s=test2;
20000f76:	1d3b      	adds	r3, r7, #4
20000f78:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f7a:	e007      	b.n	20000f8c <ascii_playerscore_init+0x6c>
		ascii_write_char(*s);
20000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f7e:	781b      	ldrb	r3, [r3, #0]
20000f80:	0018      	movs	r0, r3
20000f82:	f7ff ffaf 	bl	20000ee4 <ascii_write_char>
		*s++;
20000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f88:	3301      	adds	r3, #1
20000f8a:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f8e:	781b      	ldrb	r3, [r3, #0]
20000f90:	2b00      	cmp	r3, #0
20000f92:	d1f3      	bne.n	20000f7c <ascii_playerscore_init+0x5c>
	}
}
20000f94:	46c0      	nop			; (mov r8, r8)
20000f96:	46c0      	nop			; (mov r8, r8)
20000f98:	46bd      	mov	sp, r7
20000f9a:	b00a      	add	sp, #40	; 0x28
20000f9c:	bdb0      	pop	{r4, r5, r7, pc}
20000f9e:	46c0      	nop			; (mov r8, r8)
20000fa0:	20003470 	andcs	r3, r0, r0, ror r4
20000fa4:	20003480 	andcs	r3, r0, r0, lsl #9

20000fa8 <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000fa8:	b580      	push	{r7, lr}
20000faa:	af00      	add	r7, sp, #0
#ifdef USBDM
	* ((unsigned long *) 0x40023830) = 0x18;
20000fac:	4b09      	ldr	r3, [pc, #36]	; (20000fd4 <init_app+0x2c>)
20000fae:	2218      	movs	r2, #24
20000fb0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(" LDR R0, =0x08000209\n");
20000fb2:	48ec      	ldr	r0, [pc, #944]	; (20001364 <main+0xc0>)
	__asm__ volatile(" BLX R0 \n");
20000fb4:	4780      	blx	r0
#endif
	
	* portModer = 0x55555555;
20000fb6:	4b08      	ldr	r3, [pc, #32]	; (20000fd8 <init_app+0x30>)
20000fb8:	4a08      	ldr	r2, [pc, #32]	; (20000fdc <init_app+0x34>)
20000fba:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000fbc:	4b08      	ldr	r3, [pc, #32]	; (20000fe0 <init_app+0x38>)
20000fbe:	4a09      	ldr	r2, [pc, #36]	; (20000fe4 <init_app+0x3c>)
20000fc0:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000fc2:	4b09      	ldr	r3, [pc, #36]	; (20000fe8 <init_app+0x40>)
20000fc4:	4a09      	ldr	r2, [pc, #36]	; (20000fec <init_app+0x44>)
20000fc6:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000fc8:	4b09      	ldr	r3, [pc, #36]	; (20000ff0 <init_app+0x48>)
20000fca:	2200      	movs	r2, #0
20000fcc:	801a      	strh	r2, [r3, #0]
}
20000fce:	46c0      	nop			; (mov r8, r8)
20000fd0:	46bd      	mov	sp, r7
20000fd2:	bd80      	pop	{r7, pc}
20000fd4:	40023830 	andmi	r3, r2, r0, lsr r8
20000fd8:	40021000 	andmi	r1, r2, r0
20000fdc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000fe0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000fe4:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20000fe8:	40020c30 	andmi	r0, r2, r0, lsr ip
20000fec:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20000ff0:	40020c08 	andmi	r0, r2, r8, lsl #24

20000ff4 <player_left_movement>:
		return 0;
	}
}
*/

void player_left_movement(POBJECT paddle){
20000ff4:	b580      	push	{r7, lr}
20000ff6:	b084      	sub	sp, #16
20000ff8:	af00      	add	r7, sp, #0
20000ffa:	6078      	str	r0, [r7, #4]
	int column;
	activateRowHigh(1);
20000ffc:	2001      	movs	r0, #1
20000ffe:	f7ff fbf9 	bl	200007f4 <activateRowHigh>
	column = readColumnHigh();
20001002:	f7ff fc5b 	bl	200008bc <readColumnHigh>
20001006:	0003      	movs	r3, r0
20001008:	60fb      	str	r3, [r7, #12]
	if (column == 0){
2000100a:	68fb      	ldr	r3, [r7, #12]
2000100c:	2b00      	cmp	r3, #0
2000100e:	d103      	bne.n	20001018 <player_left_movement+0x24>
		paddle->dy = 3;
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	2203      	movs	r2, #3
20001014:	609a      	str	r2, [r3, #8]
		return;
20001016:	e011      	b.n	2000103c <player_left_movement+0x48>
	}	
	activateRowHigh(0);
20001018:	2000      	movs	r0, #0
2000101a:	f7ff fbeb 	bl	200007f4 <activateRowHigh>
	column = readColumnHigh();
2000101e:	f7ff fc4d 	bl	200008bc <readColumnHigh>
20001022:	0003      	movs	r3, r0
20001024:	60fb      	str	r3, [r7, #12]
	if (column == 0){
20001026:	68fb      	ldr	r3, [r7, #12]
20001028:	2b00      	cmp	r3, #0
2000102a:	d104      	bne.n	20001036 <player_left_movement+0x42>
		paddle->dy = -3;
2000102c:	687b      	ldr	r3, [r7, #4]
2000102e:	2203      	movs	r2, #3
20001030:	4252      	negs	r2, r2
20001032:	609a      	str	r2, [r3, #8]
20001034:	e002      	b.n	2000103c <player_left_movement+0x48>
	}else{
		paddle->dy = 0;
20001036:	687b      	ldr	r3, [r7, #4]
20001038:	2200      	movs	r2, #0
2000103a:	609a      	str	r2, [r3, #8]
	}
}
2000103c:	46bd      	mov	sp, r7
2000103e:	b004      	add	sp, #16
20001040:	bd80      	pop	{r7, pc}

20001042 <player_right_movement>:
		return 0;
	}
}
 */
 
void player_right_movement(POBJECT paddle){
20001042:	b580      	push	{r7, lr}
20001044:	b084      	sub	sp, #16
20001046:	af00      	add	r7, sp, #0
20001048:	6078      	str	r0, [r7, #4]
	int column;
	activateRowHigh(3);
2000104a:	2003      	movs	r0, #3
2000104c:	f7ff fbd2 	bl	200007f4 <activateRowHigh>
	column = readColumnHigh();
20001050:	f7ff fc34 	bl	200008bc <readColumnHigh>
20001054:	0003      	movs	r3, r0
20001056:	60fb      	str	r3, [r7, #12]
	if (column == 3){
20001058:	68fb      	ldr	r3, [r7, #12]
2000105a:	2b03      	cmp	r3, #3
2000105c:	d103      	bne.n	20001066 <player_right_movement+0x24>
		paddle->dy = 3;
2000105e:	687b      	ldr	r3, [r7, #4]
20001060:	2203      	movs	r2, #3
20001062:	609a      	str	r2, [r3, #8]
		return;
20001064:	e011      	b.n	2000108a <player_right_movement+0x48>
	}
	activateRowHigh(2);
20001066:	2002      	movs	r0, #2
20001068:	f7ff fbc4 	bl	200007f4 <activateRowHigh>
	column = readColumnHigh();
2000106c:	f7ff fc26 	bl	200008bc <readColumnHigh>
20001070:	0003      	movs	r3, r0
20001072:	60fb      	str	r3, [r7, #12]
	if (column == 3){
20001074:	68fb      	ldr	r3, [r7, #12]
20001076:	2b03      	cmp	r3, #3
20001078:	d104      	bne.n	20001084 <player_right_movement+0x42>
		paddle->dy = -3;
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	2203      	movs	r2, #3
2000107e:	4252      	negs	r2, r2
20001080:	609a      	str	r2, [r3, #8]
20001082:	e002      	b.n	2000108a <player_right_movement+0x48>
	}else{
		paddle->dy = 0;
20001084:	687b      	ldr	r3, [r7, #4]
20001086:	2200      	movs	r2, #0
20001088:	609a      	str	r2, [r3, #8]
	}
}
2000108a:	46bd      	mov	sp, r7
2000108c:	b004      	add	sp, #16
2000108e:	bd80      	pop	{r7, pc}

20001090 <disp_copyright>:


void disp_copyright(){
20001090:	b580      	push	{r7, lr}
20001092:	b082      	sub	sp, #8
20001094:	af00      	add	r7, sp, #0
	sprite copyright;
	load_sprite(&copyright, copyright_bits, copyright_width, copyright_height);
20001096:	490c      	ldr	r1, [pc, #48]	; (200010c8 <disp_copyright+0x38>)
20001098:	0038      	movs	r0, r7
2000109a:	2340      	movs	r3, #64	; 0x40
2000109c:	2280      	movs	r2, #128	; 0x80
2000109e:	f7ff fb31 	bl	20000704 <load_sprite>
	
	draw_sprite(&copyright, 1,1,1);
200010a2:	0038      	movs	r0, r7
200010a4:	2301      	movs	r3, #1
200010a6:	2201      	movs	r2, #1
200010a8:	2101      	movs	r1, #1
200010aa:	f7ff fb41 	bl	20000730 <draw_sprite>
	graphic_draw_screen();
200010ae:	f7ff fa47 	bl	20000540 <graphic_draw_screen>
	clear_backBuffer();
200010b2:	f7ff fb0d 	bl	200006d0 <clear_backBuffer>
	delay_milli(3000);
200010b6:	4b05      	ldr	r3, [pc, #20]	; (200010cc <disp_copyright+0x3c>)
200010b8:	0018      	movs	r0, r3
200010ba:	f7fe ffe3 	bl	20000084 <delay_milli>
}
200010be:	46c0      	nop			; (mov r8, r8)
200010c0:	46bd      	mov	sp, r7
200010c2:	b002      	add	sp, #8
200010c4:	bd80      	pop	{r7, pc}
200010c6:	46c0      	nop			; (mov r8, r8)
200010c8:	20002f6c 	andcs	r2, r0, ip, ror #30
200010cc:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8

200010d0 <intro_state>:

void intro_state(){
200010d0:	b580      	push	{r7, lr}
200010d2:	b086      	sub	sp, #24
200010d4:	af00      	add	r7, sp, #0
	sprite noText;
	sprite text;
	
	load_sprite(&noText, Startmenu_bits, Startmenu_width, Startmenu_height);
200010d6:	4921      	ldr	r1, [pc, #132]	; (2000115c <intro_state+0x8c>)
200010d8:	230c      	movs	r3, #12
200010da:	18f8      	adds	r0, r7, r3
200010dc:	2340      	movs	r3, #64	; 0x40
200010de:	2280      	movs	r2, #128	; 0x80
200010e0:	f7ff fb10 	bl	20000704 <load_sprite>
	load_sprite(&text, StartmenuWithText_bits, StartmenuWithText_width, StartmenuWithText_height);
200010e4:	491e      	ldr	r1, [pc, #120]	; (20001160 <intro_state+0x90>)
200010e6:	1d38      	adds	r0, r7, #4
200010e8:	2340      	movs	r3, #64	; 0x40
200010ea:	2280      	movs	r2, #128	; 0x80
200010ec:	f7ff fb0a 	bl	20000704 <load_sprite>
	
	int keyboardHighInput;
	int keyboardLowInput;
	
	while(1){
		clear_backBuffer();
200010f0:	f7ff faee 	bl	200006d0 <clear_backBuffer>
		
		draw_sprite(&noText, 0, 0, 1);
200010f4:	230c      	movs	r3, #12
200010f6:	18f8      	adds	r0, r7, r3
200010f8:	2301      	movs	r3, #1
200010fa:	2200      	movs	r2, #0
200010fc:	2100      	movs	r1, #0
200010fe:	f7ff fb17 	bl	20000730 <draw_sprite>
		graphic_draw_screen();
20001102:	f7ff fa1d 	bl	20000540 <graphic_draw_screen>
		clear_backBuffer();
20001106:	f7ff fae3 	bl	200006d0 <clear_backBuffer>
		delay_milli(1000);
2000110a:	23fa      	movs	r3, #250	; 0xfa
2000110c:	009b      	lsls	r3, r3, #2
2000110e:	0018      	movs	r0, r3
20001110:	f7fe ffb8 	bl	20000084 <delay_milli>
			
		keyboardHighInput = keybHigh();
20001114:	f7ff fc40 	bl	20000998 <keybHigh>
20001118:	0003      	movs	r3, r0
2000111a:	617b      	str	r3, [r7, #20]
		
		if(keyboardHighInput != 255){
2000111c:	697b      	ldr	r3, [r7, #20]
2000111e:	2bff      	cmp	r3, #255	; 0xff
20001120:	d114      	bne.n	2000114c <intro_state+0x7c>
			break;
		}
						
		draw_sprite(&text, 0, 0, 1);
20001122:	1d38      	adds	r0, r7, #4
20001124:	2301      	movs	r3, #1
20001126:	2200      	movs	r2, #0
20001128:	2100      	movs	r1, #0
2000112a:	f7ff fb01 	bl	20000730 <draw_sprite>
		graphic_draw_screen();
2000112e:	f7ff fa07 	bl	20000540 <graphic_draw_screen>
		delay_milli(1000);
20001132:	23fa      	movs	r3, #250	; 0xfa
20001134:	009b      	lsls	r3, r3, #2
20001136:	0018      	movs	r0, r3
20001138:	f7fe ffa4 	bl	20000084 <delay_milli>
		
		keyboardHighInput = keybHigh();
2000113c:	f7ff fc2c 	bl	20000998 <keybHigh>
20001140:	0003      	movs	r3, r0
20001142:	617b      	str	r3, [r7, #20]
		
		if(keyboardHighInput != 255){
20001144:	697b      	ldr	r3, [r7, #20]
20001146:	2bff      	cmp	r3, #255	; 0xff
20001148:	d102      	bne.n	20001150 <intro_state+0x80>
		clear_backBuffer();
2000114a:	e7d1      	b.n	200010f0 <intro_state+0x20>
			break;
2000114c:	46c0      	nop			; (mov r8, r8)
2000114e:	e000      	b.n	20001152 <intro_state+0x82>
			break;
20001150:	46c0      	nop			; (mov r8, r8)
		}
	}
}
20001152:	46c0      	nop			; (mov r8, r8)
20001154:	46bd      	mov	sp, r7
20001156:	b006      	add	sp, #24
20001158:	bd80      	pop	{r7, pc}
2000115a:	46c0      	nop			; (mov r8, r8)
2000115c:	20002b6c 	andcs	r2, r0, ip, ror #22
20001160:	2000276c 	andcs	r2, r0, ip, ror #14

20001164 <win_state>:

void win_state(){
20001164:	b580      	push	{r7, lr}
20001166:	b08a      	sub	sp, #40	; 0x28
20001168:	af00      	add	r7, sp, #0
	sprite pRightWin;
	sprite pRightWinText;
	sprite pLeftWin;
	sprite pLeftWinText;
	
	load_sprite(&pRightWin, PlayerRightWins_bits, PlayerRightWins_width, PlayerRightWins_height);
2000116a:	493f      	ldr	r1, [pc, #252]	; (20001268 <win_state+0x104>)
2000116c:	231c      	movs	r3, #28
2000116e:	18f8      	adds	r0, r7, r3
20001170:	2340      	movs	r3, #64	; 0x40
20001172:	2280      	movs	r2, #128	; 0x80
20001174:	f7ff fac6 	bl	20000704 <load_sprite>
	load_sprite(&pRightWinText, PlayerRightWinsWithText_bits, PlayerRightWinsWithText_width, PlayerRightWinsWithText_height);
20001178:	493c      	ldr	r1, [pc, #240]	; (2000126c <win_state+0x108>)
2000117a:	2314      	movs	r3, #20
2000117c:	18f8      	adds	r0, r7, r3
2000117e:	2340      	movs	r3, #64	; 0x40
20001180:	2280      	movs	r2, #128	; 0x80
20001182:	f7ff fabf 	bl	20000704 <load_sprite>
	load_sprite(&pLeftWin, PlayerLeftWins_bits, PlayerLeftWins_width, PlayerLeftWins_height);
20001186:	493a      	ldr	r1, [pc, #232]	; (20001270 <win_state+0x10c>)
20001188:	230c      	movs	r3, #12
2000118a:	18f8      	adds	r0, r7, r3
2000118c:	2340      	movs	r3, #64	; 0x40
2000118e:	2280      	movs	r2, #128	; 0x80
20001190:	f7ff fab8 	bl	20000704 <load_sprite>
	load_sprite(&pLeftWinText, PlayerLeftWinsWithText_bits, PlayerLeftWinsWithText_width, PlayerLeftWinsWithText_height);
20001194:	4937      	ldr	r1, [pc, #220]	; (20001274 <win_state+0x110>)
20001196:	1d38      	adds	r0, r7, #4
20001198:	2340      	movs	r3, #64	; 0x40
2000119a:	2280      	movs	r2, #128	; 0x80
2000119c:	f7ff fab2 	bl	20000704 <load_sprite>
	
	int keyboardHighInput;
	int keyboardLowInput;
		
	while(1){
		clear_backBuffer();
200011a0:	f7ff fa96 	bl	200006d0 <clear_backBuffer>

		if(player_left_points == 5){
200011a4:	4b34      	ldr	r3, [pc, #208]	; (20001278 <win_state+0x114>)
200011a6:	781b      	ldrb	r3, [r3, #0]
200011a8:	2b05      	cmp	r3, #5
200011aa:	d123      	bne.n	200011f4 <win_state+0x90>
			draw_sprite(&pLeftWin, 0, 0, 1);
200011ac:	230c      	movs	r3, #12
200011ae:	18f8      	adds	r0, r7, r3
200011b0:	2301      	movs	r3, #1
200011b2:	2200      	movs	r2, #0
200011b4:	2100      	movs	r1, #0
200011b6:	f7ff fabb 	bl	20000730 <draw_sprite>
			graphic_draw_screen();
200011ba:	f7ff f9c1 	bl	20000540 <graphic_draw_screen>
			clear_backBuffer();
200011be:	f7ff fa87 	bl	200006d0 <clear_backBuffer>
			delay_milli(1000);
200011c2:	23fa      	movs	r3, #250	; 0xfa
200011c4:	009b      	lsls	r3, r3, #2
200011c6:	0018      	movs	r0, r3
200011c8:	f7fe ff5c 	bl	20000084 <delay_milli>
			
			keyboardHighInput = keybHigh();
200011cc:	f7ff fbe4 	bl	20000998 <keybHigh>
200011d0:	0003      	movs	r3, r0
200011d2:	627b      	str	r3, [r7, #36]	; 0x24
		
			if(keyboardHighInput != 255){
200011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200011d6:	2bff      	cmp	r3, #255	; 0xff
200011d8:	d13d      	bne.n	20001256 <win_state+0xf2>
				break;
			}
			
			draw_sprite(&pLeftWinText, 0, 0, 1);
200011da:	1d38      	adds	r0, r7, #4
200011dc:	2301      	movs	r3, #1
200011de:	2200      	movs	r2, #0
200011e0:	2100      	movs	r1, #0
200011e2:	f7ff faa5 	bl	20000730 <draw_sprite>
			graphic_draw_screen();
200011e6:	f7ff f9ab 	bl	20000540 <graphic_draw_screen>
			delay_milli(1000);
200011ea:	23fa      	movs	r3, #250	; 0xfa
200011ec:	009b      	lsls	r3, r3, #2
200011ee:	0018      	movs	r0, r3
200011f0:	f7fe ff48 	bl	20000084 <delay_milli>
		}
	
		if(player_right_points == 5){
200011f4:	4b21      	ldr	r3, [pc, #132]	; (2000127c <win_state+0x118>)
200011f6:	781b      	ldrb	r3, [r3, #0]
200011f8:	2b05      	cmp	r3, #5
200011fa:	d124      	bne.n	20001246 <win_state+0xe2>
			draw_sprite(&pRightWin, 0, 0, 1);
200011fc:	231c      	movs	r3, #28
200011fe:	18f8      	adds	r0, r7, r3
20001200:	2301      	movs	r3, #1
20001202:	2200      	movs	r2, #0
20001204:	2100      	movs	r1, #0
20001206:	f7ff fa93 	bl	20000730 <draw_sprite>
			graphic_draw_screen();
2000120a:	f7ff f999 	bl	20000540 <graphic_draw_screen>
			clear_backBuffer();
2000120e:	f7ff fa5f 	bl	200006d0 <clear_backBuffer>
			delay_milli(1000);
20001212:	23fa      	movs	r3, #250	; 0xfa
20001214:	009b      	lsls	r3, r3, #2
20001216:	0018      	movs	r0, r3
20001218:	f7fe ff34 	bl	20000084 <delay_milli>
			
			keyboardHighInput = keybHigh();
2000121c:	f7ff fbbc 	bl	20000998 <keybHigh>
20001220:	0003      	movs	r3, r0
20001222:	627b      	str	r3, [r7, #36]	; 0x24
		
			if(keyboardHighInput != 255){
20001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001226:	2bff      	cmp	r3, #255	; 0xff
20001228:	d117      	bne.n	2000125a <win_state+0xf6>
				break;
			}
			
			draw_sprite(&pRightWinText, 0, 0, 1);
2000122a:	2314      	movs	r3, #20
2000122c:	18f8      	adds	r0, r7, r3
2000122e:	2301      	movs	r3, #1
20001230:	2200      	movs	r2, #0
20001232:	2100      	movs	r1, #0
20001234:	f7ff fa7c 	bl	20000730 <draw_sprite>
			graphic_draw_screen();
20001238:	f7ff f982 	bl	20000540 <graphic_draw_screen>
			delay_milli(1000);
2000123c:	23fa      	movs	r3, #250	; 0xfa
2000123e:	009b      	lsls	r3, r3, #2
20001240:	0018      	movs	r0, r3
20001242:	f7fe ff1f 	bl	20000084 <delay_milli>
		}
		
		keyboardHighInput = keybHigh();
20001246:	f7ff fba7 	bl	20000998 <keybHigh>
2000124a:	0003      	movs	r3, r0
2000124c:	627b      	str	r3, [r7, #36]	; 0x24
		
		if(keyboardHighInput != 255){
2000124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001250:	2bff      	cmp	r3, #255	; 0xff
20001252:	d104      	bne.n	2000125e <win_state+0xfa>
		clear_backBuffer();
20001254:	e7a4      	b.n	200011a0 <win_state+0x3c>
				break;
20001256:	46c0      	nop			; (mov r8, r8)
20001258:	e002      	b.n	20001260 <win_state+0xfc>
				break;
2000125a:	46c0      	nop			; (mov r8, r8)
2000125c:	e000      	b.n	20001260 <win_state+0xfc>
			break;
2000125e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
20001260:	46c0      	nop			; (mov r8, r8)
20001262:	46bd      	mov	sp, r7
20001264:	b00a      	add	sp, #40	; 0x28
20001266:	bd80      	pop	{r7, pc}
20001268:	20001f6c 	andcs	r1, r0, ip, ror #30
2000126c:	2000236c 	andcs	r2, r0, ip, ror #6
20001270:	2000176c 	andcs	r1, r0, ip, ror #14
20001274:	20001b6c 	andcs	r1, r0, ip, ror #22
20001278:	20001769 	andcs	r1, r0, r9, ror #14
2000127c:	20001768 	andcs	r1, r0, r8, ror #14

20001280 <boolean_input>:

int boolean_input(){
20001280:	b590      	push	{r4, r7, lr}
20001282:	b083      	sub	sp, #12
20001284:	af00      	add	r7, sp, #0
	uint8_t keyboardHighInput = keybHigh();
20001286:	1dfc      	adds	r4, r7, #7
20001288:	f7ff fb86 	bl	20000998 <keybHigh>
2000128c:	0003      	movs	r3, r0
2000128e:	7023      	strb	r3, [r4, #0]
	uint8_t keyboardLowInput = keybLow();
20001290:	1dbc      	adds	r4, r7, #6
20001292:	f7ff fbac 	bl	200009ee <keybLow>
20001296:	0003      	movs	r3, r0
20001298:	7023      	strb	r3, [r4, #0]
		
	if((keyboardHighInput != -1) || (keyboardLowInput != -1)){
		return 1;
2000129a:	2301      	movs	r3, #1
	}
	return 0;
}
2000129c:	0018      	movs	r0, r3
2000129e:	46bd      	mov	sp, r7
200012a0:	b003      	add	sp, #12
200012a2:	bd90      	pop	{r4, r7, pc}

200012a4 <main>:
}

#endif

#ifndef OLD_PIXEL
void main(void){
200012a4:	b580      	push	{r7, lr}
200012a6:	b084      	sub	sp, #16
200012a8:	af00      	add	r7, sp, #0
	
	POBJECT b = &ball;
200012aa:	4b29      	ldr	r3, [pc, #164]	; (20001350 <main+0xac>)
200012ac:	60fb      	str	r3, [r7, #12]
	POBJECT p_left = &paddle_left;
200012ae:	4b29      	ldr	r3, [pc, #164]	; (20001354 <main+0xb0>)
200012b0:	60bb      	str	r3, [r7, #8]
	POBJECT p_right = &paddle_right;
200012b2:	4b29      	ldr	r3, [pc, #164]	; (20001358 <main+0xb4>)
200012b4:	607b      	str	r3, [r7, #4]

	init_app();
200012b6:	f7ff fe77 	bl	20000fa8 <init_app>
	graphic_initialize();
200012ba:	f7ff f891 	bl	200003e0 <graphic_initialize>
	ascii_playerscore_init();
200012be:	f7ff fe2f 	bl	20000f20 <ascii_playerscore_init>
	

	b->dx = 5;
200012c2:	68fb      	ldr	r3, [r7, #12]
200012c4:	2205      	movs	r2, #5
200012c6:	605a      	str	r2, [r3, #4]
	b->dy = 5;
200012c8:	68fb      	ldr	r3, [r7, #12]
200012ca:	2205      	movs	r2, #5
200012cc:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
200012ce:	f7ff f8b2 	bl	20000436 <graphic_clear_screen>
#endif
	disp_copyright();
200012d2:	f7ff fedd 	bl	20001090 <disp_copyright>
	intro_state();
200012d6:	f7ff fefb 	bl	200010d0 <intro_state>
	
	while(1){
		
		clear_backBuffer();
200012da:	f7ff f9f9 	bl	200006d0 <clear_backBuffer>
		
		b->move(b, b);
200012de:	68fb      	ldr	r3, [r7, #12]
200012e0:	69db      	ldr	r3, [r3, #28]
200012e2:	68f9      	ldr	r1, [r7, #12]
200012e4:	68fa      	ldr	r2, [r7, #12]
200012e6:	0010      	movs	r0, r2
200012e8:	4798      	blx	r3
		p_left->move(p_left, b);
200012ea:	68bb      	ldr	r3, [r7, #8]
200012ec:	69db      	ldr	r3, [r3, #28]
200012ee:	68f9      	ldr	r1, [r7, #12]
200012f0:	68ba      	ldr	r2, [r7, #8]
200012f2:	0010      	movs	r0, r2
200012f4:	4798      	blx	r3
		p_right->move(p_right, b);
200012f6:	687b      	ldr	r3, [r7, #4]
200012f8:	69db      	ldr	r3, [r3, #28]
200012fa:	68f9      	ldr	r1, [r7, #12]
200012fc:	687a      	ldr	r2, [r7, #4]
200012fe:	0010      	movs	r0, r2
20001300:	4798      	blx	r3
			case 5: p_right->set_speed(p_right,0,20);break;
			default: p_right->set_speed(p_right,0,0);break;
		}
		*/
		
		player_left_movement(p_left);
20001302:	68bb      	ldr	r3, [r7, #8]
20001304:	0018      	movs	r0, r3
20001306:	f7ff fe75 	bl	20000ff4 <player_left_movement>
		player_right_movement(p_right);
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	0018      	movs	r0, r3
2000130e:	f7ff fe98 	bl	20001042 <player_right_movement>
		
		graphic_draw_screen();
20001312:	f7ff f915 	bl	20000540 <graphic_draw_screen>
		delay_milli(40);
20001316:	2028      	movs	r0, #40	; 0x28
20001318:	f7fe feb4 	bl	20000084 <delay_milli>
		
		uint8_t leftPoints = player_left_points;
2000131c:	1cfb      	adds	r3, r7, #3
2000131e:	4a0f      	ldr	r2, [pc, #60]	; (2000135c <main+0xb8>)
20001320:	7812      	ldrb	r2, [r2, #0]
20001322:	701a      	strb	r2, [r3, #0]
		uint8_t rightPoints = player_right_points;
20001324:	1cbb      	adds	r3, r7, #2
20001326:	4a0e      	ldr	r2, [pc, #56]	; (20001360 <main+0xbc>)
20001328:	7812      	ldrb	r2, [r2, #0]
2000132a:	701a      	strb	r2, [r3, #0]
		
		if(leftPoints == 5 || rightPoints == 5){
2000132c:	1cfb      	adds	r3, r7, #3
2000132e:	781b      	ldrb	r3, [r3, #0]
20001330:	2b05      	cmp	r3, #5
20001332:	d003      	beq.n	2000133c <main+0x98>
20001334:	1cbb      	adds	r3, r7, #2
20001336:	781b      	ldrb	r3, [r3, #0]
20001338:	2b05      	cmp	r3, #5
2000133a:	d1ce      	bne.n	200012da <main+0x36>
			win_state();
2000133c:	f7ff ff12 	bl	20001164 <win_state>
			player_left_points = 0;
20001340:	4b06      	ldr	r3, [pc, #24]	; (2000135c <main+0xb8>)
20001342:	2200      	movs	r2, #0
20001344:	701a      	strb	r2, [r3, #0]
			player_right_points = 0;
20001346:	4b06      	ldr	r3, [pc, #24]	; (20001360 <main+0xbc>)
20001348:	2200      	movs	r2, #0
2000134a:	701a      	strb	r2, [r3, #0]
	while(1){
2000134c:	e7c5      	b.n	200012da <main+0x36>
2000134e:	46c0      	nop			; (mov r8, r8)
20001350:	2000343c 	andcs	r3, r0, ip, lsr r4
20001354:	200033b0 			; <UNDEFINED> instruction: 0x200033b0
20001358:	200033d4 	ldrdcs	r3, [r0], -r4
2000135c:	20001769 	andcs	r1, r0, r9, ror #14
20001360:	20001768 	andcs	r1, r0, r8, ror #14
20001364:	08000209 	stmdaeq	r0, {r0, r3, r9}

20001368 <backBuffer>:
	...

20001768 <player_right_points>:
	...

20001769 <player_left_points>:
20001769:	 	andeq	r0, r0, r0

2000176c <PlayerLeftWins_bits>:
	...
2000179c:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
200017ac:	00007ff0 	strdeq	r7, [r0], -r0
	...
200017b8:	001fc000 	andseq	ip, pc, r0
200017bc:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
200017c0:	00000000 	andeq	r0, r0, r0
200017c4:	00000700 	andeq	r0, r0, r0, lsl #14
200017c8:	001fe000 	andseq	lr, pc, r0
200017cc:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
200017d0:	00000000 	andeq	r0, r0, r0
200017d4:	00000700 	andeq	r0, r0, r0, lsl #14
200017d8:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
200017dc:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
200017e0:	00000000 	andeq	r0, r0, r0
200017e4:	00000700 	andeq	r0, r0, r0, lsl #14
200017e8:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
200017ec:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
200017f0:	00000000 	andeq	r0, r0, r0
200017f4:	00000f00 	andeq	r0, r0, r0, lsl #30
200017f8:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
200017fc:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20001800:	00000000 	andeq	r0, r0, r0
20001804:	00000f00 	andeq	r0, r0, r0, lsl #30
20001808:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
2000180c:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20001810:	00000000 	andeq	r0, r0, r0
20001814:	00000e00 	andeq	r0, r0, r0, lsl #28
20001818:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
2000181c:	000e7870 	andeq	r7, lr, r0, ror r8
20001820:	00000000 	andeq	r0, r0, r0
20001824:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001828:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
2000182c:	000e7ff0 	strdeq	r7, [lr], -r0
20001830:	000fc000 	andeq	ip, pc, r0
20001834:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001838:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
2000183c:	000e7ff0 	strdeq	r7, [lr], -r0
20001840:	001fe000 	andseq	lr, pc, r0
20001844:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001848:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
2000184c:	000e3ff0 	strdeq	r3, [lr], -r0
20001850:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001854:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001858:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
2000185c:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20001860:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20001864:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
20001868:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
2000186c:	3f0f00e0 	svccc	0x000f00e0
20001870:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20001874:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001878:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
2000187c:	3f8700e0 	svccc	0x008700e0
20001880:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20001884:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001888:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
2000188c:	3f8700e0 	svccc	0x008700e0
20001890:	3f8ffbce 	svccc	0x008ffbce
20001894:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
20001898:	0fe01c0f 	svceq	0x00e01c0f
2000189c:	7bc701e0 	blvc	1f1c2024 <startup-0xe3dfdc>
200018a0:	1f0ffbde 	svcne	0x000ffbde
200018a4:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
200018a8:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
200018ac:	7bc701e0 	blvc	1f1c2034 <startup-0xe3dfcc>
200018b0:	0f0fbbfe 	svceq	0x000fbbfe
200018b4:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
200018b8:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
200018bc:	7bc701c0 	blvc	1f1c1fc4 <startup-0xe3e03c>
200018c0:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200018c4:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
200018c8:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
200018cc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200018d0:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200018d4:	3c003c00 	stccc	12, cr3, [r0], {-0}
200018d8:	0f007838 	svceq	0x00007838
200018dc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200018e0:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200018e4:	fc003c00 	stc2	12, cr3, [r0], {-0}
200018e8:	0f00783e 	svceq	0x0000783e
200018ec:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200018f0:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200018f4:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
200018f8:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
200018fc:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20001900:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20001904:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
20001908:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
2000190c:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20001910:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001914:	e0fffc00 	rscs	pc, pc, r0, lsl #24
20001918:	07807007 	streq	r7, [r0, r7]
2000191c:	df800070 	svcle	0x00800070
20001920:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001924:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001928:	03807000 	orreq	r7, r0, #0
2000192c:	c0000000 	andgt	r0, r0, r0
20001930:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001934:	00f00000 	rscseq	r0, r0, r0
20001938:	03800000 	orreq	r0, r0, #0
2000193c:	00000000 	andeq	r0, r0, r0
20001940:	000007c0 	andeq	r0, r0, r0, asr #15
	...
20001950:	000003e7 	andeq	r0, r0, r7, ror #7
	...
20001960:	000003ef 	andeq	r0, r0, pc, ror #7
	...
20001970:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20001980:	e38000ff 	orr	r0, r0, #255	; 0xff
20001984:	00000038 	andeq	r0, r0, r8, lsr r0
	...
20001990:	e38e007e 	orr	r0, lr, #126	; 0x7e
20001994:	00000078 	andeq	r0, r0, r8, ror r0
	...
200019a0:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200019a4:	00001cf8 	strdeq	r1, [r0], -r8
	...
200019b0:	e38ee700 	orr	lr, lr, #0, 14
200019b4:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
200019c0:	e38ee700 	orr	lr, lr, #0, 14
200019c4:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
200019d0:	e3cfef00 	bic	lr, pc, #0, 30
200019d4:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
200019e0:	e3cfef00 	bic	lr, pc, #0, 30
200019e4:	00079ff8 	strdeq	r9, [r7], -r8
	...
200019f0:	e3cfde00 	bic	sp, pc, #0, 28
200019f4:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001a00:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001a04:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001a10:	e1ffbe00 	mvns	fp, r0, lsl #28
20001a14:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001a20:	e1fffc00 	mvns	pc, r0, lsl #24
20001a24:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001a30:	e1fff800 	mvns	pc, r0, lsl #16
20001a34:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001a40:	e1fbf800 	mvns	pc, r0, lsl #16
20001a44:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001a50:	e0f1f000 	rscs	pc, r1, r0
20001a54:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001a60:	e0f0f000 	rscs	pc, r0, r0
20001a64:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001a70:	0000e000 	andeq	lr, r0, r0
20001a74:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001a84:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

20001b6c <PlayerLeftWinsWithText_bits>:
	...
20001b9c:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001bac:	00007ff0 	strdeq	r7, [r0], -r0
	...
20001bb8:	001fc000 	andseq	ip, pc, r0
20001bbc:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
20001bc0:	00000000 	andeq	r0, r0, r0
20001bc4:	00000700 	andeq	r0, r0, r0, lsl #14
20001bc8:	001fe000 	andseq	lr, pc, r0
20001bcc:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
20001bd0:	00000000 	andeq	r0, r0, r0
20001bd4:	00000700 	andeq	r0, r0, r0, lsl #14
20001bd8:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
20001bdc:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
20001be0:	00000000 	andeq	r0, r0, r0
20001be4:	00000700 	andeq	r0, r0, r0, lsl #14
20001be8:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
20001bec:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
20001bf0:	00000000 	andeq	r0, r0, r0
20001bf4:	00000f00 	andeq	r0, r0, r0, lsl #30
20001bf8:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
20001bfc:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20001c00:	00000000 	andeq	r0, r0, r0
20001c04:	00000f00 	andeq	r0, r0, r0, lsl #30
20001c08:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
20001c0c:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20001c10:	00000000 	andeq	r0, r0, r0
20001c14:	00000e00 	andeq	r0, r0, r0, lsl #28
20001c18:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001c1c:	000e7870 	andeq	r7, lr, r0, ror r8
20001c20:	00000000 	andeq	r0, r0, r0
20001c24:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001c28:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
20001c2c:	000e7ff0 	strdeq	r7, [lr], -r0
20001c30:	000fc000 	andeq	ip, pc, r0
20001c34:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001c38:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
20001c3c:	000e7ff0 	strdeq	r7, [lr], -r0
20001c40:	001fe000 	andseq	lr, pc, r0
20001c44:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001c48:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
20001c4c:	000e3ff0 	strdeq	r3, [lr], -r0
20001c50:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001c54:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001c58:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
20001c5c:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20001c60:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20001c64:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
20001c68:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
20001c6c:	3f0f00e0 	svccc	0x000f00e0
20001c70:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20001c74:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001c78:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001c7c:	3f8700e0 	svccc	0x008700e0
20001c80:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20001c84:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001c88:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001c8c:	3f8700e0 	svccc	0x008700e0
20001c90:	3f8ffbce 	svccc	0x008ffbce
20001c94:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
20001c98:	0fe01c0f 	svceq	0x00e01c0f
20001c9c:	7bc701e0 	blvc	1f1c2424 <startup-0xe3dbdc>
20001ca0:	1f0ffbde 	svcne	0x000ffbde
20001ca4:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001ca8:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
20001cac:	7bc701e0 	blvc	1f1c2434 <startup-0xe3dbcc>
20001cb0:	0f0fbbfe 	svceq	0x000fbbfe
20001cb4:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
20001cb8:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001cbc:	7bc701c0 	blvc	1f1c23c4 <startup-0xe3dc3c>
20001cc0:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20001cc4:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
20001cc8:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001ccc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001cd0:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20001cd4:	3c003c00 	stccc	12, cr3, [r0], {-0}
20001cd8:	0f007838 	svceq	0x00007838
20001cdc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001ce0:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20001ce4:	fc003c00 	stc2	12, cr3, [r0], {-0}
20001ce8:	0f00783e 	svceq	0x0000783e
20001cec:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
20001cf0:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20001cf4:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
20001cf8:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
20001cfc:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20001d00:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20001d04:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
20001d08:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
20001d0c:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20001d10:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001d14:	e0fffc00 	rscs	pc, pc, r0, lsl #24
20001d18:	07807007 	streq	r7, [r0, r7]
20001d1c:	df800070 	svcle	0x00800070
20001d20:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001d24:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001d28:	03807000 	orreq	r7, r0, #0
20001d2c:	c0000000 	andgt	r0, r0, r0
20001d30:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001d34:	00f00000 	rscseq	r0, r0, r0
20001d38:	03800000 	orreq	r0, r0, #0
20001d3c:	00000000 	andeq	r0, r0, r0
20001d40:	000007c0 	andeq	r0, r0, r0, asr #15
	...
20001d50:	000003e7 	andeq	r0, r0, r7, ror #7
	...
20001d60:	000003ef 	andeq	r0, r0, pc, ror #7
	...
20001d70:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20001d80:	e38000ff 	orr	r0, r0, #255	; 0xff
20001d84:	00000038 	andeq	r0, r0, r8, lsr r0
	...
20001d90:	e38e007e 	orr	r0, lr, #126	; 0x7e
20001d94:	00000078 	andeq	r0, r0, r8, ror r0
	...
20001da0:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20001da4:	00001cf8 	strdeq	r1, [r0], -r8
	...
20001db0:	e38ee700 	orr	lr, lr, #0, 14
20001db4:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
20001dc0:	e38ee700 	orr	lr, lr, #0, 14
20001dc4:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
20001dd0:	e3cfef00 	bic	lr, pc, #0, 30
20001dd4:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
20001de0:	e3cfef00 	bic	lr, pc, #0, 30
20001de4:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001df0:	e3cfde00 	bic	sp, pc, #0, 28
20001df4:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001e00:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001e04:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001e10:	e1ffbe00 	mvns	fp, r0, lsl #28
20001e14:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001e20:	e1fffc00 	mvns	pc, r0, lsl #24
20001e24:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001e30:	e1fff800 	mvns	pc, r0, lsl #16
20001e34:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001e40:	e1fbf800 	mvns	pc, r0, lsl #16
20001e44:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001e50:	e0f1f000 	rscs	pc, r1, r0
20001e54:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001e60:	e0f0f000 	rscs	pc, r0, r0
20001e64:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001e70:	0000e000 	andeq	lr, r0, r0
20001e74:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001e84:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
20001ea4:	00080000 	andeq	r0, r8, r0
20001ea8:	00000000 	andeq	r0, r0, r0
20001eac:	c0000000 	andgt	r0, r0, r0
20001eb0:	00000003 	andeq	r0, r0, r3
20001eb4:	00080000 	andeq	r0, r8, r0
20001eb8:	00000000 	andeq	r0, r0, r0
20001ebc:	40000000 	andmi	r0, r0, r0
20001ec0:	00000004 	andeq	r0, r0, r4
20001ec4:	00080000 	andeq	r0, r8, r0
20001ec8:	00000000 	andeq	r0, r0, r0
20001ecc:	40000000 	andmi	r0, r0, r0
20001ed0:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20001ed4:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20001ed8:	00000004 	andeq	r0, r0, r4
20001edc:	40000000 	andmi	r0, r0, r0
20001ee0:	00209264 	eoreq	r9, r0, r4, ror #4
20001ee4:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20001ee8:	00000004 	andeq	r0, r0, r4
20001eec:	c0000000 	andgt	r0, r0, r0
20001ef0:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20001ef4:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20001ef8:	00000004 	andeq	r0, r0, r4
20001efc:	40000000 	andmi	r0, r0, r0
20001f00:	41040220 	tstmi	r4, r0, lsr #4
20001f04:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20001f08:	00000003 	andeq	r0, r0, r3
20001f0c:	40000000 	andmi	r0, r0, r0
20001f10:	80e39c20 	rschi	r9, r3, r0, lsr #24
20001f14:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20001f18:	00000002 	andeq	r0, r0, r2
	...
20001f24:	00000800 	andeq	r0, r0, r0, lsl #16
20001f28:	00000001 	andeq	r0, r0, r1
	...
20001f34:	00000800 	andeq	r0, r0, r0, lsl #16
20001f38:	00000001 	andeq	r0, r0, r1
	...

20001f6c <PlayerRightWins_bits>:
	...
20001f9c:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001fac:	00007ff0 	strdeq	r7, [r0], -r0
20001fb0:	00000000 	andeq	r0, r0, r0
20001fb4:	0007fc00 	andeq	pc, r7, r0, lsl #24
20001fb8:	00000000 	andeq	r0, r0, r0
20001fbc:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
20001fc0:	00000000 	andeq	r0, r0, r0
20001fc4:	001fff80 	andseq	pc, pc, r0, lsl #31
20001fc8:	00000000 	andeq	r0, r0, r0
20001fcc:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
20001fd0:	00000000 	andeq	r0, r0, r0
20001fd4:	003fff80 	eorseq	pc, pc, r0, lsl #31
20001fd8:	00000000 	andeq	r0, r0, r0
20001fdc:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
20001fe0:	00000000 	andeq	r0, r0, r0
20001fe4:	003e0f80 	eorseq	r0, lr, r0, lsl #31
20001fe8:	000000e0 	andeq	r0, r0, r0, ror #1
20001fec:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
20001ff0:	00000000 	andeq	r0, r0, r0
20001ff4:	003c0780 	eorseq	r0, ip, r0, lsl #15
20001ff8:	007000e0 	rsbseq	r0, r0, r0, ror #1
20001ffc:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20002000:	00000000 	andeq	r0, r0, r0
20002004:	00380700 	eorseq	r0, r8, r0, lsl #14
20002008:	007000e0 	rsbseq	r0, r0, r0, ror #1
2000200c:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20002010:	00000000 	andeq	r0, r0, r0
20002014:	00380f00 	eorseq	r0, r8, r0, lsl #30
20002018:	007001e0 	rsbseq	r0, r0, r0, ror #3
2000201c:	000e7870 	andeq	r7, lr, r0, ror r8
20002020:	00000000 	andeq	r0, r0, r0
20002024:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002028:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
2000202c:	000e7ff0 	strdeq	r7, [lr], -r0
20002030:	000fc000 	andeq	ip, pc, r0
20002034:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002038:	3ff001c0 	svccc	0x00f001c0
2000203c:	000e7ff0 	strdeq	r7, [lr], -r0
20002040:	001fe000 	andseq	lr, pc, r0
20002044:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002048:	3ffc01c0 	svccc	0x00fc01c0
2000204c:	000e3ff0 	strdeq	r3, [lr], -r0
20002050:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002054:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002058:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
2000205c:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20002060:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20002064:	000ffe03 	andeq	pc, pc, r3, lsl #28
20002068:	00fc03c0 	rscseq	r0, ip, r0, asr #7
2000206c:	3f0f00e0 	svccc	0x000f00e0
20002070:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20002074:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
20002078:	00e00780 	rsceq	r0, r0, r0, lsl #15
2000207c:	3f8700e0 	svccc	0x008700e0
20002080:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20002084:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
20002088:	00e0078f 	rsceq	r0, r0, pc, lsl #15
2000208c:	3f8700e0 	svccc	0x008700e0
20002090:	3f8ffbce 	svccc	0x008ffbce
20002094:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002098:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
2000209c:	7bc701e0 	blvc	1f1c2824 <startup-0xe3d7dc>
200020a0:	1f0ffbde 	svcne	0x000ffbde
200020a4:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200020a8:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
200020ac:	7bc701e0 	blvc	1f1c2834 <startup-0xe3d7cc>
200020b0:	0f0fbbfe 	svceq	0x000fbbfe
200020b4:	e783cf00 	str	ip, [r3, r0, lsl #30]
200020b8:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
200020bc:	7bc701c0 	blvc	1f1c27c4 <startup-0xe3d83c>
200020c0:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200020c4:	e7838f00 	str	r8, [r3, r0, lsl #30]
200020c8:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
200020cc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200020d0:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200020d4:	e7838f00 	str	r8, [r3, r0, lsl #30]
200020d8:	01e39e3c 	mvneq	r9, ip, lsr lr
200020dc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200020e0:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200020e4:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200020e8:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200020ec:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200020f0:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200020f4:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200020f8:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200020fc:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20002100:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20002104:	e3838380 	orr	r8, r3, #128, 6
20002108:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
2000210c:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20002110:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002114:	e3838380 	orr	r8, r3, #128, 6
20002118:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
2000211c:	df800070 	svcle	0x00800070
20002120:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002124:	e3838380 	orr	r8, r3, #128, 6
20002128:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
2000212c:	c0000000 	andgt	r0, r0, r0
20002130:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002134:	c3838380 	orrgt	r8, r3, #128, 6
20002138:	0383803f 	orreq	r8, r3, #63	; 0x3f
2000213c:	00000000 	andeq	r0, r0, r0
20002140:	000007c0 	andeq	r0, r0, r0, asr #15
20002144:	c3838380 	orrgt	r8, r3, #128, 6
20002148:	0380003f 	orreq	r0, r0, #63	; 0x3f
2000214c:	00000000 	andeq	r0, r0, r0
20002150:	000003e7 	andeq	r0, r0, r7, ror #7
20002154:	03838000 	orreq	r8, r3, #0
20002158:	0000003c 	andeq	r0, r0, ip, lsr r0
2000215c:	00000000 	andeq	r0, r0, r0
20002160:	000003ef 	andeq	r0, r0, pc, ror #7
20002164:	00000000 	andeq	r0, r0, r0
20002168:	0000003c 	andeq	r0, r0, ip, lsr r0
2000216c:	00000000 	andeq	r0, r0, r0
20002170:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002174:	70000000 	andvc	r0, r0, r0
20002178:	0000001c 	andeq	r0, r0, ip, lsl r0
2000217c:	00000000 	andeq	r0, r0, r0
20002180:	e38000ff 	orr	r0, r0, #255	; 0xff
20002184:	70000038 	andvc	r0, r0, r8, lsr r0
20002188:	0000001e 	andeq	r0, r0, lr, lsl r0
2000218c:	00000000 	andeq	r0, r0, r0
20002190:	e38e007e 	orr	r0, lr, #126	; 0x7e
20002194:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
20002198:	0000001e 	andeq	r0, r0, lr, lsl r0
2000219c:	00000000 	andeq	r0, r0, r0
200021a0:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200021a4:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
200021a8:	0000001f 	andeq	r0, r0, pc, lsl r0
200021ac:	00000000 	andeq	r0, r0, r0
200021b0:	e38ee700 	orr	lr, lr, #0, 14
200021b4:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
200021b8:	0000000f 	andeq	r0, r0, pc
200021bc:	00000000 	andeq	r0, r0, r0
200021c0:	e38ee700 	orr	lr, lr, #0, 14
200021c4:	e03f1df8 	ldrsht	r1, [pc], -r8
200021c8:	0000000f 	andeq	r0, r0, pc
200021cc:	00000000 	andeq	r0, r0, r0
200021d0:	e3cfef00 	bic	lr, pc, #0, 30
200021d4:	c03f9df8 	ldrshtgt	r9, [pc], -r8
200021d8:	00000007 	andeq	r0, r0, r7
200021dc:	00000000 	andeq	r0, r0, r0
200021e0:	e3cfef00 	bic	lr, pc, #0, 30
200021e4:	00079ff8 	strdeq	r9, [r7], -r8
	...
200021f0:	e3cfde00 	bic	sp, pc, #0, 28
200021f4:	00079ff8 	strdeq	r9, [r7], -r8
	...
20002200:	e1dffe00 	bics	pc, pc, r0, lsl #28
20002204:	00079ff8 	strdeq	r9, [r7], -r8
	...
20002210:	e1ffbe00 	mvns	fp, r0, lsl #28
20002214:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20002220:	e1fffc00 	mvns	pc, r0, lsl #24
20002224:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20002230:	e1fff800 	mvns	pc, r0, lsl #16
20002234:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20002240:	e1fbf800 	mvns	pc, r0, lsl #16
20002244:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20002250:	e0f1f000 	rscs	pc, r1, r0
20002254:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20002260:	e0f0f000 	rscs	pc, r0, r0
20002264:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20002270:	0000e000 	andeq	lr, r0, r0
20002274:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20002284:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

2000236c <PlayerRightWinsWithText_bits>:
	...
2000239c:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
200023ac:	00007ff0 	strdeq	r7, [r0], -r0
200023b0:	00000000 	andeq	r0, r0, r0
200023b4:	0007fc00 	andeq	pc, r7, r0, lsl #24
200023b8:	00000000 	andeq	r0, r0, r0
200023bc:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
200023c0:	00000000 	andeq	r0, r0, r0
200023c4:	001fff80 	andseq	pc, pc, r0, lsl #31
200023c8:	00000000 	andeq	r0, r0, r0
200023cc:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
200023d0:	00000000 	andeq	r0, r0, r0
200023d4:	003fff80 	eorseq	pc, pc, r0, lsl #31
200023d8:	00000000 	andeq	r0, r0, r0
200023dc:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
200023e0:	00000000 	andeq	r0, r0, r0
200023e4:	003e0f80 	eorseq	r0, lr, r0, lsl #31
200023e8:	000000e0 	andeq	r0, r0, r0, ror #1
200023ec:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
200023f0:	00000000 	andeq	r0, r0, r0
200023f4:	003c0780 	eorseq	r0, ip, r0, lsl #15
200023f8:	007000e0 	rsbseq	r0, r0, r0, ror #1
200023fc:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20002400:	00000000 	andeq	r0, r0, r0
20002404:	00380700 	eorseq	r0, r8, r0, lsl #14
20002408:	007000e0 	rsbseq	r0, r0, r0, ror #1
2000240c:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20002410:	00000000 	andeq	r0, r0, r0
20002414:	00380f00 	eorseq	r0, r8, r0, lsl #30
20002418:	007001e0 	rsbseq	r0, r0, r0, ror #3
2000241c:	000e7870 	andeq	r7, lr, r0, ror r8
20002420:	00000000 	andeq	r0, r0, r0
20002424:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002428:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
2000242c:	000e7ff0 	strdeq	r7, [lr], -r0
20002430:	000fc000 	andeq	ip, pc, r0
20002434:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002438:	3ff001c0 	svccc	0x00f001c0
2000243c:	000e7ff0 	strdeq	r7, [lr], -r0
20002440:	001fe000 	andseq	lr, pc, r0
20002444:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002448:	3ffc01c0 	svccc	0x00fc01c0
2000244c:	000e3ff0 	strdeq	r3, [lr], -r0
20002450:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002454:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002458:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
2000245c:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20002460:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20002464:	000ffe03 	andeq	pc, pc, r3, lsl #28
20002468:	00fc03c0 	rscseq	r0, ip, r0, asr #7
2000246c:	3f0f00e0 	svccc	0x000f00e0
20002470:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20002474:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
20002478:	00e00780 	rsceq	r0, r0, r0, lsl #15
2000247c:	3f8700e0 	svccc	0x008700e0
20002480:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20002484:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
20002488:	00e0078f 	rsceq	r0, r0, pc, lsl #15
2000248c:	3f8700e0 	svccc	0x008700e0
20002490:	3f8ffbce 	svccc	0x008ffbce
20002494:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002498:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
2000249c:	7bc701e0 	blvc	1f1c2c24 <startup-0xe3d3dc>
200024a0:	1f0ffbde 	svcne	0x000ffbde
200024a4:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200024a8:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
200024ac:	7bc701e0 	blvc	1f1c2c34 <startup-0xe3d3cc>
200024b0:	0f0fbbfe 	svceq	0x000fbbfe
200024b4:	e783cf00 	str	ip, [r3, r0, lsl #30]
200024b8:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
200024bc:	7bc701c0 	blvc	1f1c2bc4 <startup-0xe3d43c>
200024c0:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200024c4:	e7838f00 	str	r8, [r3, r0, lsl #30]
200024c8:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
200024cc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200024d0:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200024d4:	e7838f00 	str	r8, [r3, r0, lsl #30]
200024d8:	01e39e3c 	mvneq	r9, ip, lsr lr
200024dc:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200024e0:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200024e4:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200024e8:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200024ec:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200024f0:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200024f4:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200024f8:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200024fc:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20002500:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20002504:	e3838380 	orr	r8, r3, #128, 6
20002508:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
2000250c:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20002510:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002514:	e3838380 	orr	r8, r3, #128, 6
20002518:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
2000251c:	df800070 	svcle	0x00800070
20002520:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002524:	e3838380 	orr	r8, r3, #128, 6
20002528:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
2000252c:	c0000000 	andgt	r0, r0, r0
20002530:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002534:	c3838380 	orrgt	r8, r3, #128, 6
20002538:	0383803f 	orreq	r8, r3, #63	; 0x3f
2000253c:	00000000 	andeq	r0, r0, r0
20002540:	000007c0 	andeq	r0, r0, r0, asr #15
20002544:	c3838380 	orrgt	r8, r3, #128, 6
20002548:	0380003f 	orreq	r0, r0, #63	; 0x3f
2000254c:	00000000 	andeq	r0, r0, r0
20002550:	000003e7 	andeq	r0, r0, r7, ror #7
20002554:	03838000 	orreq	r8, r3, #0
20002558:	0000003c 	andeq	r0, r0, ip, lsr r0
2000255c:	00000000 	andeq	r0, r0, r0
20002560:	000003ef 	andeq	r0, r0, pc, ror #7
20002564:	00000000 	andeq	r0, r0, r0
20002568:	0000003c 	andeq	r0, r0, ip, lsr r0
2000256c:	00000000 	andeq	r0, r0, r0
20002570:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002574:	70000000 	andvc	r0, r0, r0
20002578:	0000001c 	andeq	r0, r0, ip, lsl r0
2000257c:	00000000 	andeq	r0, r0, r0
20002580:	e38000ff 	orr	r0, r0, #255	; 0xff
20002584:	70000038 	andvc	r0, r0, r8, lsr r0
20002588:	0000001e 	andeq	r0, r0, lr, lsl r0
2000258c:	00000000 	andeq	r0, r0, r0
20002590:	e38e007e 	orr	r0, lr, #126	; 0x7e
20002594:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
20002598:	0000001e 	andeq	r0, r0, lr, lsl r0
2000259c:	00000000 	andeq	r0, r0, r0
200025a0:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200025a4:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
200025a8:	0000001f 	andeq	r0, r0, pc, lsl r0
200025ac:	00000000 	andeq	r0, r0, r0
200025b0:	e38ee700 	orr	lr, lr, #0, 14
200025b4:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
200025b8:	0000000f 	andeq	r0, r0, pc
200025bc:	00000000 	andeq	r0, r0, r0
200025c0:	e38ee700 	orr	lr, lr, #0, 14
200025c4:	e03f1df8 	ldrsht	r1, [pc], -r8
200025c8:	0000000f 	andeq	r0, r0, pc
200025cc:	00000000 	andeq	r0, r0, r0
200025d0:	e3cfef00 	bic	lr, pc, #0, 30
200025d4:	c03f9df8 	ldrshtgt	r9, [pc], -r8
200025d8:	00000007 	andeq	r0, r0, r7
200025dc:	00000000 	andeq	r0, r0, r0
200025e0:	e3cfef00 	bic	lr, pc, #0, 30
200025e4:	00079ff8 	strdeq	r9, [r7], -r8
	...
200025f0:	e3cfde00 	bic	sp, pc, #0, 28
200025f4:	00079ff8 	strdeq	r9, [r7], -r8
	...
20002600:	e1dffe00 	bics	pc, pc, r0, lsl #28
20002604:	00079ff8 	strdeq	r9, [r7], -r8
	...
20002610:	e1ffbe00 	mvns	fp, r0, lsl #28
20002614:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20002620:	e1fffc00 	mvns	pc, r0, lsl #24
20002624:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20002630:	e1fff800 	mvns	pc, r0, lsl #16
20002634:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20002640:	e1fbf800 	mvns	pc, r0, lsl #16
20002644:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20002650:	e0f1f000 	rscs	pc, r1, r0
20002654:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20002660:	e0f0f000 	rscs	pc, r0, r0
20002664:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20002670:	0000e000 	andeq	lr, r0, r0
20002674:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20002684:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
200026a4:	00080000 	andeq	r0, r8, r0
200026a8:	00000000 	andeq	r0, r0, r0
200026ac:	c0000000 	andgt	r0, r0, r0
200026b0:	00000003 	andeq	r0, r0, r3
200026b4:	00080000 	andeq	r0, r8, r0
200026b8:	00000000 	andeq	r0, r0, r0
200026bc:	40000000 	andmi	r0, r0, r0
200026c0:	00000004 	andeq	r0, r0, r4
200026c4:	00080000 	andeq	r0, r8, r0
200026c8:	00000000 	andeq	r0, r0, r0
200026cc:	40000000 	andmi	r0, r0, r0
200026d0:	81c70ca4 	bichi	r0, r7, r4, lsr #25
200026d4:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
200026d8:	00000004 	andeq	r0, r0, r4
200026dc:	40000000 	andmi	r0, r0, r0
200026e0:	00209264 	eoreq	r9, r0, r4, ror #4
200026e4:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
200026e8:	00000004 	andeq	r0, r0, r4
200026ec:	c0000000 	andgt	r0, r0, r0
200026f0:	80c31e23 	sbchi	r1, r3, r3, lsr #28
200026f4:	9e182493 	cfcmpsls	r2, mvf8, mvf3
200026f8:	00000004 	andeq	r0, r0, r4
200026fc:	40000000 	andmi	r0, r0, r0
20002700:	41040220 	tstmi	r4, r0, lsr #4
20002704:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20002708:	00000003 	andeq	r0, r0, r3
2000270c:	40000000 	andmi	r0, r0, r0
20002710:	80e39c20 	rschi	r9, r3, r0, lsr #24
20002714:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20002718:	00000002 	andeq	r0, r0, r2
	...
20002724:	00000800 	andeq	r0, r0, r0, lsl #16
20002728:	00000001 	andeq	r0, r0, r1
	...
20002734:	00000800 	andeq	r0, r0, r0, lsl #16
20002738:	00000001 	andeq	r0, r0, r1
	...

2000276c <StartmenuWithText_bits>:
	...
200027a8:	00fff000 	rscseq	pc, pc, r0
	...
200027b8:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
200027c8:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
200027d8:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
200027e8:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
200027f8:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
20002808:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
20002818:	0700003c 	smladxeq	r0, ip, r0, r0
2000281c:	003fc000 	eorseq	ip, pc, r0
	...
20002828:	0700001e 	smladeq	r0, lr, r0, r0
2000282c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002838:	0780001e 	usada8eq	r0, lr, r0, r0
2000283c:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002848:	0780000f 	streq	r0, [r0, pc]
2000284c:	01f9ffc0 	mvnseq	pc, r0, asr #31
20002850:	0000007f 	andeq	r0, r0, pc, ror r0
20002854:	00000000 	andeq	r0, r0, r0
20002858:	03c0000f 	biceq	r0, r0, #15
2000285c:	01f007c0 	mvnseq	r0, r0, asr #15
20002860:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
20002864:	00000038 	andeq	r0, r0, r8, lsr r0
20002868:	03c00007 	biceq	r0, r0, #7
2000286c:	81e00f80 	mvnhi	r0, r0, lsl #31
20002870:	003e01ff 	ldrshteq	r0, [lr], -pc
20002874:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
20002878:	03e00007 	mvneq	r0, #7
2000287c:	81c00f00 	bichi	r0, r0, r0, lsl #30
20002880:	003e03e7 	eorseq	r0, lr, r7, ror #7
20002884:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
20002888:	01e00007 	mvneq	r0, r7
2000288c:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
20002890:	007c03e3 	rsbseq	r0, ip, r3, ror #7
20002894:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
20002898:	01f00003 	mvnseq	r0, r3
2000289c:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
200028a0:	007c07c3 	rsbseq	r0, ip, r3, asr #15
200028a4:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
200028a8:	00f80003 	rscseq	r0, r8, r3
200028ac:	e1c01e00 	bic	r1, r0, r0, lsl #28
200028b0:	00f80781 	rscseq	r0, r8, r1, lsl #15
200028b4:	0001fc0f 	andeq	pc, r1, pc, lsl #24
200028b8:	007c0000 	rsbseq	r0, ip, r0
200028bc:	e1c01c00 	bic	r1, r0, r0, lsl #24
200028c0:	00f80781 	rscseq	r0, r8, r1, lsl #15
200028c4:	00007e0f 	andeq	r7, r0, pc, lsl #28
200028c8:	003e0000 	eorseq	r0, lr, r0
200028cc:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
200028d0:	81f00f00 	mvnshi	r0, r0, lsl #30
200028d4:	00003e07 	andeq	r3, r0, r7, lsl #28
200028d8:	001f8000 	andseq	r8, pc, r0
200028dc:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
200028e0:	81f00f00 	mvnshi	r0, r0, lsl #30
200028e4:	00001f07 	andeq	r1, r0, r7, lsl #30
200028e8:	000fe000 	andeq	lr, pc, r0
200028ec:	70fff800 	rscsvc	pc, pc, r0, lsl #16
200028f0:	83e00f00 	mvnhi	r0, #0, 30
200028f4:	00000f07 	andeq	r0, r0, r7, lsl #30
200028f8:	0007f000 	andeq	pc, r7, r0
200028fc:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002900:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
20002904:	00000783 	andeq	r0, r0, r3, lsl #15
20002908:	0001f800 	andeq	pc, r1, r0, lsl #16
2000290c:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002910:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
20002914:	00ff0783 	rscseq	r0, pc, r3, lsl #15
20002918:	0000fc00 	andeq	pc, r0, r0, lsl #24
2000291c:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
20002920:	8fe03c00 	svchi	0x00e03c00
20002924:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002928:	00003e00 	andeq	r3, r0, r0, lsl #28
2000292c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002930:	9fe03c00 	svcls	0x00e03c00
20002934:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002938:	00001f00 	andeq	r1, r0, r0, lsl #30
2000293c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002940:	9fe03c00 	svcls	0x00e03c00
20002944:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002948:	00001f00 	andeq	r1, r0, r0, lsl #30
2000294c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002950:	bdc03c00 	stcllt	12, cr3, [r0]
20002954:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002958:	00000f80 	andeq	r0, r0, r0, lsl #31
2000295c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002960:	fdc01c00 	stc2l	12, cr1, [r0]
20002964:	01e079c3 	mvneq	r7, r3, asr #19
20002968:	00000780 	andeq	r0, r0, r0, lsl #15
2000296c:	78007000 	stmdavc	r0, {ip, sp, lr}
20002970:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002974:	01e039c3 	mvneq	r3, r3, asr #19
20002978:	000003c0 	andeq	r0, r0, r0, asr #7
2000297c:	78007000 	stmdavc	r0, {ip, sp, lr}
20002980:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002984:	01c001c3 	biceq	r0, r0, r3, asr #3
20002988:	000003e0 	andeq	r0, r0, r0, ror #7
2000298c:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002990:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
20002994:	01c001c3 	biceq	r0, r0, r3, asr #3
20002998:	000001e0 	andeq	r0, r0, r0, ror #3
2000299c:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
200029a0:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
200029a4:	01c001c3 	biceq	r0, r0, r3, asr #3
200029a8:	000000e0 	andeq	r0, r0, r0, ror #1
200029ac:	e0007000 	and	r7, r0, r0
200029b0:	e1c00f01 	bic	r0, r0, r1, lsl #30
200029b4:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
200029b8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200029bc:	e0007000 	and	r7, r0, r0
200029c0:	e1c00781 	bic	r0, r0, r1, lsl #15
200029c4:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
200029c8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200029cc:	e0007800 	and	r7, r0, r0, lsl #16
200029d0:	c1c007c7 	bicgt	r0, r0, r7, asr #15
200029d4:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
200029d8:	00000070 	andeq	r0, r0, r0, ror r0
200029dc:	c0007800 	andgt	r7, r0, r0, lsl #16
200029e0:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
200029e4:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
200029e8:	00000078 	andeq	r0, r0, r8, ror r0
200029ec:	80003c00 	andhi	r3, r0, r0, lsl #24
200029f0:	81c001ff 	strdhi	r0, [r0, #31]
200029f4:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
200029f8:	1ff00078 	svcne	0x00f00078
200029fc:	00003e00 	andeq	r3, r0, r0, lsl #28
20002a00:	81c001fe 	strdhi	r0, [r0, #30]
20002a04:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002a08:	1fff0078 	svcne	0x00ff0078
20002a0c:	00001e00 	andeq	r1, r0, r0, lsl #28
20002a10:	81e000f8 	strdhi	r0, [r0, #8]!
20002a14:	039fff03 	orrseq	pc, pc, #3, 30
20002a18:	1fffe078 	svcne	0x00ffe078
20002a1c:	00001e00 	andeq	r1, r0, r0, lsl #28
20002a20:	81e00000 	mvnhi	r0, r0
20002a24:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002a28:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002a2c:	00000000 	andeq	r0, r0, r0
20002a30:	80e00000 	rschi	r0, r0, r0
20002a34:	0381f003 	orreq	pc, r1, #3
20002a38:	0003fff8 	strdeq	pc, [r3], -r8
20002a3c:	00000000 	andeq	r0, r0, r0
20002a40:	00e00000 	rsceq	r0, r0, r0
20002a44:	03800000 	orreq	r0, r0, #0
20002a48:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002a54:	07800000 	streq	r0, [r0, r0]
	...
20002a64:	07800000 	streq	r0, [r0, r0]
	...
20002a74:	07000000 	streq	r0, [r0, -r0]
	...
20002a84:	07000000 	streq	r0, [r0, -r0]
	...
20002a94:	07000000 	streq	r0, [r0, -r0]
	...
20002aa4:	07080000 	streq	r0, [r8, -r0]
20002aa8:	00000000 	andeq	r0, r0, r0
20002aac:	c0000000 	andgt	r0, r0, r0
20002ab0:	00000003 	andeq	r0, r0, r3
20002ab4:	00080000 	andeq	r0, r8, r0
20002ab8:	00000000 	andeq	r0, r0, r0
20002abc:	40000000 	andmi	r0, r0, r0
20002ac0:	00000004 	andeq	r0, r0, r4
20002ac4:	00080000 	andeq	r0, r8, r0
20002ac8:	00000000 	andeq	r0, r0, r0
20002acc:	40000000 	andmi	r0, r0, r0
20002ad0:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20002ad4:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20002ad8:	00000004 	andeq	r0, r0, r4
20002adc:	40000000 	andmi	r0, r0, r0
20002ae0:	00209264 	eoreq	r9, r0, r4, ror #4
20002ae4:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20002ae8:	00000004 	andeq	r0, r0, r4
20002aec:	c0000000 	andgt	r0, r0, r0
20002af0:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20002af4:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20002af8:	00000004 	andeq	r0, r0, r4
20002afc:	40000000 	andmi	r0, r0, r0
20002b00:	41040220 	tstmi	r4, r0, lsr #4
20002b04:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20002b08:	00000003 	andeq	r0, r0, r3
20002b0c:	40000000 	andmi	r0, r0, r0
20002b10:	80e39c20 	rschi	r9, r3, r0, lsr #24
20002b14:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20002b18:	00000002 	andeq	r0, r0, r2
	...
20002b24:	00000800 	andeq	r0, r0, r0, lsl #16
20002b28:	00000001 	andeq	r0, r0, r1
	...
20002b34:	00000800 	andeq	r0, r0, r0, lsl #16
20002b38:	00000001 	andeq	r0, r0, r1
	...

20002b6c <Startmenu_bits>:
	...
20002ba8:	00fff000 	rscseq	pc, pc, r0
	...
20002bb8:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
20002bc8:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
20002bd8:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
20002be8:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
20002bf8:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
20002c08:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
20002c18:	0700003c 	smladxeq	r0, ip, r0, r0
20002c1c:	003fc000 	eorseq	ip, pc, r0
	...
20002c28:	0700001e 	smladeq	r0, lr, r0, r0
20002c2c:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002c38:	0780001e 	usada8eq	r0, lr, r0, r0
20002c3c:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002c48:	0780000f 	streq	r0, [r0, pc]
20002c4c:	01f9ffc0 	mvnseq	pc, r0, asr #31
20002c50:	0000007f 	andeq	r0, r0, pc, ror r0
20002c54:	00000000 	andeq	r0, r0, r0
20002c58:	03c0000f 	biceq	r0, r0, #15
20002c5c:	01f007c0 	mvnseq	r0, r0, asr #15
20002c60:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
20002c64:	00000038 	andeq	r0, r0, r8, lsr r0
20002c68:	03c00007 	biceq	r0, r0, #7
20002c6c:	81e00f80 	mvnhi	r0, r0, lsl #31
20002c70:	003e01ff 	ldrshteq	r0, [lr], -pc
20002c74:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
20002c78:	03e00007 	mvneq	r0, #7
20002c7c:	81c00f00 	bichi	r0, r0, r0, lsl #30
20002c80:	003e03e7 	eorseq	r0, lr, r7, ror #7
20002c84:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
20002c88:	01e00007 	mvneq	r0, r7
20002c8c:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
20002c90:	007c03e3 	rsbseq	r0, ip, r3, ror #7
20002c94:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
20002c98:	01f00003 	mvnseq	r0, r3
20002c9c:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
20002ca0:	007c07c3 	rsbseq	r0, ip, r3, asr #15
20002ca4:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
20002ca8:	00f80003 	rscseq	r0, r8, r3
20002cac:	e1c01e00 	bic	r1, r0, r0, lsl #28
20002cb0:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002cb4:	0001fc0f 	andeq	pc, r1, pc, lsl #24
20002cb8:	007c0000 	rsbseq	r0, ip, r0
20002cbc:	e1c01c00 	bic	r1, r0, r0, lsl #24
20002cc0:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002cc4:	00007e0f 	andeq	r7, r0, pc, lsl #28
20002cc8:	003e0000 	eorseq	r0, lr, r0
20002ccc:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
20002cd0:	81f00f00 	mvnshi	r0, r0, lsl #30
20002cd4:	00003e07 	andeq	r3, r0, r7, lsl #28
20002cd8:	001f8000 	andseq	r8, pc, r0
20002cdc:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
20002ce0:	81f00f00 	mvnshi	r0, r0, lsl #30
20002ce4:	00001f07 	andeq	r1, r0, r7, lsl #30
20002ce8:	000fe000 	andeq	lr, pc, r0
20002cec:	70fff800 	rscsvc	pc, pc, r0, lsl #16
20002cf0:	83e00f00 	mvnhi	r0, #0, 30
20002cf4:	00000f07 	andeq	r0, r0, r7, lsl #30
20002cf8:	0007f000 	andeq	pc, r7, r0
20002cfc:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002d00:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
20002d04:	00000783 	andeq	r0, r0, r3, lsl #15
20002d08:	0001f800 	andeq	pc, r1, r0, lsl #16
20002d0c:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002d10:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
20002d14:	00ff0783 	rscseq	r0, pc, r3, lsl #15
20002d18:	0000fc00 	andeq	pc, r0, r0, lsl #24
20002d1c:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
20002d20:	8fe03c00 	svchi	0x00e03c00
20002d24:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002d28:	00003e00 	andeq	r3, r0, r0, lsl #28
20002d2c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d30:	9fe03c00 	svcls	0x00e03c00
20002d34:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002d38:	00001f00 	andeq	r1, r0, r0, lsl #30
20002d3c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d40:	9fe03c00 	svcls	0x00e03c00
20002d44:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002d48:	00001f00 	andeq	r1, r0, r0, lsl #30
20002d4c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d50:	bdc03c00 	stcllt	12, cr3, [r0]
20002d54:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002d58:	00000f80 	andeq	r0, r0, r0, lsl #31
20002d5c:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d60:	fdc01c00 	stc2l	12, cr1, [r0]
20002d64:	01e079c3 	mvneq	r7, r3, asr #19
20002d68:	00000780 	andeq	r0, r0, r0, lsl #15
20002d6c:	78007000 	stmdavc	r0, {ip, sp, lr}
20002d70:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002d74:	01e039c3 	mvneq	r3, r3, asr #19
20002d78:	000003c0 	andeq	r0, r0, r0, asr #7
20002d7c:	78007000 	stmdavc	r0, {ip, sp, lr}
20002d80:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002d84:	01c001c3 	biceq	r0, r0, r3, asr #3
20002d88:	000003e0 	andeq	r0, r0, r0, ror #7
20002d8c:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002d90:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
20002d94:	01c001c3 	biceq	r0, r0, r3, asr #3
20002d98:	000001e0 	andeq	r0, r0, r0, ror #3
20002d9c:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002da0:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
20002da4:	01c001c3 	biceq	r0, r0, r3, asr #3
20002da8:	000000e0 	andeq	r0, r0, r0, ror #1
20002dac:	e0007000 	and	r7, r0, r0
20002db0:	e1c00f01 	bic	r0, r0, r1, lsl #30
20002db4:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002db8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002dbc:	e0007000 	and	r7, r0, r0
20002dc0:	e1c00781 	bic	r0, r0, r1, lsl #15
20002dc4:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002dc8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002dcc:	e0007800 	and	r7, r0, r0, lsl #16
20002dd0:	c1c007c7 	bicgt	r0, r0, r7, asr #15
20002dd4:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
20002dd8:	00000070 	andeq	r0, r0, r0, ror r0
20002ddc:	c0007800 	andgt	r7, r0, r0, lsl #16
20002de0:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
20002de4:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
20002de8:	00000078 	andeq	r0, r0, r8, ror r0
20002dec:	80003c00 	andhi	r3, r0, r0, lsl #24
20002df0:	81c001ff 	strdhi	r0, [r0, #31]
20002df4:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
20002df8:	1ff00078 	svcne	0x00f00078
20002dfc:	00003e00 	andeq	r3, r0, r0, lsl #28
20002e00:	81c001fe 	strdhi	r0, [r0, #30]
20002e04:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002e08:	1fff0078 	svcne	0x00ff0078
20002e0c:	00001e00 	andeq	r1, r0, r0, lsl #28
20002e10:	81e000f8 	strdhi	r0, [r0, #8]!
20002e14:	039fff03 	orrseq	pc, pc, #3, 30
20002e18:	1fffe078 	svcne	0x00ffe078
20002e1c:	00001e00 	andeq	r1, r0, r0, lsl #28
20002e20:	81e00000 	mvnhi	r0, r0
20002e24:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002e28:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002e2c:	00000000 	andeq	r0, r0, r0
20002e30:	80e00000 	rschi	r0, r0, r0
20002e34:	0381f003 	orreq	pc, r1, #3
20002e38:	0003fff8 	strdeq	pc, [r3], -r8
20002e3c:	00000000 	andeq	r0, r0, r0
20002e40:	00e00000 	rsceq	r0, r0, r0
20002e44:	03800000 	orreq	r0, r0, #0
20002e48:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002e54:	07800000 	streq	r0, [r0, r0]
	...
20002e64:	07800000 	streq	r0, [r0, r0]
	...
20002e74:	07000000 	streq	r0, [r0, -r0]
	...
20002e84:	07000000 	streq	r0, [r0, -r0]
	...
20002e94:	07000000 	streq	r0, [r0, -r0]
	...
20002ea4:	07000000 	streq	r0, [r0, -r0]
	...

20002f6c <copyright_bits>:
	...
20003064:	00000030 	andeq	r0, r0, r0, lsr r0
20003068:	00000000 	andeq	r0, r0, r0
2000306c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
20003070:	0c000000 	stceq	0, cr0, [r0], {-0}
20003074:	00003030 	andeq	r3, r0, r0, lsr r0
20003078:	00000000 	andeq	r0, r0, r0
2000307c:	4c000000 	stcmi	0, cr0, [r0], {-0}
20003080:	00000000 	andeq	r0, r0, r0
20003084:	00003030 	andeq	r3, r0, r0, lsr r0
20003088:	00000000 	andeq	r0, r0, r0
2000308c:	0c000000 	stceq	0, cr0, [r0], {-0}
20003090:	cf6ccf9e 	svcgt	0x006ccf9e
20003094:	0000f9f7 	strdeq	pc, [r0], -r7
20003098:	00000000 	andeq	r0, r0, r0
2000309c:	0c000000 	stceq	0, cr0, [r0], {-0}
200030a0:	6fecd9b3 	svcvs	0x00ecd9b3
200030a4:	00003336 	andeq	r3, r0, r6, lsr r3
200030a8:	00000000 	andeq	r0, r0, r0
200030ac:	0c000000 	stceq	0, cr0, [r0], {-0}
200030b0:	6c6799b3 			; <UNDEFINED> instruction: 0x6c6799b3
200030b4:	00003336 	andeq	r3, r0, r6, lsr r3
200030b8:	00000000 	andeq	r0, r0, r0
200030bc:	4c000000 	stcmi	0, cr0, [r0], {-0}
200030c0:	6c6799b3 			; <UNDEFINED> instruction: 0x6c6799b3
200030c4:	00003336 	andeq	r3, r0, r6, lsr r3
200030c8:	00000000 	andeq	r0, r0, r0
200030cc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
200030d0:	cc630f9e 	stclgt	15, cr0, [r3], #-632	; 0xfffffd88
200030d4:	0000e337 	andeq	lr, r0, r7, lsr r3
	...
200030e0:	00030180 	andeq	r0, r3, r0, lsl #3
200030e4:	00000006 	andeq	r0, r0, r6
	...
200030f0:	c0018180 	andgt	r8, r1, r0, lsl #3
200030f4:	00000003 	andeq	r0, r0, r3
	...
2000314c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
20003150:	07800000 	streq	r0, [r0, r0]
20003154:	00e00000 	rsceq	r0, r0, r0
20003158:	00000000 	andeq	r0, r0, r0
2000315c:	4c000000 	stcmi	0, cr0, [r0], {-0}
20003160:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
20003164:	01300000 	teqeq	r0, r0
20003168:	00000000 	andeq	r0, r0, r0
2000316c:	0c000000 	stceq	0, cr0, [r0], {-0}
20003170:	60c7cf9e 	smullvs	ip, r7, lr, pc	; <UNPREDICTABLE>
20003174:	78303e7b 	ldmdavc	r0!, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
20003178:	00000000 	andeq	r0, r0, r0
2000317c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
20003180:	e0ccd9b0 	strh	sp, [ip], #144	; 0x90
20003184:	cc3066cf 	ldcgt	6, cr6, [r0], #-828	; 0xfffffcc4
20003188:	00000000 	andeq	r0, r0, r0
2000318c:	60000000 	andvs	r0, r0, r0
20003190:	6eccd9be 			; <UNDEFINED> instruction: 0x6eccd9be
20003194:	cc3066fc 	ldcgt	6, cr6, [r0], #-1008	; 0xfffffc10
20003198:	00000000 	andeq	r0, r0, r0
2000319c:	64000000 	strvs	r0, [r0], #-0
200031a0:	6cccd9b3 			; <UNDEFINED> instruction: 0x6cccd9b3
200031a4:	cd30660c 	ldcgt	6, cr6, [r0, #-48]!	; 0xffffffd0
200031a8:	0000000c 	andeq	r0, r0, ip
200031ac:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
200031b0:	6f8cd9be 	svcvs	0x008cd9be
200031b4:	78e066f8 	stmiavc	r0!, {r3, r4, r5, r6, r7, r9, sl, sp, lr}^
200031b8:	0000000c 	andeq	r0, r0, ip
	...

2000336c <paddle_geometry>:
2000336c:	0000001c 	andeq	r0, r0, ip, lsl r0
20003370:	00000002 	andeq	r0, r0, r2
20003374:	0000000e 	andeq	r0, r0, lr
20003378:	01000000 	mrseq	r0, (UNDEF: 0)
2000337c:	03000200 	movweq	r0, #512	; 0x200
20003380:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20003384:	07000600 	streq	r0, [r0, -r0, lsl #12]
20003388:	09000800 	stmdbeq	r0, {fp}
2000338c:	0b000a00 	bleq	20005b94 <ball+0x2758>
20003390:	0d000c00 	stceq	12, cr0, [r0, #-0]
20003394:	01010001 	tsteq	r1, r1
20003398:	03010201 	movweq	r0, #4609	; 0x1201
2000339c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
200033a0:	07010601 	streq	r0, [r1, -r1, lsl #12]
200033a4:	09010801 	stmdbeq	r1, {r0, fp}
200033a8:	0b010a01 	bleq	20045bb4 <ball+0x42778>
200033ac:	0d010c01 	stceq	12, cr0, [r1, #-4]

200033b0 <paddle_left>:
200033b0:	2000336c 	andcs	r3, r0, ip, ror #6
	...
200033bc:	0000000a 	andeq	r0, r0, sl
200033c0:	00000019 	andeq	r0, r0, r9, lsl r0
200033c4:	2000060d 	andcs	r0, r0, sp, lsl #12
200033c8:	2000066f 	andcs	r0, r0, pc, ror #12
200033cc:	20000bcb 	andcs	r0, r0, fp, asr #23
200033d0:	20000a45 	andcs	r0, r0, r5, asr #20

200033d4 <paddle_right>:
200033d4:	2000336c 	andcs	r3, r0, ip, ror #6
	...
200033e0:	00000076 	andeq	r0, r0, r6, ror r0
200033e4:	00000019 	andeq	r0, r0, r9, lsl r0
200033e8:	2000060d 	andcs	r0, r0, sp, lsl #12
200033ec:	2000066f 	andcs	r0, r0, pc, ror #12
200033f0:	20000bcb 	andcs	r0, r0, fp, asr #23
200033f4:	20000a45 	andcs	r0, r0, r5, asr #20

200033f8 <ball_geometry>:
200033f8:	0000000c 	andeq	r0, r0, ip
200033fc:	00000004 	andeq	r0, r0, r4
20003400:	00000004 	andeq	r0, r0, r4
20003404:	02000100 	andeq	r0, r0, #0, 2
20003408:	01010001 	tsteq	r1, r1
2000340c:	03010201 	movweq	r0, #4609	; 0x1201
20003410:	01020002 	tsteq	r2, r2
20003414:	03020202 	movweq	r0, #8706	; 0x2202
20003418:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000343c <ball>:
2000343c:	200033f8 	strdcs	r3, [r0], -r8
	...
20003448:	00000040 	andeq	r0, r0, r0, asr #32
2000344c:	00000020 	andeq	r0, r0, r0, lsr #32
20003450:	2000060d 	andcs	r0, r0, sp, lsl #12
20003454:	2000066f 	andcs	r0, r0, pc, ror #12
20003458:	20000a65 	andcs	r0, r0, r5, ror #20
2000345c:	20000a45 	andcs	r0, r0, r5, asr #20
20003460:	0a030201 	beq	200c3c6c <ball+0xc0830>
20003464:	0b060504 	bleq	2018487c <ball+0x181440>
20003468:	0c090807 	stceq	8, cr0, [r9], {7}
2000346c:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4
20003470:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20003474:	4c207265 	sfmmi	f7, 4, [r0], #-404	; 0xfffffe6c
20003478:	3a746665 	bcc	21d1ce14 <ball+0x1d199d8>
2000347c:	00003020 	andeq	r3, r0, r0, lsr #32
20003480:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20003484:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
20003488:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
2000348c:	0030203a 	eorseq	r2, r0, sl, lsr r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000002ab 	andeq	r0, r0, fp, lsr #5
  10:	00063d0c 	andeq	r3, r6, ip, lsl #26
  14:	00041500 	andeq	r1, r4, r0, lsl #10
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	014b0200 	mrseq	r0, (UNDEF: 107)
  28:	3d080000 	stccc	0, cr0, [r8, #-0]
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000029d 	muleq	r0, sp, r2
  38:	00037504 	andeq	r7, r3, r4, lsl #10
  3c:	01070200 	mrseq	r0, (UNDEF: 39)
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0207 	strcs	r0, [sl, #-519]	; 0xfffffdf9
  4c:	00000000 	andeq	r0, r0, r0
  50:	07007905 	streq	r7, [r0, -r5, lsl #18]
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	00019402 	andeq	r9, r1, r2, lsl #8
  60:	02040700 	andeq	r0, r4, #0, 14
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00006004 	andeq	r6, r0, r4
  6c:	06074400 	streq	r4, [r7], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	02930600 	addseq	r0, r3, #0, 12
  78:	07070000 	streq	r0, [r7, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	2a060000 	bcs	180088 <startup-0x1fe7ff78>
  84:	07000002 	streq	r0, [r0, -r2]
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000230 	andeq	r0, r0, r0, lsr r2
  94:	a9060907 	stmdbge	r6, {r0, r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a07 	andlt	r0, r8, r7, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	ae070403 	cdpge	4, 0, cr0, cr7, cr3, {0}
  c4:	02000003 	andeq	r0, r0, #3
  c8:	0000010b 	andeq	r0, r0, fp, lsl #2
  cc:	68030b07 	stmdavs	r3, {r0, r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	0000010a 	andeq	r0, r0, sl, lsl #2
  d8:	df0e0b07 	svcle	0x000e0b07
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	04810400 	streq	r0, [r1], #1024	; 0x400
  e8:	07240000 	streq	r0, [r4, -r0]!
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	07006f65 	streq	r6, [r0, -r5, ror #30]
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	07007864 	streq	r7, [r0, -r4, ror #16]
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	07007964 	streq	r7, [r0, -r4, ror #18]
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	00000023 	andeq	r0, r0, r3, lsr #32
 11c:	a9061007 	stmdbge	r6, {r0, r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	0001b706 	andeq	fp, r1, r6, lsl #14
 128:	0b100700 	bleq	401d30 <startup-0x1fbfe2d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	05170610 	ldreq	r0, [r7, #-1552]	; 0xfffff9f0
 134:	11070000 	mrsne	r0, (UNDEF: 7)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	5e061400 	cfcpyspl	mvf1, mvf6
 140:	07000003 	streq	r0, [r0, -r3]
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	000006c8 	andeq	r0, r0, r8, asr #13
 150:	8d0a1307 	stchi	3, cr1, [sl, #-28]	; 0xffffffe4
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00052306 	andeq	r2, r5, r6, lsl #6
 15c:	0a140700 	beq	501d64 <startup-0x1fafe29c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	ff020000 			; <UNDEFINED> instruction: 0xff020000
 1b0:	07000005 	streq	r0, [r0, -r5]
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
 1bc:	07000005 	streq	r0, [r0, -r5]
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	25080000 	strcs	r0, [r8, #-0]
 1c8:	d7000000 	strle	r0, [r0, -r0]
 1cc:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d0:	000000c0 	andeq	r0, r0, r0, asr #1
 1d4:	0e0003ff 	mcreq	3, 0, r0, cr0, cr15, {7}
 1d8:	0000036a 	andeq	r0, r0, sl, ror #6
 1dc:	c6100102 	ldrgt	r0, [r0], -r2, lsl #2
 1e0:	05000001 	streq	r0, [r0, #-1]
 1e4:	00136803 	andseq	r6, r3, r3, lsl #16
 1e8:	02080f20 	andeq	r0, r8, #32, 30	; 0x80
 1ec:	021a09e2 	andseq	r0, sl, #3702784	; 0x388000
 1f0:	b1060000 	mrslt	r0, (UNDEF: 6)
 1f4:	02000001 	andeq	r0, r0, #1
 1f8:	003110e3 	eorseq	r1, r1, r3, ror #1
 1fc:	06000000 	streq	r0, [r0], -r0
 200:	000003a7 	andeq	r0, r0, r7, lsr #7
 204:	3110e402 	tstcc	r0, r2, lsl #8
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	00021f06 	andeq	r1, r2, r6, lsl #30
 210:	11e50200 	mvnne	r0, r0, lsl #4
 214:	0000021a 	andeq	r0, r0, sl, lsl r2
 218:	040a0004 	streq	r0, [sl], #-4
 21c:	00000031 	andeq	r0, r0, r1, lsr r0
 220:	0004f002 	andeq	pc, r4, r2
 224:	03e60200 	mvneq	r0, #0, 4
 228:	000001e9 	andeq	r0, r0, r9, ror #3
 22c:	00052d0e 	andeq	r2, r5, lr, lsl #26
 230:	10010400 	andne	r0, r1, r0, lsl #8
 234:	00000025 	andeq	r0, r0, r5, lsr #32
 238:	17680305 	strbne	r0, [r8, -r5, lsl #6]!
 23c:	610e2000 	mrsvs	r2, (UNDEF: 14)
 240:	04000001 	streq	r0, [r0], #-1
 244:	00251002 	eoreq	r1, r5, r2
 248:	03050000 	movweq	r0, #20480	; 0x5000
 24c:	20001769 	andcs	r1, r0, r9, ror #14
 250:	00003108 	andeq	r3, r0, r8, lsl #2
 254:	00026100 	andeq	r6, r2, r0, lsl #2
 258:	00c00d00 	sbceq	r0, r0, r0, lsl #26
 25c:	03ff0000 	mvnseq	r0, #0
 260:	007d0e00 	rsbseq	r0, sp, r0, lsl #28
 264:	03090000 	movweq	r0, #36864	; 0x9000
 268:	00025016 	andeq	r5, r2, r6, lsl r0
 26c:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
 270:	0e200017 	miaeq	acc0, r7, r0
 274:	0000009d 	muleq	r0, sp, r0
 278:	5016030a 	andspl	r0, r6, sl, lsl #6
 27c:	05000002 	streq	r0, [r0, #-2]
 280:	001b6c03 	andseq	r6, fp, r3, lsl #24
 284:	03d30e20 	bicseq	r0, r3, #32, 28	; 0x200
 288:	030b0000 	movweq	r0, #45056	; 0xb000
 28c:	00025016 	andeq	r5, r2, r6, lsl r0
 290:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
 294:	0e20001f 	miaeq	acc0, pc, r0
 298:	000004a3 	andeq	r0, r0, r3, lsr #9
 29c:	5016030c 	andspl	r0, r6, ip, lsl #6
 2a0:	05000002 	streq	r0, [r0, #-2]
 2a4:	00236c03 	eoreq	r6, r3, r3, lsl #24
 2a8:	019a0e20 	orrseq	r0, sl, r0, lsr #28
 2ac:	030d0000 	movweq	r0, #53248	; 0xd000
 2b0:	00025016 	andeq	r5, r2, r6, lsl r0
 2b4:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
 2b8:	0e200027 	cdpeq	0, 2, cr0, cr0, cr7, {1}
 2bc:	000001d8 	ldrdeq	r0, [r0], -r8
 2c0:	5016030e 	andspl	r0, r6, lr, lsl #6
 2c4:	05000002 	streq	r0, [r0, #-2]
 2c8:	002b6c03 	eoreq	r6, fp, r3, lsl #24
 2cc:	00000e20 	andeq	r0, r0, r0, lsr #28
 2d0:	030f0000 	movweq	r0, #61440	; 0xf000
 2d4:	00025016 	andeq	r5, r2, r6, lsl r0
 2d8:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
 2dc:	0e20002f 	cdpeq	0, 2, cr0, cr0, cr15, {1}
 2e0:	000000e8 	andeq	r0, r0, r8, ror #1
 2e4:	c7111f06 	ldrgt	r1, [r1, -r6, lsl #30]
 2e8:	05000000 	streq	r0, [r0, #-0]
 2ec:	00336c03 	eorseq	r6, r3, r3, lsl #24
 2f0:	02660e20 	rsbeq	r0, r6, #32, 28	; 0x200
 2f4:	20060000 	andcs	r0, r6, r0
 2f8:	0001ae0f 	andeq	sl, r1, pc, lsl #28
 2fc:	b0030500 	andlt	r0, r3, r0, lsl #10
 300:	0e200033 	mcreq	0, 1, r0, cr0, cr3, {1}
 304:	00000174 	andeq	r0, r0, r4, ror r1
 308:	ae0f2106 	adfgee	f2, f7, f6
 30c:	05000001 	streq	r0, [r0, #-1]
 310:	0033d403 	eorseq	sp, r3, r3, lsl #8
 314:	05800e20 	streq	r0, [r0, #3616]	; 0xe20
 318:	23060000 	movwcs	r0, #24576	; 0x6000
 31c:	0000c711 	andeq	ip, r0, r1, lsl r7
 320:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
 324:	0e200033 	mcreq	0, 1, r0, cr0, cr3, {1}
 328:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
 32c:	ae0f2406 	cdpge	4, 0, cr2, cr15, cr6, {0}
 330:	05000001 	streq	r0, [r0, #-1]
 334:	00343c03 	eorseq	r3, r4, r3, lsl #24
 338:	00b91020 	adcseq	r1, r9, r0, lsr #32
 33c:	0f060000 	svceq	0x00060000
 340:	12a40601 	adcne	r0, r4, #1048576	; 0x100000
 344:	00c02000 	sbceq	r2, r0, r0
 348:	9c010000 	stcls	0, cr0, [r1], {-0}
 34c:	000003a9 	andeq	r0, r0, r9, lsr #7
 350:	06006211 			; <UNDEFINED> instruction: 0x06006211
 354:	ba0a0111 	blt	2807a0 <startup-0x1fd7f860>
 358:	02000001 	andeq	r0, r0, #1
 35c:	c7127491 			; <UNDEFINED> instruction: 0xc7127491
 360:	06000005 	streq	r0, [r0], -r5
 364:	ba0a0112 	blt	2807b4 <startup-0x1fd7f84c>
 368:	02000001 	andeq	r0, r0, #1
 36c:	ff127091 			; <UNDEFINED> instruction: 0xff127091
 370:	06000003 	streq	r0, [r0], -r3
 374:	ba0a0113 	blt	2807c8 <startup-0x1fd7f838>
 378:	02000001 	andeq	r0, r0, #1
 37c:	da136c91 	ble	4db5c8 <startup-0x1fb24a38>
 380:	72200012 	eorvc	r0, r0, #18
 384:	12000000 	andne	r0, r0, #0
 388:	00000342 	andeq	r0, r0, r2, asr #6
 38c:	0b014206 	bleq	50bac <startup-0x1ffaf454>
 390:	00000025 	andeq	r0, r0, r5, lsr #32
 394:	126b9102 	rsbne	r9, fp, #-2147483648	; 0x80000000
 398:	00000272 	andeq	r0, r0, r2, ror r2
 39c:	0b014306 	bleq	50fbc <startup-0x1ffaf044>
 3a0:	00000025 	andeq	r0, r0, r5, lsr #32
 3a4:	006a9102 	rsbeq	r9, sl, r2, lsl #2
 3a8:	01531400 	cmpeq	r3, r0, lsl #8
 3ac:	d8060000 	stmdale	r6, {}	; <UNPREDICTABLE>
 3b0:	0000a905 	andeq	sl, r0, r5, lsl #18
 3b4:	00128000 	andseq	r8, r2, r0
 3b8:	00002420 	andeq	r2, r0, r0, lsr #8
 3bc:	e29c0100 	adds	r0, ip, #0, 2
 3c0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
 3c4:	00000561 	andeq	r0, r0, r1, ror #10
 3c8:	250ad906 	strcs	sp, [sl, #-2310]	; 0xfffff6fa
 3cc:	02000000 	andeq	r0, r0, #0
 3d0:	860e6f91 			; <UNDEFINED> instruction: 0x860e6f91
 3d4:	06000004 	streq	r0, [r0], -r4
 3d8:	00250ada 	ldrdeq	r0, [r5], -sl	; <UNPREDICTABLE>
 3dc:	91020000 	mrsls	r0, (UNDEF: 2)
 3e0:	9d15006e 	ldcls	0, cr0, [r5, #-440]	; 0xfffffe48
 3e4:	06000003 	streq	r0, [r0], -r3
 3e8:	1164069d 			; <UNDEFINED> instruction: 0x1164069d
 3ec:	011c2000 	tsteq	ip, r0
 3f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3f4:	00000450 	andeq	r0, r0, r0, asr r4
 3f8:	00025c0e 	andeq	r5, r2, lr, lsl #24
 3fc:	099e0600 	ldmibeq	lr, {r9, sl}
 400:	00000220 	andeq	r0, r0, r0, lsr #4
 404:	0e6c9102 	lgneqe	f1, f2
 408:	0000058e 	andeq	r0, r0, lr, lsl #11
 40c:	20099f06 	andcs	r9, r9, r6, lsl #30
 410:	02000002 	andeq	r0, r0, #2
 414:	340e6491 	strcc	r6, [lr], #-1169	; 0xfffffb6f
 418:	06000006 	streq	r0, [r0], -r6
 41c:	022009a0 	eoreq	r0, r0, #160, 18	; 0x280000
 420:	91020000 	mrsls	r0, (UNDEF: 2)
 424:	03350e5c 	teqeq	r5, #92, 28	; 0x5c0
 428:	a1060000 	mrsge	r0, (UNDEF: 6)
 42c:	00022009 	andeq	r2, r2, r9
 430:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 434:	0005610e 	andeq	r6, r5, lr, lsl #2
 438:	06a80600 	strteq	r0, [r8], r0, lsl #12
 43c:	000000a9 	andeq	r0, r0, r9, lsr #1
 440:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 444:	00000486 	andeq	r0, r0, r6, lsl #9
 448:	a906a906 	stmdbge	r6, {r1, r2, r8, fp, sp, pc}
 44c:	00000000 	andeq	r0, r0, r0
 450:	00009115 	andeq	r9, r0, r5, lsl r1
 454:	06790600 	ldrbteq	r0, [r9], -r0, lsl #12
 458:	200010d0 	ldrdcs	r1, [r0], -r0
 45c:	00000094 	muleq	r0, r4, r0
 460:	04a09c01 	strteq	r9, [r0], #3073	; 0xc01
 464:	330e0000 	movwcc	r0, #57344	; 0xe000
 468:	06000000 	streq	r0, [r0], -r0
 46c:	0220097a 	eoreq	r0, r0, #1998848	; 0x1e8000
 470:	91020000 	mrsls	r0, (UNDEF: 2)
 474:	002e0e6c 	eoreq	r0, lr, ip, ror #28
 478:	7b060000 	blvc	180480 <startup-0x1fe7fb80>
 47c:	00022009 	andeq	r2, r2, r9
 480:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 484:	0005610e 	andeq	r6, r5, lr, lsl #2
 488:	06800600 	streq	r0, [r0], r0, lsl #12
 48c:	000000a9 	andeq	r0, r0, r9, lsr #1
 490:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 494:	00000486 	andeq	r0, r0, r6, lsl #9
 498:	a9068106 	stmdbge	r6, {r1, r2, r8, pc}
 49c:	00000000 	andeq	r0, r0, r0
 4a0:	00069b15 	andeq	r9, r6, r5, lsl fp
 4a4:	066f0600 	strbteq	r0, [pc], -r0, lsl #12
 4a8:	20001090 	mulcs	r0, r0, r0
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	04c69c01 	strbeq	r9, [r6], #3073	; 0xc01
 4b4:	a00e0000 	andge	r0, lr, r0
 4b8:	06000006 	streq	r0, [r0], -r6
 4bc:	02200970 	eoreq	r0, r0, #112, 18	; 0x1c0000
 4c0:	91020000 	mrsls	r0, (UNDEF: 2)
 4c4:	e1170070 	tst	r7, r0, ror r0
 4c8:	06000005 	streq	r0, [r0], -r5
 4cc:	1042065d 	subne	r0, r2, sp, asr r6
 4d0:	004e2000 	subeq	r2, lr, r0
 4d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4d8:	000004fb 	strdeq	r0, [r0], -fp
 4dc:	00001c18 	andeq	r1, r0, r8, lsl ip
 4e0:	245d0600 	ldrbcs	r0, [sp], #-1536	; 0xfffffa00
 4e4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 4e8:	0e6c9102 	lgneqe	f1, f2
 4ec:	000005f7 	strdeq	r0, [r0], -r7
 4f0:	a9065e06 	stmdbge	r6, {r1, r2, r9, sl, fp, ip, lr}
 4f4:	02000000 	andeq	r0, r0, #0
 4f8:	17007491 			; <UNDEFINED> instruction: 0x17007491
 4fc:	0000011a 	andeq	r0, r0, sl, lsl r1
 500:	f4064006 	vst4.8	{d4-d7}, [r6], r6
 504:	4e20000f 	cdpmi	0, 2, cr0, cr0, cr15, {0}
 508:	01000000 	mrseq	r0, (UNDEF: 0)
 50c:	0005309c 	muleq	r5, ip, r0
 510:	001c1800 	andseq	r1, ip, r0, lsl #16
 514:	40060000 	andmi	r0, r6, r0
 518:	0001ba23 	andeq	fp, r1, r3, lsr #20
 51c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 520:	0005f70e 	andeq	pc, r5, lr, lsl #14
 524:	06410600 	strbeq	r0, [r1], -r0, lsl #12
 528:	000000a9 	andeq	r0, r0, r9, lsr #1
 52c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 530:	00040c19 	andeq	r0, r4, r9, lsl ip
 534:	06260600 	strteq	r0, [r6], -r0, lsl #12
 538:	20000fa8 	andcs	r0, r0, r8, lsr #31
 53c:	0000004c 	andeq	r0, r0, ip, asr #32
 540:	21199c01 	tstcs	r9, r1, lsl #24
 544:	06000006 	streq	r0, [r0], -r6
 548:	00000618 	andeq	r0, r0, r8, lsl r6
 54c:	000c2000 	andeq	r2, ip, r0
 550:	9c010000 	stcls	0, cr0, [r1], {-0}
 554:	0001c117 	andeq	ip, r1, r7, lsl r1
 558:	06830500 	streq	r0, [r3], r0, lsl #10
 55c:	20000f20 	andcs	r0, r0, r0, lsr #30
 560:	00000088 	andeq	r0, r0, r8, lsl #1
 564:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
 568:	731a0000 	tstvc	sl, #0
 56c:	09840500 	stmibeq	r4, {r8, sl}
 570:	00000596 	muleq	r0, r6, r5
 574:	0e6c9102 	lgneqe	f1, f2
 578:	000005c1 	andeq	r0, r0, r1, asr #11
 57c:	a3078505 	movwge	r8, #29957	; 0x7505
 580:	02000005 	andeq	r0, r0, #5
 584:	810e5c91 			; <UNDEFINED> instruction: 0x810e5c91
 588:	05000001 	streq	r0, [r0, #-1]
 58c:	05b30786 	ldreq	r0, [r3, #1926]!	; 0x786
 590:	91020000 	mrsls	r0, (UNDEF: 2)
 594:	040a004c 	streq	r0, [sl], #-76	; 0xffffffb4
 598:	0000059c 	muleq	r0, ip, r5
 59c:	a6080103 	strge	r0, [r8], -r3, lsl #2
 5a0:	08000002 	stmdaeq	r0, {r1}
 5a4:	0000059c 	muleq	r0, ip, r5
 5a8:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
 5ac:	0000c009 	andeq	ip, r0, r9
 5b0:	08000e00 	stmdaeq	r0, {r9, sl, fp}
 5b4:	0000059c 	muleq	r0, ip, r5
 5b8:	000005c3 	andeq	r0, r0, r3, asr #11
 5bc:	0000c009 	andeq	ip, r0, r9
 5c0:	17000f00 	strne	r0, [r0, -r0, lsl #30]
 5c4:	0000059c 	muleq	r0, ip, r5
 5c8:	e4067a05 	str	r7, [r6], #-2565	; 0xfffff5fb
 5cc:	3c20000e 	stccc	0, cr0, [r0], #-56	; 0xffffffc8
 5d0:	01000000 	mrseq	r0, (UNDEF: 0)
 5d4:	0005e79c 	muleq	r5, ip, r7
 5d8:	00631b00 	rsbeq	r1, r3, r0, lsl #22
 5dc:	31257a05 			; <UNDEFINED> instruction: 0x31257a05
 5e0:	02000000 	andeq	r0, r0, #0
 5e4:	17007791 			; <UNDEFINED> instruction: 0x17007791
 5e8:	000003f2 	strdeq	r0, [r0], -r2
 5ec:	96067005 	strls	r7, [r6], -r5
 5f0:	4e20000e 	cdpmi	0, 2, cr0, cr0, cr14, {0}
 5f4:	01000000 	mrseq	r0, (UNDEF: 0)
 5f8:	0006279c 	muleq	r6, ip, r7
 5fc:	00781b00 	rsbseq	r1, r8, r0, lsl #22
 600:	a9177005 	ldmdbge	r7, {r0, r2, ip, sp, lr}
 604:	02000000 	andeq	r0, r0, #0
 608:	791b6c91 	ldmdbvc	fp, {r0, r4, r7, sl, fp, sp, lr}
 60c:	1e700500 	cdpne	5, 7, cr0, cr0, cr0, {0}
 610:	000000a9 	andeq	r0, r0, r9, lsr #1
 614:	0e689102 	lgneqe	f1, f2
 618:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 61c:	31107305 	tstcc	r0, r5, lsl #6
 620:	02000000 	andeq	r0, r0, #0
 624:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 628:	000006df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 62c:	68066705 	stmdavs	r6, {r0, r2, r8, r9, sl, sp, lr}
 630:	2e20000e 	cdpcs	0, 2, cr0, cr0, cr14, {0}
 634:	01000000 	mrseq	r0, (UNDEF: 0)
 638:	0236179c 	eorseq	r1, r6, #156, 14	; 0x2700000
 63c:	60050000 	andvs	r0, r5, r0
 640:	000e2c06 	andeq	r2, lr, r6, lsl #24
 644:	00003c20 	andeq	r3, r0, r0, lsr #24
 648:	5f9c0100 	svcpl	0x009c0100
 64c:	18000006 	stmdane	r0, {r1, r2}
 650:	000000e0 	andeq	r0, r0, r0, ror #1
 654:	31226005 			; <UNDEFINED> instruction: 0x31226005
 658:	02000000 	andeq	r0, r0, #0
 65c:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
 660:	000006cd 	andeq	r0, r0, sp, asr #13
 664:	310f5605 	tstcc	pc, r5, lsl #12
 668:	ec000000 	stc	0, cr0, [r0], {-0}
 66c:	4020000d 	eormi	r0, r0, sp
 670:	01000000 	mrseq	r0, (UNDEF: 0)
 674:	0006889c 	muleq	r6, ip, r8
 678:	76721a00 	ldrbtvc	r1, [r2], -r0, lsl #20
 67c:	10580500 	subsne	r0, r8, r0, lsl #10
 680:	00000031 	andeq	r0, r0, r1, lsr r0
 684:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 688:	00037c14 	andeq	r7, r3, r4, lsl ip
 68c:	0f4c0500 	svceq	0x004c0500
 690:	00000031 	andeq	r0, r0, r1, lsr r0
 694:	20000dac 	andcs	r0, r0, ip, lsr #27
 698:	00000040 	andeq	r0, r0, r0, asr #32
 69c:	06b19c01 	ldrteq	r9, [r1], r1, lsl #24
 6a0:	721a0000 	andsvc	r0, sl, #0
 6a4:	4e050076 	mcrmi	0, 0, r0, cr5, cr6, {3}
 6a8:	00003110 	andeq	r3, r0, r0, lsl r1
 6ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6b0:	04c91400 	strbeq	r1, [r9], #1024	; 0x400
 6b4:	42050000 	andmi	r0, r5, #0
 6b8:	0000310f 	andeq	r3, r0, pc, lsl #2
 6bc:	000d7800 	andeq	r7, sp, r0, lsl #16
 6c0:	00003420 	andeq	r3, r0, r0, lsr #8
 6c4:	da9c0100 	ble	fe700acc <ball+0xde6fd690>
 6c8:	1a000006 	bne	6e8 <startup-0x1ffff918>
 6cc:	05007672 	streq	r7, [r0, #-1650]	; 0xfffff98e
 6d0:	00311043 	eorseq	r1, r1, r3, asr #32
 6d4:	91020000 	mrsls	r0, (UNDEF: 2)
 6d8:	f6170077 			; <UNDEFINED> instruction: 0xf6170077
 6dc:	05000001 	streq	r0, [r0, #-1]
 6e0:	0d480639 	stcleq	6, cr0, [r8, #-228]	; 0xffffff1c
 6e4:	00302000 	eorseq	r2, r0, r0
 6e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6ec:	00000700 	andeq	r0, r0, r0, lsl #14
 6f0:	0000e018 	andeq	lr, r0, r8, lsl r0
 6f4:	2b390500 	blcs	e41afc <startup-0x1f1be504>
 6f8:	00000031 	andeq	r0, r0, r1, lsr r0
 6fc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 700:	0004f717 	andeq	pc, r4, r7, lsl r7	; <UNPREDICTABLE>
 704:	06330500 	ldrteq	r0, [r3], -r0, lsl #10
 708:	20000d1e 	andcs	r0, r0, lr, lsl sp
 70c:	0000002a 	andeq	r0, r0, sl, lsr #32
 710:	07349c01 	ldreq	r9, [r4, -r1, lsl #24]!
 714:	1f180000 	svcne	0x00180000
 718:	05000002 	streq	r0, [r0, #-2]
 71c:	00312533 	eorseq	r2, r1, r3, lsr r5
 720:	91020000 	mrsls	r0, (UNDEF: 2)
 724:	01f61d77 	mvnseq	r1, r7, ror sp
 728:	30050000 	andcc	r0, r5, r0
 72c:	0000a902 	andeq	sl, r0, r2, lsl #18
 730:	00001e00 	andeq	r1, r0, r0, lsl #28
 734:	0006ea17 	andeq	lr, r6, r7, lsl sl
 738:	062d0500 	strteq	r0, [sp], -r0, lsl #10
 73c:	20000cf4 	strdcs	r0, [r0], -r4
 740:	0000002a 	andeq	r0, r0, sl, lsr #32
 744:	07689c01 	strbeq	r9, [r8, -r1, lsl #24]!
 748:	e0180000 	ands	r0, r8, r0
 74c:	05000000 	streq	r0, [r0, #-0]
 750:	0031242d 	eorseq	r2, r1, sp, lsr #8
 754:	91020000 	mrsls	r0, (UNDEF: 2)
 758:	01f61d77 	mvnseq	r1, r7, ror sp
 75c:	30050000 	andcc	r0, r5, r0
 760:	0000a902 	andeq	sl, r0, r2, lsl #18
 764:	00001e00 	andeq	r1, r0, r0, lsl #28
 768:	00027e1f 	andeq	r7, r2, pc, lsl lr
 76c:	06270500 	strteq	r0, [r7], -r0, lsl #10
 770:	20000cac 	andcs	r0, r0, ip, lsr #25
 774:	00000048 	andeq	r0, r0, r8, asr #32
 778:	079b9c01 	ldreq	r9, [fp, r1, lsl #24]
 77c:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 780:	29270500 	stmdbcs	r7!, {r8, sl}
 784:	00000031 	andeq	r0, r0, r1, lsr r0
 788:	0e6f9102 	lgneqe	f1, f2
 78c:	00000629 	andeq	r0, r0, r9, lsr #12
 790:	9c072805 	stcls	8, cr2, [r7], {5}
 794:	02000005 	andeq	r0, r0, #5
 798:	1f007791 	svcne	0x00007791
 79c:	0000006a 	andeq	r0, r0, sl, rrx
 7a0:	7c062305 	stcvc	3, cr2, [r6], {5}
 7a4:	3020000c 	eorcc	r0, r0, ip
 7a8:	01000000 	mrseq	r0, (UNDEF: 0)
 7ac:	0007bf9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
 7b0:	00781b00 	rsbseq	r1, r8, r0, lsl #22
 7b4:	31272305 			; <UNDEFINED> instruction: 0x31272305
 7b8:	02000000 	andeq	r0, r0, #0
 7bc:	17007791 			; <UNDEFINED> instruction: 0x17007791
 7c0:	00000017 	andeq	r0, r0, r7, lsl r0
 7c4:	ca063804 	bgt	18e7dc <startup-0x1fe71824>
 7c8:	b220000b 	eorlt	r0, r0, #11
 7cc:	01000000 	mrseq	r0, (UNDEF: 0)
 7d0:	0008019c 	muleq	r8, ip, r1
 7d4:	006f1b00 	rsbeq	r1, pc, r0, lsl #22
 7d8:	ba1a3804 	blt	68e7f0 <startup-0x1f971810>
 7dc:	02000001 	andeq	r0, r0, #1
 7e0:	bc186c91 	ldclt	12, cr6, [r8], {145}	; 0x91
 7e4:	04000005 	streq	r0, [r0], #-5
 7e8:	01ba2538 			; <UNDEFINED> instruction: 0x01ba2538
 7ec:	91020000 	mrsls	r0, (UNDEF: 2)
 7f0:	04e60e68 	strbteq	r0, [r6], #3688	; 0xe68
 7f4:	3d040000 	stccc	0, cr0, [r4, #-0]
 7f8:	0000a906 	andeq	sl, r0, r6, lsl #18
 7fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 800:	05412000 	strbeq	r2, [r1, #-0]
 804:	2c040000 	stccs	0, cr0, [r4], {-0}
 808:	00002509 	andeq	r2, r0, r9, lsl #10
 80c:	000b5c00 	andeq	r5, fp, r0, lsl #24
 810:	00006e20 	andeq	r6, r0, r0, lsr #28
 814:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
 818:	1b000008 	blne	840 <startup-0x1ffff7c0>
 81c:	2c04006f 	stccs	0, cr0, [r4], {111}	; 0x6f
 820:	0001ba25 	andeq	fp, r1, r5, lsr #20
 824:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 828:	0003ed18 	andeq	lr, r3, r8, lsl sp
 82c:	2c2c0400 	cfstrscs	mvf0, [ip], #-0
 830:	000000a9 	andeq	r0, r0, r9, lsr #1
 834:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
 838:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
 83c:	ba3a2c04 	blt	e8b854 <startup-0x1f1747ac>
 840:	02000001 	andeq	r0, r0, #1
 844:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
 848:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
 84c:	64060904 	strvs	r0, [r6], #-2308	; 0xfffff6fc
 850:	f820000a 			; <UNDEFINED> instruction: 0xf820000a
 854:	01000000 	mrseq	r0, (UNDEF: 0)
 858:	0008f09c 	muleq	r8, ip, r0
 85c:	006f1b00 	rsbeq	r1, pc, r0, lsl #22
 860:	ba180904 	blt	602c78 <startup-0x1f9fd388>
 864:	02000001 	andeq	r0, r0, #1
 868:	24186c91 	ldrcs	r6, [r8], #-3217	; 0xfffff36f
 86c:	04000002 	streq	r0, [r0], #-2
 870:	01ba2309 			; <UNDEFINED> instruction: 0x01ba2309
 874:	91020000 	mrsls	r0, (UNDEF: 2)
 878:	01bc0e68 			; <UNDEFINED> instruction: 0x01bc0e68
 87c:	0d040000 	stceq	0, cr0, [r4, #-0]
 880:	0000a906 	andeq	sl, r0, r6, lsl #18
 884:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 888:	0004e60e 	andeq	lr, r4, lr, lsl #12
 88c:	060e0400 	streq	r0, [lr], -r0, lsl #8
 890:	000000a9 	andeq	r0, r0, r9, lsr #1
 894:	21709102 	cmncs	r0, r2, lsl #2
 898:	20000a8c 	andcs	r0, r0, ip, lsl #21
 89c:	0000002c 	andeq	r0, r0, ip, lsr #32
 8a0:	000008c5 	andeq	r0, r0, r5, asr #17
 8a4:	0003f222 	andeq	pc, r3, r2, lsr #4
 8a8:	03140400 	tsteq	r4, #0, 8
 8ac:	000000a9 	andeq	r0, r0, r9, lsr #1
 8b0:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
 8b4:	9c1d001e 	ldcls	0, cr0, [sp], {30}
 8b8:	04000005 	streq	r0, [r0], #-5
 8bc:	00a90315 	adceq	r0, r9, r5, lsl r3
 8c0:	001e0000 	andseq	r0, lr, r0
 8c4:	0ac81300 	beq	ff2054cc <ball+0xdf202090>
 8c8:	002c2000 	eoreq	r2, ip, r0
 8cc:	f2220000 	vhadd.s32	d0, d2, d0
 8d0:	04000003 	streq	r0, [r0], #-3
 8d4:	00a90314 	adceq	r0, r9, r4, lsl r3
 8d8:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
 8dc:	001e0000 	andseq	r0, lr, r0
 8e0:	00059c1d 	andeq	r9, r5, sp, lsl ip
 8e4:	03150400 	tsteq	r5, #0, 8
 8e8:	000000a9 	andeq	r0, r0, r9, lsr #1
 8ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 8f0:	00038c1f 	andeq	r8, r3, pc, lsl ip
 8f4:	06040400 	streq	r0, [r4], -r0, lsl #8
 8f8:	20000a44 	andcs	r0, r0, r4, asr #20
 8fc:	00000020 	andeq	r0, r0, r0, lsr #32
 900:	09329c01 	ldmdbeq	r2!, {r0, sl, fp, ip, pc}
 904:	6f1b0000 	svcvs	0x001b0000
 908:	1f040400 	svcne	0x00040400
 90c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 910:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
 914:	00000144 	andeq	r0, r0, r4, asr #2
 918:	a9260404 	stmdbge	r6!, {r2, sl}
 91c:	02000000 	andeq	r0, r0, #0
 920:	1c187091 	ldcne	0, cr7, [r8], {145}	; 0x91
 924:	04000005 	streq	r0, [r0], #-5
 928:	00a93204 	adceq	r3, r9, r4, lsl #4
 92c:	91020000 	mrsls	r0, (UNDEF: 2)
 930:	0f14006c 	svceq	0x0014006c
 934:	03000000 	movweq	r0, #0
 938:	00310f3e 	eorseq	r0, r1, lr, lsr pc
 93c:	09ee0000 	stmibeq	lr!, {}^	; <UNPREDICTABLE>
 940:	00562000 	subseq	r2, r6, r0
 944:	9c010000 	stcls	0, cr0, [r1], {-0}
 948:	00000984 	andeq	r0, r0, r4, lsl #19
 94c:	0005f70e 	andeq	pc, r5, lr, lsl #14
 950:	073f0300 	ldreq	r0, [pc, -r0, lsl #6]!
 954:	0000059c 	muleq	r0, ip, r5
 958:	1a739102 	bne	1ce4d68 <startup-0x1e31b298>
 95c:	0079656b 	rsbseq	r6, r9, fp, ror #10
 960:	9c074003 	stcls	0, cr4, [r7], {3}
 964:	02000005 	andeq	r0, r0, #5
 968:	f4137291 			; <UNDEFINED> instruction: 0xf4137291
 96c:	46200009 	strtmi	r0, [r0], -r9
 970:	1a000000 	bne	978 <startup-0x1ffff688>
 974:	00776f72 	rsbseq	r6, r7, r2, ror pc
 978:	a90a4103 	stmdbge	sl, {r0, r1, r8, lr}
 97c:	02000000 	andeq	r0, r0, #0
 980:	00007491 	muleq	r0, r1, r4
 984:	0004c014 	andeq	ip, r4, r4, lsl r0
 988:	0f2f0300 	svceq	0x002f0300
 98c:	00000031 	andeq	r0, r0, r1, lsr r0
 990:	20000998 	mulcs	r0, r8, r9
 994:	00000056 	andeq	r0, r0, r6, asr r0
 998:	09d69c01 	ldmibeq	r6, {r0, sl, fp, ip, pc}^
 99c:	f70e0000 			; <UNDEFINED> instruction: 0xf70e0000
 9a0:	03000005 	movweq	r0, #5
 9a4:	059c0730 	ldreq	r0, [ip, #1840]	; 0x730
 9a8:	91020000 	mrsls	r0, (UNDEF: 2)
 9ac:	656b1a73 	strbvs	r1, [fp, #-2675]!	; 0xfffff58d
 9b0:	31030079 	tstcc	r3, r9, ror r0
 9b4:	00059c07 	andeq	r9, r5, r7, lsl #24
 9b8:	72910200 	addsvc	r0, r1, #0, 4
 9bc:	00099e13 	andeq	r9, r9, r3, lsl lr
 9c0:	00004620 	andeq	r4, r0, r0, lsr #12
 9c4:	6f721a00 	svcvs	0x00721a00
 9c8:	32030077 	andcc	r0, r3, #119	; 0x77
 9cc:	0000a90a 	andeq	sl, r0, sl, lsl #18
 9d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 9d4:	97230000 	strls	r0, [r3, -r0]!
 9d8:	03000004 	movweq	r0, #4
 9dc:	00a90529 	adceq	r0, r9, r9, lsr #10
 9e0:	09640000 	stmdbeq	r4!, {}^	; <UNPREDICTABLE>
 9e4:	00342000 	eorseq	r2, r4, r0
 9e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9ec:	00000a1e 	andeq	r0, r0, lr, lsl sl
 9f0:	776f721b 			; <UNDEFINED> instruction: 0x776f721b
 9f4:	15290300 	strne	r0, [r9, #-768]!	; 0xfffffd00
 9f8:	000000a9 	andeq	r0, r0, r9, lsr #1
 9fc:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
 a00:	000005f7 	strdeq	r0, [r0], -r7
 a04:	a91e2903 	ldmdbge	lr, {r0, r1, r8, fp, sp}
 a08:	02000000 	andeq	r0, r0, #0
 a0c:	070e5891 			; <UNDEFINED> instruction: 0x070e5891
 a10:	03000004 	movweq	r0, #4
 a14:	0a1e102a 	beq	784ac4 <startup-0x1f87b53c>
 a18:	91020000 	mrsls	r0, (UNDEF: 2)
 a1c:	31080060 	tstcc	r8, r0, rrx
 a20:	34000000 	strcc	r0, [r0], #-0
 a24:	0900000a 	stmdbeq	r0, {r1, r3}
 a28:	000000c0 	andeq	r0, r0, r0, asr #1
 a2c:	00c00903 	sbceq	r0, r0, r3, lsl #18
 a30:	00030000 	andeq	r0, r3, r0
 a34:	00032724 	andeq	r2, r3, r4, lsr #14
 a38:	05200300 	streq	r0, [r0, #-768]!	; 0xfffffd00
 a3c:	000000a9 	andeq	r0, r0, r9, lsr #1
 a40:	20000910 	andcs	r0, r0, r0, lsl r9
 a44:	00000054 	andeq	r0, r0, r4, asr r0
 a48:	0a5c9c01 	beq	1727a54 <startup-0x1e8d85ac>
 a4c:	631a0000 	tstvs	sl, #0
 a50:	10210300 	eorne	r0, r1, r0, lsl #6
 a54:	00000031 	andeq	r0, r0, r1, lsr r0
 a58:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a5c:	0001e724 	andeq	lr, r1, r4, lsr #14
 a60:	05170300 	ldreq	r0, [r7, #-768]	; 0xfffffd00
 a64:	000000a9 	andeq	r0, r0, r9, lsr #1
 a68:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 a6c:	00000054 	andeq	r0, r0, r4, asr r0
 a70:	0a849c01 	beq	fe127a7c <ball+0xde124640>
 a74:	631a0000 	tstvs	sl, #0
 a78:	10180300 	andsne	r0, r8, r0, lsl #6
 a7c:	00000031 	andeq	r0, r0, r1, lsr r0
 a80:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a84:	0005081f 	andeq	r0, r5, pc, lsl r8
 a88:	060d0300 	streq	r0, [sp], -r0, lsl #6
 a8c:	20000858 	andcs	r0, r0, r8, asr r8
 a90:	00000064 	andeq	r0, r0, r4, rrx
 a94:	0aaa9c01 	beq	feaa7aa0 <ball+0xdeaa4664>
 a98:	721b0000 	andsvc	r0, fp, #0
 a9c:	0300776f 	movweq	r7, #1903	; 0x76f
 aa0:	00a9190d 	adceq	r1, r9, sp, lsl #18
 aa4:	91020000 	mrsls	r0, (UNDEF: 2)
 aa8:	aa1f0074 	bge	7c0c80 <startup-0x1f83f380>
 aac:	03000006 	movweq	r0, #6
 ab0:	07f40603 	ldrbeq	r0, [r4, r3, lsl #12]!
 ab4:	00642000 	rsbeq	r2, r4, r0
 ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
 abc:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 ac0:	776f721b 			; <UNDEFINED> instruction: 0x776f721b
 ac4:	1a030300 	bne	c16cc <startup-0x1ff3e934>
 ac8:	000000a9 	andeq	r0, r0, r9, lsr #1
 acc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 ad0:	00061517 	andeq	r1, r6, r7, lsl r5
 ad4:	06ee0200 	strbteq	r0, [lr], r0, lsl #4
 ad8:	20000730 	andcs	r0, r0, r0, lsr r7
 adc:	000000c4 	andeq	r0, r0, r4, asr #1
 ae0:	0b6c9c01 	bleq	1b27aec <startup-0x1e4d8514>
 ae4:	731b0000 	tstvc	fp, #0
 ae8:	1aee0200 	bne	ffb812f0 <ball+0xdfb7deb4>
 aec:	00000b6c 	andeq	r0, r0, ip, ror #22
 af0:	1b5c9102 	blne	1724f00 <startup-0x1e8db100>
 af4:	ee020078 	mcr	0, 0, r0, cr2, cr8, {3}
 af8:	0000a921 	andeq	sl, r0, r1, lsr #18
 afc:	58910200 	ldmpl	r1, {r9}
 b00:	0200791b 	andeq	r7, r0, #442368	; 0x6c000
 b04:	00a928ee 	adceq	r2, r9, lr, ror #17
 b08:	91020000 	mrsls	r0, (UNDEF: 2)
 b0c:	65731b54 	ldrbvs	r1, [r3, #-2900]!	; 0xfffff4ac
 b10:	ee020074 	mcr	0, 0, r0, cr2, cr4, {3}
 b14:	0000a92f 	andeq	sl, r0, pc, lsr #18
 b18:	50910200 	addspl	r0, r1, r0, lsl #4
 b1c:	0200691a 	andeq	r6, r0, #425984	; 0x68000
 b20:	00a906ef 	adceq	r0, r9, pc, ror #13
 b24:	91020000 	mrsls	r0, (UNDEF: 2)
 b28:	006a1a74 	rsbeq	r1, sl, r4, ror sl
 b2c:	a908ef02 	stmdbge	r8, {r1, r8, r9, sl, fp, sp, lr, pc}
 b30:	02000000 	andeq	r0, r0, #0
 b34:	6b1a7091 	blvs	69cd80 <startup-0x1f963280>
 b38:	0aef0200 	beq	ffbc1340 <ball+0xdfbbdf04>
 b3c:	000000a9 	andeq	r0, r0, r9, lsr #1
 b40:	0e6c9102 	lgneqe	f1, f2
 b44:	00000606 	andeq	r0, r0, r6, lsl #12
 b48:	a90def02 	stmdbge	sp, {r1, r8, r9, sl, fp, sp, lr, pc}
 b4c:	02000000 	andeq	r0, r0, #0
 b50:	70136891 	mulsvc	r3, r1, r8
 b54:	5a200007 	bpl	800b78 <startup-0x1f7ff488>
 b58:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 b5c:	000005ad 	andeq	r0, r0, sp, lsr #11
 b60:	3112f602 	tstcc	r2, r2, lsl #12	; <UNPREDICTABLE>
 b64:	02000000 	andeq	r0, r0, #0
 b68:	00006791 	muleq	r0, r1, r7
 b6c:	0220040a 	eoreq	r0, r0, #167772160	; 0xa000000
 b70:	eb250000 	bl	940b78 <startup-0x1f6bf488>
 b74:	02000004 	andeq	r0, r0, #4
 b78:	07040de8 	streq	r0, [r4, -r8, ror #27]
 b7c:	002c2000 	eoreq	r2, ip, r0
 b80:	9c010000 	stcls	0, cr0, [r1], {-0}
 b84:	00000bc3 	andeq	r0, r0, r3, asr #23
 b88:	0200731b 	andeq	r7, r0, #1811939328	; 0x6c000000
 b8c:	0b6c21e8 	bleq	1b09334 <startup-0x1e4f6ccc>
 b90:	91020000 	mrsls	r0, (UNDEF: 2)
 b94:	021f1874 	andseq	r1, pc, #116, 16	; 0x740000
 b98:	e8020000 	stmda	r2, {}	; <UNPREDICTABLE>
 b9c:	00021a33 	andeq	r1, r2, r3, lsr sl
 ba0:	70910200 	addsvc	r0, r1, r0, lsl #4
 ba4:	0001b118 	andeq	fp, r1, r8, lsl r1
 ba8:	3de80200 	sfmcc	f0, 2, [r8]
 bac:	000000a9 	andeq	r0, r0, r9, lsr #1
 bb0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
 bb4:	000003a7 	andeq	r0, r0, r7, lsr #7
 bb8:	a948e802 	stmdbge	r8, {r1, fp, sp, lr, pc}^
 bbc:	02000000 	andeq	r0, r0, #0
 bc0:	26006891 			; <UNDEFINED> instruction: 0x26006891
 bc4:	00000364 	andeq	r0, r0, r4, ror #6
 bc8:	d006dc02 	andle	sp, r6, r2, lsl #24
 bcc:	34200006 	strtcc	r0, [r0], #-6
 bd0:	01000000 	mrseq	r0, (UNDEF: 0)
 bd4:	000be79c 	muleq	fp, ip, r7
 bd8:	00691a00 	rsbeq	r1, r9, r0, lsl #20
 bdc:	a905dd02 	stmdbge	r5, {r1, r8, sl, fp, ip, lr, pc}
 be0:	02000000 	andeq	r0, r0, #0
 be4:	17007491 			; <UNDEFINED> instruction: 0x17007491
 be8:	00000573 	andeq	r0, r0, r3, ror r5
 bec:	6e06d402 	cdpvs	4, 0, cr13, cr6, cr2, {0}
 bf0:	62200006 	eorvs	r0, r0, #6
 bf4:	01000000 	mrseq	r0, (UNDEF: 0)
 bf8:	000c229c 	muleq	ip, ip, r2
 bfc:	006f1b00 	rsbeq	r1, pc, r0, lsl #22
 c00:	ba1bd402 	blt	6f5c10 <startup-0x1f90a3f0>
 c04:	02000001 	andeq	r0, r0, #1
 c08:	76136c91 			; <UNDEFINED> instruction: 0x76136c91
 c0c:	50200006 	eorpl	r0, r0, r6
 c10:	1a000000 	bne	c18 <startup-0x1ffff3e8>
 c14:	d5020074 	strle	r0, [r2, #-116]	; 0xffffff8c
 c18:	0000a90a 	andeq	sl, r0, sl, lsl #18
 c1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 c20:	bb170000 	bllt	5c0c28 <startup-0x1fa3f3d8>
 c24:	02000003 	andeq	r0, r0, #3
 c28:	060c06ce 	streq	r0, [ip], -lr, asr #13
 c2c:	00622000 	rsbeq	r2, r2, r0
 c30:	9c010000 	stcls	0, cr0, [r1], {-0}
 c34:	00000c5d 	andeq	r0, r0, sp, asr ip
 c38:	02006f1b 	andeq	r6, r0, #27, 30	; 0x6c
 c3c:	01ba1ace 			; <UNDEFINED> instruction: 0x01ba1ace
 c40:	91020000 	mrsls	r0, (UNDEF: 2)
 c44:	0614136c 	ldreq	r1, [r4], -ip, ror #6
 c48:	00502000 	subseq	r2, r0, r0
 c4c:	741a0000 	ldrvc	r0, [sl], #-0
 c50:	0acf0200 	beq	ff3c1458 <ball+0xdf3be01c>
 c54:	000000a9 	andeq	r0, r0, r9, lsr #1
 c58:	00749102 	rsbseq	r9, r4, r2, lsl #2
 c5c:	00be1700 	adcseq	r1, lr, r0, lsl #14
 c60:	bc020000 	stclt	0, cr0, [r2], {-0}
 c64:	00054006 	andeq	r4, r5, r6
 c68:	0000cc20 	andeq	ip, r0, r0, lsr #24
 c6c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
 c70:	1a00000c 	bne	ca8 <startup-0x1ffff358>
 c74:	bd020069 	stclt	0, cr0, [r2, #-420]	; 0xfffffe5c
 c78:	0000250a 	andeq	r2, r0, sl, lsl #10
 c7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c80:	02006a1a 	andeq	r6, r0, #106496	; 0x1a000
 c84:	00250dbd 	strhteq	r0, [r5], -sp
 c88:	91020000 	mrsls	r0, (UNDEF: 2)
 c8c:	04d40e76 	ldrbeq	r0, [r4], #3702	; 0xe76
 c90:	bd020000 	stclt	0, cr0, [r2, #-0]
 c94:	00002510 	andeq	r2, r0, r0, lsl r5
 c98:	6f910200 	svcvs	0x00910200
 c9c:	0200631a 	andeq	r6, r0, #1744830464	; 0x68000000
 ca0:	00251cbd 	strhteq	r1, [r5], -sp
 ca4:	91020000 	mrsls	r0, (UNDEF: 2)
 ca8:	006b1a75 	rsbeq	r1, fp, r5, ror sl
 cac:	c00fbe02 	andgt	fp, pc, r2, lsl #28
 cb0:	02000000 	andeq	r0, r0, #0
 cb4:	1f007091 	svcne	0x00007091
 cb8:	00000028 	andeq	r0, r0, r8, lsr #32
 cbc:	9e06af02 	cdpls	15, 0, cr10, cr6, cr2, {0}
 cc0:	a2200004 	eorge	r0, r0, #4
 cc4:	01000000 	mrseq	r0, (UNDEF: 0)
 cc8:	000d159c 	muleq	sp, ip, r5
 ccc:	00781b00 	rsbseq	r1, r8, r0, lsl #22
 cd0:	a910af02 	ldmdbge	r0, {r1, r8, r9, sl, fp, sp, pc}
 cd4:	02000000 	andeq	r0, r0, #0
 cd8:	791b6c91 	ldmdbvc	fp, {r0, r4, r7, sl, fp, sp, lr}
 cdc:	17af0200 	strne	r0, [pc, r0, lsl #4]!
 ce0:	000000a9 	andeq	r0, r0, r9, lsr #1
 ce4:	1b689102 	blne	1a250f4 <startup-0x1e5daf0c>
 ce8:	00746573 	rsbseq	r6, r4, r3, ror r5
 cec:	a91eaf02 	ldmdbge	lr, {r1, r8, r9, sl, fp, sp, pc}
 cf0:	02000000 	andeq	r0, r0, #0
 cf4:	b20e6491 	andlt	r6, lr, #-1862270976	; 0x91000000
 cf8:	02000005 	andeq	r0, r0, #5
 cfc:	00250ab0 	strhteq	r0, [r5], -r0
 d00:	91020000 	mrsls	r0, (UNDEF: 2)
 d04:	062e0e73 			; <UNDEFINED> instruction: 0x062e0e73
 d08:	b1020000 	mrslt	r0, (UNDEF: 2)
 d0c:	0000a906 	andeq	sl, r0, r6, lsl #18
 d10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d14:	012f1500 			; <UNDEFINED> instruction: 0x012f1500
 d18:	7b020000 	blvc	80d20 <startup-0x1ff7f2e0>
 d1c:	00043606 	andeq	r3, r4, r6, lsl #12
 d20:	00006820 	andeq	r6, r0, r0, lsr #16
 d24:	5e9c0100 	fmlple	f0, f4, f0
 d28:	1300000d 	movwne	r0, #13
 d2c:	2000043c 	andcs	r0, r0, ip, lsr r4
 d30:	00000058 	andeq	r0, r0, r8, asr r0
 d34:	00020d0e 	andeq	r0, r2, lr, lsl #26
 d38:	0f7c0200 	svceq	0x007c0200
 d3c:	00000025 	andeq	r0, r0, r5, lsr #32
 d40:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
 d44:	20000460 	andcs	r0, r0, r0, ror #8
 d48:	00000022 	andeq	r0, r0, r2, lsr #32
 d4c:	6464611a 	strbtvs	r6, [r4], #-282	; 0xfffffee6
 d50:	0f7f0200 	svceq	0x007f0200
 d54:	00000025 	andeq	r0, r0, r5, lsr #32
 d58:	00769102 	rsbseq	r9, r6, r2, lsl #2
 d5c:	4d1c0000 	ldcmi	0, cr0, [ip, #-0]
 d60:	02000000 	andeq	r0, r0, #0
 d64:	03e0066d 	mvneq	r0, #114294784	; 0x6d00000
 d68:	00562000 	subseq	r2, r6, r0
 d6c:	9c010000 	stcls	0, cr0, [r1], {-0}
 d70:	00021220 	andeq	r1, r2, r0, lsr #4
 d74:	09680200 	stmdbeq	r8!, {r9}^
 d78:	00000025 	andeq	r0, r0, r5, lsr #32
 d7c:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 d80:	0000002a 	andeq	r0, r0, sl, lsr #32
 d84:	0d9a9c01 	ldceq	12, cr9, [sl, #4]
 d88:	d4180000 	ldrle	r0, [r8], #-0
 d8c:	02000004 	andeq	r0, r0, #4
 d90:	00252368 	eoreq	r2, r5, r8, ror #6
 d94:	91020000 	mrsls	r0, (UNDEF: 2)
 d98:	3a170077 	bcc	5c0f7c <startup-0x1fa3f084>
 d9c:	02000000 	andeq	r0, r0, #0
 da0:	03700660 	cmneq	r0, #96, 12	; 0x6000000
 da4:	00462000 	subeq	r2, r6, r0
 da8:	9c010000 	stcls	0, cr0, [r1], {-0}
 dac:	00000dcf 	andeq	r0, r0, pc, asr #27
 db0:	00021f18 	andeq	r1, r2, r8, lsl pc
 db4:	21600200 	cmncs	r0, r0, lsl #4
 db8:	00000025 	andeq	r0, r0, r5, lsr #32
 dbc:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 dc0:	000004d4 	ldrdeq	r0, [r0], -r4
 dc4:	252f6002 	strcs	r6, [pc, #-2]!	; dca <startup-0x1ffff236>
 dc8:	02000000 	andeq	r0, r0, #0
 dcc:	17007691 			; <UNDEFINED> instruction: 0x17007691
 dd0:	000000d2 	ldrdeq	r0, [r0], -r2
 dd4:	30065902 	andcc	r5, r6, r2, lsl #18
 dd8:	40200003 	eormi	r0, r0, r3
 ddc:	01000000 	mrseq	r0, (UNDEF: 0)
 de0:	000e049c 	muleq	lr, ip, r4
 de4:	00e01800 	rsceq	r1, r0, r0, lsl #16
 de8:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
 dec:	00002524 	andeq	r2, r0, r4, lsr #10
 df0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 df4:	0004d418 	andeq	sp, r4, r8, lsl r4
 df8:	35590200 	ldrbcc	r0, [r9, #-512]	; 0xfffffe00
 dfc:	00000025 	andeq	r0, r0, r5, lsr #32
 e00:	00769102 	rsbseq	r9, r6, r2, lsl #2
 e04:	0006ba17 	andeq	fp, r6, r7, lsl sl
 e08:	06440200 	strbeq	r0, [r4], -r0, lsl #4
 e0c:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 e10:	00000080 	andeq	r0, r0, r0, lsl #1
 e14:	0e399c01 	cdpeq	12, 3, cr9, cr9, cr1, {0}
 e18:	14180000 	ldrne	r0, [r8], #-0
 e1c:	02000001 	andeq	r0, r0, #1
 e20:	00251c44 	eoreq	r1, r5, r4, asr #24
 e24:	91020000 	mrsls	r0, (UNDEF: 2)
 e28:	04d41877 	ldrbeq	r1, [r4], #2167	; 0x877
 e2c:	44020000 	strmi	r0, [r2], #-0
 e30:	0000252b 	andeq	r2, r0, fp, lsr #10
 e34:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 e38:	01872000 	orreq	r2, r7, r0
 e3c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 e40:	00002509 	andeq	r2, r0, r9, lsl #10
 e44:	00022000 	andeq	r2, r2, r0
 e48:	00009020 	andeq	r9, r0, r0, lsr #32
 e4c:	719c0100 	orrsvc	r0, ip, r0, lsl #2
 e50:	1800000e 	stmdane	r0, {r1, r2, r3}
 e54:	000004d4 	ldrdeq	r0, [r0], -r4
 e58:	251e2e02 	ldrcs	r2, [lr, #-3586]	; 0xfffff1fe
 e5c:	02000000 	andeq	r0, r0, #0
 e60:	721a6f91 	andsvc	r6, sl, #580	; 0x244
 e64:	36020076 			; <UNDEFINED> instruction: 0x36020076
 e68:	0000250a 	andeq	r2, r0, sl, lsl #10
 e6c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 e70:	05ce1700 	strbeq	r1, [lr, #1792]	; 0x700
 e74:	1a020000 	bne	80e7c <startup-0x1ff7f184>
 e78:	0001aa06 	andeq	sl, r1, r6, lsl #20
 e7c:	00007620 	andeq	r7, r0, r0, lsr #12
 e80:	9b9c0100 	blls	fe701288 <ball+0xde6fde4c>
 e84:	2700000e 	strcs	r0, [r0, -lr]
 e88:	00000000 	andeq	r0, r0, r0
 e8c:	0200631a 	andeq	r6, r0, #1744830464	; 0x68000000
 e90:	00250b23 	eoreq	r0, r5, r3, lsr #22
 e94:	91020000 	mrsls	r0, (UNDEF: 2)
 e98:	17000077 	smlsdxne	r0, r7, r0, r0
 e9c:	000000f8 	strdeq	r0, [r0], -r8
 ea0:	48060d02 	stmdami	r6, {r1, r8, sl, fp}
 ea4:	62200001 	eorvs	r0, r0, #1
 ea8:	01000000 	mrseq	r0, (UNDEF: 0)
 eac:	000ed09c 	muleq	lr, ip, r0
 eb0:	04d41800 	ldrbeq	r1, [r4], #2048	; 0x800
 eb4:	0d020000 	stceq	0, cr0, [r2, #-0]
 eb8:	00002520 	andeq	r2, r0, r0, lsr #10
 ebc:	6f910200 	svcvs	0x00910200
 ec0:	0003e80e 	andeq	lr, r3, lr, lsl #16
 ec4:	0a0e0200 	beq	3816cc <startup-0x1fc7e934>
 ec8:	00000025 	andeq	r0, r0, r5, lsr #32
 ecc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ed0:	00034d1f 	andeq	r4, r3, pc, lsl sp
 ed4:	06090200 	streq	r0, [r9], -r0, lsl #4
 ed8:	2000010c 	andcs	r0, r0, ip, lsl #2
 edc:	0000003c 	andeq	r0, r0, ip, lsr r0
 ee0:	0ef49c01 	cdpeq	12, 15, cr9, cr4, cr1, {0}
 ee4:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 ee8:	25090200 	strcs	r0, [r9, #-512]	; 0xfffffe00
 eec:	00000025 	andeq	r0, r0, r5, lsr #32
 ef0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ef4:	00046c1f 	andeq	r6, r4, pc, lsl ip
 ef8:	06040200 	streq	r0, [r4], -r0, lsl #4
 efc:	200000c6 	andcs	r0, r0, r6, asr #1
 f00:	00000046 	andeq	r0, r0, r6, asr #32
 f04:	0f189c01 	svceq	0x00189c01
 f08:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 f0c:	23040200 	movwcs	r0, #16896	; 0x4200
 f10:	00000025 	andeq	r0, r0, r5, lsr #32
 f14:	00779102 	rsbseq	r9, r7, r2, lsl #2
 f18:	0003c71c 	andeq	ip, r3, ip, lsl r7
 f1c:	06210100 	strteq	r0, [r1], -r0, lsl #2
 f20:	200000b4 	strhcs	r0, [r0], -r4
 f24:	00000012 	andeq	r0, r0, r2, lsl r0
 f28:	50179c01 	andspl	r9, r7, r1, lsl #24
 f2c:	01000002 	tsteq	r0, r2
 f30:	00840617 	addeq	r0, r4, r7, lsl r6
 f34:	00302000 	eorseq	r2, r0, r0
 f38:	9c010000 	stcls	0, cr0, [r1], {-0}
 f3c:	00000f66 	andeq	r0, r0, r6, ror #30
 f40:	00736d1b 	rsbseq	r6, r3, fp, lsl sp
 f44:	c01f1701 	andsgt	r1, pc, r1, lsl #14
 f48:	02000000 	andeq	r0, r0, #0
 f4c:	8c136c91 	ldchi	12, cr6, [r3], {145}	; 0x91
 f50:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 f54:	1a000000 	bne	f5c <startup-0x1ffff0a4>
 f58:	1c010069 	stcne	0, cr0, [r1], {105}	; 0x69
 f5c:	0000a90a 	andeq	sl, r0, sl, lsl #18
 f60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 f64:	55170000 	ldrpl	r0, [r7, #-0]
 f68:	01000005 	tsteq	r0, r5
 f6c:	0058060d 	subseq	r0, r8, sp, lsl #12
 f70:	002c2000 	eoreq	r2, ip, r0
 f74:	9c010000 	stcls	0, cr0, [r1], {-0}
 f78:	00000fa2 	andeq	r0, r0, r2, lsr #31
 f7c:	0073751b 	rsbseq	r7, r3, fp, lsl r5
 f80:	c01f0d01 	andsgt	r0, pc, r1, lsl #26
 f84:	02000000 	andeq	r0, r0, #0
 f88:	60136c91 	mulsvs	r3, r1, ip
 f8c:	1a200000 	bne	800f94 <startup-0x1f7ff06c>
 f90:	1a000000 	bne	f98 <startup-0x1ffff068>
 f94:	12010069 	andne	r0, r1, #105	; 0x69
 f98:	0000a90a 	andeq	sl, r0, sl, lsl #18
 f9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 fa0:	44190000 	ldrmi	r0, [r9], #-0
 fa4:	01000002 	tsteq	r0, r2
 fa8:	00100603 	andseq	r0, r0, r3, lsl #12
 fac:	00482000 	subeq	r2, r8, r0
 fb0:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	210d0000 	mrscs	r0, (UNDEF: 13)
  98:	2f134900 	svccs	0x00134900
  9c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b01130f 	bleq	44cf4 <startup-0x1ffbb30c>
  b4:	3b0b3a0b 	blcc	2ce8e8 <startup-0x1fd31718>
  b8:	010b390b 	tsteq	fp, fp, lsl #18
  bc:	10000013 	andne	r0, r0, r3, lsl r0
  c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c4:	0b3a0e03 	bleq	e838d8 <startup-0x1f17c728>
  c8:	0b39053b 	bleq	e415bc <startup-0x1f1bea44>
  cc:	01111927 	tsteq	r1, r7, lsr #18
  d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d8:	11000013 	tstne	r0, r3, lsl r0
  dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e4:	13490b39 	movtne	r0, #39737	; 0x9b39
  e8:	00001802 	andeq	r1, r0, r2, lsl #16
  ec:	03003412 	movweq	r3, #1042	; 0x412
  f0:	3b0b3a0e 	blcc	2ce930 <startup-0x1fd316d0>
  f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  f8:	00180213 	andseq	r0, r8, r3, lsl r2
  fc:	010b1300 	mrseq	r1, (UNDEF: 59)
 100:	06120111 			; <UNDEFINED> instruction: 0x06120111
 104:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 108:	03193f01 	tsteq	r9, #1, 30
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 114:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 118:	96184006 	ldrls	r4, [r8], -r6
 11c:	13011942 	movwne	r1, #6466	; 0x1942
 120:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	110b390b 	tstne	fp, fp, lsl #18
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	03003416 	movweq	r3, #1046	; 0x416
 140:	3b0b3a0e 	blcc	2ce980 <startup-0x1fd31680>
 144:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 148:	17000013 	smladne	r0, r3, r0, r0
 14c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 150:	0b3a0e03 	bleq	e83964 <startup-0x1f17c69c>
 154:	0b390b3b 	bleq	e42e48 <startup-0x1f1bd1b8>
 158:	01111927 	tsteq	r1, r7, lsr #18
 15c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 160:	01194296 			; <UNDEFINED> instruction: 0x01194296
 164:	18000013 	stmdane	r0, {r0, r1, r4}
 168:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 16c:	0b3b0b3a 	bleq	ec2e5c <startup-0x1f13d1a4>
 170:	13490b39 	movtne	r0, #39737	; 0x9b39
 174:	00001802 	andeq	r1, r0, r2, lsl #16
 178:	3f002e19 	svccc	0x00002e19
 17c:	3a0e0319 	bcc	380de8 <startup-0x1fc7f218>
 180:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 184:	1119270b 	tstne	r9, fp, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 190:	341a0000 	ldrcc	r0, [sl], #-0
 194:	3a080300 	bcc	200d9c <startup-0x1fdff264>
 198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1a0:	1b000018 	blne	208 <startup-0x1ffffdf8>
 1a4:	08030005 	stmdaeq	r3, {r0, r2}
 1a8:	0b3b0b3a 	bleq	ec2e98 <startup-0x1f13d168>
 1ac:	13490b39 	movtne	r0, #39737	; 0x9b39
 1b0:	00001802 	andeq	r1, r0, r2, lsl #16
 1b4:	3f002e1c 	svccc	0x00002e1c
 1b8:	3a0e0319 	bcc	380e24 <startup-0x1fc7f1dc>
 1bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1c4:	96184006 	ldrls	r4, [r8], -r6
 1c8:	00001942 	andeq	r1, r0, r2, asr #18
 1cc:	3f012e1d 	svccc	0x00012e1d
 1d0:	3a0e0319 	bcc	380e3c <startup-0x1fc7f1c4>
 1d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1dc:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	3f012e1f 	svccc	0x00012e1f
 1e8:	3a0e0319 	bcc	380e54 <startup-0x1fc7f1ac>
 1ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	1119270b 	tstne	r9, fp, lsl #14
 1f4:	40061201 	andmi	r1, r6, r1, lsl #4
 1f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	3f012e20 	svccc	0x00012e20
 204:	3a0e0319 	bcc	380e70 <startup-0x1fc7f190>
 208:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 20c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 210:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 214:	96184006 	ldrls	r4, [r8], -r6
 218:	13011942 	movwne	r1, #6466	; 0x1942
 21c:	0b210000 	bleq	840224 <startup-0x1f7bfddc>
 220:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 224:	00130106 	andseq	r0, r3, r6, lsl #2
 228:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 22c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 230:	0b3b0b3a 	bleq	ec2f20 <startup-0x1f13d0e0>
 234:	13490b39 	movtne	r0, #39737	; 0x9b39
 238:	1301193c 	movwne	r1, #6460	; 0x193c
 23c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 240:	03193f01 	tsteq	r9, #1, 30
 244:	3b0b3a0e 	blcc	2cea84 <startup-0x1fd3157c>
 248:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 24c:	11134919 	tstne	r3, r9, lsl r9
 250:	40061201 	andmi	r1, r6, r1, lsl #4
 254:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 258:	00001301 	andeq	r1, r0, r1, lsl #6
 25c:	3f012e24 	svccc	0x00012e24
 260:	3a0e0319 	bcc	380ecc <startup-0x1fc7f134>
 264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 268:	1113490b 	tstne	r3, fp, lsl #18
 26c:	40061201 	andmi	r1, r6, r1, lsl #4
 270:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 274:	00001301 	andeq	r1, r0, r1, lsl #6
 278:	03012e25 	movweq	r2, #7717	; 0x1e25
 27c:	3b0b3a0e 	blcc	2ceabc <startup-0x1fd31544>
 280:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 284:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 288:	97184006 	ldrls	r4, [r8, -r6]
 28c:	13011942 	movwne	r1, #6466	; 0x1942
 290:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 294:	03193f01 	tsteq	r9, #1, 30
 298:	3b0b3a0e 	blcc	2cead8 <startup-0x1fd31528>
 29c:	110b390b 	tstne	fp, fp, lsl #18
 2a0:	40061201 	andmi	r1, r6, r1, lsl #4
 2a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2a8:	00001301 	andeq	r1, r0, r1, lsl #6
 2ac:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
 2b0:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001354 	andeq	r1, r0, r4, asr r3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001cc 	andcs	r0, r0, ip, asr #3
   4:	200001f6 	strdcs	r0, [r0], -r6
   8:	200001f8 	strdcs	r0, [r0], -r8
   c:	200001fa 	strdcs	r0, [r0], -sl
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20001364 	andcs	r1, r0, r4, ror #6
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000b45 	andeq	r0, r0, r5, asr #22
   4:	018c0003 	orreq	r0, ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	614c2f37 	cmpvs	ip, r7, lsr pc
  58:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
  5c:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
  60:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
  64:	525f5250 	subspl	r5, pc, #80, 4
  68:	41505254 	cmpmi	r0, r4, asr r2
  6c:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
  70:	44000067 	strmi	r0, [r0], #-103	; 0xffffff99
  74:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  78:	00682e73 	rsbeq	r2, r8, r3, ror lr
  7c:	47000001 	strmi	r0, [r0, -r1]
  80:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  84:	72446369 	subvc	r6, r4, #-1543503871	; 0xa4000001
  88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
  8c:	00682e73 	rsbeq	r2, r8, r3, ror lr
  90:	4b000001 	blmi	9c <startup-0x1fffff64>
  94:	44627965 	strbtmi	r7, [r2], #-2405	; 0xfffff69b
  98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  9c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  a0:	00000100 	andeq	r0, r0, r0, lsl #2
  a4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
  a8:	69676f4c 	stmdbvs	r7!, {r2, r3, r6, r8, r9, sl, fp, sp, lr}^
  ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
  b0:	41000001 	tstmi	r0, r1
  b4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  b8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  bc:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  c0:	00010068 	andeq	r0, r1, r8, rrx
  c4:	6e6f5000 	cdpvs	0, 6, cr5, cr15, cr0, {0}
  c8:	00632e67 	rsbeq	r2, r3, r7, ror #28
  cc:	53000001 	movwpl	r0, #1
  d0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
  d4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
  d8:	00682e73 	rsbeq	r2, r8, r3, ror lr
  dc:	44000001 	strmi	r0, [r0], #-1
  e0:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
  e4:	6f697469 	svcvs	0x00697469
  e8:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
  ec:	00000100 	andeq	r0, r0, r0, lsl #2
  f0:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
  f4:	654c7265 	strbvs	r7, [ip, #-613]	; 0xfffffd9b
  f8:	69577466 	ldmdbvs	r7, {r1, r2, r5, r6, sl, ip, sp, lr}^
  fc:	782e736e 	stmdavc	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 100:	01006d62 	tsteq	r0, r2, ror #26
 104:	6c500000 	mravs	r0, r0, acc0
 108:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 10c:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 110:	736e6957 	cmnvc	lr, #1425408	; 0x15c000
 114:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 118:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 11c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 120:	00000100 	andeq	r0, r0, r0, lsl #2
 124:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 128:	69527265 	ldmdbvs	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
 12c:	57746867 	ldrbpl	r6, [r4, -r7, ror #16]!
 130:	2e736e69 	cdpcs	14, 7, cr6, cr3, cr9, {3}
 134:	006d6278 	rsbeq	r6, sp, r8, ror r2
 138:	50000001 	andpl	r0, r0, r1
 13c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 140:	67695272 			; <UNDEFINED> instruction: 0x67695272
 144:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 148:	6957736e 	ldmdbvs	r7, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 14c:	65546874 	ldrbvs	r6, [r4, #-2164]	; 0xfffff78c
 150:	782e7478 	stmdavc	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 154:	01006d62 	tsteq	r0, r2, ror #26
 158:	74530000 	ldrbvc	r0, [r3], #-0
 15c:	6d747261 	lfmvs	f7, 2, [r4, #-388]!	; 0xfffffe7c
 160:	57756e65 	ldrbpl	r6, [r5, -r5, ror #28]!
 164:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
 168:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
 16c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 170:	53000001 	movwpl	r0, #1
 174:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 178:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
 17c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 180:	00000100 	andeq	r0, r0, r0, lsl #2
 184:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 188:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 18c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 190:	0001006d 	andeq	r0, r1, sp, rrx
 194:	17050000 	strne	r0, [r5, -r0]
 198:	10020500 	andne	r0, r2, r0, lsl #10
 19c:	14200000 	strtne	r0, [r0], #-0
 1a0:	052f0205 	streq	r0, [pc, #-517]!	; ffffffa3 <ball+0xdfffcb67>
 1a4:	0205200c 	andeq	r2, r5, #12
 1a8:	200c052f 	andcs	r0, ip, pc, lsr #10
 1ac:	052f0205 	streq	r0, [pc, #-517]!	; ffffffaf <ball+0xdfffcb73>
 1b0:	0205200b 	andeq	r2, r5, #11
 1b4:	200c052f 	andcs	r0, ip, pc, lsr #10
 1b8:	052f0705 	streq	r0, [pc, #-1797]!	; fffffabb <ball+0xdfffc67f>
 1bc:	0402000a 	streq	r0, [r2], #-10
 1c0:	19052001 	stmdbne	r5, {r0, sp}
 1c4:	01040200 	mrseq	r0, R12_usr
 1c8:	0007053c 	andeq	r0, r7, ip, lsr r5
 1cc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1d0:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 1d4:	0105200c 	tsteq	r5, ip
 1d8:	ae22052f 	cfsh64ge	mvdx0, mvdx2, #31
 1dc:	054f0a05 	strbeq	r0, [pc, #-2565]	; fffff7df <ball+0xdfffc3a3>
 1e0:	03052e02 	movweq	r2, #24066	; 0x5e02
 1e4:	03040200 	movweq	r0, #16896	; 0x4200
 1e8:	001c0521 	andseq	r0, ip, r1, lsr #10
 1ec:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 1f0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 1f4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1f8:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 1fc:	02052e01 	andeq	r2, r5, #1, 28
 200:	01040200 	mrseq	r0, R12_usr
 204:	31010520 	tstcc	r1, r0, lsr #10
 208:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 20c:	02054f0a 	andeq	r4, r5, #10, 30	; 0x28
 210:	0003052e 	andeq	r0, r3, lr, lsr #10
 214:	21030402 	tstcs	r3, r2, lsl #8
 218:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 21c:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 220:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 224:	02053c01 	andeq	r3, r5, #256	; 0x100
 228:	01040200 	mrseq	r0, R12_usr
 22c:	3f010520 	svccc	0x00010520
 230:	055a1305 	ldrbeq	r1, [sl, #-773]	; 0xfffffcfb
 234:	052f2f02 	streq	r2, [pc, #-3842]!	; fffff33a <ball+0xdfffbefe>
 238:	02042f01 	andeq	r2, r4, #1, 30
 23c:	60032505 	andvs	r2, r3, r5, lsl #10
 240:	670f053c 	smladxvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 244:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
 248:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 24c:	27058301 	strcs	r8, [r5, -r1, lsl #6]
 250:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 254:	13080105 	movwne	r0, #33029	; 0x8105
 258:	05762b05 	ldrbeq	r2, [r6, #-2821]!	; 0xfffff4fb
 25c:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 260:	c10c054b 	tstgt	ip, fp, asr #10
 264:	7a030b05 	bvc	c2e80 <startup-0x1ff3d180>
 268:	3c030520 	cfstr32cc	mvfx0, [r3], {32}
 26c:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 270:	0f053d06 	svceq	0x00053d06
 274:	3d06054b 	cfstr32cc	mvfx0, [r6, #-300]	; 0xfffffed4
 278:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
 27c:	0c053c03 	stceq	12, cr3, [r5], {3}
 280:	22010521 	andcs	r0, r1, #138412032	; 0x8400000
 284:	053e1e05 	ldreq	r1, [lr, #-3589]!	; 0xfffff1fb
 288:	053d3d02 	ldreq	r3, [sp, #-3330]!	; 0xfffff2fe
 28c:	0205200d 	andeq	r2, r5, #13
 290:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 294:	053d3003 	ldreq	r3, [sp, #-3]!
 298:	0b052f1d 	bleq	14bf14 <startup-0x1feb40ec>
 29c:	4b03053c 	blmi	c1794 <startup-0x1ff3e86c>
 2a0:	2f05053d 	svccs	0x0005053d
 2a4:	7a030a05 	bvc	c2ac0 <startup-0x1ff3d540>
 2a8:	2704054a 	strcs	r0, [r4, -sl, asr #10]
 2ac:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 2b0:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 2b4:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 2b8:	670205ca 	strvs	r0, [r2, -sl, asr #11]
 2bc:	200d053d 	andcs	r0, sp, sp, lsr r5
 2c0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 2b4 <startup-0x1ffffd4c>
 2c4:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 2c8:	0a052f0f 	beq	14bf0c <startup-0x1feb40f4>
 2cc:	4b020520 	blmi	81754 <startup-0x1ff7e8ac>
 2d0:	200e053d 	andcs	r0, lr, sp, lsr r5
 2d4:	052f0405 	streq	r0, [pc, #-1029]!	; fffffed7 <ball+0xdfffca9b>
 2d8:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 2dc:	03053004 	movweq	r3, #20484	; 0x5004
 2e0:	09053d4b 	stmdbeq	r5, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 2e4:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 2e8:	05ca3605 	strbeq	r3, [sl, #1541]	; 0x605
 2ec:	10059102 	andne	r9, r5, r2, lsl #2
 2f0:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 2f4:	2f3d2f59 	svccs	0x003d2f59
 2f8:	053e1005 	ldreq	r1, [lr, #-5]!
 2fc:	03054a04 	movweq	r4, #23044	; 0x5a04
 300:	10053d21 	andne	r3, r5, r1, lsr #26
 304:	4a040530 	bmi	1017cc <startup-0x1fefe834>
 308:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 30c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 310:	0205200f 	andeq	r2, r5, #15
 314:	01053d2f 	tsteq	r5, pc, lsr #26
 318:	7640053d 			; <UNDEFINED> instruction: 0x7640053d
 31c:	3d910205 	lfmcc	f0, 4, [r1, #20]
 320:	01053d59 	tsteq	r5, r9, asr sp
 324:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 328:	3d910205 	lfmcc	f0, 4, [r1, #20]
 32c:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 330:	2e058301 	cdpcs	3, 0, cr8, cr5, cr1, {0}
 334:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 338:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 33c:	1a056701 	bne	159f48 <startup-0x1fea60b8>
 340:	2f02054c 	svccs	0x0002054c
 344:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 348:	4b4b4b3d 	blmi	12d3044 <startup-0x1ed2cfbc>
 34c:	01054b4b 	tsteq	r5, fp, asr #22
 350:	3e1c053d 	mrccc	5, 0, r0, cr12, cr13, {1}
 354:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 358:	03053c02 	movweq	r3, #23554	; 0x5c02
 35c:	0f059f21 	svceq	0x00059f21
 360:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 364:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 368:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 36c:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 370:	03054903 	movweq	r4, #22787	; 0x5903
 374:	01040200 	mrseq	r0, R12_usr
 378:	00270558 	eoreq	r0, r7, r8, asr r5
 37c:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 380:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 384:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 388:	23055101 	movwcs	r5, #20737	; 0x5101
 38c:	05582c03 	ldrbeq	r2, [r8, #-3075]	; 0xfffff3fd
 390:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 394:	0011052f 	andseq	r0, r1, pc, lsr #10
 398:	3c020402 	cfstrscc	mvf0, [r2], {2}
 39c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 3a0:	053c0404 	ldreq	r0, [ip, #-1028]!	; 0xfffffbfc
 3a4:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 3a8:	12053c06 	andne	r3, r5, #1536	; 0x600
 3ac:	2e15053d 	mrccs	5, 0, r0, cr5, cr13, {1}
 3b0:	05900c05 	ldreq	r0, [r0, #3077]	; 0xc05
 3b4:	04053c08 	streq	r3, [r5], #-3080	; 0xfffff3f8
 3b8:	3d05053d 	cfstr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 3bc:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 3c0:	15053e12 	strne	r3, [r5, #-3602]	; 0xfffff1ee
 3c4:	4a18052e 	bmi	601884 <startup-0x1f9fe77c>
 3c8:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 3cc:	14052e08 	strne	r2, [r5], #-3592	; 0xfffff1f8
 3d0:	0335053d 	teqeq	r5, #255852544	; 0xf400000
 3d4:	0105e479 	tsteq	r5, r9, ror r4
 3d8:	76200528 	strtvc	r0, [r0], -r8, lsr #10
 3dc:	053e0f05 	ldreq	r0, [lr, #-3845]!	; 0xfffff0fb
 3e0:	02052f08 	andeq	r2, r5, #8, 30
 3e4:	210e054a 	tstcs	lr, sl, asr #10
 3e8:	01040200 	mrseq	r0, R12_usr
 3ec:	02005806 	andeq	r5, r0, #393216	; 0x60000
 3f0:	002e0204 	eoreq	r0, lr, r4, lsl #4
 3f4:	20040402 	andcs	r0, r4, r2, lsl #8
 3f8:	02000905 	andeq	r0, r0, #81920	; 0x14000
 3fc:	2f060404 	svccs	0x00060404
 400:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 404:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 408:	05c92104 	strbeq	r2, [r9, #260]	; 0x104
 40c:	0405670a 	streq	r6, [r5], #-1802	; 0xfffff8f6
 410:	0005054a 	andeq	r0, r5, sl, asr #10
 414:	21030402 	tstcs	r3, r2, lsl #8
 418:	02001905 	andeq	r1, r0, #81920	; 0x14000
 41c:	059d0304 	ldreq	r0, [sp, #772]	; 0x304
 420:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 424:	04056603 	streq	r6, [r5], #-1539	; 0xfffff9fd
 428:	01040200 	mrseq	r0, R12_usr
 42c:	0016053c 	andseq	r0, r6, ip, lsr r5
 430:	55020402 	strpl	r0, [r2, #-1026]	; 0xfffffbfe
 434:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 438:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 43c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 440:	02055602 	andeq	r5, r5, #2097152	; 0x200000
 444:	01040200 	mrseq	r0, R12_usr
 448:	03010566 	movweq	r0, #5478	; 0x1566
 44c:	1c05580a 	stcne	8, cr5, [r5], {10}
 450:	4b0a0579 	blmi	281a3c <startup-0x1fd7e5c4>
 454:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 458:	0402000a 	streq	r0, [r2], #-10
 45c:	16052103 	strne	r2, [r5], -r3, lsl #2
 460:	03040200 	movweq	r0, #16896	; 0x4200
 464:	001c052e 	andseq	r0, ip, lr, lsr #10
 468:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 46c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 470:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 474:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 478:	31052003 	tstcc	r5, r3
 47c:	03040200 	movweq	r0, #16896	; 0x4200
 480:	0037052e 	eorseq	r0, r7, lr, lsr #10
 484:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 488:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 48c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 490:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 494:	16055703 	strne	r5, [r5], -r3, lsl #14
 498:	01040200 	mrseq	r0, R12_usr
 49c:	0027053c 	eoreq	r0, r7, ip, lsr r5
 4a0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4a4:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 4a8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4ac:	1d053f01 	stcne	15, cr3, [r5, #-4]
 4b0:	4b0a055a 	blmi	281a20 <startup-0x1fd7e5e0>
 4b4:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 4b8:	0402000a 	streq	r0, [r2], #-10
 4bc:	16052103 	strne	r2, [r5], -r3, lsl #2
 4c0:	03040200 	movweq	r0, #16896	; 0x4200
 4c4:	001c052e 	andseq	r0, ip, lr, lsr #10
 4c8:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 4cc:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4d0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4d4:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 4d8:	31052003 	tstcc	r5, r3
 4dc:	03040200 	movweq	r0, #16896	; 0x4200
 4e0:	0037052e 	eorseq	r0, r7, lr, lsr #10
 4e4:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 4e8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4ec:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4f0:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 4f4:	16055703 	strne	r5, [r5], -r3, lsl #14
 4f8:	01040200 	mrseq	r0, R12_usr
 4fc:	001b053c 	andseq	r0, fp, ip, lsr r5
 500:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 504:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 508:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 50c:	19054101 	stmdbne	r5, {r0, r8, lr}
 510:	3e08055a 	cfrshl32cc	mvfx8, mvfx10, r0
 514:	052e0105 	streq	r0, [lr, #-261]!	; 0xfffffefb
 518:	0402000f 	streq	r0, [r2], #-15
 51c:	18052103 	stmdane	r5, {r0, r1, r8, sp}
 520:	03040200 	movweq	r0, #16896	; 0x4200
 524:	00010557 	andeq	r0, r1, r7, asr r5
 528:	3c010402 	cfstrscc	mvf0, [r1], {2}
 52c:	7c4f055a 	cfstr64vc	mvdx0, [pc], {90}	; 0x5a
 530:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
 534:	0a054b0c 	beq	15316c <startup-0x1feace94>
 538:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 53c:	054c3405 	strbeq	r3, [ip, #-1029]	; 0xfffffbfb
 540:	13057607 	movwne	r7, #22023	; 0x5607
 544:	3c05052e 	cfstr32cc	mvfx0, [r5], {46}	; 0x2e
 548:	052f1505 	streq	r1, [pc, #-1285]!	; 4b <startup-0x1fffffb5>
 54c:	12052e1d 	andne	r2, r5, #464	; 0x1d0
 550:	3015052e 	andscc	r0, r5, lr, lsr #10
 554:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 558:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
 55c:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 560:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
 564:	1a052e03 	bne	14bd78 <startup-0x1feb4288>
 568:	2e230521 	cfsh64cs	mvdx0, mvdx3, #17
 56c:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 570:	12052e20 	andne	r2, r5, #32, 28	; 0x200
 574:	4b0b0520 	blmi	2c19fc <startup-0x1fd3e604>
 578:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 57c:	08052109 	stmdaeq	r5, {r0, r3, r8, sp}
 580:	210e0582 	smlabbcs	lr, r2, r5, r0
 584:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 588:	06052e16 			; <UNDEFINED> instruction: 0x06052e16
 58c:	2021052e 	eorcs	r0, r1, lr, lsr #10
 590:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 594:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 598:	04055602 	streq	r5, [r5], #-1538	; 0xfffff9fe
 59c:	01040200 	mrseq	r0, R12_usr
 5a0:	0024053c 	eoreq	r0, r4, ip, lsr r5
 5a4:	3a020402 	bcc	815b4 <startup-0x1ff7ea4c>
 5a8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 5ac:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5b0:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 5b4:	13054902 	movwne	r4, #22786	; 0x5902
 5b8:	01040200 	mrseq	r0, R12_usr
 5bc:	0002053c 	andeq	r0, r2, ip, lsr r5
 5c0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5c4:	09030105 	stmdbeq	r3, {r0, r2, r8}
 5c8:	0503043c 	streq	r0, [r3, #-1084]	; 0xfffffbc4
 5cc:	7e86031e 	mcrvc	3, 4, r0, cr6, cr14, {0}
 5d0:	4b020558 	blmi	81b38 <startup-0x1ff7e4c8>
 5d4:	2f080b05 	svccs	0x00080b05
 5d8:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 5dc:	0b052e03 	bleq	14bdf0 <startup-0x1feb4210>
 5e0:	201c0521 	andscs	r0, ip, r1, lsr #10
 5e4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 5e8:	1c05210b 	stfnes	f2, [r5], {11}
 5ec:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 5f0:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 5f4:	0305201c 	movweq	r2, #20508	; 0x501c
 5f8:	210c052e 	tstcs	ip, lr, lsr #10
 5fc:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
 600:	1d053001 	stcne	0, cr3, [r5, #-4]
 604:	4b020584 	blmi	81c1c <startup-0x1ff7e3e4>
 608:	2f080b05 	svccs	0x00080b05
 60c:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 610:	0b052e03 	bleq	14be24 <startup-0x1feb41dc>
 614:	201b0521 	andscs	r0, fp, r1, lsr #10
 618:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 61c:	1b05210b 	blne	148a50 <startup-0x1feb75b0>
 620:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 624:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 628:	0305201b 	movweq	r2, #20507	; 0x501b
 62c:	210c052e 	tstcs	ip, lr, lsr #10
 630:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 634:	15053001 	strne	r3, [r5, #-1]
 638:	3d140584 	cfldr32cc	mvfx0, [r4, #-528]	; 0xfffffdf0
 63c:	05201005 	streq	r1, [r0, #-5]!
 640:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 644:	0015054a 	andseq	r0, r5, sl, asr #10
 648:	20010402 	andcs	r0, r1, r2, lsl #8
 64c:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff4f <ball+0xdfffcb13>
 650:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 654:	01040200 	mrseq	r0, R12_usr
 658:	2f070520 	svccs	0x00070520
 65c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 660:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 664:	07052001 	streq	r2, [r5, -r1]
 668:	4a04052f 	bmi	101b2c <startup-0x1fefe4d4>
 66c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 670:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 674:	01052f09 	tsteq	r5, r9, lsl #30
 678:	68140521 	ldmdavs	r4, {r0, r5, r8, sl}
 67c:	2010053d 	andscs	r0, r0, sp, lsr r5
 680:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 684:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 688:	01040200 	mrseq	r0, R12_usr
 68c:	2f070520 	svccs	0x00070520
 690:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 694:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 698:	07052001 	streq	r2, [r5, -r1]
 69c:	4a04052f 	bmi	101b60 <startup-0x1fefe4a0>
 6a0:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 6a4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6a8:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 6ac:	0015054a 	andseq	r0, r5, sl, asr #10
 6b0:	20010402 	andcs	r0, r1, r2, lsl #8
 6b4:	052f0905 	streq	r0, [pc, #-2309]!	; fffffdb7 <ball+0xdfffc97b>
 6b8:	25052101 	strcs	r2, [r5, #-257]	; 0xfffffeff
 6bc:	59100568 	ldmdbpl	r0, {r3, r5, r6, r8, sl}
 6c0:	05751205 	ldrbeq	r1, [r5, #-517]!	; 0xfffffdfb
 6c4:	19057501 	stmdbne	r5, {r0, r8, sl, ip, sp, lr}
 6c8:	3f0a0577 	svccc	0x000a0577
 6cc:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 6d0:	0c052103 	stfeqs	f2, [r5], {3}
 6d4:	3c0a054b 	cfstr32cc	mvfx0, [sl], {75}	; 0x4b
 6d8:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
 6dc:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 6e0:	2f0b0582 	svccs	0x000b0582
 6e4:	02001f05 	andeq	r1, r0, #5, 30
 6e8:	7a030204 	bvc	c0f00 <startup-0x1ff3f100>
 6ec:	0002053c 	andeq	r0, r2, ip, lsr r5
 6f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6f4:	09030905 	stmdbeq	r3, {r0, r2, r8, fp}
 6f8:	2101053c 	tstcs	r1, ip, lsr r5
 6fc:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
 700:	02053f0a 	andeq	r3, r5, #10, 30	; 0x28
 704:	2103052e 	tstcs	r3, lr, lsr #10
 708:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 70c:	06053c0a 	streq	r3, [r5], -sl, lsl #24
 710:	4b0a0530 	blmi	281bd8 <startup-0x1fd7e428>
 714:	05820805 	streq	r0, [r2, #2053]	; 0x805
 718:	1f052f0b 	svcne	0x00052f0b
 71c:	02040200 	andeq	r0, r4, #0, 4
 720:	053c7a03 	ldreq	r7, [ip, #-2563]!	; 0xfffff5fd
 724:	04020002 	streq	r0, [r2], #-2
 728:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 72c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 730:	04042101 	streq	r2, [r4], #-257	; 0xfffffeff
 734:	b9033905 	stmdblt	r3, {r0, r2, r8, fp, ip, sp}
 738:	08054a7f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
 73c:	01053d67 	tsteq	r5, r7, ror #26
 740:	4c29053d 	cfstr32mi	mvfx0, [r9], #-244	; 0xffffff0c
 744:	055c0e05 	ldrbeq	r0, [ip, #-3589]	; 0xfffff1fb
 748:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 74c:	2f0e052e 	svccs	0x000e052e
 750:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 754:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
 758:	3d0b0530 	cfstr32cc	mvfx0, [fp, #-192]	; 0xffffff40
 75c:	3d16053d 	cfldr32cc	mvfx0, [r6, #-244]	; 0xffffff0c
 760:	4b670305 	blmi	19c137c <startup-0x1e63ec84>
 764:	05761305 	ldrbeq	r1, [r6, #-773]!	; 0xfffffcfb
 768:	10052e18 	andne	r2, r5, r8, lsl lr
 76c:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 770:	3d2f0b05 	fstmdbxcc	pc!, {d0-d1}	;@ Deprecated
 774:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 778:	054b6703 	strbeq	r6, [fp, #-1795]	; 0xfffff8fd
 77c:	0d057609 	stceq	6, cr7, [r5, #-36]	; 0xffffffdc
 780:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 784:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 788:	17052f0b 	strne	r2, [r5, -fp, lsl #30]
 78c:	2e1c054c 	cfmac32cs	mvfx0, mvfx12, mvfx12
 790:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 794:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 798:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 79c:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 7a0:	18052f13 	stmdane	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 7a4:	2010052e 	andscs	r0, r0, lr, lsr #10
 7a8:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 7ac:	3e02053d 	mcrcc	5, 0, r0, cr2, cr13, {1}
 7b0:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 7b4:	0e05843f 	cfmvdhreq	mvd5, r8
 7b8:	2e1b0568 	cfmsc32cs	mvfx0, mvfx11, mvfx8
 7bc:	052e2005 	streq	r2, [lr, #-5]!
 7c0:	2d052015 	stccs	0, cr2, [r5, #-84]	; 0xffffffac
 7c4:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 7c8:	02000905 	andeq	r0, r0, #81920	; 0x14000
 7cc:	052f0104 	streq	r0, [pc, #-260]!	; 6d0 <startup-0x1ffff930>
 7d0:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 7d4:	1e052e01 	cdpne	14, 0, cr2, cr5, cr1, {0}
 7d8:	01040200 	mrseq	r0, R12_usr
 7dc:	0023052e 	eoreq	r0, r3, lr, lsr #10
 7e0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 7e4:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 7e8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 7ec:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 7f0:	0b051f01 	bleq	1483fc <startup-0x1feb7c04>
 7f4:	2e180530 	cfmvr64hcs	r0, mvdx8
 7f8:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 7fc:	2d052012 	stccs	0, cr2, [r5, #-72]	; 0xffffffb8
 800:	3e0a051f 	mcrcc	5, 0, r0, cr10, cr15, {0}
 804:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 808:	19052e21 	stmdbne	r5, {r0, r5, r9, sl, fp, sp}
 80c:	2d2e0520 	cfstr32cs	mvfx0, [lr, #-128]!	; 0xffffff80
 810:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 814:	09054b0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, fp, lr}
 818:	21010530 	tstcs	r1, r0, lsr r5
 81c:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
 820:	18055d0e 	stmdane	r5, {r1, r2, r3, r8, sl, fp, ip, lr}
 824:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 828:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 82c:	07057404 	streq	r7, [r5, -r4, lsl #8]
 830:	2e050521 	cfsh32cs	mvfx0, mvfx5, #17
 834:	052f1505 	streq	r1, [pc, #-1285]!	; 337 <startup-0x1ffffcc9>
 838:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
 83c:	2f0f0520 	svccs	0x000f0520
 840:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 844:	0d052e19 	stceq	14, cr2, [r5, #-100]	; 0xffffff9c
 848:	2f0f0520 	svccs	0x000f0520
 84c:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
 850:	0d055b09 	vstreq	d5, [r5, #-36]	; 0xffffffdc
 854:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 858:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 85c:	17052f0b 	strne	r2, [r5, -fp, lsl #30]
 860:	2e1c054c 	cfmac32cs	mvfx0, mvfx12, mvfx12
 864:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 868:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 86c:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 870:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 874:	18052f13 	stmdane	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 878:	2010052e 	andscs	r0, r0, lr, lsr #10
 87c:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 880:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 884:	05044b01 	streq	r4, [r4, #-2817]	; 0xfffff4ff
 888:	4e032905 	vmlami.f16	s4, s6, s10	; <UNPREDICTABLE>
 88c:	6711054a 	ldrvs	r0, [r1, -sl, asr #10]
 890:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
 894:	0705682b 	streq	r6, [r5, -fp, lsr #16]
 898:	670f0567 	strvs	r0, [pc, -r7, ror #10]
 89c:	83010591 	movwhi	r0, #5521	; 0x1591
 8a0:	05762c05 	ldrbeq	r2, [r6, #-3077]!	; 0xfffff3fb
 8a4:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 8a8:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 8ac:	02054c2a 	andeq	r4, r5, #10752	; 0x2a00
 8b0:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 8b4:	33055901 	movwcc	r5, #22785	; 0x5901
 8b8:	6802054c 	stmdavs	r2, {r2, r3, r6, r8, sl}
 8bc:	2010053d 	andscs	r0, r0, sp, lsr r5
 8c0:	3d3e0205 	lfmcc	f0, 4, [lr, #-20]!	; 0xffffffec
 8c4:	052f0105 	streq	r0, [pc, #-261]!	; 7c7 <startup-0x1ffff839>
 8c8:	02056826 	andeq	r6, r5, #2490368	; 0x260000
 8cc:	052f3d3e 	streq	r3, [pc, #-3390]!	; fffffb96 <ball+0xdfffc75a>
 8d0:	05052f07 	streq	r2, [r5, #-3847]	; 0xfffff0f9
 8d4:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 8d8:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 8dc:	20052f01 	andcs	r2, r5, r1, lsl #30
 8e0:	3d020576 	cfstr32cc	mvfx0, [r2, #-472]	; 0xfffffe28
 8e4:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 8e8:	053d3002 	ldreq	r3, [sp, #-2]!
 8ec:	02053d05 	andeq	r3, r5, #320	; 0x140
 8f0:	200e053d 	andcs	r0, lr, sp, lsr r5
 8f4:	052f0905 	streq	r0, [pc, #-2309]!	; fffffff7 <ball+0xdfffcbbb>
 8f8:	22052f01 	andcs	r2, r5, #1, 30
 8fc:	3d0205bc 	cfstr32cc	mvfx0, [r2, #-752]	; 0xfffffd10
 900:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 904:	053d3002 	ldreq	r3, [sp, #-2]!
 908:	02053d07 	andeq	r3, r5, #448	; 0x1c0
 90c:	200e0559 	andcs	r0, lr, r9, asr r5
 910:	052f0905 	streq	r0, [pc, #-2309]!	; 13 <startup-0x1fffffed>
 914:	2a052f01 	bcs	14c520 <startup-0x1feb3ae0>
 918:	670705a0 	strvs	r0, [r7, -r0, lsr #11]
 91c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 920:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 924:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 928:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 92c:	01040200 	mrseq	r0, R12_usr
 930:	2f02053c 	svccs	0x0002053c
 934:	0105593d 	tsteq	r5, sp, lsr r9
 938:	4c12053d 	cfldr32mi	mvfx0, [r2], {61}	; 0x3d
 93c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 930 <startup-0x1ffff6d0>
 940:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 944:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 948:	02053e20 	andeq	r3, r5, #32, 28	; 0x200
 94c:	1b053d59 	blne	14feb8 <startup-0x1feb0148>
 950:	2e10053d 	mrccs	5, 0, r0, cr0, cr13, {1}
 954:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 958:	02053d0a 	andeq	r3, r5, #640	; 0x280
 95c:	9f01055a 	svcls	0x0001055a
 960:	054c2705 	strbeq	r2, [ip, #-1797]	; 0xfffff8fb
 964:	09056707 	stmdbeq	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
 968:	01040200 	mrseq	r0, R12_usr
 96c:	001d0520 	andseq	r0, sp, r0, lsr #10
 970:	3c010402 	cfstrscc	mvf0, [r1], {2}
 974:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 978:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 97c:	593d3102 	ldmdbpl	sp!, {r1, r8, ip, sp}
 980:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 984:	07054c22 	streq	r4, [r5, -r2, lsr #24]
 988:	0205913e 	andeq	r9, r5, #-2147483633	; 0x8000000f
 98c:	04052f68 	streq	r2, [r5], #-3944	; 0xfffff098
 990:	2f07054b 	svccs	0x0007054b
 994:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 998:	08055905 	stmdaeq	r5, {r0, r2, r8, fp, ip, lr}
 99c:	2e07053a 	mcrcs	5, 0, r0, cr7, cr10, {1}
 9a0:	05320205 	ldreq	r0, [r2, #-517]!	; 0xfffffdfb
 9a4:	07054b03 	streq	r4, [r5, -r3, lsl #22]
 9a8:	2103052f 	tstcs	r3, pc, lsr #10
 9ac:	05590505 	ldrbeq	r0, [r9, #-1285]	; 0xfffffafb
 9b0:	07053a08 	streq	r3, [r5, -r8, lsl #20]
 9b4:	3201052e 	andcc	r0, r1, #192937984	; 0xb800000
 9b8:	14050604 	strne	r0, [r5], #-1540	; 0xfffff9fc
 9bc:	9e7f9103 	explse	f1, f3
 9c0:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 9c4:	02052023 	andeq	r2, r5, #35	; 0x23
 9c8:	0523212f 	streq	r2, [r3, #-303]!	; 0xfffffed1
 9cc:	0205200e 	andeq	r2, r5, #14
 9d0:	2010052f 	andscs	r0, r0, pc, lsr #10
 9d4:	052f0205 	streq	r0, [pc, #-517]!	; 7d7 <startup-0x1ffff829>
 9d8:	02052010 	andeq	r2, r5, #16
 9dc:	2011052f 	andscs	r0, r1, pc, lsr #10
 9e0:	052f0105 	streq	r0, [pc, #-261]!	; 8e3 <startup-0x1ffff71d>
 9e4:	080f032a 	stmdaeq	pc, {r1, r3, r5, r8, r9}	; <UNPREDICTABLE>
 9e8:	4c02052e 	cfstr32mi	mvfx0, [r2], {46}	; 0x2e
 9ec:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 9f0:	0e054b05 	vmlaeq.f64	d4, d5, d5
 9f4:	3d03053d 	cfstr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
 9f8:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 9fc:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 a00:	3d0e054b 	cfstr32cc	mvfx0, [lr, #-300]	; 0xfffffed4
 a04:	3e01055a 	cfrshl32cc	mvfx1, mvfx10, r0
 a08:	0e032b05 	vmlaeq.f64	d2, d3, d5
 a0c:	4c02053c 	cfstr32mi	mvfx0, [r2], {60}	; 0x3c
 a10:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 a14:	0e054b05 	vmlaeq.f64	d4, d5, d5
 a18:	3d03053d 	cfstr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
 a1c:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 a20:	05053d0b 	streq	r3, [r5, #-3339]	; 0xfffff2f5
 a24:	3d0e054b 	cfstr32cc	mvfx0, [lr, #-300]	; 0xfffffed4
 a28:	3e01055a 	cfrshl32cc	mvfx1, mvfx10, r0
 a2c:	053f1605 	ldreq	r1, [pc, #-1541]!	; 42f <startup-0x1ffffbd1>
 a30:	67683e02 	strbvs	r3, [r8, -r2, lsl #28]!
 a34:	01052f2f 	tsteq	r5, pc, lsr #30
 a38:	9213054b 	andsls	r0, r3, #314572800	; 0x12c00000
 a3c:	75400205 	strbvc	r0, [r0, #-517]	; 0xfffffdfb
 a40:	306c0305 	rsbcc	r0, ip, r5, lsl #6
 a44:	052f2f75 	streq	r2, [pc, #-3957]!	; fffffad7 <ball+0xdfffc69b>
 a48:	15055a17 	strne	r5, [r5, #-2583]	; 0xfffff5e9
 a4c:	2205053c 	andcs	r0, r5, #60, 10	; 0xf000000
 a50:	67400305 	strbvs	r0, [r0, -r5, lsl #6]
 a54:	5a17052f 	bpl	5c1f18 <startup-0x1fa3e0e8>
 a58:	053c1505 	ldreq	r1, [ip, #-1285]!	; 0xfffffafb
 a5c:	03052205 	movweq	r2, #20997	; 0x5205
 a60:	053c6d03 	ldreq	r6, [ip, #-3331]!	; 0xfffff2fd
 a64:	200a0304 	andcs	r0, sl, r4, lsl #6
 a68:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
 a6c:	11052301 	tstne	r5, r1, lsl #6
 a70:	42020592 	andmi	r0, r2, #612368384	; 0x24800000
 a74:	05757575 	ldrbeq	r7, [r5, #-1397]!	; 0xfffffa8b
 a78:	19056c03 	stmdbne	r5, {r0, r1, sl, fp, sp, lr}
 a7c:	2e050530 	cfmv64hrcs	mvdx5, r0
 a80:	752f0405 	strvc	r0, [pc, #-1029]!	; 683 <startup-0x1ffff97d>
 a84:	18052f2f 	stmdane	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 a88:	3c16055a 	cfldr32cc	mvfx0, [r6], {90}	; 0x5a
 a8c:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
 a90:	2f674004 	svccs	0x00674004
 a94:	055b1a05 	ldrbeq	r1, [fp, #-2565]	; 0xfffff5fb
 a98:	04052e05 	streq	r2, [r5], #-3589	; 0xfffff1fb
 a9c:	2f2f752f 	svccs	0x002f752f
 aa0:	055a1805 	ldrbeq	r1, [sl, #-2053]	; 0xfffff7fb
 aa4:	06053c16 			; <UNDEFINED> instruction: 0x06053c16
 aa8:	40040522 	andmi	r0, r4, r2, lsr #10
 aac:	17052f75 	smlsdxne	r5, r5, pc, r2	; <UNPREDICTABLE>
 ab0:	3c15055b 	cfldr32cc	mvfx0, [r5], {91}	; 0x5b
 ab4:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
 ab8:	3c5a0303 	mrrccc	3, 0, r0, sl, cr3
 abc:	0b030505 	bleq	c1ed8 <startup-0x1ff3e128>
 ac0:	2e110320 	cdpcs	3, 1, cr0, cr1, cr0, {1}
 ac4:	0b030405 	bleq	c1ae0 <startup-0x1ff3e520>
 ac8:	2301052e 	movwcs	r0, #5422	; 0x152e
 acc:	05f41405 	ldrbeq	r1, [r4, #1029]!	; 0x405
 ad0:	1d053d1e 	stcne	13, cr3, [r5, #-120]	; 0xffffff88
 ad4:	5b0a0559 	blpl	282040 <startup-0x1fd7dfc0>
 ad8:	05230105 	streq	r0, [r3, #-261]!	; 0xfffffefb
 adc:	4a2f0310 	bmi	bc1724 <startup-0x1f43e8dc>
 ae0:	2f3e0a05 	svccs	0x003e0a05
 ae4:	3002052f 	andcc	r0, r2, pc, lsr #10
 ae8:	08052f2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 aec:	02053d31 	andeq	r3, r5, #3136	; 0xc40
 af0:	052f303f 	streq	r3, [pc, #-63]!	; ab9 <startup-0x1ffff547>
 af4:	04053203 	streq	r3, [r5], #-515	; 0xfffffdfd
 af8:	2e030530 	cfmv64hrcs	mvdx3, r0
 afc:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 b00:	0a052e03 	beq	14c314 <startup-0x1feb3cec>
 b04:	2e03054b 	cfsh32cs	mvfx0, mvfx3, #43
 b08:	4b4a1303 	blmi	128571c <startup-0x1ed7a8e4>
 b0c:	0b052f4c 	bleq	14c844 <startup-0x1feb37bc>
 b10:	05054b3e 	streq	r4, [r5, #-2878]	; 0xfffff4c2
 b14:	0016054c 	andseq	r0, r6, ip, asr #10
 b18:	4a010402 	bmi	41b28 <startup-0x1ffbe4d8>
 b1c:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 b20:	18052f17 	stmdane	r5, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
 b24:	030a053d 	movweq	r0, #42301	; 0xa53d
 b28:	0e023c5b 	mcreq	12, 0, r3, cr2, cr11, {2}
 b2c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 b30:	00160506 	andseq	r0, r6, r6, lsl #10
 b34:	00000205 	andeq	r0, r0, r5, lsl #4
 b38:	17032000 	strne	r2, [r3, -r0]
 b3c:	13010501 	movwne	r0, #5377	; 0x1501
 b40:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
 b44:	01000302 	tsteq	r0, r2, lsl #6
 b48:	Address 0x00000b48 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   8:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   c:	6b007374 	blvs	1cde4 <startup-0x1ffe321c>
  10:	4c627965 			; <UNDEFINED> instruction: 0x4c627965
  14:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
  18:	5f65766f 	svcpl	0x0065766f
  1c:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  20:	7000656c 	andvc	r6, r0, ip, ror #10
  24:	0078736f 	rsbseq	r7, r8, pc, ror #6
  28:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  2c:	6574006c 	ldrbvs	r0, [r4, #-108]!	; 0xffffff94
  30:	6e007478 	mcrvs	4, 0, r7, cr0, cr8, {3}
  34:	7865546f 	stmdavc	r5!, {r0, r1, r2, r3, r5, r6, sl, ip, lr}^
  38:	72670074 	rsbvc	r0, r7, #116	; 0x74
  3c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  40:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  44:	5f657469 	svcpl	0x00657469
  48:	61746164 	cmnvs	r4, r4, ror #2
  4c:	61726700 	cmnvs	r2, r0, lsl #14
  50:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  54:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  58:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
  5c:	00657a69 	rsbeq	r7, r5, r9, ror #20
  60:	6f654774 	svcvs	0x00654774
  64:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  68:	73610079 	cmnvc	r1, #121	; 0x79
  6c:	5f696963 	svcpl	0x00696963
  70:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  74:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  78:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  7c:	616c5000 	cmnvs	ip, r0
  80:	4c726579 	cfldr64mi	mvdx6, [r2], #-484	; 0xfffffe1c
  84:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
  88:	5f736e69 	svcpl	0x00736e69
  8c:	73746962 	cmnvc	r4, #1605632	; 0x188000
  90:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
  94:	735f6f72 	cmpvc	pc, #456	; 0x1c8
  98:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
  9c:	616c5000 	cmnvs	ip, r0
  a0:	4c726579 	cfldr64mi	mvdx6, [r2], #-484	; 0xfffffe1c
  a4:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
  a8:	57736e69 	ldrbpl	r6, [r3, -r9, ror #28]!
  ac:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
  b0:	5f747865 	svcpl	0x00747865
  b4:	73746962 	cmnvc	r4, #1605632	; 0x188000
  b8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  bc:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  c4:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
  c8:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
  cc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  d0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  d8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  dc:	5f657469 	svcpl	0x00657469
  e0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  e4:	00646e61 	rsbeq	r6, r4, r1, ror #28
  e8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  ec:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
  f0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  f4:	00797274 	rsbseq	r7, r9, r4, ror r2
  f8:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  fc:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 100:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 104:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 108:	47500072 			; <UNDEFINED> instruction: 0x47500072
 10c:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 110:	00595254 	subseq	r5, r9, r4, asr r2
 114:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 118:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
 11c:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 120:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 124:	6f6d5f74 	svcvs	0x006d5f74
 128:	656d6576 	strbvs	r6, [sp, #-1398]!	; 0xfffffa8a
 12c:	6700746e 	strvs	r7, [r0, -lr, ror #8]
 130:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 134:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 138:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 13c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 140:	006e6565 	rsbeq	r6, lr, r5, ror #10
 144:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 148:	75007864 	strvc	r7, [r0, #-2148]	; 0xfffff79c
 14c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 150:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
 154:	656c6f6f 	strbvs	r6, [ip, #-3951]!	; 0xfffff091
 158:	695f6e61 	ldmdbvs	pc, {r0, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 15c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 160:	616c7000 	cmnvs	ip, r0
 164:	5f726579 	svcpl	0x00726579
 168:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 16c:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 170:	0073746e 	rsbseq	r7, r3, lr, ror #8
 174:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 178:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 17c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 180:	73657400 	cmnvc	r5, #0, 8
 184:	67003274 	smlsdxvs	r0, r4, r2, r3
 188:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 18c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 190:	00646165 	rsbeq	r6, r4, r5, ror #2
 194:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 198:	74530054 	ldrbvc	r0, [r3], #-84	; 0xffffffac
 19c:	6d747261 	lfmvs	f7, 2, [r4, #-388]!	; 0xfffffe7c
 1a0:	57756e65 	ldrbpl	r6, [r5, -r5, ror #28]!
 1a4:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
 1a8:	5f747865 	svcpl	0x00747865
 1ac:	73746962 	cmnvc	r4, #1605632	; 0x188000
 1b0:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 1b4:	70006874 	andvc	r6, r0, r4, ror r8
 1b8:	0079736f 	rsbseq	r7, r9, pc, ror #6
 1bc:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 1c0:	63736100 	cmnvs	r3, #0, 2
 1c4:	705f6969 	subsvc	r6, pc, r9, ror #18
 1c8:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 1cc:	6f637372 	svcvs	0x00637372
 1d0:	695f6572 	ldmdbvs	pc, {r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 1d4:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1d8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 1dc:	6e656d74 	mcrvs	13, 3, r6, cr5, cr4, {3}
 1e0:	69625f75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1e4:	72007374 	andvc	r7, r0, #116, 6	; 0xd0000001
 1e8:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 1ec:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 1f0:	6769486e 	strbvs	r4, [r9, -lr, ror #16]!
 1f4:	73610068 	cmnvc	r1, #104	; 0x68
 1f8:	5f696963 	svcpl	0x00696963
 1fc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 200:	6f635f65 	svcvs	0x00635f65
 204:	6f72746e 	svcvs	0x0072746e
 208:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 20c:	67617000 	strbvs	r7, [r1, -r0]!
 210:	72670065 	rsbvc	r0, r7, #101	; 0x65
 214:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 218:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 21c:	645f6461 	ldrbvs	r6, [pc], #-1121	; 224 <startup-0x1ffffddc>
 220:	00617461 	rsbeq	r7, r1, r1, ror #8
 224:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
 228:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
 22c:	0078657a 	rsbseq	r6, r8, sl, ror r5
 230:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 234:	73610079 	cmnvc	r1, #121	; 0x79
 238:	5f696963 	svcpl	0x00696963
 23c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 240:	00646e61 	rsbeq	r6, r4, r1, ror #28
 244:	616c6564 	cmnvs	ip, r4, ror #10
 248:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 24c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 250:	616c6564 	cmnvs	ip, r4, ror #10
 254:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 258:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 25c:	67695270 			; <UNDEFINED> instruction: 0x67695270
 260:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 264:	6170006e 	cmnvs	r0, lr, rrx
 268:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 26c:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 270:	69720074 	ldmdbvs	r2!, {r2, r4, r5, r6}^
 274:	50746867 	rsbspl	r6, r4, r7, ror #16
 278:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 27c:	73610073 	cmnvc	r1, #115	; 0x73
 280:	5f696963 	svcpl	0x00696963
 284:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 288:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 28c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 290:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 294:	6f706d75 	svcvs	0x00706d75
 298:	73746e69 	cmnvc	r4, #1680	; 0x690
 29c:	736e7500 	cmnvc	lr, #0, 10
 2a0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2a4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 2a8:	47007261 	strmi	r7, [r0, -r1, ror #4]
 2ac:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 2b0:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
 2b4:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 2b8:	31303220 	teqcc	r0, r0, lsr #4
 2bc:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
 2c0:	72282035 	eorvc	r2, r8, #53	; 0x35
 2c4:	61656c65 	cmnvs	r5, r5, ror #24
 2c8:	20296573 	eorcs	r6, r9, r3, ror r5
 2cc:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 2d0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 2d4:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
 2d8:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 2dc:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 2e0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 2e4:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 2e8:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
 2ec:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
 2f0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 2f4:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 2f8:	6f6c666d 	svcvs	0x006c666d
 2fc:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 300:	733d6962 	teqvc	sp, #1605632	; 0x188000
 304:	2074666f 	rsbscs	r6, r4, pc, ror #12
 308:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 30c:	613d6863 	teqvs	sp, r3, ror #16
 310:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 314:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 318:	4f2d2067 	svcmi	0x002d2067
 31c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 320:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 324:	72003939 	andvc	r3, r0, #933888	; 0xe4000
 328:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 32c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 330:	776f4c6e 	strbvc	r4, [pc, -lr, ror #24]!
 334:	654c7000 	strbvs	r7, [ip, #-0]
 338:	69577466 	ldmdbvs	r7, {r1, r2, r5, r6, sl, ip, sp, lr}^
 33c:	7865546e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, lr}^
 340:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
 344:	6f507466 	svcvs	0x00507466
 348:	73746e69 	cmnvc	r4, #1680	; 0x690
 34c:	61726700 	cmnvs	r2, r0, lsl #14
 350:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 354:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 358:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 35c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 360:	00726165 	rsbseq	r6, r2, r5, ror #2
 364:	61656c63 	cmnvs	r5, r3, ror #24
 368:	61625f72 	smcvs	9714	; 0x25f2
 36c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 370:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 374:	6f507400 	svcvs	0x00507400
 378:	00746e69 	rsbseq	r6, r4, r9, ror #28
 37c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 380:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 384:	645f6461 	ldrbvs	r6, [pc], #-1121	; 38c <startup-0x1ffffc74>
 388:	00617461 	rsbeq	r7, r1, r1, ror #8
 38c:	5f746573 	svcpl	0x00746573
 390:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 394:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 398:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 39c:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 3a0:	6174735f 	cmnvs	r4, pc, asr r3
 3a4:	68006574 	stmdavs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 3a8:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 3ac:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 3b0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 3b4:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 3b8:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 3bc:	5f776172 	svcpl	0x00776172
 3c0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3c4:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 3c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3cc:	3030355f 	eorscc	r3, r0, pc, asr r5
 3d0:	5000736e 	andpl	r7, r0, lr, ror #6
 3d4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 3d8:	67695272 			; <UNDEFINED> instruction: 0x67695272
 3dc:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 3e0:	625f736e 	subsvs	r7, pc, #-1207959551	; 0xb8000001
 3e4:	00737469 	rsbseq	r7, r3, r9, ror #8
 3e8:	68746f62 	ldmdavs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 3ec:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 3f0:	73610059 	cmnvc	r1, #89	; 0x59
 3f4:	5f696963 	svcpl	0x00696963
 3f8:	6f746f67 	svcvs	0x00746f67
 3fc:	70007978 	andvc	r7, r0, r8, ror r9
 400:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 404:	6b007468 	blvs	1d5ac <startup-0x1ffe2a54>
 408:	00737965 	rsbseq	r7, r3, r5, ror #18
 40c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 410:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 414:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 418:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 41c:	736f5c73 	cmnvc	pc, #29440	; 0x7300
 420:	5c6e6e61 	stclpl	14, cr6, [lr], #-388	; 0xfffffe7c
 424:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 428:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 42c:	69475c73 	stmdbvs	r7, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
 430:	6f725074 	svcvs	0x00725074
 434:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 438:	63535c73 	cmpvs	r3, #29440	; 0x7300
 43c:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 2a4 <startup-0x1ffffd5c>
 440:	6a6f7250 	bvs	1bdcd88 <startup-0x1e423278>
 444:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 448:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 44c:	5c373130 	ldfpls	f3, [r7], #-192	; 0xffffff40
 450:	6262614c 	rsbvs	r6, r2, #76, 2
 454:	5f455735 	svcpl	0x00455735
 458:	5f454449 	svcpl	0x00454449
 45c:	52504447 	subspl	r4, r0, #1191182336	; 0x47000000
 460:	5254525f 	subspl	r5, r4, #-268435451	; 0xf0000005
 464:	505c4150 	subspl	r4, ip, r0, asr r1
 468:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 46c:	70617267 	rsbvc	r7, r1, r7, ror #4
 470:	5f636968 	svcpl	0x00636968
 474:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 478:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 47c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 480:	624f7400 	subvs	r7, pc, #0, 8
 484:	656b006a 	strbvs	r0, [fp, #-106]!	; 0xffffff96
 488:	616f6279 	smcvs	63017	; 0xf629
 48c:	6f4c6472 	svcvs	0x004c6472
 490:	706e4977 	rsbvc	r4, lr, r7, ror r9
 494:	67007475 	smlsdxvs	r0, r5, r4, r7
 498:	654b7465 	strbvs	r7, [fp, #-1125]	; 0xfffffb9b
 49c:	6c615679 	stclvs	6, cr5, [r1], #-484	; 0xfffffe1c
 4a0:	50006575 	andpl	r6, r0, r5, ror r5
 4a4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 4a8:	67695272 			; <UNDEFINED> instruction: 0x67695272
 4ac:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 4b0:	6957736e 	ldmdbvs	r7, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 4b4:	65546874 	ldrbvs	r6, [r4, #-2164]	; 0xfffff78c
 4b8:	625f7478 	subsvs	r7, pc, #120, 8	; 0x78000000
 4bc:	00737469 	rsbseq	r7, r3, r9, ror #8
 4c0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 4c4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 4c8:	63736100 	cmnvs	r3, #0, 2
 4cc:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 4d0:	5f646165 	svcpl	0x00646165
 4d4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4d8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4dc:	61007265 	tstvs	r0, r5, ror #4
 4e0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 4e4:	656e0073 	strbvs	r0, [lr, #-115]!	; 0xffffff8d
 4e8:	6c007977 			; <UNDEFINED> instruction: 0x6c007977
 4ec:	5f64616f 	svcpl	0x0064616f
 4f0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 4f4:	61006574 	tstvs	r0, r4, ror r5
 4f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4fc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 500:	645f6574 	ldrbvs	r6, [pc], #-1396	; 508 <startup-0x1ffffaf8>
 504:	00617461 	rsbeq	r7, r1, r1, ror #8
 508:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 50c:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 510:	4c776f52 	ldclmi	15, cr6, [r7], #-328	; 0xfffffeb8
 514:	6400776f 	strvs	r7, [r0], #-1903	; 0xfffff891
 518:	00776172 	rsbseq	r6, r7, r2, ror r1
 51c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 520:	73007964 	movwvc	r7, #2404	; 0x964
 524:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 528:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 52c:	616c7000 	cmnvs	ip, r0
 530:	5f726579 	svcpl	0x00726579
 534:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 538:	6f705f74 	svcvs	0x00705f74
 53c:	73746e69 	cmnvc	r4, #1680	; 0x690
 540:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 548 <startup-0x1ffffab8>
 544:	6973696c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 548:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
 54c:	5f687469 	svcpl	0x00687469
 550:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 554:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 558:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 49e <startup-0x1ffffb62>	; <UNPREDICTABLE>
 55c:	6f726b69 	svcvs	0x00726b69
 560:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 564:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 568:	67694864 	strbvs	r4, [r9, -r4, ror #16]!
 56c:	706e4968 	rsbvc	r4, lr, r8, ror #18
 570:	63007475 	movwvs	r7, #1141	; 0x475
 574:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 578:	6a626f5f 	bvs	189c2fc <startup-0x1e763d04>
 57c:	00746365 	rsbseq	r6, r4, r5, ror #6
 580:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 584:	6f65675f 	svcvs	0x0065675f
 588:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 58c:	52700079 	rsbspl	r0, r0, #121	; 0x79
 590:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 594:	546e6957 	strbtpl	r6, [lr], #-2391	; 0xfffff6a9
 598:	00747865 	rsbseq	r7, r4, r5, ror #16
 59c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5a0:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 5a4:	5f657469 	svcpl	0x00657469
 5a8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 5ac:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 5b0:	616d0065 	cmnvs	sp, r5, rrx
 5b4:	6d006b73 	vstrvs	d6, [r0, #-460]	; 0xfffffe34
 5b8:	5f65766f 	svcpl	0x0065766f
 5bc:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 5c0:	73657400 	cmnvc	r5, #0, 8
 5c4:	70003174 	andvc	r3, r0, r4, ror r1
 5c8:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 5cc:	72670074 	rsbvc	r0, r7, #116	; 0x74
 5d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5d4:	61775f63 	cmnvs	r7, r3, ror #30
 5d8:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 5dc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 5e0:	616c7000 	cmnvs	ip, r0
 5e4:	5f726579 	svcpl	0x00726579
 5e8:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 5ec:	6f6d5f74 	svcvs	0x006d5f74
 5f0:	656d6576 	strbvs	r6, [sp, #-1398]!	; 0xfffffa8a
 5f4:	6300746e 	movwvs	r7, #1134	; 0x46e
 5f8:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 5fc:	4f50006e 	svcmi	0x0050006e
 600:	43454a42 	movtmi	r4, #23106	; 0x5a42
 604:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
 608:	5f687464 	svcpl	0x00687464
 60c:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
 610:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 614:	61726400 	cmnvs	r2, r0, lsl #8
 618:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 61c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 620:	61747300 	cmnvs	r4, r0, lsl #6
 624:	70757472 	rsbsvc	r7, r5, r2, ror r4
 628:	746f6e00 	strbtvc	r6, [pc], #-3584	; 630 <startup-0x1ffff9d0>
 62c:	6e690058 	mcrvs	0, 3, r0, cr9, cr8, {2}
 630:	00786564 	rsbseq	r6, r8, r4, ror #10
 634:	66654c70 			; <UNDEFINED> instruction: 0x66654c70
 638:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
 63c:	2f3a4300 	svccs	0x003a4300
 640:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 644:	736f2f73 	cmnvc	pc, #460	; 0x1cc
 648:	2f6e6e61 	svccs	0x006e6e61
 64c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 650:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 654:	69472f73 	stmdbvs	r7, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 658:	6f725074 	svcvs	0x00725074
 65c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 660:	63532f73 	cmpvs	r3, #460	; 0x1cc
 664:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 4cc <startup-0x1ffffb34>
 668:	6a6f7250 	bvs	1bdcfb0 <startup-0x1e423050>
 66c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 670:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 674:	2f373130 	svccs	0x00373130
 678:	6262614c 	rsbvs	r6, r2, #76, 2
 67c:	5f455735 	svcpl	0x00455735
 680:	5f454449 	svcpl	0x00454449
 684:	52504447 	subspl	r4, r0, #1191182336	; 0x47000000
 688:	5254525f 	subspl	r5, r4, #-268435451	; 0xf0000005
 68c:	502f4150 	eorpl	r4, pc, r0, asr r1	; <UNPREDICTABLE>
 690:	2f676e6f 	svccs	0x00676e6f
 694:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 698:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 69c:	5f707369 	svcpl	0x00707369
 6a0:	79706f63 	ldmdbvc	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 6a4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 6a8:	63610074 	cmnvs	r1, #116	; 0x74
 6ac:	61766974 	cmnvs	r6, r4, ror r9
 6b0:	6f526574 	svcvs	0x00526574
 6b4:	67694877 			; <UNDEFINED> instruction: 0x67694877
 6b8:	72670068 	rsbvc	r0, r7, #104	; 0x68
 6bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 6c0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 6c4:	00657469 	rsbeq	r7, r5, r9, ror #8
 6c8:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 6cc:	63736100 	cmnvs	r3, #0, 2
 6d0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 6d4:	5f646165 	svcpl	0x00646165
 6d8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 6dc:	61007375 	tstvs	r0, r5, ror r3
 6e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 6e4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 6e8:	73610074 	cmnvc	r1, #116	; 0x74
 6ec:	5f696963 	svcpl	0x00696963
 6f0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 6f4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 6f8:	Address 0x000006f8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	0000002c 	andeq	r0, r0, ip, lsr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	20000084 	andcs	r0, r0, r4, lsl #1
  58:	00000030 	andeq	r0, r0, r0, lsr r0
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000b4 	strhcs	r0, [r0], -r4
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000c6 	andcs	r0, r0, r6, asr #1
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	2000010c 	andcs	r0, r0, ip, lsl #2
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000148 	andcs	r0, r0, r8, asr #2
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001aa 	andcs	r0, r0, sl, lsr #3
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	20000220 	andcs	r0, r0, r0, lsr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	20000330 	andcs	r0, r0, r0, lsr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	20000370 	andcs	r0, r0, r0, ror r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003b6 			; <UNDEFINED> instruction: 0x200003b6
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	200003e0 	andcs	r0, r0, r0, ror #7
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000436 	andcs	r0, r0, r6, lsr r4
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	2000049e 	mulcs	r0, lr, r4
 1f0:	000000a2 	andeq	r0, r0, r2, lsr #1
 1f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f8:	41018e02 	tstmi	r1, r2, lsl #28
 1fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 200:	00000007 	andeq	r0, r0, r7
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	20000540 	andcs	r0, r0, r0, asr #10
 210:	000000cc 	andeq	r0, r0, ip, asr #1
 214:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 218:	41018e02 	tstmi	r1, r2, lsl #28
 21c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 220:	00000007 	andeq	r0, r0, r7
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	2000060c 	andcs	r0, r0, ip, lsl #12
 230:	00000062 	andeq	r0, r0, r2, rrx
 234:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 238:	41018e02 	tstmi	r1, r2, lsl #28
 23c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	2000066e 	andcs	r0, r0, lr, ror #12
 250:	00000062 	andeq	r0, r0, r2, rrx
 254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 258:	41018e02 	tstmi	r1, r2, lsl #28
 25c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 260:	00000007 	andeq	r0, r0, r7
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000000 	andeq	r0, r0, r0
 26c:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 270:	00000034 	andeq	r0, r0, r4, lsr r0
 274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 278:	41018e02 	tstmi	r1, r2, lsl #28
 27c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 280:	00000007 	andeq	r0, r0, r7
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	20000704 	andcs	r0, r0, r4, lsl #14
 290:	0000002c 	andeq	r0, r0, ip, lsr #32
 294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 298:	41018e02 	tstmi	r1, r2, lsl #28
 29c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a0:	00000007 	andeq	r0, r0, r7
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	20000730 	andcs	r0, r0, r0, lsr r7
 2b0:	000000c4 	andeq	r0, r0, r4, asr #1
 2b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b8:	41018e02 	tstmi	r1, r2, lsl #28
 2bc:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2c0:	00000007 	andeq	r0, r0, r7
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	200007f4 	strdcs	r0, [r0], -r4
 2d0:	00000064 	andeq	r0, r0, r4, rrx
 2d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d8:	41018e02 	tstmi	r1, r2, lsl #28
 2dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e0:	00000007 	andeq	r0, r0, r7
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	20000858 	andcs	r0, r0, r8, asr r8
 2f0:	00000064 	andeq	r0, r0, r4, rrx
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000000 	andeq	r0, r0, r0
 30c:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
 310:	00000054 	andeq	r0, r0, r4, asr r0
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	20000910 	andcs	r0, r0, r0, lsl r9
 330:	00000054 	andeq	r0, r0, r4, asr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	00000020 	andeq	r0, r0, r0, lsr #32
 348:	00000000 	andeq	r0, r0, r0
 34c:	20000964 	andcs	r0, r0, r4, ror #18
 350:	00000034 	andeq	r0, r0, r4, lsr r0
 354:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 358:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 35c:	41018e02 	tstmi	r1, r2, lsl #28
 360:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 364:	00000007 	andeq	r0, r0, r7
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	00000000 	andeq	r0, r0, r0
 370:	20000998 	mulcs	r0, r8, r9
 374:	00000056 	andeq	r0, r0, r6, asr r0
 378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 37c:	41018e02 	tstmi	r1, r2, lsl #28
 380:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 384:	00000007 	andeq	r0, r0, r7
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	200009ee 	andcs	r0, r0, lr, ror #19
 394:	00000056 	andeq	r0, r0, r6, asr r0
 398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 39c:	41018e02 	tstmi	r1, r2, lsl #28
 3a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a4:	00000007 	andeq	r0, r0, r7
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	20000a44 	andcs	r0, r0, r4, asr #20
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3bc:	41018e02 	tstmi	r1, r2, lsl #28
 3c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3c4:	00000007 	andeq	r0, r0, r7
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	20000a64 	andcs	r0, r0, r4, ror #20
 3d4:	000000f8 	strdeq	r0, [r0], -r8
 3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3dc:	41018e02 	tstmi	r1, r2, lsl #28
 3e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e4:	00000007 	andeq	r0, r0, r7
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	20000b5c 	andcs	r0, r0, ip, asr fp
 3f4:	0000006e 	andeq	r0, r0, lr, rrx
 3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3fc:	41018e02 	tstmi	r1, r2, lsl #28
 400:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 404:	00000007 	andeq	r0, r0, r7
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	20000bca 	andcs	r0, r0, sl, asr #23
 414:	000000b2 	strheq	r0, [r0], -r2
 418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 41c:	41018e02 	tstmi	r1, r2, lsl #28
 420:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 424:	00000007 	andeq	r0, r0, r7
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	20000c7c 	andcs	r0, r0, ip, ror ip
 434:	00000030 	andeq	r0, r0, r0, lsr r0
 438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 43c:	41018e02 	tstmi	r1, r2, lsl #28
 440:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 444:	00000007 	andeq	r0, r0, r7
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	00000000 	andeq	r0, r0, r0
 450:	20000cac 	andcs	r0, r0, ip, lsr #25
 454:	00000048 	andeq	r0, r0, r8, asr #32
 458:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 45c:	41018e02 	tstmi	r1, r2, lsl #28
 460:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 464:	00000007 	andeq	r0, r0, r7
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000000 	andeq	r0, r0, r0
 470:	20000cf4 	strdcs	r0, [r0], -r4
 474:	0000002a 	andeq	r0, r0, sl, lsr #32
 478:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 47c:	41018e02 	tstmi	r1, r2, lsl #28
 480:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 484:	00000007 	andeq	r0, r0, r7
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000000 	andeq	r0, r0, r0
 490:	20000d1e 	andcs	r0, r0, lr, lsl sp
 494:	0000002a 	andeq	r0, r0, sl, lsr #32
 498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 49c:	41018e02 	tstmi	r1, r2, lsl #28
 4a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4a4:	00000007 	andeq	r0, r0, r7
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	20000d48 	andcs	r0, r0, r8, asr #26
 4b4:	00000030 	andeq	r0, r0, r0, lsr r0
 4b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4bc:	41018e02 	tstmi	r1, r2, lsl #28
 4c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c4:	00000007 	andeq	r0, r0, r7
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	00000000 	andeq	r0, r0, r0
 4d0:	20000d78 	andcs	r0, r0, r8, ror sp
 4d4:	00000034 	andeq	r0, r0, r4, lsr r0
 4d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4dc:	41018e02 	tstmi	r1, r2, lsl #28
 4e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4e4:	00000007 	andeq	r0, r0, r7
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	20000dac 	andcs	r0, r0, ip, lsr #27
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 504:	00000007 	andeq	r0, r0, r7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000000 	andeq	r0, r0, r0
 510:	20000dec 	andcs	r0, r0, ip, ror #27
 514:	00000040 	andeq	r0, r0, r0, asr #32
 518:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 51c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 520:	180e4101 	stmdane	lr, {r0, r8, lr}
 524:	00070d41 	andeq	r0, r7, r1, asr #26
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	20000e2c 	andcs	r0, r0, ip, lsr #28
 534:	0000003c 	andeq	r0, r0, ip, lsr r0
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	00000018 	andeq	r0, r0, r8, lsl r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	20000e68 	andcs	r0, r0, r8, ror #28
 554:	0000002e 	andeq	r0, r0, lr, lsr #32
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0000070d 	andeq	r0, r0, sp, lsl #14
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	00000000 	andeq	r0, r0, r0
 56c:	20000e96 	mulcs	r0, r6, lr
 570:	0000004e 	andeq	r0, r0, lr, asr #32
 574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 578:	41018e02 	tstmi	r1, r2, lsl #28
 57c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 580:	00000007 	andeq	r0, r0, r7
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	20000ee4 	andcs	r0, r0, r4, ror #29
 590:	0000003c 	andeq	r0, r0, ip, lsr r0
 594:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 598:	41018e02 	tstmi	r1, r2, lsl #28
 59c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a0:	00000007 	andeq	r0, r0, r7
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	20000f20 	andcs	r0, r0, r0, lsr #30
 5b0:	00000088 	andeq	r0, r0, r8, lsl #1
 5b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5b8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	20000000 	andcs	r0, r0, r0
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	00000018 	andeq	r0, r0, r8, lsl r0
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	20000fa8 	andcs	r0, r0, r8, lsr #31
 5e4:	0000004c 	andeq	r0, r0, ip, asr #32
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	20000ff4 	strdcs	r0, [r0], -r4
 600:	0000004e 	andeq	r0, r0, lr, asr #32
 604:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 608:	41018e02 	tstmi	r1, r2, lsl #28
 60c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 610:	00000007 	andeq	r0, r0, r7
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	20001042 	andcs	r1, r0, r2, asr #32
 620:	0000004e 	andeq	r0, r0, lr, asr #32
 624:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 628:	41018e02 	tstmi	r1, r2, lsl #28
 62c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 630:	00000007 	andeq	r0, r0, r7
 634:	0000001c 	andeq	r0, r0, ip, lsl r0
 638:	00000000 	andeq	r0, r0, r0
 63c:	20001090 	mulcs	r0, r0, r0
 640:	00000040 	andeq	r0, r0, r0, asr #32
 644:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 648:	41018e02 	tstmi	r1, r2, lsl #28
 64c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 650:	00000007 	andeq	r0, r0, r7
 654:	0000001c 	andeq	r0, r0, ip, lsl r0
 658:	00000000 	andeq	r0, r0, r0
 65c:	200010d0 	ldrdcs	r1, [r0], -r0
 660:	00000094 	muleq	r0, r4, r0
 664:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 668:	41018e02 	tstmi	r1, r2, lsl #28
 66c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 670:	00000007 	andeq	r0, r0, r7
 674:	0000001c 	andeq	r0, r0, ip, lsl r0
 678:	00000000 	andeq	r0, r0, r0
 67c:	20001164 	andcs	r1, r0, r4, ror #2
 680:	0000011c 	andeq	r0, r0, ip, lsl r1
 684:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 688:	41018e02 	tstmi	r1, r2, lsl #28
 68c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 690:	00000007 	andeq	r0, r0, r7
 694:	0000001c 	andeq	r0, r0, ip, lsl r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	20001280 	andcs	r1, r0, r0, lsl #5
 6a0:	00000024 	andeq	r0, r0, r4, lsr #32
 6a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 6a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 6ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 6b0:	00070d41 	andeq	r0, r7, r1, asr #26
 6b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	200012a4 	andcs	r1, r0, r4, lsr #5
 6c0:	000000c0 	andeq	r0, r0, r0, asr #1
 6c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6c8:	41018e02 	tstmi	r1, r2, lsl #28
 6cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 6d0:	00000007 	andeq	r0, r0, r7
