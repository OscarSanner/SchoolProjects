
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "GameLogic.h"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fdae 	bl	20000b64 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	22fa      	movs	r2, #250	; 0xfa
20000064:	0091      	lsls	r1, r2, #2
20000066:	0018      	movs	r0, r3
20000068:	f000 fdee 	bl	20000c48 <__udivsi3>
2000006c:	0003      	movs	r3, r0
2000006e:	607b      	str	r3, [r7, #4]
	us ++;
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	3301      	adds	r3, #1
20000074:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
20000076:	2300      	movs	r3, #0
20000078:	60fb      	str	r3, [r7, #12]
2000007a:	e004      	b.n	20000086 <delay_mikro+0x2e>
		delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	009a      	lsls	r2, r3, #2
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	429a      	cmp	r2, r3
2000008e:	d8f5      	bhi.n	2000007c <delay_mikro+0x24>
	}
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b004      	add	sp, #16
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms){
2000009a:	b580      	push	{r7, lr}
2000009c:	b084      	sub	sp, #16
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f000 fdcd 	bl	20000c48 <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
		ms ++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x34>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc8 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0x24>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <delay_500ns>:

void delay_500ns(){
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	delay_250ns();
200000e4:	f7ff ff94 	bl	20000010 <delay_250ns>
	delay_250ns();
200000e8:	f7ff ff92 	bl	20000010 <delay_250ns>
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_ctrl_bit_set>:
void graphic_ctrl_bit_set(uint8_t x){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	0002      	movs	r2, r0
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000fe:	4b0d      	ldr	r3, [pc, #52]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	b2db      	uxtb	r3, r3
20000104:	b25a      	sxtb	r2, r3
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	2104      	movs	r1, #4
2000010e:	438b      	bics	r3, r1
20000110:	b25b      	sxtb	r3, r3
20000112:	4313      	orrs	r3, r2
20000114:	b25a      	sxtb	r2, r3
20000116:	4b07      	ldr	r3, [pc, #28]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000118:	b2d2      	uxtb	r2, r2
2000011a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
2000011c:	4b05      	ldr	r3, [pc, #20]	; (20000134 <graphic_ctrl_bit_set+0x42>)
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	b2db      	uxtb	r3, r3
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b2db      	uxtb	r3, r3
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000144:	4b0a      	ldr	r3, [pc, #40]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	1dfa      	adds	r2, r7, #7
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	2104      	movs	r1, #4
20000152:	430a      	orrs	r2, r1
20000154:	b2d2      	uxtb	r2, r2
20000156:	b252      	sxtb	r2, r2
20000158:	43d2      	mvns	r2, r2
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	4b03      	ldr	r3, [pc, #12]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000162:	b2d2      	uxtb	r2, r2
20000164:	701a      	strb	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b002      	add	sp, #8
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <select_controller>:

void select_controller(uint8_t controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000180:	230f      	movs	r3, #15
20000182:	18fb      	adds	r3, r7, r3
20000184:	2200      	movs	r2, #0
20000186:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b18      	cmp	r3, #24
2000018e:	d01a      	beq.n	200001c6 <select_controller+0x52>
20000190:	dc1d      	bgt.n	200001ce <select_controller+0x5a>
20000192:	2b10      	cmp	r3, #16
20000194:	d010      	beq.n	200001b8 <select_controller+0x44>
20000196:	dc1a      	bgt.n	200001ce <select_controller+0x5a>
20000198:	2b00      	cmp	r3, #0
2000019a:	d002      	beq.n	200001a2 <select_controller+0x2e>
2000019c:	2b08      	cmp	r3, #8
2000019e:	d004      	beq.n	200001aa <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001a0:	e015      	b.n	200001ce <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001a2:	2018      	movs	r0, #24
200001a4:	f7ff ffc8 	bl	20000138 <graphic_ctrl_bit_clear>
200001a8:	e012      	b.n	200001d0 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001aa:	2010      	movs	r0, #16
200001ac:	f7ff ffc4 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ff9e 	bl	200000f2 <graphic_ctrl_bit_set>
200001b6:	e00b      	b.n	200001d0 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001b8:	2008      	movs	r0, #8
200001ba:	f7ff ffbd 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff97 	bl	200000f2 <graphic_ctrl_bit_set>
200001c4:	e004      	b.n	200001d0 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ff93 	bl	200000f2 <graphic_ctrl_bit_set>
200001cc:	e000      	b.n	200001d0 <select_controller+0x5c>
		default: return;
200001ce:	46c0      	nop			; (mov r8, r8)
	}
}
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}

200001d6 <graphic_wait_ready>:

void graphic_wait_ready(void){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ffab 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001e2:	4b16      	ldr	r3, [pc, #88]	; (2000023c <graphic_wait_ready+0x66>)
200001e4:	4a16      	ldr	r2, [pc, #88]	; (20000240 <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ff82 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ee:	2001      	movs	r0, #1
200001f0:	f7ff ffa2 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_500ns();
200001f4:	f7ff ff74 	bl	200000e0 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff7a 	bl	200000f2 <graphic_ctrl_bit_set>
		delay_500ns();
200001fe:	f7ff ff6f 	bl	200000e0 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
20000202:	4b10      	ldr	r3, [pc, #64]	; (20000244 <graphic_wait_ready+0x6e>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2da      	uxtb	r2, r3
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	217f      	movs	r1, #127	; 0x7f
2000020c:	438a      	bics	r2, r1
2000020e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff91 	bl	20000138 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff63 	bl	200000e0 <delay_500ns>
		if(c == 0){
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	2b00      	cmp	r3, #0
20000220:	d000      	beq.n	20000224 <graphic_wait_ready+0x4e>
	while(1){
20000222:	e7e9      	b.n	200001f8 <graphic_wait_ready+0x22>
			break;
20000224:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000226:	2040      	movs	r0, #64	; 0x40
20000228:	f7ff ff63 	bl	200000f2 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000022c:	4b03      	ldr	r3, [pc, #12]	; (2000023c <graphic_wait_ready+0x66>)
2000022e:	4a06      	ldr	r2, [pc, #24]	; (20000248 <graphic_wait_ready+0x72>)
20000230:	601a      	str	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff6d 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff44 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff80 	bl	20000174 <select_controller>
	delay_500ns();
20000274:	f7ff ff34 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff3a 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff ff2f 	bl	200000e0 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff53 	bl	20000138 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff67 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff96 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff5e 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff8d 	bl	200001d6 <graphic_wait_ready>
	}
	return rv;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff3a 	bl	20000174 <select_controller>
	delay_500ns();
20000300:	f7ff feee 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff fef4 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff fee9 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff12 	bl	20000138 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff28 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff57 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff1e 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff4d 	bl	200001d6 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed5 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff13 	bl	20000174 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fee2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fefb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff feda 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fec2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fedb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fe97 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff feb7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initialize>:

void graphic_initialize(){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6e 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe1e 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe39 	bl	2000009a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe62 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe8c 	bl	20000174 <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen(){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
200004cc:	b085      	sub	sp, #20
200004ce:	af00      	add	r7, sp, #0
200004d0:	0004      	movs	r4, r0
200004d2:	0008      	movs	r0, r1
200004d4:	0011      	movs	r1, r2
200004d6:	1dfb      	adds	r3, r7, #7
200004d8:	1c22      	adds	r2, r4, #0
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	1c02      	adds	r2, r0, #0
200004e0:	701a      	strb	r2, [r3, #0]
200004e2:	1d7b      	adds	r3, r7, #5
200004e4:	1c0a      	adds	r2, r1, #0
200004e6:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b80      	cmp	r3, #128	; 0x80
200004ee:	d900      	bls.n	200004f2 <pixel+0x28>
200004f0:	e0c7      	b.n	20000682 <pixel+0x1b8>
200004f2:	1dbb      	adds	r3, r7, #6
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	2b40      	cmp	r3, #64	; 0x40
200004f8:	d900      	bls.n	200004fc <pixel+0x32>
200004fa:	e0c2      	b.n	20000682 <pixel+0x1b8>
200004fc:	1dfb      	adds	r3, r7, #7
200004fe:	781b      	ldrb	r3, [r3, #0]
20000500:	2b00      	cmp	r3, #0
20000502:	d100      	bne.n	20000506 <pixel+0x3c>
20000504:	e0bd      	b.n	20000682 <pixel+0x1b8>
20000506:	1dbb      	adds	r3, r7, #6
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	2b00      	cmp	r3, #0
2000050c:	d100      	bne.n	20000510 <pixel+0x46>
2000050e:	e0b8      	b.n	20000682 <pixel+0x1b8>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000510:	1dbb      	adds	r3, r7, #6
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	3b01      	subs	r3, #1
20000516:	2b00      	cmp	r3, #0
20000518:	da00      	bge.n	2000051c <pixel+0x52>
2000051a:	3307      	adds	r3, #7
2000051c:	10db      	asrs	r3, r3, #3
2000051e:	001a      	movs	r2, r3
20000520:	230c      	movs	r3, #12
20000522:	18fb      	adds	r3, r7, r3
20000524:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
20000526:	1dbb      	adds	r3, r7, #6
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	3b01      	subs	r3, #1
2000052c:	4a57      	ldr	r2, [pc, #348]	; (2000068c <pixel+0x1c2>)
2000052e:	4013      	ands	r3, r2
20000530:	d504      	bpl.n	2000053c <pixel+0x72>
20000532:	3b01      	subs	r3, #1
20000534:	2208      	movs	r2, #8
20000536:	4252      	negs	r2, r2
20000538:	4313      	orrs	r3, r2
2000053a:	3301      	adds	r3, #1
2000053c:	2b07      	cmp	r3, #7
2000053e:	d82c      	bhi.n	2000059a <pixel+0xd0>
20000540:	009a      	lsls	r2, r3, #2
20000542:	4b53      	ldr	r3, [pc, #332]	; (20000690 <pixel+0x1c6>)
20000544:	18d3      	adds	r3, r2, r3
20000546:	681b      	ldr	r3, [r3, #0]
20000548:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000054a:	230f      	movs	r3, #15
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	2201      	movs	r2, #1
20000550:	701a      	strb	r2, [r3, #0]
20000552:	e023      	b.n	2000059c <pixel+0xd2>
		case 1: mask = 2; break;
20000554:	230f      	movs	r3, #15
20000556:	18fb      	adds	r3, r7, r3
20000558:	2202      	movs	r2, #2
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	e01e      	b.n	2000059c <pixel+0xd2>
		case 2: mask = 4; break;
2000055e:	230f      	movs	r3, #15
20000560:	18fb      	adds	r3, r7, r3
20000562:	2204      	movs	r2, #4
20000564:	701a      	strb	r2, [r3, #0]
20000566:	e019      	b.n	2000059c <pixel+0xd2>
		case 3: mask = 8; break;
20000568:	230f      	movs	r3, #15
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	2208      	movs	r2, #8
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e014      	b.n	2000059c <pixel+0xd2>
		case 4: mask = 0x10; break;
20000572:	230f      	movs	r3, #15
20000574:	18fb      	adds	r3, r7, r3
20000576:	2210      	movs	r2, #16
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e00f      	b.n	2000059c <pixel+0xd2>
		case 5: mask = 0x20; break;
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	2220      	movs	r2, #32
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e00a      	b.n	2000059c <pixel+0xd2>
		case 6: mask = 0x40; break;
20000586:	230f      	movs	r3, #15
20000588:	18fb      	adds	r3, r7, r3
2000058a:	2240      	movs	r2, #64	; 0x40
2000058c:	701a      	strb	r2, [r3, #0]
2000058e:	e005      	b.n	2000059c <pixel+0xd2>
		case 7: mask = 0x80; break;
20000590:	230f      	movs	r3, #15
20000592:	18fb      	adds	r3, r7, r3
20000594:	2280      	movs	r2, #128	; 0x80
20000596:	701a      	strb	r2, [r3, #0]
20000598:	e000      	b.n	2000059c <pixel+0xd2>
		default: break;
2000059a:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
2000059c:	1d7b      	adds	r3, r7, #5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d105      	bne.n	200005b0 <pixel+0xe6>
		mask = ~mask;
200005a4:	220f      	movs	r2, #15
200005a6:	18bb      	adds	r3, r7, r2
200005a8:	18ba      	adds	r2, r7, r2
200005aa:	7812      	ldrb	r2, [r2, #0]
200005ac:	43d2      	mvns	r2, r2
200005ae:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	2b40      	cmp	r3, #64	; 0x40
200005b6:	d90a      	bls.n	200005ce <pixel+0x104>
		controller = B_CS2;
200005b8:	230e      	movs	r3, #14
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	2210      	movs	r2, #16
200005be:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005c0:	230d      	movs	r3, #13
200005c2:	18fb      	adds	r3, r7, r3
200005c4:	1dfa      	adds	r2, r7, #7
200005c6:	7812      	ldrb	r2, [r2, #0]
200005c8:	3a41      	subs	r2, #65	; 0x41
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e009      	b.n	200005e2 <pixel+0x118>
	}else{
		controller = B_CS1;
200005ce:	230e      	movs	r3, #14
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	2208      	movs	r2, #8
200005d4:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005d6:	230d      	movs	r3, #13
200005d8:	18fb      	adds	r3, r7, r3
200005da:	1dfa      	adds	r2, r7, #7
200005dc:	7812      	ldrb	r2, [r2, #0]
200005de:	3a01      	subs	r2, #1
200005e0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005e2:	260d      	movs	r6, #13
200005e4:	19bb      	adds	r3, r7, r6
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	2240      	movs	r2, #64	; 0x40
200005ea:	4313      	orrs	r3, r2
200005ec:	b2da      	uxtb	r2, r3
200005ee:	250e      	movs	r5, #14
200005f0:	197b      	adds	r3, r7, r5
200005f2:	781b      	ldrb	r3, [r3, #0]
200005f4:	0019      	movs	r1, r3
200005f6:	0010      	movs	r0, r2
200005f8:	f7ff feb0 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005fc:	230c      	movs	r3, #12
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	2248      	movs	r2, #72	; 0x48
20000604:	4252      	negs	r2, r2
20000606:	4313      	orrs	r3, r2
20000608:	b2da      	uxtb	r2, r3
2000060a:	197b      	adds	r3, r7, r5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0019      	movs	r1, r3
20000610:	0010      	movs	r0, r2
20000612:	f7ff fea3 	bl	2000035c <graphic_write_command>
	data_holder = graphic_read_data(controller);
20000616:	230b      	movs	r3, #11
20000618:	18fc      	adds	r4, r7, r3
2000061a:	197b      	adds	r3, r7, r5
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0018      	movs	r0, r3
20000620:	f7ff fedf 	bl	200003e2 <graphic_read_data>
20000624:	0003      	movs	r3, r0
20000626:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000628:	19bb      	adds	r3, r7, r6
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	2240      	movs	r2, #64	; 0x40
2000062e:	4313      	orrs	r3, r2
20000630:	b2da      	uxtb	r2, r3
20000632:	197b      	adds	r3, r7, r5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	0019      	movs	r1, r3
20000638:	0010      	movs	r0, r2
2000063a:	f7ff fe8f 	bl	2000035c <graphic_write_command>
	if(set==1){
2000063e:	1d7b      	adds	r3, r7, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	2b01      	cmp	r3, #1
20000644:	d109      	bne.n	2000065a <pixel+0x190>
		mask |= data_holder;
20000646:	210f      	movs	r1, #15
20000648:	187b      	adds	r3, r7, r1
2000064a:	1879      	adds	r1, r7, r1
2000064c:	220b      	movs	r2, #11
2000064e:	18ba      	adds	r2, r7, r2
20000650:	7809      	ldrb	r1, [r1, #0]
20000652:	7812      	ldrb	r2, [r2, #0]
20000654:	430a      	orrs	r2, r1
20000656:	701a      	strb	r2, [r3, #0]
20000658:	e008      	b.n	2000066c <pixel+0x1a2>
	}else{
		mask &= data_holder;
2000065a:	220f      	movs	r2, #15
2000065c:	18bb      	adds	r3, r7, r2
2000065e:	18ba      	adds	r2, r7, r2
20000660:	210b      	movs	r1, #11
20000662:	1879      	adds	r1, r7, r1
20000664:	7812      	ldrb	r2, [r2, #0]
20000666:	7809      	ldrb	r1, [r1, #0]
20000668:	400a      	ands	r2, r1
2000066a:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
2000066c:	230e      	movs	r3, #14
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781a      	ldrb	r2, [r3, #0]
20000672:	230f      	movs	r3, #15
20000674:	18fb      	adds	r3, r7, r3
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	0011      	movs	r1, r2
2000067a:	0018      	movs	r0, r3
2000067c:	f7ff fe8e 	bl	2000039c <graphic_write_data>
20000680:	e000      	b.n	20000684 <pixel+0x1ba>
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
20000682:	46c0      	nop			; (mov r8, r8)
}
20000684:	46bd      	mov	sp, r7
20000686:	b005      	add	sp, #20
20000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	80000007 	andhi	r0, r0, r7
20000690:	20000e58 	andcs	r0, r0, r8, asr lr

20000694 <draw_object>:

void draw_object(POBJECT o){
20000694:	b580      	push	{r7, lr}
20000696:	b084      	sub	sp, #16
20000698:	af00      	add	r7, sp, #0
2000069a:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
2000069c:	2300      	movs	r3, #0
2000069e:	60fb      	str	r3, [r7, #12]
200006a0:	e020      	b.n	200006e4 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	681a      	ldr	r2, [r3, #0]
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	3304      	adds	r3, #4
200006aa:	005b      	lsls	r3, r3, #1
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	3304      	adds	r3, #4
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	68db      	ldr	r3, [r3, #12]
200006b6:	b2db      	uxtb	r3, r3
200006b8:	18d3      	adds	r3, r2, r3
200006ba:	b2d8      	uxtb	r0, r3
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	681a      	ldr	r2, [r3, #0]
200006c0:	68fb      	ldr	r3, [r7, #12]
200006c2:	3304      	adds	r3, #4
200006c4:	005b      	lsls	r3, r3, #1
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	3305      	adds	r3, #5
200006ca:	781a      	ldrb	r2, [r3, #0]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691b      	ldr	r3, [r3, #16]
200006d0:	b2db      	uxtb	r3, r3
200006d2:	18d3      	adds	r3, r2, r3
200006d4:	b2db      	uxtb	r3, r3
200006d6:	2201      	movs	r2, #1
200006d8:	0019      	movs	r1, r3
200006da:	f7ff fef6 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3301      	adds	r3, #1
200006e2:	60fb      	str	r3, [r7, #12]
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	681b      	ldr	r3, [r3, #0]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	68fa      	ldr	r2, [r7, #12]
200006ec:	429a      	cmp	r2, r3
200006ee:	dbd8      	blt.n	200006a2 <draw_object+0xe>
	}
}
200006f0:	46c0      	nop			; (mov r8, r8)
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	b004      	add	sp, #16
200006f8:	bd80      	pop	{r7, pc}

200006fa <clear_object>:

void clear_object(POBJECT o){
200006fa:	b580      	push	{r7, lr}
200006fc:	b084      	sub	sp, #16
200006fe:	af00      	add	r7, sp, #0
20000700:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
20000702:	2300      	movs	r3, #0
20000704:	60fb      	str	r3, [r7, #12]
20000706:	e020      	b.n	2000074a <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	681a      	ldr	r2, [r3, #0]
2000070c:	68fb      	ldr	r3, [r7, #12]
2000070e:	3304      	adds	r3, #4
20000710:	005b      	lsls	r3, r3, #1
20000712:	18d3      	adds	r3, r2, r3
20000714:	3304      	adds	r3, #4
20000716:	781a      	ldrb	r2, [r3, #0]
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	68db      	ldr	r3, [r3, #12]
2000071c:	b2db      	uxtb	r3, r3
2000071e:	18d3      	adds	r3, r2, r3
20000720:	b2d8      	uxtb	r0, r3
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	681a      	ldr	r2, [r3, #0]
20000726:	68fb      	ldr	r3, [r7, #12]
20000728:	3304      	adds	r3, #4
2000072a:	005b      	lsls	r3, r3, #1
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	3305      	adds	r3, #5
20000730:	781a      	ldrb	r2, [r3, #0]
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691b      	ldr	r3, [r3, #16]
20000736:	b2db      	uxtb	r3, r3
20000738:	18d3      	adds	r3, r2, r3
2000073a:	b2db      	uxtb	r3, r3
2000073c:	2200      	movs	r2, #0
2000073e:	0019      	movs	r1, r3
20000740:	f7ff fec3 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	3301      	adds	r3, #1
20000748:	60fb      	str	r3, [r7, #12]
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	681b      	ldr	r3, [r3, #0]
2000074e:	681b      	ldr	r3, [r3, #0]
20000750:	68fa      	ldr	r2, [r7, #12]
20000752:	429a      	cmp	r2, r3
20000754:	dbd8      	blt.n	20000708 <clear_object+0xe>
	}
}
20000756:	46c0      	nop			; (mov r8, r8)
20000758:	46c0      	nop			; (mov r8, r8)
2000075a:	46bd      	mov	sp, r7
2000075c:	b004      	add	sp, #16
2000075e:	bd80      	pop	{r7, pc}

20000760 <keybHigh>:
unsigned char keybHigh(){
20000760:	b580      	push	{r7, lr}
20000762:	b082      	sub	sp, #8
20000764:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000766:	2300      	movs	r3, #0
20000768:	607b      	str	r3, [r7, #4]
2000076a:	e01c      	b.n	200007a6 <keybHigh+0x46>
		activateRowHigh(row);
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	0018      	movs	r0, r3
20000770:	f000 f821 	bl	200007b6 <activateRowHigh>
		column = readColumn();
20000774:	f000 f89c 	bl	200008b0 <readColumn>
20000778:	0002      	movs	r2, r0
2000077a:	1cfb      	adds	r3, r7, #3
2000077c:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
2000077e:	1cfb      	adds	r3, r7, #3
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	2b04      	cmp	r3, #4
20000784:	d00c      	beq.n	200007a0 <keybHigh+0x40>
			key = getKeyValue(row, column);
20000786:	1cfb      	adds	r3, r7, #3
20000788:	781a      	ldrb	r2, [r3, #0]
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	0011      	movs	r1, r2
2000078e:	0018      	movs	r0, r3
20000790:	f000 f874 	bl	2000087c <getKeyValue>
20000794:	0002      	movs	r2, r0
20000796:	1cbb      	adds	r3, r7, #2
20000798:	701a      	strb	r2, [r3, #0]
			return key;
2000079a:	1cbb      	adds	r3, r7, #2
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	e006      	b.n	200007ae <keybHigh+0x4e>
	for(int row = 0; row < 4; row++){
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	3301      	adds	r3, #1
200007a4:	607b      	str	r3, [r7, #4]
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	2b03      	cmp	r3, #3
200007aa:	dddf      	ble.n	2000076c <keybHigh+0xc>
		}
	}
	return -1;
200007ac:	23ff      	movs	r3, #255	; 0xff
}
200007ae:	0018      	movs	r0, r3
200007b0:	46bd      	mov	sp, r7
200007b2:	b002      	add	sp, #8
200007b4:	bd80      	pop	{r7, pc}

200007b6 <activateRowHigh>:

void activateRowHigh(int row){
200007b6:	b580      	push	{r7, lr}
200007b8:	b082      	sub	sp, #8
200007ba:	af00      	add	r7, sp, #0
200007bc:	6078      	str	r0, [r7, #4]
	switch(row){
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	2b03      	cmp	r3, #3
200007c2:	d01b      	beq.n	200007fc <activateRowHigh+0x46>
200007c4:	687b      	ldr	r3, [r7, #4]
200007c6:	2b03      	cmp	r3, #3
200007c8:	dc1c      	bgt.n	20000804 <activateRowHigh+0x4e>
200007ca:	687b      	ldr	r3, [r7, #4]
200007cc:	2b02      	cmp	r3, #2
200007ce:	d011      	beq.n	200007f4 <activateRowHigh+0x3e>
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	2b02      	cmp	r3, #2
200007d4:	dc16      	bgt.n	20000804 <activateRowHigh+0x4e>
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	2b00      	cmp	r3, #0
200007da:	d003      	beq.n	200007e4 <activateRowHigh+0x2e>
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	2b01      	cmp	r3, #1
200007e0:	d004      	beq.n	200007ec <activateRowHigh+0x36>
200007e2:	e00f      	b.n	20000804 <activateRowHigh+0x4e>
		case 0: * KeypadOut = 0x10; break;
200007e4:	4b0b      	ldr	r3, [pc, #44]	; (20000814 <activateRowHigh+0x5e>)
200007e6:	2210      	movs	r2, #16
200007e8:	701a      	strb	r2, [r3, #0]
200007ea:	e00f      	b.n	2000080c <activateRowHigh+0x56>
		case 1: * KeypadOut = 0x20; break;
200007ec:	4b09      	ldr	r3, [pc, #36]	; (20000814 <activateRowHigh+0x5e>)
200007ee:	2220      	movs	r2, #32
200007f0:	701a      	strb	r2, [r3, #0]
200007f2:	e00b      	b.n	2000080c <activateRowHigh+0x56>
		case 2: * KeypadOut = 0x40; break;
200007f4:	4b07      	ldr	r3, [pc, #28]	; (20000814 <activateRowHigh+0x5e>)
200007f6:	2240      	movs	r2, #64	; 0x40
200007f8:	701a      	strb	r2, [r3, #0]
200007fa:	e007      	b.n	2000080c <activateRowHigh+0x56>
		case 3: * KeypadOut = 0x80; break;
200007fc:	4b05      	ldr	r3, [pc, #20]	; (20000814 <activateRowHigh+0x5e>)
200007fe:	2280      	movs	r2, #128	; 0x80
20000800:	701a      	strb	r2, [r3, #0]
20000802:	e003      	b.n	2000080c <activateRowHigh+0x56>
		default: * KeypadOut = 0x0;
20000804:	4b03      	ldr	r3, [pc, #12]	; (20000814 <activateRowHigh+0x5e>)
20000806:	2200      	movs	r2, #0
20000808:	701a      	strb	r2, [r3, #0]
	}
}
2000080a:	46c0      	nop			; (mov r8, r8)
2000080c:	46c0      	nop			; (mov r8, r8)
2000080e:	46bd      	mov	sp, r7
20000810:	b002      	add	sp, #8
20000812:	bd80      	pop	{r7, pc}
20000814:	40020c15 	andmi	r0, r2, r5, lsl ip

20000818 <activateRowLow>:

void activateRowLow(int row){
20000818:	b580      	push	{r7, lr}
2000081a:	b082      	sub	sp, #8
2000081c:	af00      	add	r7, sp, #0
2000081e:	6078      	str	r0, [r7, #4]
	switch(row){
20000820:	687b      	ldr	r3, [r7, #4]
20000822:	2b03      	cmp	r3, #3
20000824:	d01b      	beq.n	2000085e <activateRowLow+0x46>
20000826:	687b      	ldr	r3, [r7, #4]
20000828:	2b03      	cmp	r3, #3
2000082a:	dc1c      	bgt.n	20000866 <activateRowLow+0x4e>
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	2b02      	cmp	r3, #2
20000830:	d011      	beq.n	20000856 <activateRowLow+0x3e>
20000832:	687b      	ldr	r3, [r7, #4]
20000834:	2b02      	cmp	r3, #2
20000836:	dc16      	bgt.n	20000866 <activateRowLow+0x4e>
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	2b00      	cmp	r3, #0
2000083c:	d003      	beq.n	20000846 <activateRowLow+0x2e>
2000083e:	687b      	ldr	r3, [r7, #4]
20000840:	2b01      	cmp	r3, #1
20000842:	d004      	beq.n	2000084e <activateRowLow+0x36>
20000844:	e00f      	b.n	20000866 <activateRowLow+0x4e>
		case 0: * KeypadOut = 0x1; break;
20000846:	4b0c      	ldr	r3, [pc, #48]	; (20000878 <activateRowLow+0x60>)
20000848:	2201      	movs	r2, #1
2000084a:	701a      	strb	r2, [r3, #0]
2000084c:	e00f      	b.n	2000086e <activateRowLow+0x56>
		case 1: * KeypadOut = 0x2; break;
2000084e:	4b0a      	ldr	r3, [pc, #40]	; (20000878 <activateRowLow+0x60>)
20000850:	2202      	movs	r2, #2
20000852:	701a      	strb	r2, [r3, #0]
20000854:	e00b      	b.n	2000086e <activateRowLow+0x56>
		case 2: * KeypadOut = 0x4; break;
20000856:	4b08      	ldr	r3, [pc, #32]	; (20000878 <activateRowLow+0x60>)
20000858:	2204      	movs	r2, #4
2000085a:	701a      	strb	r2, [r3, #0]
2000085c:	e007      	b.n	2000086e <activateRowLow+0x56>
		case 3: * KeypadOut = 0x8; break;
2000085e:	4b06      	ldr	r3, [pc, #24]	; (20000878 <activateRowLow+0x60>)
20000860:	2208      	movs	r2, #8
20000862:	701a      	strb	r2, [r3, #0]
20000864:	e003      	b.n	2000086e <activateRowLow+0x56>
		default: * KeypadOut = 0x0;
20000866:	4b04      	ldr	r3, [pc, #16]	; (20000878 <activateRowLow+0x60>)
20000868:	2200      	movs	r2, #0
2000086a:	701a      	strb	r2, [r3, #0]
	}
}
2000086c:	46c0      	nop			; (mov r8, r8)
2000086e:	46c0      	nop			; (mov r8, r8)
20000870:	46bd      	mov	sp, r7
20000872:	b002      	add	sp, #8
20000874:	bd80      	pop	{r7, pc}
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	40020c15 	andmi	r0, r2, r5, lsl ip

2000087c <getKeyValue>:

int getKeyValue(int row, int column){
2000087c:	b5b0      	push	{r4, r5, r7, lr}
2000087e:	b086      	sub	sp, #24
20000880:	af00      	add	r7, sp, #0
20000882:	6078      	str	r0, [r7, #4]
20000884:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
20000886:	2108      	movs	r1, #8
20000888:	187b      	adds	r3, r7, r1
2000088a:	4a08      	ldr	r2, [pc, #32]	; (200008ac <getKeyValue+0x30>)
2000088c:	ca31      	ldmia	r2!, {r0, r4, r5}
2000088e:	c331      	stmia	r3!, {r0, r4, r5}
20000890:	6812      	ldr	r2, [r2, #0]
20000892:	601a      	str	r2, [r3, #0]
	return keys[row][column];
20000894:	187a      	adds	r2, r7, r1
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	009b      	lsls	r3, r3, #2
2000089a:	18d2      	adds	r2, r2, r3
2000089c:	683b      	ldr	r3, [r7, #0]
2000089e:	18d3      	adds	r3, r2, r3
200008a0:	781b      	ldrb	r3, [r3, #0]
}
200008a2:	0018      	movs	r0, r3
200008a4:	46bd      	mov	sp, r7
200008a6:	b006      	add	sp, #24
200008a8:	bdb0      	pop	{r4, r5, r7, pc}
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	20000e78 	andcs	r0, r0, r8, ror lr

200008b0 <readColumn>:

int readColumn(){
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
	unsigned char c = * KeypadIn;
200008b6:	4a12      	ldr	r2, [pc, #72]	; (20000900 <readColumn+0x50>)
200008b8:	1dfb      	adds	r3, r7, #7
200008ba:	7812      	ldrb	r2, [r2, #0]
200008bc:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
200008be:	1dfb      	adds	r3, r7, #7
200008c0:	781b      	ldrb	r3, [r3, #0]
200008c2:	2208      	movs	r2, #8
200008c4:	4013      	ands	r3, r2
200008c6:	d001      	beq.n	200008cc <readColumn+0x1c>
200008c8:	2303      	movs	r3, #3
200008ca:	e015      	b.n	200008f8 <readColumn+0x48>
	if(c & 0x4){return 2;}
200008cc:	1dfb      	adds	r3, r7, #7
200008ce:	781b      	ldrb	r3, [r3, #0]
200008d0:	2204      	movs	r2, #4
200008d2:	4013      	ands	r3, r2
200008d4:	d001      	beq.n	200008da <readColumn+0x2a>
200008d6:	2302      	movs	r3, #2
200008d8:	e00e      	b.n	200008f8 <readColumn+0x48>
	if(c & 0x2){return 1;}
200008da:	1dfb      	adds	r3, r7, #7
200008dc:	781b      	ldrb	r3, [r3, #0]
200008de:	2202      	movs	r2, #2
200008e0:	4013      	ands	r3, r2
200008e2:	d001      	beq.n	200008e8 <readColumn+0x38>
200008e4:	2301      	movs	r3, #1
200008e6:	e007      	b.n	200008f8 <readColumn+0x48>
	if(c & 0x1){return 0;}
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	2201      	movs	r2, #1
200008ee:	4013      	ands	r3, r2
200008f0:	d001      	beq.n	200008f6 <readColumn+0x46>
200008f2:	2300      	movs	r3, #0
200008f4:	e000      	b.n	200008f8 <readColumn+0x48>
	return 4;
200008f6:	2304      	movs	r3, #4
200008f8:	0018      	movs	r0, r3
200008fa:	46bd      	mov	sp, r7
200008fc:	b002      	add	sp, #8
200008fe:	bd80      	pop	{r7, pc}
20000900:	40020c11 	andmi	r0, r2, r1, lsl ip

20000904 <set_object_speed>:
static uint8_t player_1_points;
static uint8_t player_2_points; 

void set_object_speed(POBJECT o, int speedx, int speedy){
20000904:	b580      	push	{r7, lr}
20000906:	b084      	sub	sp, #16
20000908:	af00      	add	r7, sp, #0
2000090a:	60f8      	str	r0, [r7, #12]
2000090c:	60b9      	str	r1, [r7, #8]
2000090e:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000910:	68fb      	ldr	r3, [r7, #12]
20000912:	68ba      	ldr	r2, [r7, #8]
20000914:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
20000916:	68fb      	ldr	r3, [r7, #12]
20000918:	687a      	ldr	r2, [r7, #4]
2000091a:	609a      	str	r2, [r3, #8]
}
2000091c:	46c0      	nop			; (mov r8, r8)
2000091e:	46bd      	mov	sp, r7
20000920:	b004      	add	sp, #16
20000922:	bd80      	pop	{r7, pc}

20000924 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
20000924:	b580      	push	{r7, lr}
20000926:	b084      	sub	sp, #16
20000928:	af00      	add	r7, sp, #0
2000092a:	6078      	str	r0, [r7, #4]
2000092c:	6039      	str	r1, [r7, #0]
	clear_object(o);
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	0018      	movs	r0, r3
20000932:	f7ff fee2 	bl	200006fa <clear_object>
	int newx = o->posx + o->dx;
20000936:	687b      	ldr	r3, [r7, #4]
20000938:	68da      	ldr	r2, [r3, #12]
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	685b      	ldr	r3, [r3, #4]
2000093e:	18d3      	adds	r3, r2, r3
20000940:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000942:	687b      	ldr	r3, [r7, #4]
20000944:	691a      	ldr	r2, [r3, #16]
20000946:	687b      	ldr	r3, [r7, #4]
20000948:	689b      	ldr	r3, [r3, #8]
2000094a:	18d3      	adds	r3, r2, r3
2000094c:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
2000094e:	68fb      	ldr	r3, [r7, #12]
20000950:	2b00      	cmp	r3, #0
20000952:	dc0c      	bgt.n	2000096e <move_ball+0x4a>
		o->posx = 64;
20000954:	687b      	ldr	r3, [r7, #4]
20000956:	2240      	movs	r2, #64	; 0x40
20000958:	60da      	str	r2, [r3, #12]
		o->posy = 32;
2000095a:	687b      	ldr	r3, [r7, #4]
2000095c:	2220      	movs	r2, #32
2000095e:	611a      	str	r2, [r3, #16]
		player_2_points++;
20000960:	4b24      	ldr	r3, [pc, #144]	; (200009f4 <move_ball+0xd0>)
20000962:	781b      	ldrb	r3, [r3, #0]
20000964:	3301      	adds	r3, #1
20000966:	b2da      	uxtb	r2, r3
20000968:	4b22      	ldr	r3, [pc, #136]	; (200009f4 <move_ball+0xd0>)
2000096a:	701a      	strb	r2, [r3, #0]
2000096c:	e03a      	b.n	200009e4 <move_ball+0xc0>
	}
	else if((newx + o->geo->sizex) > 128){
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	681b      	ldr	r3, [r3, #0]
20000972:	685a      	ldr	r2, [r3, #4]
20000974:	68fb      	ldr	r3, [r7, #12]
20000976:	18d3      	adds	r3, r2, r3
20000978:	2b80      	cmp	r3, #128	; 0x80
2000097a:	dd0c      	ble.n	20000996 <move_ball+0x72>
		o->posx = 64;
2000097c:	687b      	ldr	r3, [r7, #4]
2000097e:	2240      	movs	r2, #64	; 0x40
20000980:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000982:	687b      	ldr	r3, [r7, #4]
20000984:	2220      	movs	r2, #32
20000986:	611a      	str	r2, [r3, #16]
		player_1_points++;
20000988:	4b1b      	ldr	r3, [pc, #108]	; (200009f8 <move_ball+0xd4>)
2000098a:	781b      	ldrb	r3, [r3, #0]
2000098c:	3301      	adds	r3, #1
2000098e:	b2da      	uxtb	r2, r3
20000990:	4b19      	ldr	r3, [pc, #100]	; (200009f8 <move_ball+0xd4>)
20000992:	701a      	strb	r2, [r3, #0]
20000994:	e026      	b.n	200009e4 <move_ball+0xc0>
	}
	else if(newy < 1){
20000996:	68bb      	ldr	r3, [r7, #8]
20000998:	2b00      	cmp	r3, #0
2000099a:	dc08      	bgt.n	200009ae <move_ball+0x8a>
		o->dy = -o->dy;
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	689b      	ldr	r3, [r3, #8]
200009a0:	425a      	negs	r2, r3
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	609a      	str	r2, [r3, #8]
		o->posy = 1;
200009a6:	687b      	ldr	r3, [r7, #4]
200009a8:	2201      	movs	r2, #1
200009aa:	611a      	str	r2, [r3, #16]
200009ac:	e01a      	b.n	200009e4 <move_ball+0xc0>
	}
	else if(newy > 64 - o->geo->sizey){
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	681b      	ldr	r3, [r3, #0]
200009b2:	689b      	ldr	r3, [r3, #8]
200009b4:	2240      	movs	r2, #64	; 0x40
200009b6:	1ad3      	subs	r3, r2, r3
200009b8:	68ba      	ldr	r2, [r7, #8]
200009ba:	429a      	cmp	r2, r3
200009bc:	dd0c      	ble.n	200009d8 <move_ball+0xb4>
		o->dy = -o->dy;
200009be:	687b      	ldr	r3, [r7, #4]
200009c0:	689b      	ldr	r3, [r3, #8]
200009c2:	425a      	negs	r2, r3
200009c4:	687b      	ldr	r3, [r7, #4]
200009c6:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
200009c8:	687b      	ldr	r3, [r7, #4]
200009ca:	681b      	ldr	r3, [r3, #0]
200009cc:	689b      	ldr	r3, [r3, #8]
200009ce:	2240      	movs	r2, #64	; 0x40
200009d0:	1ad2      	subs	r2, r2, r3
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	611a      	str	r2, [r3, #16]
200009d6:	e005      	b.n	200009e4 <move_ball+0xc0>
	}else{
		o->posx = newx;
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	68fa      	ldr	r2, [r7, #12]
200009dc:	60da      	str	r2, [r3, #12]
		o->posy = newy;
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	68ba      	ldr	r2, [r7, #8]
200009e2:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	0018      	movs	r0, r3
200009e8:	f7ff fe54 	bl	20000694 <draw_object>
}
200009ec:	46c0      	nop			; (mov r8, r8)
200009ee:	46bd      	mov	sp, r7
200009f0:	b004      	add	sp, #16
200009f2:	bd80      	pop	{r7, pc}
200009f4:	20000d61 	andcs	r0, r0, r1, ror #26
200009f8:	20000d60 	andcs	r0, r0, r0, ror #26

200009fc <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
200009fc:	b580      	push	{r7, lr}
200009fe:	b084      	sub	sp, #16
20000a00:	af00      	add	r7, sp, #0
20000a02:	60f8      	str	r0, [r7, #12]
20000a04:	60b9      	str	r1, [r7, #8]
20000a06:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000a08:	687b      	ldr	r3, [r7, #4]
20000a0a:	68da      	ldr	r2, [r3, #12]
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	685b      	ldr	r3, [r3, #4]
20000a12:	18d2      	adds	r2, r2, r3
20000a14:	68fb      	ldr	r3, [r7, #12]
20000a16:	68db      	ldr	r3, [r3, #12]
20000a18:	429a      	cmp	r2, r3
20000a1a:	db21      	blt.n	20000a60 <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000a1c:	687b      	ldr	r3, [r7, #4]
20000a1e:	68da      	ldr	r2, [r3, #12]
20000a20:	68fb      	ldr	r3, [r7, #12]
20000a22:	68d9      	ldr	r1, [r3, #12]
20000a24:	68fb      	ldr	r3, [r7, #12]
20000a26:	681b      	ldr	r3, [r3, #0]
20000a28:	685b      	ldr	r3, [r3, #4]
20000a2a:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000a2c:	429a      	cmp	r2, r3
20000a2e:	da17      	bge.n	20000a60 <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000a30:	687b      	ldr	r3, [r7, #4]
20000a32:	691a      	ldr	r2, [r3, #16]
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	681b      	ldr	r3, [r3, #0]
20000a38:	689b      	ldr	r3, [r3, #8]
20000a3a:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000a3c:	68ba      	ldr	r2, [r7, #8]
20000a3e:	429a      	cmp	r2, r3
20000a40:	dc0e      	bgt.n	20000a60 <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	691a      	ldr	r2, [r3, #16]
20000a46:	68fb      	ldr	r3, [r7, #12]
20000a48:	681b      	ldr	r3, [r3, #0]
20000a4a:	6899      	ldr	r1, [r3, #8]
20000a4c:	68bb      	ldr	r3, [r7, #8]
20000a4e:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000a50:	429a      	cmp	r2, r3
20000a52:	da05      	bge.n	20000a60 <collision_with_ball+0x64>
			clear_object(ball);
20000a54:	687b      	ldr	r3, [r7, #4]
20000a56:	0018      	movs	r0, r3
20000a58:	f7ff fe4f 	bl	200006fa <clear_object>
			   return 1;
20000a5c:	2301      	movs	r3, #1
20000a5e:	e000      	b.n	20000a62 <collision_with_ball+0x66>
		   }
	return 0;
20000a60:	2300      	movs	r3, #0
}
20000a62:	0018      	movs	r0, r3
20000a64:	46bd      	mov	sp, r7
20000a66:	b004      	add	sp, #16
20000a68:	bd80      	pop	{r7, pc}

20000a6a <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000a6a:	b580      	push	{r7, lr}
20000a6c:	b084      	sub	sp, #16
20000a6e:	af00      	add	r7, sp, #0
20000a70:	6078      	str	r0, [r7, #4]
20000a72:	6039      	str	r1, [r7, #0]
	clear_object(o);
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	0018      	movs	r0, r3
20000a78:	f7ff fe3f 	bl	200006fa <clear_object>
	
	int newy = o->posy + o->dy;
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	691a      	ldr	r2, [r3, #16]
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	689b      	ldr	r3, [r3, #8]
20000a84:	18d3      	adds	r3, r2, r3
20000a86:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000a88:	683a      	ldr	r2, [r7, #0]
20000a8a:	68f9      	ldr	r1, [r7, #12]
20000a8c:	687b      	ldr	r3, [r7, #4]
20000a8e:	0018      	movs	r0, r3
20000a90:	f7ff ffb4 	bl	200009fc <collision_with_ball>
20000a94:	1e03      	subs	r3, r0, #0
20000a96:	d019      	beq.n	20000acc <move_paddle+0x62>
		if(o->posx < 64){
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	68db      	ldr	r3, [r3, #12]
20000a9c:	2b3f      	cmp	r3, #63	; 0x3f
20000a9e:	dc08      	bgt.n	20000ab2 <move_paddle+0x48>
			ball->dx = -(ball->dx);
20000aa0:	683b      	ldr	r3, [r7, #0]
20000aa2:	685b      	ldr	r3, [r3, #4]
20000aa4:	425a      	negs	r2, r3
20000aa6:	683b      	ldr	r3, [r7, #0]
20000aa8:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000aaa:	683b      	ldr	r3, [r7, #0]
20000aac:	2234      	movs	r2, #52	; 0x34
20000aae:	60da      	str	r2, [r3, #12]
20000ab0:	e007      	b.n	20000ac2 <move_paddle+0x58>
		}else{
			ball->dx = (ball->dx)*(-1);
20000ab2:	683b      	ldr	r3, [r7, #0]
20000ab4:	685b      	ldr	r3, [r3, #4]
20000ab6:	425a      	negs	r2, r3
20000ab8:	683b      	ldr	r3, [r7, #0]
20000aba:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000abc:	683b      	ldr	r3, [r7, #0]
20000abe:	224a      	movs	r2, #74	; 0x4a
20000ac0:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000ac2:	683b      	ldr	r3, [r7, #0]
20000ac4:	0018      	movs	r0, r3
20000ac6:	f7ff fde5 	bl	20000694 <draw_object>
20000aca:	e023      	b.n	20000b14 <move_paddle+0xaa>
	}

	else if(newy < 1){
20000acc:	68fb      	ldr	r3, [r7, #12]
20000ace:	2b00      	cmp	r3, #0
20000ad0:	dc08      	bgt.n	20000ae4 <move_paddle+0x7a>
		o->dy = -o->dy;
20000ad2:	687b      	ldr	r3, [r7, #4]
20000ad4:	689b      	ldr	r3, [r3, #8]
20000ad6:	425a      	negs	r2, r3
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	2201      	movs	r2, #1
20000ae0:	611a      	str	r2, [r3, #16]
20000ae2:	e017      	b.n	20000b14 <move_paddle+0xaa>
	}
	else if(newy > 64 - o->geo->sizey){
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	681b      	ldr	r3, [r3, #0]
20000ae8:	689b      	ldr	r3, [r3, #8]
20000aea:	2240      	movs	r2, #64	; 0x40
20000aec:	1ad3      	subs	r3, r2, r3
20000aee:	68fa      	ldr	r2, [r7, #12]
20000af0:	429a      	cmp	r2, r3
20000af2:	dd0c      	ble.n	20000b0e <move_paddle+0xa4>
		o->dy = -o->dy;
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	689b      	ldr	r3, [r3, #8]
20000af8:	425a      	negs	r2, r3
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000afe:	687b      	ldr	r3, [r7, #4]
20000b00:	681b      	ldr	r3, [r3, #0]
20000b02:	689b      	ldr	r3, [r3, #8]
20000b04:	2240      	movs	r2, #64	; 0x40
20000b06:	1ad2      	subs	r2, r2, r3
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	611a      	str	r2, [r3, #16]
20000b0c:	e002      	b.n	20000b14 <move_paddle+0xaa>
	}else{
		o->posy = newy;
20000b0e:	687b      	ldr	r3, [r7, #4]
20000b10:	68fa      	ldr	r2, [r7, #12]
20000b12:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000b14:	687b      	ldr	r3, [r7, #4]
20000b16:	0018      	movs	r0, r3
20000b18:	f7ff fdbc 	bl	20000694 <draw_object>
}
20000b1c:	46c0      	nop			; (mov r8, r8)
20000b1e:	46bd      	mov	sp, r7
20000b20:	b004      	add	sp, #16
20000b22:	bd80      	pop	{r7, pc}

20000b24 <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000b24:	b580      	push	{r7, lr}
20000b26:	af00      	add	r7, sp, #0
	* ((unsigned long *) 0x40023830) = 0x18;
	__asm__ volatile(" LDR R0, =0x08000209\n");
	__asm__ volatile(" BLX R0 \n");
#endif
	
	* portModer = 0x55555555;
20000b28:	4b07      	ldr	r3, [pc, #28]	; (20000b48 <init_app+0x24>)
20000b2a:	4a08      	ldr	r2, [pc, #32]	; (20000b4c <init_app+0x28>)
20000b2c:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000b2e:	4b08      	ldr	r3, [pc, #32]	; (20000b50 <init_app+0x2c>)
20000b30:	4a08      	ldr	r2, [pc, #32]	; (20000b54 <init_app+0x30>)
20000b32:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000b34:	4b08      	ldr	r3, [pc, #32]	; (20000b58 <init_app+0x34>)
20000b36:	4a09      	ldr	r2, [pc, #36]	; (20000b5c <init_app+0x38>)
20000b38:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;	
20000b3a:	4b09      	ldr	r3, [pc, #36]	; (20000b60 <init_app+0x3c>)
20000b3c:	2200      	movs	r2, #0
20000b3e:	801a      	strh	r2, [r3, #0]
}
20000b40:	46c0      	nop			; (mov r8, r8)
20000b42:	46bd      	mov	sp, r7
20000b44:	bd80      	pop	{r7, pc}
20000b46:	46c0      	nop			; (mov r8, r8)
20000b48:	40021000 	andmi	r1, r2, r0
20000b4c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000b50:	40020c00 	andmi	r0, r2, r0, lsl #24
20000b54:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20000b58:	40020c30 	andmi	r0, r2, r0, lsr ip
20000b5c:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20000b60:	40020c08 	andmi	r0, r2, r8, lsl #24

20000b64 <main>:

#ifndef TEST
void main(void){
20000b64:	b590      	push	{r4, r7, lr}
20000b66:	b087      	sub	sp, #28
20000b68:	af00      	add	r7, sp, #0
	POBJECT b = &ball;
20000b6a:	4b34      	ldr	r3, [pc, #208]	; (20000c3c <main+0xd8>)
20000b6c:	617b      	str	r3, [r7, #20]
	POBJECT b2 = &ball;
20000b6e:	4b33      	ldr	r3, [pc, #204]	; (20000c3c <main+0xd8>)
20000b70:	613b      	str	r3, [r7, #16]
	POBJECT p_left = &paddle_left;
20000b72:	4b33      	ldr	r3, [pc, #204]	; (20000c40 <main+0xdc>)
20000b74:	60fb      	str	r3, [r7, #12]
	POBJECT p_right = &paddle_right;
20000b76:	4b33      	ldr	r3, [pc, #204]	; (20000c44 <main+0xe0>)
20000b78:	60bb      	str	r3, [r7, #8]
	init_app();
20000b7a:	f7ff ffd3 	bl	20000b24 <init_app>
	graphic_initialize();
20000b7e:	f7ff fc45 	bl	2000040c <graphic_initialize>
	b->dx = 1;
20000b82:	697b      	ldr	r3, [r7, #20]
20000b84:	2201      	movs	r2, #1
20000b86:	605a      	str	r2, [r3, #4]
	b->dy = 1;
20000b88:	697b      	ldr	r3, [r7, #20]
20000b8a:	2201      	movs	r2, #1
20000b8c:	609a      	str	r2, [r3, #8]
	b2->dx = -1;
20000b8e:	693b      	ldr	r3, [r7, #16]
20000b90:	2201      	movs	r2, #1
20000b92:	4252      	negs	r2, r2
20000b94:	605a      	str	r2, [r3, #4]
	p_left->dy = 1;
20000b96:	68fb      	ldr	r3, [r7, #12]
20000b98:	2201      	movs	r2, #1
20000b9a:	609a      	str	r2, [r3, #8]
	p_right->dy = 1;
20000b9c:	68bb      	ldr	r3, [r7, #8]
20000b9e:	2201      	movs	r2, #1
20000ba0:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	while(1){
		b->move(b, 0);
20000ba2:	697b      	ldr	r3, [r7, #20]
20000ba4:	69db      	ldr	r3, [r3, #28]
20000ba6:	697a      	ldr	r2, [r7, #20]
20000ba8:	2100      	movs	r1, #0
20000baa:	0010      	movs	r0, r2
20000bac:	4798      	blx	r3
		b2->move(b, b);
20000bae:	693b      	ldr	r3, [r7, #16]
20000bb0:	69db      	ldr	r3, [r3, #28]
20000bb2:	6979      	ldr	r1, [r7, #20]
20000bb4:	697a      	ldr	r2, [r7, #20]
20000bb6:	0010      	movs	r0, r2
20000bb8:	4798      	blx	r3
		p_left->move(p_left, b);
20000bba:	68fb      	ldr	r3, [r7, #12]
20000bbc:	69db      	ldr	r3, [r3, #28]
20000bbe:	6979      	ldr	r1, [r7, #20]
20000bc0:	68fa      	ldr	r2, [r7, #12]
20000bc2:	0010      	movs	r0, r2
20000bc4:	4798      	blx	r3
		p_right->move(p_right, b);
20000bc6:	68bb      	ldr	r3, [r7, #8]
20000bc8:	69db      	ldr	r3, [r3, #28]
20000bca:	6979      	ldr	r1, [r7, #20]
20000bcc:	68ba      	ldr	r2, [r7, #8]
20000bce:	0010      	movs	r0, r2
20000bd0:	4798      	blx	r3
		delay_milli(40);
20000bd2:	2028      	movs	r0, #40	; 0x28
20000bd4:	f7ff fa61 	bl	2000009a <delay_milli>
		uint8_t c = keybHigh();
20000bd8:	1dfc      	adds	r4, r7, #7
20000bda:	f7ff fdc1 	bl	20000760 <keybHigh>
20000bde:	0003      	movs	r3, r0
20000be0:	7023      	strb	r3, [r4, #0]
		switch(c){
20000be2:	1dfb      	adds	r3, r7, #7
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	2b08      	cmp	r3, #8
20000be8:	d01f      	beq.n	20000c2a <main+0xc6>
20000bea:	dcda      	bgt.n	20000ba2 <main+0x3e>
20000bec:	2b06      	cmp	r3, #6
20000bee:	d005      	beq.n	20000bfc <main+0x98>
20000bf0:	dcd7      	bgt.n	20000ba2 <main+0x3e>
20000bf2:	2b02      	cmp	r3, #2
20000bf4:	d011      	beq.n	20000c1a <main+0xb6>
20000bf6:	2b04      	cmp	r3, #4
20000bf8:	d007      	beq.n	20000c0a <main+0xa6>
20000bfa:	e01d      	b.n	20000c38 <main+0xd4>
			case 6: b->set_speed(b,2,0);break;
20000bfc:	697b      	ldr	r3, [r7, #20]
20000bfe:	6a1b      	ldr	r3, [r3, #32]
20000c00:	6978      	ldr	r0, [r7, #20]
20000c02:	2200      	movs	r2, #0
20000c04:	2102      	movs	r1, #2
20000c06:	4798      	blx	r3
20000c08:	e016      	b.n	20000c38 <main+0xd4>
			case 4: b->set_speed(b,-2,0);break;
20000c0a:	697b      	ldr	r3, [r7, #20]
20000c0c:	6a1b      	ldr	r3, [r3, #32]
20000c0e:	2202      	movs	r2, #2
20000c10:	4251      	negs	r1, r2
20000c12:	6978      	ldr	r0, [r7, #20]
20000c14:	2200      	movs	r2, #0
20000c16:	4798      	blx	r3
20000c18:	e00e      	b.n	20000c38 <main+0xd4>
			case 2: b->set_speed(b,0,-2);break;
20000c1a:	697b      	ldr	r3, [r7, #20]
20000c1c:	6a1b      	ldr	r3, [r3, #32]
20000c1e:	2202      	movs	r2, #2
20000c20:	4252      	negs	r2, r2
20000c22:	6978      	ldr	r0, [r7, #20]
20000c24:	2100      	movs	r1, #0
20000c26:	4798      	blx	r3
20000c28:	e006      	b.n	20000c38 <main+0xd4>
			case 8: b->set_speed(b,0,2);break;
20000c2a:	697b      	ldr	r3, [r7, #20]
20000c2c:	6a1b      	ldr	r3, [r3, #32]
20000c2e:	6978      	ldr	r0, [r7, #20]
20000c30:	2202      	movs	r2, #2
20000c32:	2100      	movs	r1, #0
20000c34:	4798      	blx	r3
20000c36:	46c0      	nop			; (mov r8, r8)
	while(1){
20000c38:	e7b3      	b.n	20000ba2 <main+0x3e>
20000c3a:	46c0      	nop			; (mov r8, r8)
20000c3c:	20000e34 	andcs	r0, r0, r4, lsr lr
20000c40:	20000da8 	andcs	r0, r0, r8, lsr #27
20000c44:	20000dcc 	andcs	r0, r0, ip, asr #27

20000c48 <__udivsi3>:
20000c48:	2200      	movs	r2, #0
20000c4a:	0843      	lsrs	r3, r0, #1
20000c4c:	428b      	cmp	r3, r1
20000c4e:	d374      	bcc.n	20000d3a <__udivsi3+0xf2>
20000c50:	0903      	lsrs	r3, r0, #4
20000c52:	428b      	cmp	r3, r1
20000c54:	d35f      	bcc.n	20000d16 <__udivsi3+0xce>
20000c56:	0a03      	lsrs	r3, r0, #8
20000c58:	428b      	cmp	r3, r1
20000c5a:	d344      	bcc.n	20000ce6 <__udivsi3+0x9e>
20000c5c:	0b03      	lsrs	r3, r0, #12
20000c5e:	428b      	cmp	r3, r1
20000c60:	d328      	bcc.n	20000cb4 <__udivsi3+0x6c>
20000c62:	0c03      	lsrs	r3, r0, #16
20000c64:	428b      	cmp	r3, r1
20000c66:	d30d      	bcc.n	20000c84 <__udivsi3+0x3c>
20000c68:	22ff      	movs	r2, #255	; 0xff
20000c6a:	0209      	lsls	r1, r1, #8
20000c6c:	ba12      	rev	r2, r2
20000c6e:	0c03      	lsrs	r3, r0, #16
20000c70:	428b      	cmp	r3, r1
20000c72:	d302      	bcc.n	20000c7a <__udivsi3+0x32>
20000c74:	1212      	asrs	r2, r2, #8
20000c76:	0209      	lsls	r1, r1, #8
20000c78:	d065      	beq.n	20000d46 <__udivsi3+0xfe>
20000c7a:	0b03      	lsrs	r3, r0, #12
20000c7c:	428b      	cmp	r3, r1
20000c7e:	d319      	bcc.n	20000cb4 <__udivsi3+0x6c>
20000c80:	e000      	b.n	20000c84 <__udivsi3+0x3c>
20000c82:	0a09      	lsrs	r1, r1, #8
20000c84:	0bc3      	lsrs	r3, r0, #15
20000c86:	428b      	cmp	r3, r1
20000c88:	d301      	bcc.n	20000c8e <__udivsi3+0x46>
20000c8a:	03cb      	lsls	r3, r1, #15
20000c8c:	1ac0      	subs	r0, r0, r3
20000c8e:	4152      	adcs	r2, r2
20000c90:	0b83      	lsrs	r3, r0, #14
20000c92:	428b      	cmp	r3, r1
20000c94:	d301      	bcc.n	20000c9a <__udivsi3+0x52>
20000c96:	038b      	lsls	r3, r1, #14
20000c98:	1ac0      	subs	r0, r0, r3
20000c9a:	4152      	adcs	r2, r2
20000c9c:	0b43      	lsrs	r3, r0, #13
20000c9e:	428b      	cmp	r3, r1
20000ca0:	d301      	bcc.n	20000ca6 <__udivsi3+0x5e>
20000ca2:	034b      	lsls	r3, r1, #13
20000ca4:	1ac0      	subs	r0, r0, r3
20000ca6:	4152      	adcs	r2, r2
20000ca8:	0b03      	lsrs	r3, r0, #12
20000caa:	428b      	cmp	r3, r1
20000cac:	d301      	bcc.n	20000cb2 <__udivsi3+0x6a>
20000cae:	030b      	lsls	r3, r1, #12
20000cb0:	1ac0      	subs	r0, r0, r3
20000cb2:	4152      	adcs	r2, r2
20000cb4:	0ac3      	lsrs	r3, r0, #11
20000cb6:	428b      	cmp	r3, r1
20000cb8:	d301      	bcc.n	20000cbe <__udivsi3+0x76>
20000cba:	02cb      	lsls	r3, r1, #11
20000cbc:	1ac0      	subs	r0, r0, r3
20000cbe:	4152      	adcs	r2, r2
20000cc0:	0a83      	lsrs	r3, r0, #10
20000cc2:	428b      	cmp	r3, r1
20000cc4:	d301      	bcc.n	20000cca <__udivsi3+0x82>
20000cc6:	028b      	lsls	r3, r1, #10
20000cc8:	1ac0      	subs	r0, r0, r3
20000cca:	4152      	adcs	r2, r2
20000ccc:	0a43      	lsrs	r3, r0, #9
20000cce:	428b      	cmp	r3, r1
20000cd0:	d301      	bcc.n	20000cd6 <__udivsi3+0x8e>
20000cd2:	024b      	lsls	r3, r1, #9
20000cd4:	1ac0      	subs	r0, r0, r3
20000cd6:	4152      	adcs	r2, r2
20000cd8:	0a03      	lsrs	r3, r0, #8
20000cda:	428b      	cmp	r3, r1
20000cdc:	d301      	bcc.n	20000ce2 <__udivsi3+0x9a>
20000cde:	020b      	lsls	r3, r1, #8
20000ce0:	1ac0      	subs	r0, r0, r3
20000ce2:	4152      	adcs	r2, r2
20000ce4:	d2cd      	bcs.n	20000c82 <__udivsi3+0x3a>
20000ce6:	09c3      	lsrs	r3, r0, #7
20000ce8:	428b      	cmp	r3, r1
20000cea:	d301      	bcc.n	20000cf0 <__udivsi3+0xa8>
20000cec:	01cb      	lsls	r3, r1, #7
20000cee:	1ac0      	subs	r0, r0, r3
20000cf0:	4152      	adcs	r2, r2
20000cf2:	0983      	lsrs	r3, r0, #6
20000cf4:	428b      	cmp	r3, r1
20000cf6:	d301      	bcc.n	20000cfc <__udivsi3+0xb4>
20000cf8:	018b      	lsls	r3, r1, #6
20000cfa:	1ac0      	subs	r0, r0, r3
20000cfc:	4152      	adcs	r2, r2
20000cfe:	0943      	lsrs	r3, r0, #5
20000d00:	428b      	cmp	r3, r1
20000d02:	d301      	bcc.n	20000d08 <__udivsi3+0xc0>
20000d04:	014b      	lsls	r3, r1, #5
20000d06:	1ac0      	subs	r0, r0, r3
20000d08:	4152      	adcs	r2, r2
20000d0a:	0903      	lsrs	r3, r0, #4
20000d0c:	428b      	cmp	r3, r1
20000d0e:	d301      	bcc.n	20000d14 <__udivsi3+0xcc>
20000d10:	010b      	lsls	r3, r1, #4
20000d12:	1ac0      	subs	r0, r0, r3
20000d14:	4152      	adcs	r2, r2
20000d16:	08c3      	lsrs	r3, r0, #3
20000d18:	428b      	cmp	r3, r1
20000d1a:	d301      	bcc.n	20000d20 <__udivsi3+0xd8>
20000d1c:	00cb      	lsls	r3, r1, #3
20000d1e:	1ac0      	subs	r0, r0, r3
20000d20:	4152      	adcs	r2, r2
20000d22:	0883      	lsrs	r3, r0, #2
20000d24:	428b      	cmp	r3, r1
20000d26:	d301      	bcc.n	20000d2c <__udivsi3+0xe4>
20000d28:	008b      	lsls	r3, r1, #2
20000d2a:	1ac0      	subs	r0, r0, r3
20000d2c:	4152      	adcs	r2, r2
20000d2e:	0843      	lsrs	r3, r0, #1
20000d30:	428b      	cmp	r3, r1
20000d32:	d301      	bcc.n	20000d38 <__udivsi3+0xf0>
20000d34:	004b      	lsls	r3, r1, #1
20000d36:	1ac0      	subs	r0, r0, r3
20000d38:	4152      	adcs	r2, r2
20000d3a:	1a41      	subs	r1, r0, r1
20000d3c:	d200      	bcs.n	20000d40 <__udivsi3+0xf8>
20000d3e:	4601      	mov	r1, r0
20000d40:	4152      	adcs	r2, r2
20000d42:	4610      	mov	r0, r2
20000d44:	4770      	bx	lr
20000d46:	e7ff      	b.n	20000d48 <__udivsi3+0x100>
20000d48:	b501      	push	{r0, lr}
20000d4a:	2000      	movs	r0, #0
20000d4c:	f000 f806 	bl	20000d5c <__aeabi_idiv0>
20000d50:	bd02      	pop	{r1, pc}
20000d52:	46c0      	nop			; (mov r8, r8)

20000d54 <__aeabi_uidivmod>:
20000d54:	2900      	cmp	r1, #0
20000d56:	d0f7      	beq.n	20000d48 <__udivsi3+0x100>
20000d58:	e776      	b.n	20000c48 <__udivsi3>
20000d5a:	4770      	bx	lr

20000d5c <__aeabi_idiv0>:
20000d5c:	4770      	bx	lr
20000d5e:	46c0      	nop			; (mov r8, r8)

20000d60 <player_1_points>:
	...

20000d61 <player_2_points>:
20000d61:	 	stcne	0, cr0, [r0], {-0}

20000d64 <paddle_geometry>:
20000d64:	0000001c 	andeq	r0, r0, ip, lsl r0
20000d68:	00000002 	andeq	r0, r0, r2
20000d6c:	0000000e 	andeq	r0, r0, lr
20000d70:	01000000 	mrseq	r0, (UNDEF: 0)
20000d74:	03000200 	movweq	r0, #512	; 0x200
20000d78:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20000d7c:	07000600 	streq	r0, [r0, -r0, lsl #12]
20000d80:	09000800 	stmdbeq	r0, {fp}
20000d84:	0b000a00 	bleq	2000358c <ball+0x2758>
20000d88:	0d000c00 	stceq	12, cr0, [r0, #-0]
20000d8c:	01010001 	tsteq	r1, r1
20000d90:	03010201 	movweq	r0, #4609	; 0x1201
20000d94:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
20000d98:	07010601 	streq	r0, [r1, -r1, lsl #12]
20000d9c:	09010801 	stmdbeq	r1, {r0, fp}
20000da0:	0b010a01 	bleq	200435ac <ball+0x42778>
20000da4:	0d010c01 	stceq	12, cr0, [r1, #-4]

20000da8 <paddle_left>:
20000da8:	20000d64 	andcs	r0, r0, r4, ror #26
	...
20000db4:	00000032 	andeq	r0, r0, r2, lsr r0
20000db8:	00000019 	andeq	r0, r0, r9, lsl r0
20000dbc:	20000695 	mulcs	r0, r5, r6
20000dc0:	200006fb 	strdcs	r0, [r0], -fp
20000dc4:	20000a6b 	andcs	r0, r0, fp, ror #20
20000dc8:	20000905 	andcs	r0, r0, r5, lsl #18

20000dcc <paddle_right>:
20000dcc:	20000d64 	andcs	r0, r0, r4, ror #26
	...
20000dd8:	0000004e 	andeq	r0, r0, lr, asr #32
20000ddc:	00000019 	andeq	r0, r0, r9, lsl r0
20000de0:	20000695 	mulcs	r0, r5, r6
20000de4:	200006fb 	strdcs	r0, [r0], -fp
20000de8:	20000a6b 	andcs	r0, r0, fp, ror #20
20000dec:	20000905 	andcs	r0, r0, r5, lsl #18

20000df0 <ball_geometry>:
20000df0:	0000000c 	andeq	r0, r0, ip
20000df4:	00000004 	andeq	r0, r0, r4
20000df8:	00000004 	andeq	r0, r0, r4
20000dfc:	02000100 	andeq	r0, r0, #0, 2
20000e00:	01010001 	tsteq	r1, r1
20000e04:	03010201 	movweq	r0, #4609	; 0x1201
20000e08:	01020002 	tsteq	r2, r2
20000e0c:	03020202 	movweq	r0, #8706	; 0x2202
20000e10:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000e34 <ball>:
20000e34:	20000df0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000e40:	00000040 	andeq	r0, r0, r0, asr #32
20000e44:	00000020 	andeq	r0, r0, r0, lsr #32
20000e48:	20000695 	mulcs	r0, r5, r6
20000e4c:	200006fb 	strdcs	r0, [r0], -fp
20000e50:	20000925 	andcs	r0, r0, r5, lsr #18
20000e54:	20000905 	andcs	r0, r0, r5, lsl #18
20000e58:	2000054a 	andcs	r0, r0, sl, asr #10
20000e5c:	20000554 	andcs	r0, r0, r4, asr r5
20000e60:	2000055e 	andcs	r0, r0, lr, asr r5
20000e64:	20000568 	andcs	r0, r0, r8, ror #10
20000e68:	20000572 	andcs	r0, r0, r2, ror r5
20000e6c:	2000057c 	andcs	r0, r0, ip, ror r5
20000e70:	20000586 	andcs	r0, r0, r6, lsl #11
20000e74:	20000590 	mulcs	r0, r0, r5
20000e78:	0a030201 	beq	200c1684 <ball+0xc0850>
20000e7c:	0b060504 	bleq	20182294 <ball+0x181460>
20000e80:	0c090807 	stceq	8, cr0, [r9], {7}
20000e84:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000008f8 	strdeq	r0, [r0], -r8
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000013c 	andeq	r0, r0, ip, lsr r1
  10:	0003a80c 	andeq	sl, r3, ip, lsl #16
  14:	00024d00 	andeq	r4, r2, r0, lsl #26
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	00960200 	addseq	r0, r6, r0, lsl #4
  28:	33070000 	movwcc	r0, #28672	; 0x7000
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000012e 	andeq	r0, r0, lr, lsr #2
  38:	0001dd04 	andeq	sp, r1, r4, lsl #26
  3c:	01060200 	mrseq	r0, LR_usr
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0206 	strcs	r0, [sl, #-518]	; 0xfffffdfa
  4c:	00000000 	andeq	r0, r0, r0
  50:	06007905 	streq	r7, [r0], -r5, lsl #18
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	0000b802 	andeq	fp, r0, r2, lsl #16
  60:	02040600 	andeq	r0, r4, #0, 12
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00003004 	andeq	r3, r0, r4
  6c:	06064400 	streq	r4, [r6], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	01240600 			; <UNDEFINED> instruction: 0x01240600
  78:	07060000 	streq	r0, [r6, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	f2060000 	vhadd.s8	d0, d6, d0
  84:	06000000 	streq	r0, [r0], -r0
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000000f8 	strdeq	r0, [r0], -r8
  94:	a9060906 	stmdbge	r6, {r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a06 	andlt	r0, r8, r6, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	08070403 	stmdaeq	r7, {r0, r1, sl}
  c4:	02000002 	andeq	r0, r0, #2
  c8:	00000072 	andeq	r0, r0, r2, ror r0
  cc:	68030b06 	stmdavs	r3, {r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000071 	andeq	r0, r0, r1, ror r0
  d8:	df0e0b06 	svcle	0x000e0b06
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02b90400 	adcseq	r0, r9, #0, 8
  e8:	06240000 	strteq	r0, [r4], -r0
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	06006f65 	streq	r6, [r0], -r5, ror #30
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	06007864 	streq	r7, [r0], -r4, ror #16
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	06007964 	streq	r7, [r0], -r4, ror #18
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	0000000c 	andeq	r0, r0, ip
 11c:	a9061006 	stmdbge	r6, {r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	0000be06 	andeq	fp, r0, r6, lsl #28
 128:	0b100600 	bleq	401930 <startup-0x1fbfe6d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	03030610 	movweq	r0, #13840	; 0x3610
 134:	11060000 	mrsne	r0, (UNDEF: 6)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	ee061400 	cfcpys	mvf1, mvf6
 140:	06000002 	streq	r0, [r0], -r2
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000416 	andeq	r0, r0, r6, lsl r4
 150:	8d0a1306 	stchi	3, cr1, [sl, #-24]	; 0xffffffe8
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00030806 	andeq	r0, r3, r6, lsl #16
 15c:	0a140600 	beq	501964 <startup-0x1fafe69c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
 1b0:	06000003 	streq	r0, [r0], -r3
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	8d020000 	stchi	0, cr0, [r2, #-0]
 1bc:	06000003 	streq	r0, [r0], -r3
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
 1c8:	04000001 	streq	r0, [r0], #-1
 1cc:	00251001 	eoreq	r1, r5, r1
 1d0:	03050000 	movweq	r0, #20480	; 0x5000
 1d4:	20000d60 	andcs	r0, r0, r0, ror #26
 1d8:	00035c0d 	andeq	r5, r3, sp, lsl #24
 1dc:	10020400 	andne	r0, r2, r0, lsl #8
 1e0:	00000025 	andeq	r0, r0, r5, lsr #32
 1e4:	0d610305 	stcleq	3, cr0, [r1, #-20]!	; 0xffffffec
 1e8:	610d2000 	mrsvs	r2, (UNDEF: 13)
 1ec:	05000000 	streq	r0, [r0, #-0]
 1f0:	00c71116 	sbceq	r1, r7, r6, lsl r1
 1f4:	03050000 	movweq	r0, #20480	; 0x5000
 1f8:	20000d64 	andcs	r0, r0, r4, ror #26
 1fc:	00010a0d 	andeq	r0, r1, sp, lsl #20
 200:	0f170500 	svceq	0x00170500
 204:	000001ae 	andeq	r0, r0, lr, lsr #3
 208:	0da80305 	stceq	3, cr0, [r8, #20]!
 20c:	9e0d2000 	cdpls	0, 0, cr2, cr13, cr0, {0}
 210:	05000000 	streq	r0, [r0, #-0]
 214:	01ae0f18 			; <UNDEFINED> instruction: 0x01ae0f18
 218:	03050000 	movweq	r0, #20480	; 0x5000
 21c:	20000dcc 	andcs	r0, r0, ip, asr #27
 220:	0003330d 	andeq	r3, r3, sp, lsl #6
 224:	111a0500 	tstne	sl, r0, lsl #10
 228:	000000c7 	andeq	r0, r0, r7, asr #1
 22c:	0df00305 	ldcleq	3, cr0, [r0, #20]!
 230:	570d2000 	strpl	r2, [sp, -r0]
 234:	05000003 	streq	r0, [r0, #-3]
 238:	01ae0f1b 			; <UNDEFINED> instruction: 0x01ae0f1b
 23c:	03050000 	movweq	r0, #20480	; 0x5000
 240:	20000e34 	andcs	r0, r0, r4, lsr lr
 244:	0000460e 	andeq	r4, r0, lr, lsl #12
 248:	062b0500 	strteq	r0, [fp], -r0, lsl #10
 24c:	20000b64 	andcs	r0, r0, r4, ror #22
 250:	000000e4 	andeq	r0, r0, r4, ror #1
 254:	02ab9c01 	adceq	r9, fp, #256	; 0x100
 258:	620f0000 	andvs	r0, pc, #0
 25c:	0a2c0500 	beq	b01664 <startup-0x1f4fe99c>
 260:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 264:	0f6c9102 	svceq	0x006c9102
 268:	05003262 	streq	r3, [r0, #-610]	; 0xfffffd9e
 26c:	01ba0a2d 			; <UNDEFINED> instruction: 0x01ba0a2d
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	036c0d68 	cmneq	ip, #104, 26	; 0x1a00
 278:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 27c:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 280:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 284:	0002370d 	andeq	r3, r2, sp, lsl #14
 288:	0a2f0500 	beq	bc1690 <startup-0x1f43e970>
 28c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 290:	10609102 	rsbne	r9, r0, r2, lsl #2
 294:	20000ba2 	andcs	r0, r0, r2, lsr #23
 298:	00000096 	muleq	r0, r6, r0
 29c:	0500630f 	streq	r6, [r0, #-783]	; 0xfffffcf1
 2a0:	00250b42 	eoreq	r0, r5, r2, asr #22
 2a4:	91020000 	mrsls	r0, (UNDEF: 2)
 2a8:	1100005f 	qaddne	r0, pc, r0	; <UNPREDICTABLE>
 2ac:	00000244 	andeq	r0, r0, r4, asr #4
 2b0:	24061d05 	strcs	r1, [r6], #-3333	; 0xfffff2fb
 2b4:	4020000b 	eormi	r0, r0, fp
 2b8:	01000000 	mrseq	r0, (UNDEF: 0)
 2bc:	03a0119c 	moveq	r1, #156, 2	; 0x27
 2c0:	0f050000 	svceq	0x00050000
 2c4:	00000006 	andeq	r0, r0, r6
 2c8:	00000c20 	andeq	r0, r0, r0, lsr #24
 2cc:	0e9c0100 	fmleqe	f0, f4, f0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	6a063204 	bvs	18caec <startup-0x1fe73514>
 2d8:	ba20000a 	blt	800308 <startup-0x1f7ffcf8>
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	0003119c 	muleq	r3, ip, r1
 2e4:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 2e8:	ba1a3204 	blt	68cb00 <startup-0x1f973500>
 2ec:	02000001 	andeq	r0, r0, #1
 2f0:	57136c91 			; <UNDEFINED> instruction: 0x57136c91
 2f4:	04000003 	streq	r0, [r0], #-3
 2f8:	01ba2532 			; <UNDEFINED> instruction: 0x01ba2532
 2fc:	91020000 	mrsls	r0, (UNDEF: 2)
 300:	02d80d68 	sbcseq	r0, r8, #104, 26	; 0x1a00
 304:	35040000 	strcc	r0, [r4, #-0]
 308:	0000a906 	andeq	sl, r0, r6, lsl #18
 30c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 310:	03121400 	tsteq	r2, #0, 8
 314:	26040000 	strcs	r0, [r4], -r0
 318:	00002509 	andeq	r2, r0, r9, lsl #10
 31c:	0009fc00 	andeq	pc, r9, r0, lsl #24
 320:	00006e20 	andeq	r6, r0, r0, lsr #28
 324:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
 328:	12000003 	andne	r0, r0, #3
 32c:	2604006f 	strcs	r0, [r4], -pc, rrx
 330:	0001ba25 	andeq	fp, r1, r5, lsr #20
 334:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 338:	00023213 	andeq	r3, r2, r3, lsl r2
 33c:	2c260400 	cfstrscs	mvf0, [r6], #-0
 340:	000000a9 	andeq	r0, r0, r9, lsr #1
 344:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 348:	00000357 	andeq	r0, r0, r7, asr r3
 34c:	ba3a2604 	blt	e89b64 <startup-0x1f17649c>
 350:	02000001 	andeq	r0, r0, #1
 354:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 358:	00000352 	andeq	r0, r0, r2, asr r3
 35c:	24060904 	strcs	r0, [r6], #-2308	; 0xfffff6fc
 360:	d8200009 	stmdale	r0!, {r0, r3}
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	0003a89c 	muleq	r3, ip, r8
 36c:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 370:	ba180904 	blt	602788 <startup-0x1f9fd878>
 374:	02000001 	andeq	r0, r0, #1
 378:	ec136c91 	ldc	12, cr6, [r3], {145}	; 0x91
 37c:	04000000 	streq	r0, [r0], #-0
 380:	01ba2309 			; <UNDEFINED> instruction: 0x01ba2309
 384:	91020000 	mrsls	r0, (UNDEF: 2)
 388:	02d30d68 	sbcseq	r0, r3, #104, 26	; 0x1a00
 38c:	0b040000 	bleq	100394 <startup-0x1feffc6c>
 390:	0000a906 	andeq	sl, r0, r6, lsl #18
 394:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 398:	0002d80d 	andeq	sp, r2, sp, lsl #16
 39c:	060c0400 	streq	r0, [ip], -r0, lsl #8
 3a0:	000000a9 	andeq	r0, r0, r9, lsr #1
 3a4:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3a8:	0001e415 	andeq	lr, r1, r5, lsl r4
 3ac:	06040400 	streq	r0, [r4], -r0, lsl #8
 3b0:	20000904 	andcs	r0, r0, r4, lsl #18
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	03ea9c01 	mvneq	r9, #256	; 0x100
 3bc:	6f120000 	svcvs	0x00120000
 3c0:	1f040400 	svcne	0x00040400
 3c4:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 3c8:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 3cc:	00000116 	andeq	r0, r0, r6, lsl r1
 3d0:	a9260404 	stmdbge	r6!, {r2, sl}
 3d4:	02000000 	andeq	r0, r0, #0
 3d8:	1d137091 	ldcne	0, cr7, [r3, #-580]	; 0xfffffdbc
 3dc:	04000001 	streq	r0, [r0], #-1
 3e0:	00a93204 	adceq	r3, r9, r4, lsl #4
 3e4:	91020000 	mrsls	r0, (UNDEF: 2)
 3e8:	9516006c 	ldrls	r0, [r6, #-108]	; 0xffffff94
 3ec:	03000003 	movweq	r0, #3
 3f0:	00a90529 	adceq	r0, r9, r9, lsr #10
 3f4:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
 3f8:	00542000 	subseq	r2, r4, r0
 3fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 400:	00000412 	andeq	r0, r0, r2, lsl r4
 404:	0300630f 	movweq	r6, #783	; 0x30f
 408:	0031102a 	eorseq	r1, r1, sl, lsr #32
 40c:	91020000 	mrsls	r0, (UNDEF: 2)
 410:	3a170077 	bcc	5c05f4 <startup-0x1fa3fa0c>
 414:	03000000 	movweq	r0, #0
 418:	00a90524 	adceq	r0, r9, r4, lsr #10
 41c:	087c0000 	ldmdaeq	ip!, {}^	; <UNPREDICTABLE>
 420:	00342000 	eorseq	r2, r4, r0
 424:	9c010000 	stcls	0, cr0, [r1], {-0}
 428:	0000045a 	andeq	r0, r0, sl, asr r4
 42c:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 430:	15240300 	strne	r0, [r4, #-768]!	; 0xfffffd00
 434:	000000a9 	andeq	r0, r0, r9, lsr #1
 438:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
 43c:	00000386 	andeq	r0, r0, r6, lsl #7
 440:	a91e2403 	ldmdbge	lr, {r0, r1, sl, sp}
 444:	02000000 	andeq	r0, r0, #0
 448:	3f0d5891 	svccc	0x000d5891
 44c:	03000002 	movweq	r0, #2
 450:	045a1025 	ldrbeq	r1, [sl], #-37	; 0xffffffdb
 454:	91020000 	mrsls	r0, (UNDEF: 2)
 458:	31080060 	tstcc	r8, r0, rrx
 45c:	70000000 	andvc	r0, r0, r0
 460:	09000004 	stmdbeq	r0, {r2}
 464:	000000c0 	andeq	r0, r0, r0, asr #1
 468:	00c00903 	sbceq	r0, r0, r3, lsl #18
 46c:	00030000 	andeq	r0, r3, r0
 470:	0002f415 	andeq	pc, r2, r5, lsl r4	; <UNPREDICTABLE>
 474:	061a0300 	ldreq	r0, [sl], -r0, lsl #6
 478:	20000818 	andcs	r0, r0, r8, lsl r8
 47c:	00000064 	andeq	r0, r0, r4, rrx
 480:	04969c01 	ldreq	r9, [r6], #3073	; 0xc01
 484:	72120000 	andsvc	r0, r2, #0
 488:	0300776f 	movweq	r7, #1903	; 0x76f
 48c:	00a9191a 	adceq	r1, r9, sl, lsl r9
 490:	91020000 	mrsls	r0, (UNDEF: 2)
 494:	06150074 			; <UNDEFINED> instruction: 0x06150074
 498:	03000004 	movweq	r0, #4
 49c:	07b60610 			; <UNDEFINED> instruction: 0x07b60610
 4a0:	00622000 	rsbeq	r2, r2, r0
 4a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4a8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
 4ac:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 4b0:	1a100300 	bne	4010b8 <startup-0x1fbfef48>
 4b4:	000000a9 	andeq	r0, r0, r9, lsr #1
 4b8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 4bc:	0002be18 	andeq	fp, r2, r8, lsl lr
 4c0:	0f010300 	svceq	0x00010300
 4c4:	00000031 	andeq	r0, r0, r1, lsr r0
 4c8:	20000760 	andcs	r0, r0, r0, ror #14
 4cc:	00000056 	andeq	r0, r0, r6, asr r0
 4d0:	05549c01 	ldrbeq	r9, [r4, #-3073]	; 0xfffff3ff
 4d4:	860d0000 	strhi	r0, [sp], -r0
 4d8:	03000003 	movweq	r0, #3
 4dc:	05540702 	ldrbeq	r0, [r4, #-1794]	; 0xfffff8fe
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	656b0f73 	strbvs	r0, [fp, #-3955]!	; 0xfffff08d
 4e8:	03030079 	movweq	r0, #12409	; 0x3079
 4ec:	00055407 	andeq	r5, r5, r7, lsl #8
 4f0:	72910200 	addsvc	r0, r1, #0, 4
 4f4:	00076610 	andeq	r6, r7, r0, lsl r6
 4f8:	00004620 	andeq	r4, r0, r0, lsr #12
 4fc:	6f720f00 	svcvs	0x00720f00
 500:	04030077 	streq	r0, [r3], #-119	; 0xffffff89
 504:	0000a90a 	andeq	sl, r0, sl, lsl #18
 508:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 50c:	00076c10 	andeq	r6, r7, r0, lsl ip
 510:	00003420 	andeq	r3, r0, r0, lsr #8
 514:	04061900 	streq	r1, [r6], #-2304	; 0xfffff700
 518:	05030000 	streq	r0, [r3, #-0]
 51c:	0000a903 	andeq	sl, r0, r3, lsl #18
 520:	00052700 	andeq	r2, r5, r0, lsl #14
 524:	19001a00 	stmdbne	r0, {r9, fp, ip}
 528:	00000395 	muleq	r0, r5, r3
 52c:	a90c0603 	stmdbge	ip, {r0, r1, r9, sl}
 530:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
 534:	1a000005 	bne	550 <startup-0x1ffffab0>
 538:	07861000 	streq	r1, [r6, r0]
 53c:	001a2000 	andseq	r2, sl, r0
 540:	3a1b0000 	bcc	6c0548 <startup-0x1f93fab8>
 544:	03000000 	movweq	r0, #0
 548:	00a90a09 	adceq	r0, r9, r9, lsl #20
 54c:	001a0000 	andseq	r0, sl, r0
 550:	00000000 	andeq	r0, r0, r0
 554:	37080103 	strcc	r0, [r8, -r3, lsl #2]
 558:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 55c:	00000326 	andeq	r0, r0, r6, lsr #6
 560:	fa06af02 	blx	1ac170 <startup-0x1fe53e90>
 564:	66200006 	strtvs	r0, [r0], -r6
 568:	01000000 	mrseq	r0, (UNDEF: 0)
 56c:	0005969c 	muleq	r5, ip, r6
 570:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 574:	ba1baf02 	blt	6ec184 <startup-0x1f913e7c>
 578:	02000001 	andeq	r0, r0, #1
 57c:	02106c91 	andseq	r6, r0, #37120	; 0x9100
 580:	54200007 	strtpl	r0, [r0], #-7
 584:	0f000000 	svceq	0x00000000
 588:	b0020074 	andlt	r0, r2, r4, ror r0
 58c:	0000a90a 	andeq	sl, r0, sl, lsl #18
 590:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 594:	1b0e0000 	blne	38059c <startup-0x1fc7fa64>
 598:	02000004 	andeq	r0, r0, #4
 59c:	069406a9 	ldreq	r0, [r4], r9, lsr #13
 5a0:	00662000 	rsbeq	r2, r6, r0
 5a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5a8:	000005d1 	ldrdeq	r0, [r0], -r1
 5ac:	02006f12 	andeq	r6, r0, #18, 30	; 0x48
 5b0:	01ba1aa9 			; <UNDEFINED> instruction: 0x01ba1aa9
 5b4:	91020000 	mrsls	r0, (UNDEF: 2)
 5b8:	069c106c 	ldreq	r1, [ip], ip, rrx
 5bc:	00542000 	subseq	r2, r4, r0
 5c0:	740f0000 	strvc	r0, [pc], #-0	; 5c8 <startup-0x1ffffa38>
 5c4:	0aaa0200 	beq	fea80dcc <ball+0xdea7ff98>
 5c8:	000000a9 	andeq	r0, r0, r9, lsr #1
 5cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5d0:	00110e00 	andseq	r0, r1, r0, lsl #28
 5d4:	82020000 	andhi	r0, r2, #0
 5d8:	0004ca06 	andeq	ip, r4, r6, lsl #20
 5dc:	0001ca20 	andeq	ip, r1, r0, lsr #20
 5e0:	5c9c0100 	ldfpls	f0, [ip], {0}
 5e4:	12000006 	andne	r0, r0, #6
 5e8:	82020078 	andhi	r0, r2, #120	; 0x78
 5ec:	00002514 	andeq	r2, r0, r4, lsl r5
 5f0:	5f910200 	svcpl	0x00910200
 5f4:	02007912 	andeq	r7, r0, #294912	; 0x48000
 5f8:	00251f82 	eoreq	r1, r5, r2, lsl #31
 5fc:	91020000 	mrsls	r0, (UNDEF: 2)
 600:	6573125e 	ldrbvs	r1, [r3, #-606]!	; 0xfffffda2
 604:	82020074 	andhi	r0, r2, #116	; 0x74
 608:	0000252a 	andeq	r2, r0, sl, lsr #10
 60c:	5d910200 	lfmpl	f0, 4, [r1]
 610:	00034d0d 	andeq	r4, r3, sp, lsl #26
 614:	0a840200 	beq	fe100e1c <ball+0xde0fffe8>
 618:	00000025 	andeq	r0, r0, r5, lsr #32
 61c:	0d679102 	stfeqp	f1, [r7, #-8]!
 620:	000000ca 	andeq	r0, r0, sl, asr #1
 624:	25108402 	ldrcs	r8, [r0, #-1026]	; 0xfffffbfe
 628:	02000000 	andeq	r0, r0, #0
 62c:	b80d6691 	stmdalt	sp, {r0, r4, r7, r9, sl, sp, lr}
 630:	02000001 	andeq	r0, r0, #1
 634:	00251c84 	eoreq	r1, r5, r4, lsl #25
 638:	91020000 	mrsls	r0, (UNDEF: 2)
 63c:	02c70d65 	sbceq	r0, r7, #6464	; 0x1940
 640:	84020000 	strhi	r0, [r2], #-0
 644:	00002524 	andeq	r2, r0, r4, lsr #10
 648:	63910200 	orrsvs	r0, r1, #0, 4
 64c:	0000170d 	andeq	r1, r0, sp, lsl #14
 650:	0a850200 	beq	fe140e58 <ball+0xde140024>
 654:	00000025 	andeq	r0, r0, r5, lsr #32
 658:	00649102 	rsbeq	r9, r4, r2, lsl #2
 65c:	0000811c 	andeq	r8, r0, ip, lsl r1
 660:	06780200 	ldrbteq	r0, [r8], -r0, lsl #4
 664:	20000462 	andcs	r0, r0, r2, ror #8
 668:	00000068 	andeq	r0, r0, r8, rrx
 66c:	06a59c01 	strteq	r9, [r5], r1, lsl #24
 670:	68100000 	ldmdavs	r0, {}	; <UNPREDICTABLE>
 674:	58200004 	stmdapl	r0!, {r2}
 678:	0d000000 	stceq	0, cr0, [r0, #-0]
 67c:	000000d5 	ldrdeq	r0, [r0], -r5
 680:	250f7902 	strcs	r7, [pc, #-2306]	; fffffd86 <ball+0xdfffef52>
 684:	02000000 	andeq	r0, r0, #0
 688:	8c107791 	ldchi	7, cr7, [r0], {145}	; 0x91
 68c:	22200004 	eorcs	r0, r0, #4
 690:	0f000000 	svceq	0x00000000
 694:	00646461 	rsbeq	r6, r4, r1, ror #8
 698:	250f7c02 	strcs	r7, [pc, #-3074]	; fffffa9e <ball+0xdfffec6a>
 69c:	02000000 	andeq	r0, r0, #0
 6a0:	00007691 	muleq	r0, r1, r6
 6a4:	01f51d00 	mvnseq	r1, r0, lsl #26
 6a8:	6a020000 	bvs	806b0 <startup-0x1ff7f950>
 6ac:	00040c06 	andeq	r0, r4, r6, lsl #24
 6b0:	00005620 	andeq	r5, r0, r0, lsr #12
 6b4:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 6b8:	000000da 	ldrdeq	r0, [r0], -sl
 6bc:	25096502 	strcs	r6, [r9, #-1282]	; 0xfffffafe
 6c0:	e2000000 	and	r0, r0, #0
 6c4:	2a200003 	bcs	8006d8 <startup-0x1f7ff928>
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	0006e19c 	muleq	r6, ip, r1
 6d0:	00ca1300 	sbceq	r1, sl, r0, lsl #6
 6d4:	65020000 	strvs	r0, [r2, #-0]
 6d8:	00002523 	andeq	r2, r0, r3, lsr #10
 6dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6e0:	001d0e00 	andseq	r0, sp, r0, lsl #28
 6e4:	5d020000 	stcpl	0, cr0, [r2, #-0]
 6e8:	00039c06 	andeq	r9, r3, r6, lsl #24
 6ec:	00004620 	andeq	r4, r0, r0, lsr #12
 6f0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 6f4:	13000007 	movwne	r0, #7
 6f8:	000000e7 	andeq	r0, r0, r7, ror #1
 6fc:	25215d02 	strcs	r5, [r1, #-3330]!	; 0xfffff2fe
 700:	02000000 	andeq	r0, r0, #0
 704:	ca137791 	bgt	4de550 <startup-0x1fb21ab0>
 708:	02000000 	andeq	r0, r0, #0
 70c:	00252f5d 	eoreq	r2, r5, sp, asr pc
 710:	91020000 	mrsls	r0, (UNDEF: 2)
 714:	4b0e0076 	blmi	3808f4 <startup-0x1fc7f70c>
 718:	02000000 	andeq	r0, r0, #0
 71c:	035c0656 	cmpeq	ip, #90177536	; 0x5600000
 720:	00402000 	subeq	r2, r0, r0
 724:	9c010000 	stcls	0, cr0, [r1], {-0}
 728:	0000074b 	andeq	r0, r0, fp, asr #14
 72c:	00005913 	andeq	r5, r0, r3, lsl r9
 730:	24560200 	ldrbcs	r0, [r6], #-512	; 0xfffffe00
 734:	00000025 	andeq	r0, r0, r5, lsr #32
 738:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
 73c:	000000ca 	andeq	r0, r0, sl, asr #1
 740:	25355602 	ldrcs	r5, [r5, #-1538]!	; 0xfffff9fe
 744:	02000000 	andeq	r0, r0, #0
 748:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 74c:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 750:	dc064102 	stfles	f4, [r6], {2}
 754:	80200002 	eorhi	r0, r0, r2
 758:	01000000 	mrseq	r0, (UNDEF: 0)
 75c:	0007809c 	muleq	r7, ip, r0
 760:	007b1300 	rsbseq	r1, fp, r0, lsl #6
 764:	41020000 	mrsmi	r0, (UNDEF: 2)
 768:	0000251c 	andeq	r2, r0, ip, lsl r5
 76c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 770:	0000ca13 	andeq	ip, r0, r3, lsl sl
 774:	2b410200 	blcs	1040f7c <startup-0x1efbf084>
 778:	00000025 	andeq	r0, r0, r5, lsr #32
 77c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 780:	0000ab14 	andeq	sl, r0, r4, lsl fp
 784:	092b0200 	stmdbeq	fp!, {r9}
 788:	00000025 	andeq	r0, r0, r5, lsr #32
 78c:	2000024c 	andcs	r0, r0, ip, asr #4
 790:	00000090 	muleq	r0, r0, r0
 794:	07b89c01 	ldreq	r9, [r8, r1, lsl #24]!
 798:	ca130000 	bgt	4c07a0 <startup-0x1fb3f860>
 79c:	02000000 	andeq	r0, r0, #0
 7a0:	00251e2b 	eoreq	r1, r5, fp, lsr #28
 7a4:	91020000 	mrsls	r0, (UNDEF: 2)
 7a8:	76720f6f 	ldrbtvc	r0, [r2], -pc, ror #30
 7ac:	0a330200 	beq	cc0fb4 <startup-0x1f33f04c>
 7b0:	00000025 	andeq	r0, r0, r5, lsr #32
 7b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7b8:	0003730e 	andeq	r7, r3, lr, lsl #6
 7bc:	06170200 	ldreq	r0, [r7], -r0, lsl #4
 7c0:	200001d6 	ldrdcs	r0, [r0], -r6
 7c4:	00000076 	andeq	r0, r0, r6, ror r0
 7c8:	07e29c01 	strbeq	r9, [r2, r1, lsl #24]!
 7cc:	001e0000 	andseq	r0, lr, r0
 7d0:	0f000000 	svceq	0x00000000
 7d4:	20020063 	andcs	r0, r2, r3, rrx
 7d8:	0000250b 	andeq	r2, r0, fp, lsl #10
 7dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7e0:	c30e0000 	movwgt	r0, #57344	; 0xe000
 7e4:	02000000 	andeq	r0, r0, #0
 7e8:	0174060a 	cmneq	r4, sl, lsl #12
 7ec:	00622000 	rsbeq	r2, r2, r0
 7f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 7f4:	00000817 	andeq	r0, r0, r7, lsl r8
 7f8:	0000ca13 	andeq	ip, r0, r3, lsl sl
 7fc:	200a0200 	andcs	r0, sl, r0, lsl #4
 800:	00000025 	andeq	r0, r0, r5, lsr #32
 804:	0d6f9102 	stfeqp	f1, [pc, #-8]!	; 804 <startup-0x1ffff7fc>
 808:	0000022d 	andeq	r0, r0, sp, lsr #4
 80c:	250a0b02 	strcs	r0, [sl, #-2818]	; 0xfffff4fe
 810:	02000000 	andeq	r0, r0, #0
 814:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 818:	000002dd 	ldrdeq	r0, [r0], -sp
 81c:	38060602 	stmdacc	r6, {r1, r9, sl}
 820:	3c200001 	stccc	0, cr0, [r0], #-4
 824:	01000000 	mrseq	r0, (UNDEF: 0)
 828:	00083b9c 	muleq	r8, ip, fp
 82c:	00781200 	rsbseq	r1, r8, r0, lsl #4
 830:	25250602 	strcs	r0, [r5, #-1538]!	; 0xfffff9fe
 834:	02000000 	andeq	r0, r0, #0
 838:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 83c:	000002a4 	andeq	r0, r0, r4, lsr #5
 840:	f2060102 	vrhadd.s8	d0, d6, d2
 844:	46200000 	strtmi	r0, [r0], -r0
 848:	01000000 	mrseq	r0, (UNDEF: 0)
 84c:	00085f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
 850:	00781200 	rsbseq	r1, r8, r0, lsl #4
 854:	25230102 	strcs	r0, [r3, #-258]!	; 0xfffffefe
 858:	02000000 	andeq	r0, r0, #0
 85c:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 860:	00000215 	andeq	r0, r0, r5, lsl r2
 864:	e0062101 	and	r2, r6, r1, lsl #2
 868:	12200000 	eorne	r0, r0, #0
 86c:	01000000 	mrseq	r0, (UNDEF: 0)
 870:	00fe0e9c 	smlalseq	r0, lr, ip, lr
 874:	17010000 	strne	r0, [r1, -r0]
 878:	00009a06 	andeq	r9, r0, r6, lsl #20
 87c:	00004620 	andeq	r4, r0, r0, lsr #12
 880:	ad9c0100 	ldfges	f0, [ip]
 884:	12000008 	andne	r0, r0, #8
 888:	0100736d 	tsteq	r0, sp, ror #6
 88c:	00c01f17 	sbceq	r1, r0, r7, lsl pc
 890:	91020000 	mrsls	r0, (UNDEF: 2)
 894:	00b8106c 	adcseq	r1, r8, ip, rrx
 898:	001e2000 	andseq	r2, lr, r0
 89c:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 8a0:	0a1c0100 	beq	700ca8 <startup-0x1f8ff358>
 8a4:	000000a9 	andeq	r0, r0, r9, lsr #1
 8a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8ac:	02210e00 	eoreq	r0, r1, #0, 28
 8b0:	0d010000 	stceq	0, cr0, [r1, #-0]
 8b4:	00005806 	andeq	r5, r0, r6, lsl #16
 8b8:	00004220 	andeq	r4, r0, r0, lsr #4
 8bc:	e99c0100 	ldmib	ip, {r8}
 8c0:	12000008 	andne	r0, r0, #8
 8c4:	01007375 	tsteq	r0, r5, ror r3
 8c8:	00c01f0d 	sbceq	r1, r0, sp, lsl #30
 8cc:	91020000 	mrsls	r0, (UNDEF: 2)
 8d0:	0076106c 	rsbseq	r1, r6, ip, rrx
 8d4:	001a2000 	andseq	r2, sl, r0
 8d8:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 8dc:	0a120100 	beq	480ce4 <startup-0x1fb7f31c>
 8e0:	000000a9 	andeq	r0, r0, r9, lsr #1
 8e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8e8:	03411100 	movteq	r1, #4352	; 0x1100
 8ec:	03010000 	movweq	r0, #4096	; 0x1000
 8f0:	00001006 	andeq	r1, r0, r6
 8f4:	00004820 	andeq	r4, r0, r0, lsr #16
 8f8:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b390b3b 	bleq	e42da4 <startup-0x1f1bd25c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	12000019 	andne	r0, r0, #25
  f8:	08030005 	stmdaeq	r3, {r0, r2}
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	13490b39 	movtne	r0, #39737	; 0x9b39
 104:	00001802 	andeq	r1, r0, r2, lsl #16
 108:	03000513 	movweq	r0, #1299	; 0x513
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 11c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 120:	0b3b0b3a 	bleq	ec2e10 <startup-0x1f13d1f0>
 124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 128:	01111349 	tsteq	r1, r9, asr #6
 12c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 130:	01194296 			; <UNDEFINED> instruction: 0x01194296
 134:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 138:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	0b390b3b 	bleq	e42e34 <startup-0x1f1bd1cc>
 144:	01111927 	tsteq	r1, r7, lsr #18
 148:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 14c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 150:	16000013 			; <UNDEFINED> instruction: 0x16000013
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <startup-0x1f17c694>
 15c:	0b390b3b 	bleq	e42e50 <startup-0x1f1bd1b0>
 160:	01111349 	tsteq	r1, r9, asr #6
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194297 			; <UNDEFINED> instruction: 0x01194297
 16c:	17000013 	smladne	r0, r3, r0, r0
 170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b390b3b 	bleq	e42e6c <startup-0x1f1bd194>
 17c:	13491927 	movtne	r1, #39207	; 0x9927
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 190:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 194:	0b3b0b3a 	bleq	ec2e84 <startup-0x1f13d17c>
 198:	13490b39 	movtne	r0, #39737	; 0x9b39
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	13490b39 	movtne	r0, #39737	; 0x9b39
 1b8:	1301193c 	movwne	r1, #6460	; 0x193c
 1bc:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
 1c0:	1b000000 	blne	1c8 <startup-0x1ffffe38>
 1c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c8:	0b3a0e03 	bleq	e839dc <startup-0x1f17c624>
 1cc:	0b390b3b 	bleq	e42ec0 <startup-0x1f1bd140>
 1d0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 1d4:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 1d8:	03193f01 	tsteq	r9, #1, 30
 1dc:	3b0b3a0e 	blcc	2cea1c <startup-0x1fd315e4>
 1e0:	110b390b 	tstne	fp, fp, lsl #18
 1e4:	40061201 	andmi	r1, r6, r1, lsl #4
 1e8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1ec:	00001301 	andeq	r1, r0, r1, lsl #6
 1f0:	3f002e1d 	svccc	0x00002e1d
 1f4:	3a0e0319 	bcc	380e60 <startup-0x1fc7f1a0>
 1f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1fc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 200:	96184006 	ldrls	r4, [r8], -r6
 204:	00001942 	andeq	r1, r0, r2, asr #18
 208:	55010b1e 	strpl	r0, [r1, #-2846]	; 0xfffff4e2
 20c:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000c38 	andeq	r0, r0, r8, lsr ip
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001f8 	strdcs	r0, [r0], -r8
   4:	20000222 	andcs	r0, r0, r2, lsr #4
   8:	20000224 	andcs	r0, r0, r4, lsr #4
   c:	20000226 	andcs	r0, r0, r6, lsr #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20000c48 	andcs	r0, r0, r8, asr #24
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000070c 	andeq	r0, r0, ip, lsl #14
   4:	00d50003 	sbcseq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	614c2f37 	cmpvs	ip, r7, lsr pc
  58:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
  5c:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
  60:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
  64:	525f5250 	subspl	r5, pc, #80, 4
  68:	41505254 	cmpmi	r0, r4, asr r2
  6c:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
  70:	44000067 	strmi	r0, [r0], #-103	; 0xffffff99
  74:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  78:	00682e73 	rsbeq	r2, r8, r3, ror lr
  7c:	47000001 	strmi	r0, [r0, -r1]
  80:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  84:	72446369 	subvc	r6, r4, #-1543503871	; 0xa4000001
  88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
  8c:	00682e73 	rsbeq	r2, r8, r3, ror lr
  90:	4b000001 	blmi	9c <startup-0x1fffff64>
  94:	44627965 	strbtmi	r7, [r2], #-2405	; 0xfffff69b
  98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  9c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  a0:	00000100 	andeq	r0, r0, r0, lsl #2
  a4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
  a8:	69676f4c 	stmdbvs	r7!, {r2, r3, r6, r8, r9, sl, fp, sp, lr}^
  ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
  b0:	50000001 	andpl	r0, r0, r1
  b4:	2e676e6f 	cdpcs	14, 6, cr6, cr7, cr15, {3}
  b8:	00010063 	andeq	r0, r1, r3, rrx
  bc:	72745300 	rsbsvc	r5, r4, #0, 6
  c0:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
  c4:	2e736572 	mrccs	5, 3, r6, cr3, cr2, {3}
  c8:	00010068 	andeq	r0, r1, r8, rrx
  cc:	66654400 	strbtvs	r4, [r5], -r0, lsl #8
  d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  d4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
  d8:	0100682e 	tsteq	r0, lr, lsr #16
  dc:	05000000 	streq	r0, [r0, #-0]
  e0:	02050017 	andeq	r0, r5, #23
  e4:	20000010 	andcs	r0, r0, r0, lsl r0
  e8:	2f020514 	svccs	0x00020514
  ec:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  f0:	0c052f02 	stceq	15, cr2, [r5], {2}
  f4:	2f020520 	svccs	0x00020520
  f8:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
  fc:	0c052f02 	stceq	15, cr2, [r5], {2}
 100:	2f070520 	svccs	0x00070520
 104:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 108:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 10c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 110:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 114:	01040200 	mrseq	r0, R12_usr
 118:	2202053c 	andcs	r0, r2, #60, 10	; 0xf000000
 11c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 120:	22052f01 	andcs	r2, r5, #1, 30
 124:	4c0505ae 	cfstr32mi	mvfx0, [r5], {174}	; 0xae
 128:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 12c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 130:	04020003 	streq	r0, [r2], #-3
 134:	1c052103 	stfnes	f2, [r5], {3}
 138:	03040200 	movweq	r0, #16896	; 0x4200
 13c:	0016052d 	andseq	r0, r6, sp, lsr #10
 140:	3c010402 	cfstrscc	mvf0, [r1], {2}
 144:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 148:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 14c:	04020002 	streq	r0, [r2], #-2
 150:	01052001 	tsteq	r5, r1
 154:	5a220531 	bpl	881620 <startup-0x1f77e9e0>
 158:	834c0605 	movthi	r0, #50693	; 0xc605
 15c:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 160:	03052e02 	movweq	r2, #24066	; 0x5e02
 164:	03040200 	movweq	r0, #16896	; 0x4200
 168:	001a0521 	andseq	r0, sl, r1, lsr #10
 16c:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 170:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 174:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 178:	04020002 	streq	r0, [r2], #-2
 17c:	01052001 	tsteq	r5, r1
 180:	5a13053f 	bpl	4c1684 <startup-0x1fb3e97c>
 184:	2f2f0205 	svccs	0x002f0205
 188:	042f0105 	strteq	r0, [pc], #-261	; 190 <startup-0x1ffffe70>
 18c:	03250502 			; <UNDEFINED> instruction: 0x03250502
 190:	0f053c5d 	svceq	0x00053c5d
 194:	4a150567 	bmi	541738 <startup-0x1fabe8c8>
 198:	59660f05 	stmdbpl	r6!, {r0, r2, r8, r9, sl, fp}^
 19c:	05830105 	streq	r0, [r3, #261]	; 0x105
 1a0:	0f056827 	svceq	0x00056827
 1a4:	08010567 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl}
 1a8:	762b0513 			; <UNDEFINED> instruction: 0x762b0513
 1ac:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
 1b0:	0c054b02 			; <UNDEFINED> instruction: 0x0c054b02
 1b4:	030b05c1 	movweq	r0, #46529	; 0xb5c1
 1b8:	0305207a 	movweq	r2, #20602	; 0x507a
 1bc:	210f053c 	tstcs	pc, ip, lsr r5	; <UNPREDICTABLE>
 1c0:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 1c4:	06054b0f 	streq	r4, [r5], -pc, lsl #22
 1c8:	4b1b053d 	blmi	6c16c4 <startup-0x1f93e93c>
 1cc:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 1d0:	0105210c 	tsteq	r5, ip, lsl #2
 1d4:	3e1e0522 	cfmul64cc	mvdx0, mvdx14, mvdx2
 1d8:	3d3d0205 	lfmcc	f0, 4, [sp, #-20]!	; 0xffffffec
 1dc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 1e0:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 1e4:	3d300305 	ldccc	3, cr0, [r0, #-20]!	; 0xffffffec
 1e8:	052f1d05 	streq	r1, [pc, #-3333]!	; fffff4eb <ball+0xdfffe6b7>
 1ec:	03053c0b 	movweq	r3, #23563	; 0x5c0b
 1f0:	05053d4b 	streq	r3, [r5, #-3403]	; 0xfffff2b5
 1f4:	030a052f 	movweq	r0, #42287	; 0xa52f
 1f8:	04054a7a 	streq	r4, [r5], #-2682	; 0xfffff586
 1fc:	23020527 	movwcs	r0, #9511	; 0x2527
 200:	200e053d 	andcs	r0, lr, sp, lsr r5
 204:	052f0105 	streq	r0, [pc, #-261]!	; 107 <startup-0x1ffffef9>
 208:	0205ca29 	andeq	ip, r5, #167936	; 0x29000
 20c:	0d053d67 	stceq	13, cr3, [r5, #-412]	; 0xfffffe64
 210:	2f020520 	svccs	0x00020520
 214:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 218:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff31b <ball+0xdfffe4e7>
 21c:	0205200a 	andeq	r2, r5, #10
 220:	0e053d4b 	cdpeq	13, 0, cr3, cr5, cr11, {2}
 224:	2f040520 	svccs	0x00040520
 228:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 22c:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 230:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 234:	01053009 	tsteq	r5, r9
 238:	ca36053d 	bgt	d81734 <startup-0x1f27e8cc>
 23c:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 240:	02052010 	andeq	r2, r5, #16
 244:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 248:	3e10052f 	cfmul64cc	mvdx0, mvdx0, mvdx15
 24c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 250:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 254:	04053010 	streq	r3, [r5], #-16
 258:	2103054a 	tstcs	r3, sl, asr #10
 25c:	3002053d 	andcc	r0, r2, sp, lsr r5
 260:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 264:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 268:	40053d01 	andmi	r3, r5, r1, lsl #26
 26c:	91020576 	tstls	r2, r6, ror r5
 270:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
 274:	3a058301 	bcc	160e80 <startup-0x1fe9f180>
 278:	9102054c 	tstls	r2, ip, asr #10
 27c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 280:	05830105 	streq	r0, [r3, #261]	; 0x105
 284:	02054c2e 	andeq	r4, r5, #11776	; 0x2e00
 288:	59090567 	stmdbpl	r9, {r0, r1, r2, r5, r6, r8, sl}
 28c:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 290:	02054c1a 	andeq	r4, r5, #6656	; 0x1a00
 294:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 298:	4b4b3d3d 	blmi	12cf794 <startup-0x1ed3086c>
 29c:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 2a0:	1c053d01 	stcne	13, cr3, [r5], {1}
 2a4:	3d0f053e 	cfstr32cc	mvfx0, [pc, #-248]	; 1b4 <startup-0x1ffffe4c>
 2a8:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
 2ac:	059f2103 	ldreq	r2, [pc, #259]	; 3b7 <startup-0x1ffffc49>
 2b0:	03054b0f 	movweq	r4, #23311	; 0x5b0f
 2b4:	0004053c 	andeq	r0, r4, ip, lsr r5
 2b8:	21030402 	tstcs	r3, r2, lsl #8
 2bc:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 2c0:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 2c4:	04020003 	streq	r0, [r2], #-3
 2c8:	27055801 	strcs	r5, [r5, -r1, lsl #16]
 2cc:	02040200 	andeq	r0, r4, #0, 4
 2d0:	00020547 	andeq	r0, r2, r7, asr #10
 2d4:	58010402 	stmdapl	r1, {r1, sl}
 2d8:	05510105 	ldrbeq	r0, [r1, #-261]	; 0xfffffefb
 2dc:	04055a2e 	streq	r5, [r5], #-2606	; 0xfffff5d2
 2e0:	000e05e5 	andeq	r0, lr, r5, ror #11
 2e4:	58020402 	stmdapl	r2, {r1, sl}
 2e8:	02001805 	andeq	r1, r0, #327680	; 0x50000
 2ec:	05580404 	ldrbeq	r0, [r8, #-1028]	; 0xfffffbfc
 2f0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 2f4:	14055806 	strne	r5, [r5], #-2054	; 0xfffff7fa
 2f8:	3c18055a 	cfldr32cc	mvfx0, [r8], {90}	; 0x5a
 2fc:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
 300:	0f053e0b 	svceq	0x00053e0b
 304:	e510053c 	ldr	r0, [r0, #-1340]	; 0xfffffac4
 308:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 30c:	03052110 	movweq	r2, #20752	; 0x5110
 310:	2110054a 	tstcs	r0, sl, asr #10
 314:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 318:	03052110 	movweq	r2, #20752	; 0x5110
 31c:	2110054a 	tstcs	r0, sl, asr #10
 320:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 324:	03052110 	movweq	r2, #20752	; 0x5110
 328:	2110054a 	tstcs	r0, sl, asr #10
 32c:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 330:	03052110 	movweq	r2, #20752	; 0x5110
 334:	0405214a 	streq	r2, [r5], #-330	; 0xfffffeb6
 338:	4b080522 	blmi	2017c8 <startup-0x1fdfe838>
 33c:	05690405 	strbeq	r0, [r9, #-1029]!	; 0xfffffbfb
 340:	0a054b0e 	beq	152f80 <startup-0x1fead080>
 344:	760e054b 	strvc	r0, [lr], -fp, asr #10
 348:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 34c:	05c96802 	strbeq	r6, [r9, #2050]	; 0x802
 350:	0205c910 	andeq	ip, r5, #16, 18	; 0x40000
 354:	ad040591 	cfstr32ge	mvfx0, [r4, #-580]	; 0xfffffdbc
 358:	a04b0805 	subge	r0, fp, r5, lsl #16
 35c:	05920205 	ldreq	r0, [r2, #517]	; 0x205
 360:	ac5d032c 	mrrcge	3, 2, r0, sp, cr12
 364:	24030105 	strcs	r0, [r3], #-261	; 0xfffffefb
 368:	841c0520 	ldrhi	r0, [ip], #-1312	; 0xfffffae0
 36c:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 370:	0a052e02 	beq	14bb80 <startup-0x1feb4480>
 374:	03040200 	movweq	r0, #16896	; 0x4200
 378:	00160521 	andseq	r0, r6, r1, lsr #10
 37c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 380:	02001c05 	andeq	r1, r0, #1280	; 0x500
 384:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 388:	04020003 	streq	r0, [r2], #-3
 38c:	25052e03 	strcs	r2, [r5, #-3587]	; 0xfffff1fd
 390:	03040200 	movweq	r0, #16896	; 0x4200
 394:	0031053c 	eorseq	r0, r1, ip, lsr r5
 398:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 39c:	02003705 	andeq	r3, r0, #1310720	; 0x140000
 3a0:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 3a4:	04020003 	streq	r0, [r2], #-3
 3a8:	2c052e03 	stccs	14, cr2, [r5], {3}
 3ac:	03040200 	movweq	r0, #16896	; 0x4200
 3b0:	00160573 	andseq	r0, r6, r3, ror r5
 3b4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 3b8:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 3bc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3c0:	04020002 	streq	r0, [r2], #-2
 3c4:	01052001 	tsteq	r5, r1
 3c8:	5a1d053f 	bpl	7418cc <startup-0x1f8be734>
 3cc:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 3d0:	0a052e02 	beq	14bbe0 <startup-0x1feb4420>
 3d4:	03040200 	movweq	r0, #16896	; 0x4200
 3d8:	00160521 	andseq	r0, r6, r1, lsr #10
 3dc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3e0:	02001c05 	andeq	r1, r0, #1280	; 0x500
 3e4:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 3e8:	04020003 	streq	r0, [r2], #-3
 3ec:	25052e03 	strcs	r2, [r5, #-3587]	; 0xfffff1fd
 3f0:	03040200 	movweq	r0, #16896	; 0x4200
 3f4:	0031053c 	eorseq	r0, r1, ip, lsr r5
 3f8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 3fc:	02003705 	andeq	r3, r0, #1310720	; 0x140000
 400:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 404:	04020003 	streq	r0, [r2], #-3
 408:	29052e03 	stmdbcs	r5, {r0, r1, r9, sl, fp, sp}
 40c:	03040200 	movweq	r0, #16896	; 0x4200
 410:	00160573 	andseq	r0, r6, r3, ror r5
 414:	3c010402 	cfstrscc	mvf0, [r1], {2}
 418:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 41c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 420:	04020002 	streq	r0, [r2], #-2
 424:	01052001 	tsteq	r5, r1
 428:	0503043f 	streq	r0, [r3, #-1087]	; 0xfffffbc1
 42c:	7ece0319 	mcrvc	3, 6, r0, cr14, cr9, {0}
 430:	3f0a0558 	svccc	0x000a0558
 434:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 438:	0c052103 	stfeqs	f2, [r5], {3}
 43c:	3c0a054b 	cfstr32cc	mvfx0, [sl], {75}	; 0x4b
 440:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
 444:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 448:	2f0b0582 	svccs	0x000b0582
 44c:	02001f05 	andeq	r1, r0, #5, 30
 450:	7a030204 	bvc	c0c68 <startup-0x1ff3f398>
 454:	0002053c 	andeq	r0, r2, ip, lsr r5
 458:	3c010402 	cfstrscc	mvf0, [r1], {2}
 45c:	09030905 	stmdbeq	r3, {r0, r2, r8, fp}
 460:	2101053c 	tstcs	r1, ip, lsr r5
 464:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 468:	0b054b02 	bleq	153078 <startup-0x1feacf88>
 46c:	17052f08 	strne	r2, [r5, -r8, lsl #30]
 470:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 474:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 478:	03052017 	movweq	r2, #20503	; 0x5017
 47c:	210b052e 	tstcs	fp, lr, lsr #10
 480:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 484:	0b052e03 	bleq	14bc98 <startup-0x1feb4368>
 488:	20170521 	andscs	r0, r7, r1, lsr #10
 48c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 490:	1805210c 	stmdane	r5, {r2, r3, r8, sp}
 494:	30010520 	andcc	r0, r1, r0, lsr #10
 498:	05761d05 	ldrbeq	r1, [r6, #-3333]!	; 0xfffff2fb
 49c:	0b054b02 	bleq	1530ac <startup-0x1feacf54>
 4a0:	17052f08 	strne	r2, [r5, -r8, lsl #30]
 4a4:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 4a8:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 4ac:	03052017 	movweq	r2, #20503	; 0x5017
 4b0:	210b052e 	tstcs	fp, lr, lsr #10
 4b4:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 4b8:	0b052e03 	bleq	14bccc <startup-0x1feb4334>
 4bc:	20170521 	andscs	r0, r7, r1, lsr #10
 4c0:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 4c4:	1805210c 	stmdane	r5, {r2, r3, r8, sp}
 4c8:	30010520 	andcc	r0, r1, r0, lsr #10
 4cc:	05842505 	streq	r2, [r4, #1285]	; 0x505
 4d0:	12055910 	andne	r5, r5, #16, 18	; 0x40000
 4d4:	75010575 	strvc	r0, [r1, #-1397]	; 0xfffffa8b
 4d8:	05761105 	ldrbeq	r1, [r6, #-261]!	; 0xfffffefb
 4dc:	10053d14 	andne	r3, r5, r4, lsl sp
 4e0:	3d070520 	cfstr32cc	mvfx0, [r7, #-128]	; 0xffffff80
 4e4:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 4e8:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 4ec:	07052001 	streq	r2, [r5, -r1]
 4f0:	4a04052f 	bmi	1019b4 <startup-0x1fefe64c>
 4f4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 4f8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4fc:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 500:	0015054a 	andseq	r0, r5, sl, asr #10
 504:	20010402 	andcs	r0, r1, r2, lsl #8
 508:	052f0705 	streq	r0, [pc, #-1797]!	; fffffe0b <ball+0xdfffefd7>
 50c:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 510:	01040200 	mrseq	r0, R12_usr
 514:	2f090520 	svccs	0x00090520
 518:	04210105 	strteq	r0, [r1], #-261	; 0xfffffefb
 51c:	03390504 	teqeq	r9, #4, 10	; 0x1000000
 520:	08056654 	stmdaeq	r5, {r2, r4, r6, r9, sl, sp, lr}
 524:	01053d67 	tsteq	r5, r7, ror #26
 528:	4c29053d 	cfstr32mi	mvfx0, [r9], #-244	; 0xffffff0c
 52c:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 530:	18054b0e 	stmdane	r5, {r1, r2, r3, r8, r9, fp, lr}
 534:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 538:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff73b <ball+0xdfffe907>
 53c:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 540:	3004052e 	andcc	r0, r4, lr, lsr #10
 544:	3d3d0b05 	fldmdbxcc	sp!, {d0-d1}	;@ Deprecated
 548:	053d1205 	ldreq	r1, [sp, #-517]!	; 0xfffffdfb
 54c:	18057613 	stmdane	r5, {r0, r1, r4, r9, sl, ip, sp, lr}
 550:	2010052e 	andscs	r0, r0, lr, lsr #10
 554:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 558:	053d2f0b 	ldreq	r2, [sp, #-3851]!	; 0xfffff0f5
 55c:	09053d12 	stmdbeq	r5, {r1, r4, r8, sl, fp, ip, sp}
 560:	3d0d0576 	cfstr32cc	mvfx0, [sp, #-472]	; 0xfffffe28
 564:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 568:	0b052009 	bleq	148594 <startup-0x1feb7a6c>
 56c:	4c17052f 	cfldr32mi	mvfx0, [r7], {47}	; 0x2f
 570:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 574:	09052014 	stmdbeq	r5, {r2, r4, sp}
 578:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 57c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 580:	13052009 	movwne	r2, #20489	; 0x5009
 584:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 588:	05201005 	streq	r1, [r0, #-5]!
 58c:	3d3e2e0b 	ldccc	14, cr2, [lr, #-44]!	; 0xffffffd4
 590:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 594:	3f054b01 	svccc	0x00054b01
 598:	680e0584 	stmdavs	lr, {r2, r7, r8, sl}
 59c:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 5a0:	15052e20 	strne	r2, [r5, #-3616]	; 0xfffff1e0
 5a4:	202d0520 	eorcs	r0, sp, r0, lsr #10
 5a8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 5ac:	04020009 	streq	r0, [r2], #-9
 5b0:	14052f01 	strne	r2, [r5], #-3841	; 0xfffff0ff
 5b4:	01040200 	mrseq	r0, R12_usr
 5b8:	001e052e 	andseq	r0, lr, lr, lsr #10
 5bc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 5c0:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 5c4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 5c8:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 5cc:	34052001 	strcc	r2, [r5], #-1
 5d0:	01040200 	mrseq	r0, R12_usr
 5d4:	300b051f 	andcc	r0, fp, pc, lsl r5
 5d8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 5dc:	12052e1d 	andne	r2, r5, #464	; 0x1d0
 5e0:	1f2d0520 	svcne	0x002d0520
 5e4:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 5e8:	21052e1c 	tstcs	r5, ip, lsl lr
 5ec:	2019052e 	andscs	r0, r9, lr, lsr #10
 5f0:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
 5f4:	0e053004 	cdpeq	0, 0, cr3, cr5, cr4, {0}
 5f8:	3009054b 	andcc	r0, r9, fp, asr #10
 5fc:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 600:	02054c2a 	andeq	r4, r5, #10752	; 0x2a00
 604:	4c0e0559 	cfstr32mi	mvfx0, [lr], {89}	; 0x59
 608:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 60c:	05052e06 	streq	r2, [r5, #-3590]	; 0xfffff1fa
 610:	74040530 	strvc	r0, [r4], #-1328	; 0xfffffad0
 614:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
 618:	15052e05 	strne	r2, [r5, #-3589]	; 0xfffff1fb
 61c:	2e0f052f 	cfsh32cs	mvfx0, mvfx15, #31
 620:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 624:	14052f0f 	strne	r2, [r5], #-3855	; 0xfffff0f1
 628:	2e19054c 	cfmac32cs	mvfx0, mvfx9, mvfx12
 62c:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 630:	03052f0f 	movweq	r2, #24335	; 0x5f0f
 634:	5b09053e 	blpl	241b34 <startup-0x1fdbe4cc>
 638:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 63c:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
 640:	2f0b0520 	svccs	0x000b0520
 644:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
 648:	14052e1c 	strne	r2, [r5], #-3612	; 0xfffff1e4
 64c:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 650:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 654:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
 658:	2f130520 	svccs	0x00130520
 65c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 660:	0b052010 	bleq	1486a8 <startup-0x1feb7958>
 664:	02053e2e 	andeq	r3, r5, #736	; 0x2e0
 668:	4b01053e 	blmi	41b68 <startup-0x1ffbe498>
 66c:	14050504 	strne	r0, [r5], #-1284	; 0xfffffafc
 670:	054a5003 	strbeq	r5, [sl, #-3]
 674:	0e053502 	cfsh32eq	mvfx3, mvfx5, #2
 678:	2f020520 	svccs	0x00020520
 67c:	05201005 	streq	r1, [r0, #-5]!
 680:	10052f02 	andne	r2, r5, r2, lsl #30
 684:	2f020520 	svccs	0x00020520
 688:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 68c:	10052f01 	andne	r2, r5, r1, lsl #30
 690:	0a052308 	beq	1492b8 <startup-0x1feb6d48>
 694:	2f2f2f3d 	svccs	0x002f2f3d
 698:	2f2f0205 	svccs	0x002f0205
 69c:	3d2f0805 	stccc	8, cr0, [pc, #-20]!	; 690 <startup-0x1ffff970>
 6a0:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 6a4:	0e054b0d 	vmlaeq.f64	d4, d5, d13
 6a8:	4304053d 	movwmi	r0, #17725	; 0x453d
 6ac:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 6b0:	03054b05 	movweq	r4, #23301	; 0x5b05
 6b4:	4b09052e 	blmi	241b74 <startup-0x1fdbe48c>
 6b8:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 6bc:	03054b0a 	movweq	r4, #23306	; 0x5b0a
 6c0:	0f054b2e 	svceq	0x00054b2e
 6c4:	5903053d 	stmdbpl	r3, {r0, r2, r3, r4, r5, r8, sl}
 6c8:	05c90d05 	strbeq	r0, [r9, #3333]	; 0xd05
 6cc:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 6d0:	210d054a 	tstcs	sp, sl, asr #10
 6d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 6d8:	0d055804 	stceq	8, cr5, [r5, #-16]
 6dc:	2e0c0521 	cfsh32cs	mvfx0, mvfx12, #17
 6e0:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 6e4:	0c05210d 	stfeqs	f2, [r5], {13}
 6e8:	4a04052e 	bmi	101ba8 <startup-0x1fefe458>
 6ec:	75030a05 	strvc	r0, [r3, #-2565]	; 0xfffff5fb
 6f0:	00080220 	andeq	r0, r8, r0, lsr #4
 6f4:	05040101 	streq	r0, [r4, #-257]	; 0xfffffeff
 6f8:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
 6fc:	00000002 	andeq	r0, r0, r2
 700:	010e0320 	tsteq	lr, r0, lsr #6
 704:	21130105 	tstcs	r3, r5, lsl #2
 708:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
 70c:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
   4:	6461705f 	strbtvs	r7, [r1], #-95	; 0xffffffa1
   8:	00656c64 	rsbeq	r6, r5, r4, ror #24
   c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  10:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  14:	69006c65 	stmdbvs	r0, {r0, r2, r5, r6, sl, fp, sp, lr}
  18:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
  1c:	61726700 	cmnvs	r2, r0, lsl #14
  20:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  24:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  28:	645f6574 	ldrbvs	r6, [pc], #-1396	; 30 <startup-0x1fffffd0>
  2c:	00617461 	rsbeq	r7, r1, r1, ror #8
  30:	6f654774 	svcvs	0x00654774
  34:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  38:	65670079 	strbvs	r0, [r7, #-121]!	; 0xffffff87
  3c:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
  40:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
  44:	616d0065 	cmnvs	sp, r5, rrx
  48:	67006e69 	strvs	r6, [r0, -r9, ror #28]
  4c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  50:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  54:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  58:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffee4 <ball+0xdffff0b0>
  5c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  60:	64617000 	strbtvs	r7, [r1], #-0
  64:	5f656c64 	svcpl	0x00656c64
  68:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffed4 <ball+0xdffff0a0>
  6c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  70:	45475000 	strbmi	r5, [r7, #-0]
  74:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  78:	76005952 			; <UNDEFINED> instruction: 0x76005952
  7c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  80:	61726700 	cmnvs	r2, r0, lsl #14
  84:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  88:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  8c:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  90:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  94:	6975006e 	ldmdbvs	r5!, {r1, r2, r3, r5, r6}^
  98:	5f38746e 	svcpl	0x0038746e
  9c:	61700074 	cmnvs	r0, r4, ror r0
  a0:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  a4:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
  a8:	67007468 	strvs	r7, [r0, -r8, ror #8]
  ac:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  b0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  b4:	00646165 	rsbeq	r6, r4, r5, ror #2
  b8:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  bc:	6f700054 	svcvs	0x00700054
  c0:	73007973 	movwvc	r7, #2419	; 0x973
  c4:	63656c65 	cmnvs	r5, #25856	; 0x6500
  c8:	6f635f74 	svcvs	0x00635f74
  cc:	6f72746e 	svcvs	0x0072746e
  d0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  d4:	67617000 	strbvs	r7, [r1, -r0]!
  d8:	72670065 	rsbvc	r0, r7, #101	; 0x65
  dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  e0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  e4:	645f6461 	ldrbvs	r6, [pc], #-1121	; ec <startup-0x1fffff14>
  e8:	00617461 	rsbeq	r7, r1, r1, ror #8
  ec:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
  f0:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
  f4:	0078657a 	rsbseq	r6, r8, sl, ror r5
  f8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  fc:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 100:	5f79616c 	svcpl	0x0079616c
 104:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 108:	61700069 	cmnvs	r0, r9, rrx
 10c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 110:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 114:	70730074 	rsbsvc	r0, r3, r4, ror r0
 118:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 11c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 120:	00796465 	rsbseq	r6, r9, r5, ror #8
 124:	706d756e 	rsbvc	r7, sp, lr, ror #10
 128:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 12c:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
 130:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 134:	63206465 			; <UNDEFINED> instruction: 0x63206465
 138:	00726168 	rsbseq	r6, r2, r8, ror #2
 13c:	20554e47 	subscs	r4, r5, r7, asr #28
 140:	20393943 	eorscs	r3, r9, r3, asr #18
 144:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 148:	30322031 	eorscc	r2, r2, r1, lsr r0
 14c:	30313931 	eorscc	r3, r1, r1, lsr r9
 150:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 154:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 158:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 15c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 160:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 164:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 168:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 16c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 170:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 174:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 178:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 17c:	205d3939 	subscs	r3, sp, r9, lsr r9
 180:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 184:	20626d75 	rsbcs	r6, r2, r5, ror sp
 188:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 18c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 190:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 194:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 198:	616d2d20 	cmnvs	sp, r0, lsr #26
 19c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 1a0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 1a4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 1a8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 1ac:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 1b0:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 1b4:	00393963 	eorseq	r3, r9, r3, ror #18
 1b8:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
 1bc:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 1c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1c4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 1c8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1cc:	616c7000 	cmnvs	ip, r0
 1d0:	5f726579 	svcpl	0x00726579
 1d4:	6f705f31 	svcvs	0x00705f31
 1d8:	73746e69 	cmnvc	r4, #1680	; 0x690
 1dc:	6f507400 	svcvs	0x00507400
 1e0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1e4:	5f746573 	svcpl	0x00746573
 1e8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 1ec:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 1f0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1f4:	61726700 	cmnvs	r2, r0, lsl #14
 1f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1fc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 200:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 204:	00657a69 	rsbeq	r7, r5, r9, ror #20
 208:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 20c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 210:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 214:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 218:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff8bf <ball+0xdfffea8b>
 21c:	736e3030 	cmnvc	lr, #48	; 0x30
 220:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 224:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 16a <startup-0x1ffffe96>	; <UNPREDICTABLE>
 228:	6f726b69 	svcvs	0x00726b69
 22c:	746f6200 	strbtvc	r6, [pc], #-512	; 234 <startup-0x1ffffdcc>
 230:	656e0068 	strbvs	r0, [lr, #-104]!	; 0xffffff98
 234:	70005977 	andvc	r5, r0, r7, ror r9
 238:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 23c:	6b007468 	blvs	1d3e4 <startup-0x1ffe2c1c>
 240:	00737965 	rsbseq	r7, r3, r5, ror #18
 244:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 248:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 24c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 250:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 254:	736f5c73 	cmnvc	pc, #29440	; 0x7300
 258:	5c6e6e61 	stclpl	14, cr6, [lr], #-388	; 0xfffffe7c
 25c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 260:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 264:	69475c73 	stmdbvs	r7, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
 268:	6f725074 	svcvs	0x00725074
 26c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 270:	63535c73 	cmpvs	r3, #29440	; 0x7300
 274:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; dc <startup-0x1fffff24>
 278:	6a6f7250 	bvs	1bdcbc0 <startup-0x1e423440>
 27c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 280:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 284:	5c373130 	ldfpls	f3, [r7], #-192	; 0xffffff40
 288:	6262614c 	rsbvs	r6, r2, #76, 2
 28c:	5f455735 	svcpl	0x00455735
 290:	5f454449 	svcpl	0x00454449
 294:	52504447 	subspl	r4, r0, #1191182336	; 0x47000000
 298:	5254525f 	subspl	r5, r4, #-268435451	; 0xf0000005
 29c:	505c4150 	subspl	r4, ip, r0, asr r1
 2a0:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2b4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2b8:	624f7400 	subvs	r7, pc, #0, 8
 2bc:	656b006a 	strbvs	r0, [fp, #-106]!	; 0xffffff96
 2c0:	69486279 	stmdbvs	r8, {r0, r3, r4, r5, r6, r9, sp, lr}^
 2c4:	64006867 	strvs	r6, [r0], #-2151	; 0xfffff799
 2c8:	5f617461 	svcpl	0x00617461
 2cc:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
 2d0:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
 2d4:	00787765 	rsbseq	r7, r8, r5, ror #14
 2d8:	7977656e 	ldmdbvc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 2dc:	61726700 	cmnvs	r2, r0, lsl #14
 2e0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e4:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2e8:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2ec:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2f0:	00726165 	rsbseq	r6, r2, r5, ror #2
 2f4:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 2f8:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 2fc:	4c776f52 	ldclmi	15, cr6, [r7], #-328	; 0xfffffeb8
 300:	6400776f 	strvs	r7, [r0], #-1903	; 0xfffff891
 304:	00776172 	rsbseq	r6, r7, r2, ror r1
 308:	5f746573 	svcpl	0x00746573
 30c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 310:	6f630064 	svcvs	0x00630064
 314:	73696c6c 	cmnvc	r9, #108, 24	; 0x6c00
 318:	5f6e6f69 	svcpl	0x006e6f69
 31c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 320:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 324:	6c63006c 	stclvs	0, cr0, [r3], #-432	; 0xfffffe50
 328:	5f726165 	svcpl	0x00726165
 32c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 330:	62007463 	andvs	r7, r0, #1660944384	; 0x63000000
 334:	5f6c6c61 	svcpl	0x006c6c61
 338:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 1a4 <startup-0x1ffffe5c>
 33c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 340:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 344:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 348:	736e3035 	cmnvc	lr, #53	; 0x35
 34c:	73616d00 	cmnvc	r1, #0, 26
 350:	6f6d006b 	svcvs	0x006d006b
 354:	625f6576 	subsvs	r6, pc, #494927872	; 0x1d800000
 358:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 35c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 360:	325f7265 	subscc	r7, pc, #1342177286	; 0x50000006
 364:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 368:	0073746e 	rsbseq	r7, r3, lr, ror #8
 36c:	656c5f70 	strbvs	r5, [ip, #-3952]!	; 0xfffff090
 370:	67007466 	strvs	r7, [r0, -r6, ror #8]
 374:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 378:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 37c:	5f746961 	svcpl	0x00746961
 380:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 384:	6f630079 	svcvs	0x00630079
 388:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 38c:	424f5000 	submi	r5, pc, #0
 390:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 394:	61657200 	cmnvs	r5, r0, lsl #4
 398:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 210 <startup-0x1ffffdf0>
 39c:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 3a0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 3a4:	00707574 	rsbseq	r7, r0, r4, ror r5
 3a8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff96d <ball+0xdfffeb39>
 3ac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3b0:	61736f2f 	cmnvs	r3, pc, lsr #30
 3b4:	442f6e6e 	strtmi	r6, [pc], #-3694	; 3bc <startup-0x1ffffc44>
 3b8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 3bc:	73746e65 	cmnvc	r4, #1616	; 0x650
 3c0:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 3c4:	6a6f7250 	bvs	1bdcd0c <startup-0x1e4232f4>
 3c8:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 3cc:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 3d0:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 3d4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 3d8:	2f737463 	svccs	0x00737463
 3dc:	30544144 	subscc	r4, r4, r4, asr #2
 3e0:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 324 <startup-0x1ffffcdc>
 3e4:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 3e8:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 3ec:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
 3f0:	5f525044 	svcpl	0x00525044
 3f4:	50525452 	subspl	r5, r2, r2, asr r4
 3f8:	6f502f41 	svcvs	0x00502f41
 3fc:	502f676e 	eorpl	r6, pc, lr, ror #14
 400:	2e676e6f 	cdpcs	14, 6, cr6, cr7, cr15, {3}
 404:	63610063 	cmnvs	r1, #99	; 0x63
 408:	61766974 	cmnvs	r6, r4, ror r9
 40c:	6f526574 	svcvs	0x00526574
 410:	67694877 			; <UNDEFINED> instruction: 0x67694877
 414:	6f6d0068 	svcvs	0x006d0068
 418:	64006576 	strvs	r6, [r0], #-1398	; 0xfffffa8a
 41c:	5f776172 	svcpl	0x00776172
 420:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 424:	Address 0x00000424 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	00000042 	andeq	r0, r0, r2, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000009a 	mulcs	r0, sl, r0
  58:	00000046 	andeq	r0, r0, r6, asr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000f2 	strdcs	r0, [r0], -r2
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000138 	andcs	r0, r0, r8, lsr r1
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000174 	andcs	r0, r0, r4, ror r1
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001d6 	ldrdcs	r0, [r0], -r6
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000024c 	andcs	r0, r0, ip, asr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002dc 	ldrdcs	r0, [r0], -ip
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000035c 	andcs	r0, r0, ip, asr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000039c 	mulcs	r0, ip, r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003e2 	andcs	r0, r0, r2, ror #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	2000040c 	andcs	r0, r0, ip, lsl #8
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000462 	andcs	r0, r0, r2, ror #8
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004ca 	andcs	r0, r0, sl, asr #9
 1f0:	000001ca 	andeq	r0, r0, sl, asr #3
 1f4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 1f8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 1fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 200:	280e4101 	stmdacs	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	20000694 	mulcs	r0, r4, r6
 214:	00000066 	andeq	r0, r0, r6, rrx
 218:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 21c:	41018e02 	tstmi	r1, r2, lsl #28
 220:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 224:	00000007 	andeq	r0, r0, r7
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	200006fa 	strdcs	r0, [r0], -sl
 234:	00000066 	andeq	r0, r0, r6, rrx
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 244:	00000007 	andeq	r0, r0, r7
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	20000760 	andcs	r0, r0, r0, ror #14
 254:	00000056 	andeq	r0, r0, r6, asr r0
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 264:	00000007 	andeq	r0, r0, r7
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	200007b6 			; <UNDEFINED> instruction: 0x200007b6
 274:	00000062 	andeq	r0, r0, r2, rrx
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 284:	00000007 	andeq	r0, r0, r7
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	20000818 	andcs	r0, r0, r8, lsl r8
 294:	00000064 	andeq	r0, r0, r4, rrx
 298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
 2a8:	00000020 	andeq	r0, r0, r0, lsr #32
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	2000087c 	andcs	r0, r0, ip, ror r8
 2b4:	00000034 	andeq	r0, r0, r4, lsr r0
 2b8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2bc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2c0:	41018e02 	tstmi	r1, r2, lsl #28
 2c4:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2c8:	00000007 	andeq	r0, r0, r7
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 2d8:	00000054 	andeq	r0, r0, r4, asr r0
 2dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e0:	41018e02 	tstmi	r1, r2, lsl #28
 2e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e8:	00000007 	andeq	r0, r0, r7
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000904 	andcs	r0, r0, r4, lsl #18
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 300:	41018e02 	tstmi	r1, r2, lsl #28
 304:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 308:	00000007 	andeq	r0, r0, r7
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000924 	andcs	r0, r0, r4, lsr #18
 318:	000000d8 	ldrdeq	r0, [r0], -r8
 31c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 320:	41018e02 	tstmi	r1, r2, lsl #28
 324:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 328:	00000007 	andeq	r0, r0, r7
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200009fc 	strdcs	r0, [r0], -ip
 338:	0000006e 	andeq	r0, r0, lr, rrx
 33c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 340:	41018e02 	tstmi	r1, r2, lsl #28
 344:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 348:	00000007 	andeq	r0, r0, r7
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	20000a6a 	andcs	r0, r0, sl, ror #20
 358:	000000ba 	strheq	r0, [r0], -sl
 35c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 360:	41018e02 	tstmi	r1, r2, lsl #28
 364:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 368:	00000007 	andeq	r0, r0, r7
 36c:	0000000c 	andeq	r0, r0, ip
 370:	00000000 	andeq	r0, r0, r0
 374:	20000000 	andcs	r0, r0, r0
 378:	0000000c 	andeq	r0, r0, ip
 37c:	00000018 	andeq	r0, r0, r8, lsl r0
 380:	00000000 	andeq	r0, r0, r0
 384:	20000b24 	andcs	r0, r0, r4, lsr #22
 388:	00000040 	andeq	r0, r0, r0, asr #32
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0000070d 	andeq	r0, r0, sp, lsl #14
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	20000b64 	andcs	r0, r0, r4, ror #22
 3a4:	000000e4 	andeq	r0, r0, r4, ror #1
 3a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3b0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 3b4:	00070d41 	andeq	r0, r7, r1, asr #26
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3c0:	7c010001 	stcvc	0, cr0, [r1], {1}
 3c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3c8:	0000000c 	andeq	r0, r0, ip
 3cc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
 3d0:	20000c49 	andcs	r0, r0, r9, asr #24
 3d4:	0000010a 	andeq	r0, r0, sl, lsl #2
