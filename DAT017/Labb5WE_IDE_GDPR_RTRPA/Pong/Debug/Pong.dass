
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "GameLogic.h"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fdfc 	bl	20000c00 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	22fa      	movs	r2, #250	; 0xfa
20000064:	0091      	lsls	r1, r2, #2
20000066:	0018      	movs	r0, r3
20000068:	f000 fe40 	bl	20000cec <__udivsi3>
2000006c:	0003      	movs	r3, r0
2000006e:	607b      	str	r3, [r7, #4]
	us ++;
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	3301      	adds	r3, #1
20000074:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
20000076:	2300      	movs	r3, #0
20000078:	60fb      	str	r3, [r7, #12]
2000007a:	e004      	b.n	20000086 <delay_mikro+0x2e>
		delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	009a      	lsls	r2, r3, #2
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	429a      	cmp	r2, r3
2000008e:	d8f5      	bhi.n	2000007c <delay_mikro+0x24>
	}
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b004      	add	sp, #16
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms){
2000009a:	b580      	push	{r7, lr}
2000009c:	b084      	sub	sp, #16
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f000 fe1f 	bl	20000cec <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
		ms ++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x34>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc8 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0x24>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <delay_500ns>:

void delay_500ns(){
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	delay_250ns();
200000e4:	f7ff ff94 	bl	20000010 <delay_250ns>
	delay_250ns();
200000e8:	f7ff ff92 	bl	20000010 <delay_250ns>
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_ctrl_bit_set>:
void graphic_ctrl_bit_set(uint8_t x){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	0002      	movs	r2, r0
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000fe:	4b0d      	ldr	r3, [pc, #52]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	b2db      	uxtb	r3, r3
20000104:	b25a      	sxtb	r2, r3
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	2104      	movs	r1, #4
2000010e:	438b      	bics	r3, r1
20000110:	b25b      	sxtb	r3, r3
20000112:	4313      	orrs	r3, r2
20000114:	b25a      	sxtb	r2, r3
20000116:	4b07      	ldr	r3, [pc, #28]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000118:	b2d2      	uxtb	r2, r2
2000011a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
2000011c:	4b05      	ldr	r3, [pc, #20]	; (20000134 <graphic_ctrl_bit_set+0x42>)
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	b2db      	uxtb	r3, r3
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b2db      	uxtb	r3, r3
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000144:	4b0a      	ldr	r3, [pc, #40]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	1dfa      	adds	r2, r7, #7
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	2104      	movs	r1, #4
20000152:	430a      	orrs	r2, r1
20000154:	b2d2      	uxtb	r2, r2
20000156:	b252      	sxtb	r2, r2
20000158:	43d2      	mvns	r2, r2
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	4b03      	ldr	r3, [pc, #12]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000162:	b2d2      	uxtb	r2, r2
20000164:	701a      	strb	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b002      	add	sp, #8
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <select_controller>:

void select_controller(uint8_t controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000180:	230f      	movs	r3, #15
20000182:	18fb      	adds	r3, r7, r3
20000184:	2200      	movs	r2, #0
20000186:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b18      	cmp	r3, #24
2000018e:	d01a      	beq.n	200001c6 <select_controller+0x52>
20000190:	dc1d      	bgt.n	200001ce <select_controller+0x5a>
20000192:	2b10      	cmp	r3, #16
20000194:	d010      	beq.n	200001b8 <select_controller+0x44>
20000196:	dc1a      	bgt.n	200001ce <select_controller+0x5a>
20000198:	2b00      	cmp	r3, #0
2000019a:	d002      	beq.n	200001a2 <select_controller+0x2e>
2000019c:	2b08      	cmp	r3, #8
2000019e:	d004      	beq.n	200001aa <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001a0:	e015      	b.n	200001ce <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001a2:	2018      	movs	r0, #24
200001a4:	f7ff ffc8 	bl	20000138 <graphic_ctrl_bit_clear>
200001a8:	e012      	b.n	200001d0 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001aa:	2010      	movs	r0, #16
200001ac:	f7ff ffc4 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ff9e 	bl	200000f2 <graphic_ctrl_bit_set>
200001b6:	e00b      	b.n	200001d0 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001b8:	2008      	movs	r0, #8
200001ba:	f7ff ffbd 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff97 	bl	200000f2 <graphic_ctrl_bit_set>
200001c4:	e004      	b.n	200001d0 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ff93 	bl	200000f2 <graphic_ctrl_bit_set>
200001cc:	e000      	b.n	200001d0 <select_controller+0x5c>
		default: return;
200001ce:	46c0      	nop			; (mov r8, r8)
	}
}
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}

200001d6 <graphic_wait_ready>:

void graphic_wait_ready(void){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ffab 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001e2:	4b16      	ldr	r3, [pc, #88]	; (2000023c <graphic_wait_ready+0x66>)
200001e4:	4a16      	ldr	r2, [pc, #88]	; (20000240 <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ff82 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ee:	2001      	movs	r0, #1
200001f0:	f7ff ffa2 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_500ns();
200001f4:	f7ff ff74 	bl	200000e0 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff7a 	bl	200000f2 <graphic_ctrl_bit_set>
		delay_500ns();
200001fe:	f7ff ff6f 	bl	200000e0 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
20000202:	4b10      	ldr	r3, [pc, #64]	; (20000244 <graphic_wait_ready+0x6e>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2da      	uxtb	r2, r3
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	217f      	movs	r1, #127	; 0x7f
2000020c:	438a      	bics	r2, r1
2000020e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff91 	bl	20000138 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff63 	bl	200000e0 <delay_500ns>
		if(c == 0){
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	2b00      	cmp	r3, #0
20000220:	d000      	beq.n	20000224 <graphic_wait_ready+0x4e>
	while(1){
20000222:	e7e9      	b.n	200001f8 <graphic_wait_ready+0x22>
			break;
20000224:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000226:	2040      	movs	r0, #64	; 0x40
20000228:	f7ff ff63 	bl	200000f2 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000022c:	4b03      	ldr	r3, [pc, #12]	; (2000023c <graphic_wait_ready+0x66>)
2000022e:	4a06      	ldr	r2, [pc, #24]	; (20000248 <graphic_wait_ready+0x72>)
20000230:	601a      	str	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff6d 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff44 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff80 	bl	20000174 <select_controller>
	delay_500ns();
20000274:	f7ff ff34 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff3a 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff ff2f 	bl	200000e0 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff53 	bl	20000138 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff67 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff96 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff5e 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff8d 	bl	200001d6 <graphic_wait_ready>
	}
	return rv;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff3a 	bl	20000174 <select_controller>
	delay_500ns();
20000300:	f7ff feee 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff fef4 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff fee9 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff12 	bl	20000138 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff28 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff57 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff1e 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff4d 	bl	200001d6 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed5 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff13 	bl	20000174 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fee2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fefb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff feda 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fec2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fedb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fe97 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff feb7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initialize>:

void graphic_initialize(){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6e 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe1e 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe39 	bl	2000009a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe62 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe8c 	bl	20000174 <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen(){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
200004cc:	b085      	sub	sp, #20
200004ce:	af00      	add	r7, sp, #0
200004d0:	0004      	movs	r4, r0
200004d2:	0008      	movs	r0, r1
200004d4:	0011      	movs	r1, r2
200004d6:	1dfb      	adds	r3, r7, #7
200004d8:	1c22      	adds	r2, r4, #0
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	1c02      	adds	r2, r0, #0
200004e0:	701a      	strb	r2, [r3, #0]
200004e2:	1d7b      	adds	r3, r7, #5
200004e4:	1c0a      	adds	r2, r1, #0
200004e6:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b80      	cmp	r3, #128	; 0x80
200004ee:	d900      	bls.n	200004f2 <pixel+0x28>
200004f0:	e0c7      	b.n	20000682 <pixel+0x1b8>
200004f2:	1dbb      	adds	r3, r7, #6
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	2b40      	cmp	r3, #64	; 0x40
200004f8:	d900      	bls.n	200004fc <pixel+0x32>
200004fa:	e0c2      	b.n	20000682 <pixel+0x1b8>
200004fc:	1dfb      	adds	r3, r7, #7
200004fe:	781b      	ldrb	r3, [r3, #0]
20000500:	2b00      	cmp	r3, #0
20000502:	d100      	bne.n	20000506 <pixel+0x3c>
20000504:	e0bd      	b.n	20000682 <pixel+0x1b8>
20000506:	1dbb      	adds	r3, r7, #6
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	2b00      	cmp	r3, #0
2000050c:	d100      	bne.n	20000510 <pixel+0x46>
2000050e:	e0b8      	b.n	20000682 <pixel+0x1b8>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000510:	1dbb      	adds	r3, r7, #6
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	3b01      	subs	r3, #1
20000516:	2b00      	cmp	r3, #0
20000518:	da00      	bge.n	2000051c <pixel+0x52>
2000051a:	3307      	adds	r3, #7
2000051c:	10db      	asrs	r3, r3, #3
2000051e:	001a      	movs	r2, r3
20000520:	230c      	movs	r3, #12
20000522:	18fb      	adds	r3, r7, r3
20000524:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
20000526:	1dbb      	adds	r3, r7, #6
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	3b01      	subs	r3, #1
2000052c:	4a57      	ldr	r2, [pc, #348]	; (2000068c <pixel+0x1c2>)
2000052e:	4013      	ands	r3, r2
20000530:	d504      	bpl.n	2000053c <pixel+0x72>
20000532:	3b01      	subs	r3, #1
20000534:	2208      	movs	r2, #8
20000536:	4252      	negs	r2, r2
20000538:	4313      	orrs	r3, r2
2000053a:	3301      	adds	r3, #1
2000053c:	2b07      	cmp	r3, #7
2000053e:	d82c      	bhi.n	2000059a <pixel+0xd0>
20000540:	009a      	lsls	r2, r3, #2
20000542:	4b53      	ldr	r3, [pc, #332]	; (20000690 <pixel+0x1c6>)
20000544:	18d3      	adds	r3, r2, r3
20000546:	681b      	ldr	r3, [r3, #0]
20000548:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000054a:	230f      	movs	r3, #15
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	2201      	movs	r2, #1
20000550:	701a      	strb	r2, [r3, #0]
20000552:	e023      	b.n	2000059c <pixel+0xd2>
		case 1: mask = 2; break;
20000554:	230f      	movs	r3, #15
20000556:	18fb      	adds	r3, r7, r3
20000558:	2202      	movs	r2, #2
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	e01e      	b.n	2000059c <pixel+0xd2>
		case 2: mask = 4; break;
2000055e:	230f      	movs	r3, #15
20000560:	18fb      	adds	r3, r7, r3
20000562:	2204      	movs	r2, #4
20000564:	701a      	strb	r2, [r3, #0]
20000566:	e019      	b.n	2000059c <pixel+0xd2>
		case 3: mask = 8; break;
20000568:	230f      	movs	r3, #15
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	2208      	movs	r2, #8
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e014      	b.n	2000059c <pixel+0xd2>
		case 4: mask = 0x10; break;
20000572:	230f      	movs	r3, #15
20000574:	18fb      	adds	r3, r7, r3
20000576:	2210      	movs	r2, #16
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e00f      	b.n	2000059c <pixel+0xd2>
		case 5: mask = 0x20; break;
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	2220      	movs	r2, #32
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e00a      	b.n	2000059c <pixel+0xd2>
		case 6: mask = 0x40; break;
20000586:	230f      	movs	r3, #15
20000588:	18fb      	adds	r3, r7, r3
2000058a:	2240      	movs	r2, #64	; 0x40
2000058c:	701a      	strb	r2, [r3, #0]
2000058e:	e005      	b.n	2000059c <pixel+0xd2>
		case 7: mask = 0x80; break;
20000590:	230f      	movs	r3, #15
20000592:	18fb      	adds	r3, r7, r3
20000594:	2280      	movs	r2, #128	; 0x80
20000596:	701a      	strb	r2, [r3, #0]
20000598:	e000      	b.n	2000059c <pixel+0xd2>
		default: break;
2000059a:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
2000059c:	1d7b      	adds	r3, r7, #5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d105      	bne.n	200005b0 <pixel+0xe6>
		mask = ~mask;
200005a4:	220f      	movs	r2, #15
200005a6:	18bb      	adds	r3, r7, r2
200005a8:	18ba      	adds	r2, r7, r2
200005aa:	7812      	ldrb	r2, [r2, #0]
200005ac:	43d2      	mvns	r2, r2
200005ae:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	2b40      	cmp	r3, #64	; 0x40
200005b6:	d90a      	bls.n	200005ce <pixel+0x104>
		controller = B_CS2;
200005b8:	230e      	movs	r3, #14
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	2210      	movs	r2, #16
200005be:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005c0:	230d      	movs	r3, #13
200005c2:	18fb      	adds	r3, r7, r3
200005c4:	1dfa      	adds	r2, r7, #7
200005c6:	7812      	ldrb	r2, [r2, #0]
200005c8:	3a41      	subs	r2, #65	; 0x41
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e009      	b.n	200005e2 <pixel+0x118>
	}else{
		controller = B_CS1;
200005ce:	230e      	movs	r3, #14
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	2208      	movs	r2, #8
200005d4:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005d6:	230d      	movs	r3, #13
200005d8:	18fb      	adds	r3, r7, r3
200005da:	1dfa      	adds	r2, r7, #7
200005dc:	7812      	ldrb	r2, [r2, #0]
200005de:	3a01      	subs	r2, #1
200005e0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005e2:	260d      	movs	r6, #13
200005e4:	19bb      	adds	r3, r7, r6
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	2240      	movs	r2, #64	; 0x40
200005ea:	4313      	orrs	r3, r2
200005ec:	b2da      	uxtb	r2, r3
200005ee:	250e      	movs	r5, #14
200005f0:	197b      	adds	r3, r7, r5
200005f2:	781b      	ldrb	r3, [r3, #0]
200005f4:	0019      	movs	r1, r3
200005f6:	0010      	movs	r0, r2
200005f8:	f7ff feb0 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005fc:	230c      	movs	r3, #12
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	2248      	movs	r2, #72	; 0x48
20000604:	4252      	negs	r2, r2
20000606:	4313      	orrs	r3, r2
20000608:	b2da      	uxtb	r2, r3
2000060a:	197b      	adds	r3, r7, r5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0019      	movs	r1, r3
20000610:	0010      	movs	r0, r2
20000612:	f7ff fea3 	bl	2000035c <graphic_write_command>
	data_holder = graphic_read_data(controller);
20000616:	230b      	movs	r3, #11
20000618:	18fc      	adds	r4, r7, r3
2000061a:	197b      	adds	r3, r7, r5
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0018      	movs	r0, r3
20000620:	f7ff fedf 	bl	200003e2 <graphic_read_data>
20000624:	0003      	movs	r3, r0
20000626:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000628:	19bb      	adds	r3, r7, r6
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	2240      	movs	r2, #64	; 0x40
2000062e:	4313      	orrs	r3, r2
20000630:	b2da      	uxtb	r2, r3
20000632:	197b      	adds	r3, r7, r5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	0019      	movs	r1, r3
20000638:	0010      	movs	r0, r2
2000063a:	f7ff fe8f 	bl	2000035c <graphic_write_command>
	if(set==1){
2000063e:	1d7b      	adds	r3, r7, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	2b01      	cmp	r3, #1
20000644:	d109      	bne.n	2000065a <pixel+0x190>
		mask |= data_holder;
20000646:	210f      	movs	r1, #15
20000648:	187b      	adds	r3, r7, r1
2000064a:	1879      	adds	r1, r7, r1
2000064c:	220b      	movs	r2, #11
2000064e:	18ba      	adds	r2, r7, r2
20000650:	7809      	ldrb	r1, [r1, #0]
20000652:	7812      	ldrb	r2, [r2, #0]
20000654:	430a      	orrs	r2, r1
20000656:	701a      	strb	r2, [r3, #0]
20000658:	e008      	b.n	2000066c <pixel+0x1a2>
	}else{
		mask &= data_holder;
2000065a:	220f      	movs	r2, #15
2000065c:	18bb      	adds	r3, r7, r2
2000065e:	18ba      	adds	r2, r7, r2
20000660:	210b      	movs	r1, #11
20000662:	1879      	adds	r1, r7, r1
20000664:	7812      	ldrb	r2, [r2, #0]
20000666:	7809      	ldrb	r1, [r1, #0]
20000668:	400a      	ands	r2, r1
2000066a:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
2000066c:	230e      	movs	r3, #14
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781a      	ldrb	r2, [r3, #0]
20000672:	230f      	movs	r3, #15
20000674:	18fb      	adds	r3, r7, r3
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	0011      	movs	r1, r2
2000067a:	0018      	movs	r0, r3
2000067c:	f7ff fe8e 	bl	2000039c <graphic_write_data>
20000680:	e000      	b.n	20000684 <pixel+0x1ba>
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
20000682:	46c0      	nop			; (mov r8, r8)
}
20000684:	46bd      	mov	sp, r7
20000686:	b005      	add	sp, #20
20000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	80000007 	andhi	r0, r0, r7
20000690:	20000efc 	strdcs	r0, [r0], -ip

20000694 <draw_object>:

void draw_object(POBJECT o){
20000694:	b580      	push	{r7, lr}
20000696:	b084      	sub	sp, #16
20000698:	af00      	add	r7, sp, #0
2000069a:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
2000069c:	2300      	movs	r3, #0
2000069e:	60fb      	str	r3, [r7, #12]
200006a0:	e020      	b.n	200006e4 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	681a      	ldr	r2, [r3, #0]
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	3304      	adds	r3, #4
200006aa:	005b      	lsls	r3, r3, #1
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	3304      	adds	r3, #4
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	68db      	ldr	r3, [r3, #12]
200006b6:	b2db      	uxtb	r3, r3
200006b8:	18d3      	adds	r3, r2, r3
200006ba:	b2d8      	uxtb	r0, r3
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	681a      	ldr	r2, [r3, #0]
200006c0:	68fb      	ldr	r3, [r7, #12]
200006c2:	3304      	adds	r3, #4
200006c4:	005b      	lsls	r3, r3, #1
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	3305      	adds	r3, #5
200006ca:	781a      	ldrb	r2, [r3, #0]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691b      	ldr	r3, [r3, #16]
200006d0:	b2db      	uxtb	r3, r3
200006d2:	18d3      	adds	r3, r2, r3
200006d4:	b2db      	uxtb	r3, r3
200006d6:	2201      	movs	r2, #1
200006d8:	0019      	movs	r1, r3
200006da:	f7ff fef6 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3301      	adds	r3, #1
200006e2:	60fb      	str	r3, [r7, #12]
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	681b      	ldr	r3, [r3, #0]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	68fa      	ldr	r2, [r7, #12]
200006ec:	429a      	cmp	r2, r3
200006ee:	dbd8      	blt.n	200006a2 <draw_object+0xe>
	}
}
200006f0:	46c0      	nop			; (mov r8, r8)
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	b004      	add	sp, #16
200006f8:	bd80      	pop	{r7, pc}

200006fa <clear_object>:

void clear_object(POBJECT o){
200006fa:	b580      	push	{r7, lr}
200006fc:	b084      	sub	sp, #16
200006fe:	af00      	add	r7, sp, #0
20000700:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
20000702:	2300      	movs	r3, #0
20000704:	60fb      	str	r3, [r7, #12]
20000706:	e020      	b.n	2000074a <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	681a      	ldr	r2, [r3, #0]
2000070c:	68fb      	ldr	r3, [r7, #12]
2000070e:	3304      	adds	r3, #4
20000710:	005b      	lsls	r3, r3, #1
20000712:	18d3      	adds	r3, r2, r3
20000714:	3304      	adds	r3, #4
20000716:	781a      	ldrb	r2, [r3, #0]
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	68db      	ldr	r3, [r3, #12]
2000071c:	b2db      	uxtb	r3, r3
2000071e:	18d3      	adds	r3, r2, r3
20000720:	b2d8      	uxtb	r0, r3
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	681a      	ldr	r2, [r3, #0]
20000726:	68fb      	ldr	r3, [r7, #12]
20000728:	3304      	adds	r3, #4
2000072a:	005b      	lsls	r3, r3, #1
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	3305      	adds	r3, #5
20000730:	781a      	ldrb	r2, [r3, #0]
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691b      	ldr	r3, [r3, #16]
20000736:	b2db      	uxtb	r3, r3
20000738:	18d3      	adds	r3, r2, r3
2000073a:	b2db      	uxtb	r3, r3
2000073c:	2200      	movs	r2, #0
2000073e:	0019      	movs	r1, r3
20000740:	f7ff fec3 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	3301      	adds	r3, #1
20000748:	60fb      	str	r3, [r7, #12]
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	681b      	ldr	r3, [r3, #0]
2000074e:	681b      	ldr	r3, [r3, #0]
20000750:	68fa      	ldr	r2, [r7, #12]
20000752:	429a      	cmp	r2, r3
20000754:	dbd8      	blt.n	20000708 <clear_object+0xe>
	}
}
20000756:	46c0      	nop			; (mov r8, r8)
20000758:	46c0      	nop			; (mov r8, r8)
2000075a:	46bd      	mov	sp, r7
2000075c:	b004      	add	sp, #16
2000075e:	bd80      	pop	{r7, pc}

20000760 <activateRowHigh>:


void activateRowHigh(int row){
20000760:	b580      	push	{r7, lr}
20000762:	b082      	sub	sp, #8
20000764:	af00      	add	r7, sp, #0
20000766:	6078      	str	r0, [r7, #4]
	switch(row){
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	2b03      	cmp	r3, #3
2000076c:	d01b      	beq.n	200007a6 <activateRowHigh+0x46>
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	2b03      	cmp	r3, #3
20000772:	dc1c      	bgt.n	200007ae <activateRowHigh+0x4e>
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	2b02      	cmp	r3, #2
20000778:	d011      	beq.n	2000079e <activateRowHigh+0x3e>
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	2b02      	cmp	r3, #2
2000077e:	dc16      	bgt.n	200007ae <activateRowHigh+0x4e>
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	2b00      	cmp	r3, #0
20000784:	d003      	beq.n	2000078e <activateRowHigh+0x2e>
20000786:	687b      	ldr	r3, [r7, #4]
20000788:	2b01      	cmp	r3, #1
2000078a:	d004      	beq.n	20000796 <activateRowHigh+0x36>
2000078c:	e00f      	b.n	200007ae <activateRowHigh+0x4e>
		case 0: * GPIOD_ODR_HIGH = 0x10; break;
2000078e:	4b0c      	ldr	r3, [pc, #48]	; (200007c0 <activateRowHigh+0x60>)
20000790:	2210      	movs	r2, #16
20000792:	701a      	strb	r2, [r3, #0]
20000794:	e00f      	b.n	200007b6 <activateRowHigh+0x56>
		case 1: * GPIOD_ODR_HIGH = 0x20; break;
20000796:	4b0a      	ldr	r3, [pc, #40]	; (200007c0 <activateRowHigh+0x60>)
20000798:	2220      	movs	r2, #32
2000079a:	701a      	strb	r2, [r3, #0]
2000079c:	e00b      	b.n	200007b6 <activateRowHigh+0x56>
		case 2: * GPIOD_ODR_HIGH = 0x40; break;
2000079e:	4b08      	ldr	r3, [pc, #32]	; (200007c0 <activateRowHigh+0x60>)
200007a0:	2240      	movs	r2, #64	; 0x40
200007a2:	701a      	strb	r2, [r3, #0]
200007a4:	e007      	b.n	200007b6 <activateRowHigh+0x56>
		case 3: * GPIOD_ODR_HIGH = 0x80; break;
200007a6:	4b06      	ldr	r3, [pc, #24]	; (200007c0 <activateRowHigh+0x60>)
200007a8:	2280      	movs	r2, #128	; 0x80
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	e003      	b.n	200007b6 <activateRowHigh+0x56>
		default: * GPIOD_ODR_HIGH = 0x0;
200007ae:	4b04      	ldr	r3, [pc, #16]	; (200007c0 <activateRowHigh+0x60>)
200007b0:	2200      	movs	r2, #0
200007b2:	701a      	strb	r2, [r3, #0]
	}
}
200007b4:	46c0      	nop			; (mov r8, r8)
200007b6:	46c0      	nop			; (mov r8, r8)
200007b8:	46bd      	mov	sp, r7
200007ba:	b002      	add	sp, #8
200007bc:	bd80      	pop	{r7, pc}
200007be:	46c0      	nop			; (mov r8, r8)
200007c0:	40020c15 	andmi	r0, r2, r5, lsl ip

200007c4 <activateRowLow>:

void activateRowLow(int row){
200007c4:	b580      	push	{r7, lr}
200007c6:	b082      	sub	sp, #8
200007c8:	af00      	add	r7, sp, #0
200007ca:	6078      	str	r0, [r7, #4]
	switch(row){
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	2b03      	cmp	r3, #3
200007d0:	d01b      	beq.n	2000080a <activateRowLow+0x46>
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	2b03      	cmp	r3, #3
200007d6:	dc1c      	bgt.n	20000812 <activateRowLow+0x4e>
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	2b02      	cmp	r3, #2
200007dc:	d011      	beq.n	20000802 <activateRowLow+0x3e>
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	2b02      	cmp	r3, #2
200007e2:	dc16      	bgt.n	20000812 <activateRowLow+0x4e>
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	2b00      	cmp	r3, #0
200007e8:	d003      	beq.n	200007f2 <activateRowLow+0x2e>
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	2b01      	cmp	r3, #1
200007ee:	d004      	beq.n	200007fa <activateRowLow+0x36>
200007f0:	e00f      	b.n	20000812 <activateRowLow+0x4e>
		case 0: * GPIOD_ODR_LOW = 0x10; break;
200007f2:	4b0c      	ldr	r3, [pc, #48]	; (20000824 <activateRowLow+0x60>)
200007f4:	2210      	movs	r2, #16
200007f6:	701a      	strb	r2, [r3, #0]
200007f8:	e00f      	b.n	2000081a <activateRowLow+0x56>
		case 1: * GPIOD_ODR_LOW = 0x20; break;
200007fa:	4b0a      	ldr	r3, [pc, #40]	; (20000824 <activateRowLow+0x60>)
200007fc:	2220      	movs	r2, #32
200007fe:	701a      	strb	r2, [r3, #0]
20000800:	e00b      	b.n	2000081a <activateRowLow+0x56>
		case 2: * GPIOD_ODR_LOW = 0x40; break;
20000802:	4b08      	ldr	r3, [pc, #32]	; (20000824 <activateRowLow+0x60>)
20000804:	2240      	movs	r2, #64	; 0x40
20000806:	701a      	strb	r2, [r3, #0]
20000808:	e007      	b.n	2000081a <activateRowLow+0x56>
		case 3: * GPIOD_ODR_LOW = 0x80; break;
2000080a:	4b06      	ldr	r3, [pc, #24]	; (20000824 <activateRowLow+0x60>)
2000080c:	2280      	movs	r2, #128	; 0x80
2000080e:	701a      	strb	r2, [r3, #0]
20000810:	e003      	b.n	2000081a <activateRowLow+0x56>
		default: * GPIOD_ODR_LOW = 0x0;
20000812:	4b04      	ldr	r3, [pc, #16]	; (20000824 <activateRowLow+0x60>)
20000814:	2200      	movs	r2, #0
20000816:	701a      	strb	r2, [r3, #0]
	}
}
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46c0      	nop			; (mov r8, r8)
2000081c:	46bd      	mov	sp, r7
2000081e:	b002      	add	sp, #8
20000820:	bd80      	pop	{r7, pc}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	40020c14 	andmi	r0, r2, r4, lsl ip

20000828 <readColumnHigh>:

int readColumnHigh(){
20000828:	b580      	push	{r7, lr}
2000082a:	b082      	sub	sp, #8
2000082c:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_HIGH;
2000082e:	4a12      	ldr	r2, [pc, #72]	; (20000878 <readColumnHigh+0x50>)
20000830:	1dfb      	adds	r3, r7, #7
20000832:	7812      	ldrb	r2, [r2, #0]
20000834:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
20000836:	1dfb      	adds	r3, r7, #7
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2208      	movs	r2, #8
2000083c:	4013      	ands	r3, r2
2000083e:	d001      	beq.n	20000844 <readColumnHigh+0x1c>
20000840:	2303      	movs	r3, #3
20000842:	e015      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x4){return 2;}
20000844:	1dfb      	adds	r3, r7, #7
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	2204      	movs	r2, #4
2000084a:	4013      	ands	r3, r2
2000084c:	d001      	beq.n	20000852 <readColumnHigh+0x2a>
2000084e:	2302      	movs	r3, #2
20000850:	e00e      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x2){return 1;}
20000852:	1dfb      	adds	r3, r7, #7
20000854:	781b      	ldrb	r3, [r3, #0]
20000856:	2202      	movs	r2, #2
20000858:	4013      	ands	r3, r2
2000085a:	d001      	beq.n	20000860 <readColumnHigh+0x38>
2000085c:	2301      	movs	r3, #1
2000085e:	e007      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x1){return 0;}
20000860:	1dfb      	adds	r3, r7, #7
20000862:	781b      	ldrb	r3, [r3, #0]
20000864:	2201      	movs	r2, #1
20000866:	4013      	ands	r3, r2
20000868:	d001      	beq.n	2000086e <readColumnHigh+0x46>
2000086a:	2300      	movs	r3, #0
2000086c:	e000      	b.n	20000870 <readColumnHigh+0x48>
	return 4;
2000086e:	2304      	movs	r3, #4
}
20000870:	0018      	movs	r0, r3
20000872:	46bd      	mov	sp, r7
20000874:	b002      	add	sp, #8
20000876:	bd80      	pop	{r7, pc}
20000878:	40020c11 	andmi	r0, r2, r1, lsl ip

2000087c <readColumnLow>:

int readColumnLow(){
2000087c:	b580      	push	{r7, lr}
2000087e:	b082      	sub	sp, #8
20000880:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_LOW;
20000882:	4a12      	ldr	r2, [pc, #72]	; (200008cc <readColumnLow+0x50>)
20000884:	1dfb      	adds	r3, r7, #7
20000886:	7812      	ldrb	r2, [r2, #0]
20000888:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000088a:	1dfb      	adds	r3, r7, #7
2000088c:	781b      	ldrb	r3, [r3, #0]
2000088e:	2208      	movs	r2, #8
20000890:	4013      	ands	r3, r2
20000892:	d001      	beq.n	20000898 <readColumnLow+0x1c>
20000894:	2303      	movs	r3, #3
20000896:	e015      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x4){return 2;}
20000898:	1dfb      	adds	r3, r7, #7
2000089a:	781b      	ldrb	r3, [r3, #0]
2000089c:	2204      	movs	r2, #4
2000089e:	4013      	ands	r3, r2
200008a0:	d001      	beq.n	200008a6 <readColumnLow+0x2a>
200008a2:	2302      	movs	r3, #2
200008a4:	e00e      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x2){return 1;}
200008a6:	1dfb      	adds	r3, r7, #7
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2202      	movs	r2, #2
200008ac:	4013      	ands	r3, r2
200008ae:	d001      	beq.n	200008b4 <readColumnLow+0x38>
200008b0:	2301      	movs	r3, #1
200008b2:	e007      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x1){return 0;}
200008b4:	1dfb      	adds	r3, r7, #7
200008b6:	781b      	ldrb	r3, [r3, #0]
200008b8:	2201      	movs	r2, #1
200008ba:	4013      	ands	r3, r2
200008bc:	d001      	beq.n	200008c2 <readColumnLow+0x46>
200008be:	2300      	movs	r3, #0
200008c0:	e000      	b.n	200008c4 <readColumnLow+0x48>
	return 4;
200008c2:	2304      	movs	r3, #4
}
200008c4:	0018      	movs	r0, r3
200008c6:	46bd      	mov	sp, r7
200008c8:	b002      	add	sp, #8
200008ca:	bd80      	pop	{r7, pc}
200008cc:	40020c10 	andmi	r0, r2, r0, lsl ip

200008d0 <getKeyValue>:

int getKeyValue(int row, int column){
200008d0:	b5b0      	push	{r4, r5, r7, lr}
200008d2:	b086      	sub	sp, #24
200008d4:	af00      	add	r7, sp, #0
200008d6:	6078      	str	r0, [r7, #4]
200008d8:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
200008da:	2108      	movs	r1, #8
200008dc:	187b      	adds	r3, r7, r1
200008de:	4a08      	ldr	r2, [pc, #32]	; (20000900 <getKeyValue+0x30>)
200008e0:	ca31      	ldmia	r2!, {r0, r4, r5}
200008e2:	c331      	stmia	r3!, {r0, r4, r5}
200008e4:	6812      	ldr	r2, [r2, #0]
200008e6:	601a      	str	r2, [r3, #0]
	return keys[row][column];
200008e8:	187a      	adds	r2, r7, r1
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	009b      	lsls	r3, r3, #2
200008ee:	18d2      	adds	r2, r2, r3
200008f0:	683b      	ldr	r3, [r7, #0]
200008f2:	18d3      	adds	r3, r2, r3
200008f4:	781b      	ldrb	r3, [r3, #0]
}
200008f6:	0018      	movs	r0, r3
200008f8:	46bd      	mov	sp, r7
200008fa:	b006      	add	sp, #24
200008fc:	bdb0      	pop	{r4, r5, r7, pc}
200008fe:	46c0      	nop			; (mov r8, r8)
20000900:	20000f1c 	andcs	r0, r0, ip, lsl pc

20000904 <keybHigh>:


unsigned char keybHigh(){
20000904:	b580      	push	{r7, lr}
20000906:	b082      	sub	sp, #8
20000908:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
2000090a:	2300      	movs	r3, #0
2000090c:	607b      	str	r3, [r7, #4]
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	2b03      	cmp	r3, #3
20000912:	dc15      	bgt.n	20000940 <keybHigh+0x3c>
		activateRowHigh(row);
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	0018      	movs	r0, r3
20000918:	f7ff ff22 	bl	20000760 <activateRowHigh>
		column = readColumnHigh();
2000091c:	f7ff ff84 	bl	20000828 <readColumnHigh>
20000920:	0002      	movs	r2, r0
20000922:	1cfb      	adds	r3, r7, #3
20000924:	701a      	strb	r2, [r3, #0]
		
		if (column != -1){
			key = getKeyValue(row, column);
20000926:	1cfb      	adds	r3, r7, #3
20000928:	781a      	ldrb	r2, [r3, #0]
2000092a:	687b      	ldr	r3, [r7, #4]
2000092c:	0011      	movs	r1, r2
2000092e:	0018      	movs	r0, r3
20000930:	f7ff ffce 	bl	200008d0 <getKeyValue>
20000934:	0002      	movs	r2, r0
20000936:	1cbb      	adds	r3, r7, #2
20000938:	701a      	strb	r2, [r3, #0]
			return key;
2000093a:	1cbb      	adds	r3, r7, #2
2000093c:	781b      	ldrb	r3, [r3, #0]
2000093e:	e000      	b.n	20000942 <keybHigh+0x3e>
		}
	}
	return -1;
20000940:	23ff      	movs	r3, #255	; 0xff
}
20000942:	0018      	movs	r0, r3
20000944:	46bd      	mov	sp, r7
20000946:	b002      	add	sp, #8
20000948:	bd80      	pop	{r7, pc}

2000094a <keybLow>:

unsigned char keybLow(){
2000094a:	b580      	push	{r7, lr}
2000094c:	b082      	sub	sp, #8
2000094e:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000950:	2300      	movs	r3, #0
20000952:	607b      	str	r3, [r7, #4]
20000954:	e01c      	b.n	20000990 <keybLow+0x46>
		activateRowLow(row);
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	0018      	movs	r0, r3
2000095a:	f7ff ff33 	bl	200007c4 <activateRowLow>
		column = readColumnLow();
2000095e:	f7ff ff8d 	bl	2000087c <readColumnLow>
20000962:	0002      	movs	r2, r0
20000964:	1cfb      	adds	r3, r7, #3
20000966:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000968:	1cfb      	adds	r3, r7, #3
2000096a:	781b      	ldrb	r3, [r3, #0]
2000096c:	2b04      	cmp	r3, #4
2000096e:	d00c      	beq.n	2000098a <keybLow+0x40>
			key = getKeyValue(row, column);
20000970:	1cfb      	adds	r3, r7, #3
20000972:	781a      	ldrb	r2, [r3, #0]
20000974:	687b      	ldr	r3, [r7, #4]
20000976:	0011      	movs	r1, r2
20000978:	0018      	movs	r0, r3
2000097a:	f7ff ffa9 	bl	200008d0 <getKeyValue>
2000097e:	0002      	movs	r2, r0
20000980:	1cbb      	adds	r3, r7, #2
20000982:	701a      	strb	r2, [r3, #0]
			return key;
20000984:	1cbb      	adds	r3, r7, #2
20000986:	781b      	ldrb	r3, [r3, #0]
20000988:	e006      	b.n	20000998 <keybLow+0x4e>
	for(int row = 0; row < 4; row++){
2000098a:	687b      	ldr	r3, [r7, #4]
2000098c:	3301      	adds	r3, #1
2000098e:	607b      	str	r3, [r7, #4]
20000990:	687b      	ldr	r3, [r7, #4]
20000992:	2b03      	cmp	r3, #3
20000994:	dddf      	ble.n	20000956 <keybLow+0xc>
		}
	}
	return -1;
20000996:	23ff      	movs	r3, #255	; 0xff
20000998:	0018      	movs	r0, r3
2000099a:	46bd      	mov	sp, r7
2000099c:	b002      	add	sp, #8
2000099e:	bd80      	pop	{r7, pc}

200009a0 <set_object_speed>:
static uint8_t player_1_points;
static uint8_t player_2_points; 

void set_object_speed(POBJECT o, int speedx, int speedy){
200009a0:	b580      	push	{r7, lr}
200009a2:	b084      	sub	sp, #16
200009a4:	af00      	add	r7, sp, #0
200009a6:	60f8      	str	r0, [r7, #12]
200009a8:	60b9      	str	r1, [r7, #8]
200009aa:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
200009ac:	68fb      	ldr	r3, [r7, #12]
200009ae:	68ba      	ldr	r2, [r7, #8]
200009b0:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
200009b2:	68fb      	ldr	r3, [r7, #12]
200009b4:	687a      	ldr	r2, [r7, #4]
200009b6:	609a      	str	r2, [r3, #8]
}
200009b8:	46c0      	nop			; (mov r8, r8)
200009ba:	46bd      	mov	sp, r7
200009bc:	b004      	add	sp, #16
200009be:	bd80      	pop	{r7, pc}

200009c0 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
200009c0:	b580      	push	{r7, lr}
200009c2:	b084      	sub	sp, #16
200009c4:	af00      	add	r7, sp, #0
200009c6:	6078      	str	r0, [r7, #4]
200009c8:	6039      	str	r1, [r7, #0]
	clear_object(o);
200009ca:	687b      	ldr	r3, [r7, #4]
200009cc:	0018      	movs	r0, r3
200009ce:	f7ff fe94 	bl	200006fa <clear_object>
	int newx = o->posx + o->dx;
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	68da      	ldr	r2, [r3, #12]
200009d6:	687b      	ldr	r3, [r7, #4]
200009d8:	685b      	ldr	r3, [r3, #4]
200009da:	18d3      	adds	r3, r2, r3
200009dc:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	691a      	ldr	r2, [r3, #16]
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	689b      	ldr	r3, [r3, #8]
200009e6:	18d3      	adds	r3, r2, r3
200009e8:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
200009ea:	68fb      	ldr	r3, [r7, #12]
200009ec:	2b00      	cmp	r3, #0
200009ee:	dc0c      	bgt.n	20000a0a <move_ball+0x4a>
		o->posx = 64;
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	2240      	movs	r2, #64	; 0x40
200009f4:	60da      	str	r2, [r3, #12]
		o->posy = 32;
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	2220      	movs	r2, #32
200009fa:	611a      	str	r2, [r3, #16]
		player_2_points++;
200009fc:	4b24      	ldr	r3, [pc, #144]	; (20000a90 <move_ball+0xd0>)
200009fe:	781b      	ldrb	r3, [r3, #0]
20000a00:	3301      	adds	r3, #1
20000a02:	b2da      	uxtb	r2, r3
20000a04:	4b22      	ldr	r3, [pc, #136]	; (20000a90 <move_ball+0xd0>)
20000a06:	701a      	strb	r2, [r3, #0]
20000a08:	e03a      	b.n	20000a80 <move_ball+0xc0>
	}
	else if((newx + o->geo->sizex) > 128){
20000a0a:	687b      	ldr	r3, [r7, #4]
20000a0c:	681b      	ldr	r3, [r3, #0]
20000a0e:	685a      	ldr	r2, [r3, #4]
20000a10:	68fb      	ldr	r3, [r7, #12]
20000a12:	18d3      	adds	r3, r2, r3
20000a14:	2b80      	cmp	r3, #128	; 0x80
20000a16:	dd0c      	ble.n	20000a32 <move_ball+0x72>
		o->posx = 64;
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	2240      	movs	r2, #64	; 0x40
20000a1c:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	2220      	movs	r2, #32
20000a22:	611a      	str	r2, [r3, #16]
		player_1_points++;
20000a24:	4b1b      	ldr	r3, [pc, #108]	; (20000a94 <move_ball+0xd4>)
20000a26:	781b      	ldrb	r3, [r3, #0]
20000a28:	3301      	adds	r3, #1
20000a2a:	b2da      	uxtb	r2, r3
20000a2c:	4b19      	ldr	r3, [pc, #100]	; (20000a94 <move_ball+0xd4>)
20000a2e:	701a      	strb	r2, [r3, #0]
20000a30:	e026      	b.n	20000a80 <move_ball+0xc0>
	}
	else if(newy < 1){
20000a32:	68bb      	ldr	r3, [r7, #8]
20000a34:	2b00      	cmp	r3, #0
20000a36:	dc08      	bgt.n	20000a4a <move_ball+0x8a>
		o->dy = -o->dy;
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	689b      	ldr	r3, [r3, #8]
20000a3c:	425a      	negs	r2, r3
20000a3e:	687b      	ldr	r3, [r7, #4]
20000a40:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	2201      	movs	r2, #1
20000a46:	611a      	str	r2, [r3, #16]
20000a48:	e01a      	b.n	20000a80 <move_ball+0xc0>
	}
	else if(newy > 64 - o->geo->sizey){
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	681b      	ldr	r3, [r3, #0]
20000a4e:	689b      	ldr	r3, [r3, #8]
20000a50:	2240      	movs	r2, #64	; 0x40
20000a52:	1ad3      	subs	r3, r2, r3
20000a54:	68ba      	ldr	r2, [r7, #8]
20000a56:	429a      	cmp	r2, r3
20000a58:	dd0c      	ble.n	20000a74 <move_ball+0xb4>
		o->dy = -o->dy;
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	689b      	ldr	r3, [r3, #8]
20000a5e:	425a      	negs	r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	681b      	ldr	r3, [r3, #0]
20000a68:	689b      	ldr	r3, [r3, #8]
20000a6a:	2240      	movs	r2, #64	; 0x40
20000a6c:	1ad2      	subs	r2, r2, r3
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	611a      	str	r2, [r3, #16]
20000a72:	e005      	b.n	20000a80 <move_ball+0xc0>
	}else{
		o->posx = newx;
20000a74:	687b      	ldr	r3, [r7, #4]
20000a76:	68fa      	ldr	r2, [r7, #12]
20000a78:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000a7a:	687b      	ldr	r3, [r7, #4]
20000a7c:	68ba      	ldr	r2, [r7, #8]
20000a7e:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	0018      	movs	r0, r3
20000a84:	f7ff fe06 	bl	20000694 <draw_object>
}
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b004      	add	sp, #16
20000a8e:	bd80      	pop	{r7, pc}
20000a90:	20000e05 	andcs	r0, r0, r5, lsl #28
20000a94:	20000e04 	andcs	r0, r0, r4, lsl #28

20000a98 <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
20000a98:	b580      	push	{r7, lr}
20000a9a:	b084      	sub	sp, #16
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	60f8      	str	r0, [r7, #12]
20000aa0:	60b9      	str	r1, [r7, #8]
20000aa2:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000aa4:	687b      	ldr	r3, [r7, #4]
20000aa6:	68da      	ldr	r2, [r3, #12]
20000aa8:	687b      	ldr	r3, [r7, #4]
20000aaa:	681b      	ldr	r3, [r3, #0]
20000aac:	685b      	ldr	r3, [r3, #4]
20000aae:	18d2      	adds	r2, r2, r3
20000ab0:	68fb      	ldr	r3, [r7, #12]
20000ab2:	68db      	ldr	r3, [r3, #12]
20000ab4:	429a      	cmp	r2, r3
20000ab6:	db21      	blt.n	20000afc <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	68da      	ldr	r2, [r3, #12]
20000abc:	68fb      	ldr	r3, [r7, #12]
20000abe:	68d9      	ldr	r1, [r3, #12]
20000ac0:	68fb      	ldr	r3, [r7, #12]
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	685b      	ldr	r3, [r3, #4]
20000ac6:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000ac8:	429a      	cmp	r2, r3
20000aca:	da17      	bge.n	20000afc <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000acc:	687b      	ldr	r3, [r7, #4]
20000ace:	691a      	ldr	r2, [r3, #16]
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	681b      	ldr	r3, [r3, #0]
20000ad4:	689b      	ldr	r3, [r3, #8]
20000ad6:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000ad8:	68ba      	ldr	r2, [r7, #8]
20000ada:	429a      	cmp	r2, r3
20000adc:	dc0e      	bgt.n	20000afc <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000ade:	687b      	ldr	r3, [r7, #4]
20000ae0:	691a      	ldr	r2, [r3, #16]
20000ae2:	68fb      	ldr	r3, [r7, #12]
20000ae4:	681b      	ldr	r3, [r3, #0]
20000ae6:	6899      	ldr	r1, [r3, #8]
20000ae8:	68bb      	ldr	r3, [r7, #8]
20000aea:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000aec:	429a      	cmp	r2, r3
20000aee:	da05      	bge.n	20000afc <collision_with_ball+0x64>
			clear_object(ball);
20000af0:	687b      	ldr	r3, [r7, #4]
20000af2:	0018      	movs	r0, r3
20000af4:	f7ff fe01 	bl	200006fa <clear_object>
			   return 1;
20000af8:	2301      	movs	r3, #1
20000afa:	e000      	b.n	20000afe <collision_with_ball+0x66>
		   }
	return 0;
20000afc:	2300      	movs	r3, #0
}
20000afe:	0018      	movs	r0, r3
20000b00:	46bd      	mov	sp, r7
20000b02:	b004      	add	sp, #16
20000b04:	bd80      	pop	{r7, pc}

20000b06 <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000b06:	b580      	push	{r7, lr}
20000b08:	b084      	sub	sp, #16
20000b0a:	af00      	add	r7, sp, #0
20000b0c:	6078      	str	r0, [r7, #4]
20000b0e:	6039      	str	r1, [r7, #0]
	clear_object(o);
20000b10:	687b      	ldr	r3, [r7, #4]
20000b12:	0018      	movs	r0, r3
20000b14:	f7ff fdf1 	bl	200006fa <clear_object>
	
	int newy = o->posy + o->dy;
20000b18:	687b      	ldr	r3, [r7, #4]
20000b1a:	691a      	ldr	r2, [r3, #16]
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	689b      	ldr	r3, [r3, #8]
20000b20:	18d3      	adds	r3, r2, r3
20000b22:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000b24:	683a      	ldr	r2, [r7, #0]
20000b26:	68f9      	ldr	r1, [r7, #12]
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	0018      	movs	r0, r3
20000b2c:	f7ff ffb4 	bl	20000a98 <collision_with_ball>
20000b30:	1e03      	subs	r3, r0, #0
20000b32:	d019      	beq.n	20000b68 <move_paddle+0x62>
		if(o->posx < 64){
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	68db      	ldr	r3, [r3, #12]
20000b38:	2b3f      	cmp	r3, #63	; 0x3f
20000b3a:	dc08      	bgt.n	20000b4e <move_paddle+0x48>
			ball->dx = -(ball->dx);
20000b3c:	683b      	ldr	r3, [r7, #0]
20000b3e:	685b      	ldr	r3, [r3, #4]
20000b40:	425a      	negs	r2, r3
20000b42:	683b      	ldr	r3, [r7, #0]
20000b44:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000b46:	683b      	ldr	r3, [r7, #0]
20000b48:	2234      	movs	r2, #52	; 0x34
20000b4a:	60da      	str	r2, [r3, #12]
20000b4c:	e007      	b.n	20000b5e <move_paddle+0x58>
		}else{
			ball->dx = (ball->dx)*(-1);
20000b4e:	683b      	ldr	r3, [r7, #0]
20000b50:	685b      	ldr	r3, [r3, #4]
20000b52:	425a      	negs	r2, r3
20000b54:	683b      	ldr	r3, [r7, #0]
20000b56:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000b58:	683b      	ldr	r3, [r7, #0]
20000b5a:	224a      	movs	r2, #74	; 0x4a
20000b5c:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000b5e:	683b      	ldr	r3, [r7, #0]
20000b60:	0018      	movs	r0, r3
20000b62:	f7ff fd97 	bl	20000694 <draw_object>
20000b66:	e023      	b.n	20000bb0 <move_paddle+0xaa>
	}

	else if(newy < 1){
20000b68:	68fb      	ldr	r3, [r7, #12]
20000b6a:	2b00      	cmp	r3, #0
20000b6c:	dc08      	bgt.n	20000b80 <move_paddle+0x7a>
		o->dy = -o->dy;
20000b6e:	687b      	ldr	r3, [r7, #4]
20000b70:	689b      	ldr	r3, [r3, #8]
20000b72:	425a      	negs	r2, r3
20000b74:	687b      	ldr	r3, [r7, #4]
20000b76:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000b78:	687b      	ldr	r3, [r7, #4]
20000b7a:	2201      	movs	r2, #1
20000b7c:	611a      	str	r2, [r3, #16]
20000b7e:	e017      	b.n	20000bb0 <move_paddle+0xaa>
	}
	else if(newy > 64 - o->geo->sizey){
20000b80:	687b      	ldr	r3, [r7, #4]
20000b82:	681b      	ldr	r3, [r3, #0]
20000b84:	689b      	ldr	r3, [r3, #8]
20000b86:	2240      	movs	r2, #64	; 0x40
20000b88:	1ad3      	subs	r3, r2, r3
20000b8a:	68fa      	ldr	r2, [r7, #12]
20000b8c:	429a      	cmp	r2, r3
20000b8e:	dd0c      	ble.n	20000baa <move_paddle+0xa4>
		o->dy = -o->dy;
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	689b      	ldr	r3, [r3, #8]
20000b94:	425a      	negs	r2, r3
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	681b      	ldr	r3, [r3, #0]
20000b9e:	689b      	ldr	r3, [r3, #8]
20000ba0:	2240      	movs	r2, #64	; 0x40
20000ba2:	1ad2      	subs	r2, r2, r3
20000ba4:	687b      	ldr	r3, [r7, #4]
20000ba6:	611a      	str	r2, [r3, #16]
20000ba8:	e002      	b.n	20000bb0 <move_paddle+0xaa>
	}else{
		o->posy = newy;
20000baa:	687b      	ldr	r3, [r7, #4]
20000bac:	68fa      	ldr	r2, [r7, #12]
20000bae:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000bb0:	687b      	ldr	r3, [r7, #4]
20000bb2:	0018      	movs	r0, r3
20000bb4:	f7ff fd6e 	bl	20000694 <draw_object>
}
20000bb8:	46c0      	nop			; (mov r8, r8)
20000bba:	46bd      	mov	sp, r7
20000bbc:	b004      	add	sp, #16
20000bbe:	bd80      	pop	{r7, pc}

20000bc0 <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000bc0:	b580      	push	{r7, lr}
20000bc2:	af00      	add	r7, sp, #0
	* ((unsigned long *) 0x40023830) = 0x18;
	__asm__ volatile(" LDR R0, =0x08000209\n");
	__asm__ volatile(" BLX R0 \n");
#endif
	
	* portModer = 0x55555555;
20000bc4:	4b07      	ldr	r3, [pc, #28]	; (20000be4 <init_app+0x24>)
20000bc6:	4a08      	ldr	r2, [pc, #32]	; (20000be8 <init_app+0x28>)
20000bc8:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000bca:	4b08      	ldr	r3, [pc, #32]	; (20000bec <init_app+0x2c>)
20000bcc:	4a08      	ldr	r2, [pc, #32]	; (20000bf0 <init_app+0x30>)
20000bce:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000bd0:	4b08      	ldr	r3, [pc, #32]	; (20000bf4 <init_app+0x34>)
20000bd2:	4a09      	ldr	r2, [pc, #36]	; (20000bf8 <init_app+0x38>)
20000bd4:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000bd6:	4b09      	ldr	r3, [pc, #36]	; (20000bfc <init_app+0x3c>)
20000bd8:	2200      	movs	r2, #0
20000bda:	801a      	strh	r2, [r3, #0]
}
20000bdc:	46c0      	nop			; (mov r8, r8)
20000bde:	46bd      	mov	sp, r7
20000be0:	bd80      	pop	{r7, pc}
20000be2:	46c0      	nop			; (mov r8, r8)
20000be4:	40021000 	andmi	r1, r2, r0
20000be8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000bec:	40020c00 	andmi	r0, r2, r0, lsl #24
20000bf0:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20000bf4:	40020c30 	andmi	r0, r2, r0, lsr ip
20000bf8:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20000bfc:	40020c08 	andmi	r0, r2, r8, lsl #24

20000c00 <main>:

#ifndef TEST
void main(void){
20000c00:	b590      	push	{r4, r7, lr}
20000c02:	b087      	sub	sp, #28
20000c04:	af00      	add	r7, sp, #0
	POBJECT b = &ball;
20000c06:	4b36      	ldr	r3, [pc, #216]	; (20000ce0 <main+0xe0>)
20000c08:	617b      	str	r3, [r7, #20]
	POBJECT b2 = &ball;
20000c0a:	4b35      	ldr	r3, [pc, #212]	; (20000ce0 <main+0xe0>)
20000c0c:	613b      	str	r3, [r7, #16]
	POBJECT p_left = &paddle_left;
20000c0e:	4b35      	ldr	r3, [pc, #212]	; (20000ce4 <main+0xe4>)
20000c10:	60fb      	str	r3, [r7, #12]
	POBJECT p_right = &paddle_right;
20000c12:	4b35      	ldr	r3, [pc, #212]	; (20000ce8 <main+0xe8>)
20000c14:	60bb      	str	r3, [r7, #8]
	init_app();
20000c16:	f7ff ffd3 	bl	20000bc0 <init_app>
	graphic_initialize();
20000c1a:	f7ff fbf7 	bl	2000040c <graphic_initialize>
	b->dx = 1;
20000c1e:	697b      	ldr	r3, [r7, #20]
20000c20:	2201      	movs	r2, #1
20000c22:	605a      	str	r2, [r3, #4]
	b->dy = 1;
20000c24:	697b      	ldr	r3, [r7, #20]
20000c26:	2201      	movs	r2, #1
20000c28:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	while(1){
		b->move(b, 0);
20000c2a:	697b      	ldr	r3, [r7, #20]
20000c2c:	69db      	ldr	r3, [r3, #28]
20000c2e:	697a      	ldr	r2, [r7, #20]
20000c30:	2100      	movs	r1, #0
20000c32:	0010      	movs	r0, r2
20000c34:	4798      	blx	r3
		p_left->move(p_left, b);
20000c36:	68fb      	ldr	r3, [r7, #12]
20000c38:	69db      	ldr	r3, [r3, #28]
20000c3a:	6979      	ldr	r1, [r7, #20]
20000c3c:	68fa      	ldr	r2, [r7, #12]
20000c3e:	0010      	movs	r0, r2
20000c40:	4798      	blx	r3
		p_right->move(p_right, b);
20000c42:	68bb      	ldr	r3, [r7, #8]
20000c44:	69db      	ldr	r3, [r3, #28]
20000c46:	6979      	ldr	r1, [r7, #20]
20000c48:	68ba      	ldr	r2, [r7, #8]
20000c4a:	0010      	movs	r0, r2
20000c4c:	4798      	blx	r3
		delay_milli(40);
20000c4e:	2028      	movs	r0, #40	; 0x28
20000c50:	f7ff fa23 	bl	2000009a <delay_milli>
		char p_l_key = keybHigh();
20000c54:	1dfc      	adds	r4, r7, #7
20000c56:	f7ff fe55 	bl	20000904 <keybHigh>
20000c5a:	0003      	movs	r3, r0
20000c5c:	7023      	strb	r3, [r4, #0]
		char p_r_key = keybLow();
20000c5e:	1dbc      	adds	r4, r7, #6
20000c60:	f7ff fe73 	bl	2000094a <keybLow>
20000c64:	0003      	movs	r3, r0
20000c66:	7023      	strb	r3, [r4, #0]
    	switch(p_l_key){
20000c68:	1dfb      	adds	r3, r7, #7
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2b02      	cmp	r3, #2
20000c6e:	d002      	beq.n	20000c76 <main+0x76>
20000c70:	2b05      	cmp	r3, #5
20000c72:	d008      	beq.n	20000c86 <main+0x86>
20000c74:	e00e      	b.n	20000c94 <main+0x94>
			case 2: p_left->set_speed(p_left,0,-10);break;
20000c76:	68fb      	ldr	r3, [r7, #12]
20000c78:	6a1b      	ldr	r3, [r3, #32]
20000c7a:	220a      	movs	r2, #10
20000c7c:	4252      	negs	r2, r2
20000c7e:	68f8      	ldr	r0, [r7, #12]
20000c80:	2100      	movs	r1, #0
20000c82:	4798      	blx	r3
20000c84:	e00d      	b.n	20000ca2 <main+0xa2>
			case 5: p_left->set_speed(p_left,0,10);break;
20000c86:	68fb      	ldr	r3, [r7, #12]
20000c88:	6a1b      	ldr	r3, [r3, #32]
20000c8a:	68f8      	ldr	r0, [r7, #12]
20000c8c:	220a      	movs	r2, #10
20000c8e:	2100      	movs	r1, #0
20000c90:	4798      	blx	r3
20000c92:	e006      	b.n	20000ca2 <main+0xa2>
			default: p_left->set_speed(p_left,0,0);break;
20000c94:	68fb      	ldr	r3, [r7, #12]
20000c96:	6a1b      	ldr	r3, [r3, #32]
20000c98:	68f8      	ldr	r0, [r7, #12]
20000c9a:	2200      	movs	r2, #0
20000c9c:	2100      	movs	r1, #0
20000c9e:	4798      	blx	r3
20000ca0:	46c0      	nop			; (mov r8, r8)
		}
		switch(p_r_key){
20000ca2:	1dbb      	adds	r3, r7, #6
20000ca4:	781b      	ldrb	r3, [r3, #0]
20000ca6:	2b02      	cmp	r3, #2
20000ca8:	d002      	beq.n	20000cb0 <main+0xb0>
20000caa:	2b05      	cmp	r3, #5
20000cac:	d008      	beq.n	20000cc0 <main+0xc0>
20000cae:	e00e      	b.n	20000cce <main+0xce>
			case 2: p_right->set_speed(p_right,0,-10);break;
20000cb0:	68bb      	ldr	r3, [r7, #8]
20000cb2:	6a1b      	ldr	r3, [r3, #32]
20000cb4:	220a      	movs	r2, #10
20000cb6:	4252      	negs	r2, r2
20000cb8:	68b8      	ldr	r0, [r7, #8]
20000cba:	2100      	movs	r1, #0
20000cbc:	4798      	blx	r3
20000cbe:	e00d      	b.n	20000cdc <main+0xdc>
			case 5: p_right->set_speed(p_right,0,10);break;
20000cc0:	68bb      	ldr	r3, [r7, #8]
20000cc2:	6a1b      	ldr	r3, [r3, #32]
20000cc4:	68b8      	ldr	r0, [r7, #8]
20000cc6:	220a      	movs	r2, #10
20000cc8:	2100      	movs	r1, #0
20000cca:	4798      	blx	r3
20000ccc:	e006      	b.n	20000cdc <main+0xdc>
			default: p_right->set_speed(p_right,0,0);break;
20000cce:	68bb      	ldr	r3, [r7, #8]
20000cd0:	6a1b      	ldr	r3, [r3, #32]
20000cd2:	68b8      	ldr	r0, [r7, #8]
20000cd4:	2200      	movs	r2, #0
20000cd6:	2100      	movs	r1, #0
20000cd8:	4798      	blx	r3
20000cda:	46c0      	nop			; (mov r8, r8)
	while(1){
20000cdc:	e7a5      	b.n	20000c2a <main+0x2a>
20000cde:	46c0      	nop			; (mov r8, r8)
20000ce0:	20000ed8 	ldrdcs	r0, [r0], -r8
20000ce4:	20000e4c 	andcs	r0, r0, ip, asr #28
20000ce8:	20000e70 	andcs	r0, r0, r0, ror lr

20000cec <__udivsi3>:
20000cec:	2200      	movs	r2, #0
20000cee:	0843      	lsrs	r3, r0, #1
20000cf0:	428b      	cmp	r3, r1
20000cf2:	d374      	bcc.n	20000dde <__udivsi3+0xf2>
20000cf4:	0903      	lsrs	r3, r0, #4
20000cf6:	428b      	cmp	r3, r1
20000cf8:	d35f      	bcc.n	20000dba <__udivsi3+0xce>
20000cfa:	0a03      	lsrs	r3, r0, #8
20000cfc:	428b      	cmp	r3, r1
20000cfe:	d344      	bcc.n	20000d8a <__udivsi3+0x9e>
20000d00:	0b03      	lsrs	r3, r0, #12
20000d02:	428b      	cmp	r3, r1
20000d04:	d328      	bcc.n	20000d58 <__udivsi3+0x6c>
20000d06:	0c03      	lsrs	r3, r0, #16
20000d08:	428b      	cmp	r3, r1
20000d0a:	d30d      	bcc.n	20000d28 <__udivsi3+0x3c>
20000d0c:	22ff      	movs	r2, #255	; 0xff
20000d0e:	0209      	lsls	r1, r1, #8
20000d10:	ba12      	rev	r2, r2
20000d12:	0c03      	lsrs	r3, r0, #16
20000d14:	428b      	cmp	r3, r1
20000d16:	d302      	bcc.n	20000d1e <__udivsi3+0x32>
20000d18:	1212      	asrs	r2, r2, #8
20000d1a:	0209      	lsls	r1, r1, #8
20000d1c:	d065      	beq.n	20000dea <__udivsi3+0xfe>
20000d1e:	0b03      	lsrs	r3, r0, #12
20000d20:	428b      	cmp	r3, r1
20000d22:	d319      	bcc.n	20000d58 <__udivsi3+0x6c>
20000d24:	e000      	b.n	20000d28 <__udivsi3+0x3c>
20000d26:	0a09      	lsrs	r1, r1, #8
20000d28:	0bc3      	lsrs	r3, r0, #15
20000d2a:	428b      	cmp	r3, r1
20000d2c:	d301      	bcc.n	20000d32 <__udivsi3+0x46>
20000d2e:	03cb      	lsls	r3, r1, #15
20000d30:	1ac0      	subs	r0, r0, r3
20000d32:	4152      	adcs	r2, r2
20000d34:	0b83      	lsrs	r3, r0, #14
20000d36:	428b      	cmp	r3, r1
20000d38:	d301      	bcc.n	20000d3e <__udivsi3+0x52>
20000d3a:	038b      	lsls	r3, r1, #14
20000d3c:	1ac0      	subs	r0, r0, r3
20000d3e:	4152      	adcs	r2, r2
20000d40:	0b43      	lsrs	r3, r0, #13
20000d42:	428b      	cmp	r3, r1
20000d44:	d301      	bcc.n	20000d4a <__udivsi3+0x5e>
20000d46:	034b      	lsls	r3, r1, #13
20000d48:	1ac0      	subs	r0, r0, r3
20000d4a:	4152      	adcs	r2, r2
20000d4c:	0b03      	lsrs	r3, r0, #12
20000d4e:	428b      	cmp	r3, r1
20000d50:	d301      	bcc.n	20000d56 <__udivsi3+0x6a>
20000d52:	030b      	lsls	r3, r1, #12
20000d54:	1ac0      	subs	r0, r0, r3
20000d56:	4152      	adcs	r2, r2
20000d58:	0ac3      	lsrs	r3, r0, #11
20000d5a:	428b      	cmp	r3, r1
20000d5c:	d301      	bcc.n	20000d62 <__udivsi3+0x76>
20000d5e:	02cb      	lsls	r3, r1, #11
20000d60:	1ac0      	subs	r0, r0, r3
20000d62:	4152      	adcs	r2, r2
20000d64:	0a83      	lsrs	r3, r0, #10
20000d66:	428b      	cmp	r3, r1
20000d68:	d301      	bcc.n	20000d6e <__udivsi3+0x82>
20000d6a:	028b      	lsls	r3, r1, #10
20000d6c:	1ac0      	subs	r0, r0, r3
20000d6e:	4152      	adcs	r2, r2
20000d70:	0a43      	lsrs	r3, r0, #9
20000d72:	428b      	cmp	r3, r1
20000d74:	d301      	bcc.n	20000d7a <__udivsi3+0x8e>
20000d76:	024b      	lsls	r3, r1, #9
20000d78:	1ac0      	subs	r0, r0, r3
20000d7a:	4152      	adcs	r2, r2
20000d7c:	0a03      	lsrs	r3, r0, #8
20000d7e:	428b      	cmp	r3, r1
20000d80:	d301      	bcc.n	20000d86 <__udivsi3+0x9a>
20000d82:	020b      	lsls	r3, r1, #8
20000d84:	1ac0      	subs	r0, r0, r3
20000d86:	4152      	adcs	r2, r2
20000d88:	d2cd      	bcs.n	20000d26 <__udivsi3+0x3a>
20000d8a:	09c3      	lsrs	r3, r0, #7
20000d8c:	428b      	cmp	r3, r1
20000d8e:	d301      	bcc.n	20000d94 <__udivsi3+0xa8>
20000d90:	01cb      	lsls	r3, r1, #7
20000d92:	1ac0      	subs	r0, r0, r3
20000d94:	4152      	adcs	r2, r2
20000d96:	0983      	lsrs	r3, r0, #6
20000d98:	428b      	cmp	r3, r1
20000d9a:	d301      	bcc.n	20000da0 <__udivsi3+0xb4>
20000d9c:	018b      	lsls	r3, r1, #6
20000d9e:	1ac0      	subs	r0, r0, r3
20000da0:	4152      	adcs	r2, r2
20000da2:	0943      	lsrs	r3, r0, #5
20000da4:	428b      	cmp	r3, r1
20000da6:	d301      	bcc.n	20000dac <__udivsi3+0xc0>
20000da8:	014b      	lsls	r3, r1, #5
20000daa:	1ac0      	subs	r0, r0, r3
20000dac:	4152      	adcs	r2, r2
20000dae:	0903      	lsrs	r3, r0, #4
20000db0:	428b      	cmp	r3, r1
20000db2:	d301      	bcc.n	20000db8 <__udivsi3+0xcc>
20000db4:	010b      	lsls	r3, r1, #4
20000db6:	1ac0      	subs	r0, r0, r3
20000db8:	4152      	adcs	r2, r2
20000dba:	08c3      	lsrs	r3, r0, #3
20000dbc:	428b      	cmp	r3, r1
20000dbe:	d301      	bcc.n	20000dc4 <__udivsi3+0xd8>
20000dc0:	00cb      	lsls	r3, r1, #3
20000dc2:	1ac0      	subs	r0, r0, r3
20000dc4:	4152      	adcs	r2, r2
20000dc6:	0883      	lsrs	r3, r0, #2
20000dc8:	428b      	cmp	r3, r1
20000dca:	d301      	bcc.n	20000dd0 <__udivsi3+0xe4>
20000dcc:	008b      	lsls	r3, r1, #2
20000dce:	1ac0      	subs	r0, r0, r3
20000dd0:	4152      	adcs	r2, r2
20000dd2:	0843      	lsrs	r3, r0, #1
20000dd4:	428b      	cmp	r3, r1
20000dd6:	d301      	bcc.n	20000ddc <__udivsi3+0xf0>
20000dd8:	004b      	lsls	r3, r1, #1
20000dda:	1ac0      	subs	r0, r0, r3
20000ddc:	4152      	adcs	r2, r2
20000dde:	1a41      	subs	r1, r0, r1
20000de0:	d200      	bcs.n	20000de4 <__udivsi3+0xf8>
20000de2:	4601      	mov	r1, r0
20000de4:	4152      	adcs	r2, r2
20000de6:	4610      	mov	r0, r2
20000de8:	4770      	bx	lr
20000dea:	e7ff      	b.n	20000dec <__udivsi3+0x100>
20000dec:	b501      	push	{r0, lr}
20000dee:	2000      	movs	r0, #0
20000df0:	f000 f806 	bl	20000e00 <__aeabi_idiv0>
20000df4:	bd02      	pop	{r1, pc}
20000df6:	46c0      	nop			; (mov r8, r8)

20000df8 <__aeabi_uidivmod>:
20000df8:	2900      	cmp	r1, #0
20000dfa:	d0f7      	beq.n	20000dec <__udivsi3+0x100>
20000dfc:	e776      	b.n	20000cec <__udivsi3>
20000dfe:	4770      	bx	lr

20000e00 <__aeabi_idiv0>:
20000e00:	4770      	bx	lr
20000e02:	46c0      	nop			; (mov r8, r8)

20000e04 <player_1_points>:
	...

20000e05 <player_2_points>:
20000e05:	 	stcne	0, cr0, [r0], {-0}

20000e08 <paddle_geometry>:
20000e08:	0000001c 	andeq	r0, r0, ip, lsl r0
20000e0c:	00000002 	andeq	r0, r0, r2
20000e10:	0000000e 	andeq	r0, r0, lr
20000e14:	01000000 	mrseq	r0, (UNDEF: 0)
20000e18:	03000200 	movweq	r0, #512	; 0x200
20000e1c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20000e20:	07000600 	streq	r0, [r0, -r0, lsl #12]
20000e24:	09000800 	stmdbeq	r0, {fp}
20000e28:	0b000a00 	bleq	20003630 <ball+0x2758>
20000e2c:	0d000c00 	stceq	12, cr0, [r0, #-0]
20000e30:	01010001 	tsteq	r1, r1
20000e34:	03010201 	movweq	r0, #4609	; 0x1201
20000e38:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
20000e3c:	07010601 	streq	r0, [r1, -r1, lsl #12]
20000e40:	09010801 	stmdbeq	r1, {r0, fp}
20000e44:	0b010a01 	bleq	20043650 <ball+0x42778>
20000e48:	0d010c01 	stceq	12, cr0, [r1, #-4]

20000e4c <paddle_left>:
20000e4c:	20000e08 	andcs	r0, r0, r8, lsl #28
	...
20000e58:	00000032 	andeq	r0, r0, r2, lsr r0
20000e5c:	00000019 	andeq	r0, r0, r9, lsl r0
20000e60:	20000695 	mulcs	r0, r5, r6
20000e64:	200006fb 	strdcs	r0, [r0], -fp
20000e68:	20000b07 	andcs	r0, r0, r7, lsl #22
20000e6c:	200009a1 	andcs	r0, r0, r1, lsr #19

20000e70 <paddle_right>:
20000e70:	20000e08 	andcs	r0, r0, r8, lsl #28
	...
20000e7c:	0000004e 	andeq	r0, r0, lr, asr #32
20000e80:	00000019 	andeq	r0, r0, r9, lsl r0
20000e84:	20000695 	mulcs	r0, r5, r6
20000e88:	200006fb 	strdcs	r0, [r0], -fp
20000e8c:	20000b07 	andcs	r0, r0, r7, lsl #22
20000e90:	200009a1 	andcs	r0, r0, r1, lsr #19

20000e94 <ball_geometry>:
20000e94:	0000000c 	andeq	r0, r0, ip
20000e98:	00000004 	andeq	r0, r0, r4
20000e9c:	00000004 	andeq	r0, r0, r4
20000ea0:	02000100 	andeq	r0, r0, #0, 2
20000ea4:	01010001 	tsteq	r1, r1
20000ea8:	03010201 	movweq	r0, #4609	; 0x1201
20000eac:	01020002 	tsteq	r2, r2
20000eb0:	03020202 	movweq	r0, #8706	; 0x2202
20000eb4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000ed8 <ball>:
20000ed8:	20000e94 	mulcs	r0, r4, lr
	...
20000ee4:	00000040 	andeq	r0, r0, r0, asr #32
20000ee8:	00000020 	andeq	r0, r0, r0, lsr #32
20000eec:	20000695 	mulcs	r0, r5, r6
20000ef0:	200006fb 	strdcs	r0, [r0], -fp
20000ef4:	200009c1 	andcs	r0, r0, r1, asr #19
20000ef8:	200009a1 	andcs	r0, r0, r1, lsr #19
20000efc:	2000054a 	andcs	r0, r0, sl, asr #10
20000f00:	20000554 	andcs	r0, r0, r4, asr r5
20000f04:	2000055e 	andcs	r0, r0, lr, asr r5
20000f08:	20000568 	andcs	r0, r0, r8, ror #10
20000f0c:	20000572 	andcs	r0, r0, r2, ror r5
20000f10:	2000057c 	andcs	r0, r0, ip, ror r5
20000f14:	20000586 	andcs	r0, r0, r6, lsl #11
20000f18:	20000590 	mulcs	r0, r0, r5
20000f1c:	0a030201 	beq	200c1728 <ball+0xc0850>
20000f20:	0b060504 	bleq	20182338 <ball+0x181460>
20000f24:	0c090807 	stceq	8, cr0, [r9], {7}
20000f28:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000093d 	andeq	r0, r0, sp, lsr r9
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000161 	andeq	r0, r0, r1, ror #2
  10:	00032b0c 	andeq	r2, r3, ip, lsl #22
  14:	0003ea00 	andeq	lr, r3, r0, lsl #20
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	009e0200 	addseq	r0, lr, r0, lsl #4
  28:	3b070000 	blcc	1c0030 <startup-0x1fe3ffd0>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000153 	andeq	r0, r0, r3, asr r1
  38:	00020204 	andeq	r0, r2, r4, lsl #4
  3c:	01060200 	mrseq	r0, LR_usr
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0206 	strcs	r0, [sl, #-518]	; 0xfffffdfa
  4c:	00000000 	andeq	r0, r0, r0
  50:	06007905 	streq	r7, [r0], -r5, lsl #18
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	0000c002 	andeq	ip, r0, r2
  60:	02040600 	andeq	r0, r4, #0, 12
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00003804 	andeq	r3, r0, r4, lsl #16
  6c:	06064400 	streq	r4, [r6], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	01490600 	cmpeq	r9, r0, lsl #12
  78:	07060000 	streq	r0, [r6, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	17060000 	strne	r0, [r6, -r0]
  84:	06000001 	streq	r0, [r0], -r1
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	0000011d 	andeq	r0, r0, sp, lsl r1
  94:	a9060906 	stmdbge	r6, {r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a06 	andlt	r0, r8, r6, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	2d070403 	cfstrscs	mvf0, [r7, #-12]
  c4:	02000002 	andeq	r0, r0, #2
  c8:	0000007a 	andeq	r0, r0, sl, ror r0
  cc:	68030b06 	stmdavs	r3, {r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000079 	andeq	r0, r0, r9, ror r0
  d8:	df0e0b06 	svcle	0x000e0b06
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	02870400 	addeq	r0, r7, #0, 8
  e8:	06240000 	strteq	r0, [r4], -r0
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	06006f65 	streq	r6, [r0], -r5, ror #30
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	06007864 	streq	r7, [r0], -r4, ror #16
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	06007964 	streq	r7, [r0], -r4, ror #18
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	00000014 	andeq	r0, r0, r4, lsl r0
 11c:	a9061006 	stmdbge	r6, {r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	0000c606 	andeq	ip, r0, r6, lsl #12
 128:	0b100600 	bleq	401930 <startup-0x1fbfe6d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	02d90610 	sbcseq	r0, r9, #16, 12	; 0x1000000
 134:	11060000 	mrsne	r0, (UNDEF: 6)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	c4061400 	strgt	r1, [r6], #-1024	; 0xfffffc00
 140:	06000002 	streq	r0, [r0], -r2
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000442 	andeq	r0, r0, r2, asr #8
 150:	8d0a1306 	stchi	3, cr1, [sl, #-24]	; 0xffffffe8
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	0002de06 	andeq	sp, r2, r6, lsl #28
 15c:	0a140600 	beq	501964 <startup-0x1fafe69c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	d3020000 	movwle	r0, #8192	; 0x2000
 1b0:	06000003 	streq	r0, [r0], -r3
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	d2020000 	andle	r0, r2, #0
 1bc:	06000003 	streq	r0, [r0], -r3
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	f20d0000 	vhadd.s8	d0, d13, d0
 1c8:	04000001 	streq	r0, [r0], #-1
 1cc:	00251001 	eoreq	r1, r5, r1
 1d0:	03050000 	movweq	r0, #20480	; 0x5000
 1d4:	20000e04 	andcs	r0, r0, r4, lsl #28
 1d8:	0003990d 	andeq	r9, r3, sp, lsl #18
 1dc:	10020400 	andne	r0, r2, r0, lsl #8
 1e0:	00000025 	andeq	r0, r0, r5, lsr #32
 1e4:	0e050305 	cdpeq	3, 0, cr0, cr5, cr5, {0}
 1e8:	690d2000 	stmdbvs	sp, {sp}
 1ec:	05000000 	streq	r0, [r0, #-0]
 1f0:	00c71116 	sbceq	r1, r7, r6, lsl r1
 1f4:	03050000 	movweq	r0, #20480	; 0x5000
 1f8:	20000e08 	andcs	r0, r0, r8, lsl #28
 1fc:	00012f0d 	andeq	r2, r1, sp, lsl #30
 200:	0f170500 	svceq	0x00170500
 204:	000001ae 	andeq	r0, r0, lr, lsr #3
 208:	0e4c0305 	cdpeq	3, 4, cr0, cr12, cr5, {0}
 20c:	a60d2000 	strge	r2, [sp], -r0
 210:	05000000 	streq	r0, [r0, #-0]
 214:	01ae0f18 			; <UNDEFINED> instruction: 0x01ae0f18
 218:	03050000 	movweq	r0, #20480	; 0x5000
 21c:	20000e70 	andcs	r0, r0, r0, ror lr
 220:	0003110d 	andeq	r1, r3, sp, lsl #2
 224:	111a0500 	tstne	sl, r0, lsl #10
 228:	000000c7 	andeq	r0, r0, r7, asr #1
 22c:	0e940305 	cdpeq	3, 9, cr0, cr4, cr5, {0}
 230:	940d2000 	strls	r2, [sp], #-0
 234:	05000003 	streq	r0, [r0, #-3]
 238:	01ae0f1b 			; <UNDEFINED> instruction: 0x01ae0f1b
 23c:	03050000 	movweq	r0, #20480	; 0x5000
 240:	20000ed8 	ldrdcs	r0, [r0], -r8
 244:	00004e0e 	andeq	r4, r0, lr, lsl #28
 248:	062b0500 	strteq	r0, [fp], -r0, lsl #10
 24c:	20000c00 	andcs	r0, r0, r0, lsl #24
 250:	000000ec 	andeq	r0, r0, ip, ror #1
 254:	02bc9c01 	adcseq	r9, ip, #256	; 0x100
 258:	620f0000 	andvs	r0, pc, #0
 25c:	0a2c0500 	beq	b01664 <startup-0x1f4fe99c>
 260:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 264:	0f6c9102 	svceq	0x006c9102
 268:	05003262 	streq	r3, [r0, #-610]	; 0xfffffd9e
 26c:	01ba0a2d 			; <UNDEFINED> instruction: 0x01ba0a2d
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	03a90d68 			; <UNDEFINED> instruction: 0x03a90d68
 278:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 27c:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 280:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 284:	00025c0d 	andeq	r5, r2, sp, lsl #24
 288:	0a2f0500 	beq	bc1690 <startup-0x1f43e970>
 28c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 290:	10609102 	rsbne	r9, r0, r2, lsl #2
 294:	20000c2a 	andcs	r0, r0, sl, lsr #24
 298:	000000b2 	strheq	r0, [r0], -r2
 29c:	00028c0d 	andeq	r8, r2, sp, lsl #24
 2a0:	08400500 	stmdaeq	r0, {r8, sl}^
 2a4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2a8:	0d5f9102 	ldfeqp	f1, [pc, #-8]	; 2a8 <startup-0x1ffffd58>
 2ac:	000002fc 	strdeq	r0, [r0], -ip
 2b0:	bc084105 	stflts	f4, [r8], {5}
 2b4:	02000002 	andeq	r0, r0, #2
 2b8:	00005e91 	muleq	r0, r1, lr
 2bc:	5c080103 	stfpls	f0, [r8], {3}
 2c0:	11000001 	tstne	r0, r1
 2c4:	00000269 	andeq	r0, r0, r9, ror #4
 2c8:	c0061d05 	andgt	r1, r6, r5, lsl #26
 2cc:	4020000b 	eormi	r0, r0, fp
 2d0:	01000000 	mrseq	r0, (UNDEF: 0)
 2d4:	03ca119c 	biceq	r1, sl, #156, 2	; 0x27
 2d8:	0f050000 	svceq	0x00050000
 2dc:	00000006 	andeq	r0, r0, r6
 2e0:	00000c20 	andeq	r0, r0, r0, lsr #24
 2e4:	0e9c0100 	fmleqe	f0, f4, f0
 2e8:	00000008 	andeq	r0, r0, r8
 2ec:	06063204 	streq	r3, [r6], -r4, lsl #4
 2f0:	ba20000b 	blt	800324 <startup-0x1f7ffcdc>
 2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 2f8:	0003299c 	muleq	r3, ip, r9
 2fc:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 300:	ba1a3204 	blt	68cb18 <startup-0x1f9734e8>
 304:	02000001 	andeq	r0, r0, #1
 308:	94136c91 	ldrls	r6, [r3], #-3217	; 0xfffff36f
 30c:	04000003 	streq	r0, [r0], #-3
 310:	01ba2532 			; <UNDEFINED> instruction: 0x01ba2532
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	02ae0d68 	adceq	r0, lr, #104, 26	; 0x1a00
 31c:	35040000 	strcc	r0, [r4, #-0]
 320:	0000a906 	andeq	sl, r0, r6, lsl #18
 324:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 328:	02e81400 	rsceq	r1, r8, #0, 8
 32c:	26040000 	strcs	r0, [r4], -r0
 330:	00002509 	andeq	r2, r0, r9, lsl #10
 334:	000a9800 	andeq	r9, sl, r0, lsl #16
 338:	00006e20 	andeq	r6, r0, r0, lsr #28
 33c:	6f9c0100 	svcvs	0x009c0100
 340:	12000003 	andne	r0, r0, #3
 344:	2604006f 	strcs	r0, [r4], -pc, rrx
 348:	0001ba25 	andeq	fp, r1, r5, lsr #20
 34c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 350:	00025713 	andeq	r5, r2, r3, lsl r7
 354:	2c260400 	cfstrscs	mvf0, [r6], #-0
 358:	000000a9 	andeq	r0, r0, r9, lsr #1
 35c:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 360:	00000394 	muleq	r0, r4, r3
 364:	ba3a2604 	blt	e89b7c <startup-0x1f176484>
 368:	02000001 	andeq	r0, r0, #1
 36c:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 370:	0000038f 	andeq	r0, r0, pc, lsl #7
 374:	c0060904 	andgt	r0, r6, r4, lsl #18
 378:	d8200009 	stmdale	r0!, {r0, r3}
 37c:	01000000 	mrseq	r0, (UNDEF: 0)
 380:	0003c09c 	muleq	r3, ip, r0
 384:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 388:	ba180904 	blt	6027a0 <startup-0x1f9fd860>
 38c:	02000001 	andeq	r0, r0, #1
 390:	11136c91 			; <UNDEFINED> instruction: 0x11136c91
 394:	04000001 	streq	r0, [r0], #-1
 398:	01ba2309 			; <UNDEFINED> instruction: 0x01ba2309
 39c:	91020000 	mrsls	r0, (UNDEF: 2)
 3a0:	02a90d68 	adceq	r0, r9, #104, 26	; 0x1a00
 3a4:	0b040000 	bleq	1003ac <startup-0x1feffc54>
 3a8:	0000a906 	andeq	sl, r0, r6, lsl #18
 3ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3b0:	0002ae0d 	andeq	sl, r2, sp, lsl #28
 3b4:	060c0400 	streq	r0, [ip], -r0, lsl #8
 3b8:	000000a9 	andeq	r0, r0, r9, lsr #1
 3bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
 3c0:	00020915 	andeq	r0, r2, r5, lsl r9
 3c4:	06040400 	streq	r0, [r4], -r0, lsl #8
 3c8:	200009a0 	andcs	r0, r0, r0, lsr #19
 3cc:	00000020 	andeq	r0, r0, r0, lsr #32
 3d0:	04029c01 	streq	r9, [r2], #-3073	; 0xfffff3ff
 3d4:	6f120000 	svcvs	0x00120000
 3d8:	1f040400 	svcne	0x00040400
 3dc:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 3e0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 3e4:	0000013b 	andeq	r0, r0, fp, lsr r1
 3e8:	a9260404 	stmdbge	r6!, {r2, sl}
 3ec:	02000000 	andeq	r0, r0, #0
 3f0:	42137091 	andsmi	r7, r3, #145	; 0x91
 3f4:	04000001 	streq	r0, [r0], #-1
 3f8:	00a93204 	adceq	r3, r9, r4, lsl #4
 3fc:	91020000 	mrsls	r0, (UNDEF: 2)
 400:	0016006c 	andseq	r0, r6, ip, rrx
 404:	03000000 	movweq	r0, #0
 408:	00310f3e 	eorseq	r0, r1, lr, lsr pc
 40c:	094a0000 	stmdbeq	sl, {}^	; <UNPREDICTABLE>
 410:	00562000 	subseq	r2, r6, r0
 414:	9c010000 	stcls	0, cr0, [r1], {-0}
 418:	00000454 	andeq	r0, r0, r4, asr r4
 41c:	0003c30d 	andeq	ip, r3, sp, lsl #6
 420:	073f0300 	ldreq	r0, [pc, -r0, lsl #6]!
 424:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 428:	0f739102 	svceq	0x00739102
 42c:	0079656b 	rsbseq	r6, r9, fp, ror #10
 430:	bc074003 	stclt	0, cr4, [r7], {3}
 434:	02000002 	andeq	r0, r0, #2
 438:	50107291 	mulspl	r0, r1, r2
 43c:	46200009 	strtmi	r0, [r0], -r9
 440:	0f000000 	svceq	0x00000000
 444:	00776f72 	rsbseq	r6, r7, r2, ror pc
 448:	a90a4103 	stmdbge	sl, {r0, r1, r8, lr}
 44c:	02000000 	andeq	r0, r0, #0
 450:	00007491 	muleq	r0, r1, r4
 454:	00029416 	andeq	r9, r2, r6, lsl r4
 458:	0f2f0300 	svceq	0x002f0300
 45c:	00000031 	andeq	r0, r0, r1, lsr r0
 460:	20000904 	andcs	r0, r0, r4, lsl #18
 464:	00000046 	andeq	r0, r0, r6, asr #32
 468:	04a69c01 	strteq	r9, [r6], #3073	; 0xc01
 46c:	c30d0000 	movwgt	r0, #53248	; 0xd000
 470:	03000003 	movweq	r0, #3
 474:	02bc0730 	adcseq	r0, ip, #48, 14	; 0xc00000
 478:	91020000 	mrsls	r0, (UNDEF: 2)
 47c:	656b0f73 	strbvs	r0, [fp, #-3955]!	; 0xfffff08d
 480:	31030079 	tstcc	r3, r9, ror r0
 484:	0002bc07 	andeq	fp, r2, r7, lsl #24
 488:	72910200 	addsvc	r0, r1, #0, 4
 48c:	00090a10 	andeq	r0, r9, r0, lsl sl
 490:	00003620 	andeq	r3, r0, r0, lsr #12
 494:	6f720f00 	svcvs	0x00720f00
 498:	32030077 	andcc	r0, r3, #119	; 0x77
 49c:	0000a90a 	andeq	sl, r0, sl, lsl #18
 4a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4a4:	42170000 	andsmi	r0, r7, #0
 4a8:	03000000 	movweq	r0, #0
 4ac:	00a90529 	adceq	r0, r9, r9, lsr #10
 4b0:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
 4b4:	00342000 	eorseq	r2, r4, r0
 4b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4bc:	000004ee 	andeq	r0, r0, lr, ror #9
 4c0:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 4c4:	15290300 	strne	r0, [r9, #-768]!	; 0xfffffd00
 4c8:	000000a9 	andeq	r0, r0, r9, lsr #1
 4cc:	135c9102 	cmpne	ip, #-2147483648	; 0x80000000
 4d0:	000003c3 	andeq	r0, r0, r3, asr #7
 4d4:	a91e2903 	ldmdbge	lr, {r0, r1, r8, fp, sp}
 4d8:	02000000 	andeq	r0, r0, #0
 4dc:	640d5891 	strvs	r5, [sp], #-2193	; 0xfffff76f
 4e0:	03000002 	movweq	r0, #2
 4e4:	04ee102a 	strbteq	r1, [lr], #42	; 0x2a
 4e8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ec:	31080060 	tstcc	r8, r0, rrx
 4f0:	04000000 	streq	r0, [r0], #-0
 4f4:	09000005 	stmdbeq	r0, {r0, r2}
 4f8:	000000c0 	andeq	r0, r0, r0, asr #1
 4fc:	00c00903 	sbceq	r0, r0, r3, lsl #18
 500:	00030000 	andeq	r0, r3, r0
 504:	0000cb18 	andeq	ip, r0, r8, lsl fp
 508:	05200300 	streq	r0, [r0, #-768]!	; 0xfffffd00
 50c:	000000a9 	andeq	r0, r0, r9, lsr #1
 510:	2000087c 	andcs	r0, r0, ip, ror r8
 514:	00000054 	andeq	r0, r0, r4, asr r0
 518:	052c9c01 	streq	r9, [ip, #-3073]!	; 0xfffff3ff
 51c:	630f0000 	movwvs	r0, #61440	; 0xf000
 520:	10210300 	eorne	r0, r1, r0, lsl #6
 524:	00000031 	andeq	r0, r0, r1, lsr r0
 528:	00779102 	rsbseq	r9, r7, r2, lsl #2
 52c:	0000d918 	andeq	sp, r0, r8, lsl r9
 530:	05170300 	ldreq	r0, [r7, #-768]	; 0xfffffd00
 534:	000000a9 	andeq	r0, r0, r9, lsr #1
 538:	20000828 	andcs	r0, r0, r8, lsr #16
 53c:	00000054 	andeq	r0, r0, r4, asr r0
 540:	05549c01 	ldrbeq	r9, [r4, #-3073]	; 0xfffff3ff
 544:	630f0000 	movwvs	r0, #61440	; 0xf000
 548:	10180300 	andsne	r0, r8, r0, lsl #6
 54c:	00000031 	andeq	r0, r0, r1, lsr r0
 550:	00779102 	rsbseq	r9, r7, r2, lsl #2
 554:	0002ca15 	andeq	ip, r2, r5, lsl sl
 558:	060d0300 	streq	r0, [sp], -r0, lsl #6
 55c:	200007c4 	andcs	r0, r0, r4, asr #15
 560:	00000064 	andeq	r0, r0, r4, rrx
 564:	057a9c01 	ldrbeq	r9, [sl, #-3073]!	; 0xfffff3ff
 568:	72120000 	andsvc	r0, r2, #0
 56c:	0300776f 	movweq	r7, #1903	; 0x76f
 570:	00a9190d 	adceq	r1, r9, sp, lsl #18
 574:	91020000 	mrsls	r0, (UNDEF: 2)
 578:	da150074 	ble	540750 <startup-0x1fabf8b0>
 57c:	03000003 	movweq	r0, #3
 580:	07600603 	strbeq	r0, [r0, -r3, lsl #12]!
 584:	00642000 	rsbeq	r2, r4, r0
 588:	9c010000 	stcls	0, cr0, [r1], {-0}
 58c:	000005a0 	andeq	r0, r0, r0, lsr #11
 590:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 594:	1a030300 	bne	c119c <startup-0x1ff3ee64>
 598:	000000a9 	andeq	r0, r0, r9, lsr #1
 59c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 5a0:	0003040e 	andeq	r0, r3, lr, lsl #8
 5a4:	06af0200 	strteq	r0, [pc], r0, lsl #4
 5a8:	200006fa 	strdcs	r0, [r0], -sl
 5ac:	00000066 	andeq	r0, r0, r6, rrx
 5b0:	05db9c01 	ldrbeq	r9, [fp, #3073]	; 0xc01
 5b4:	6f120000 	svcvs	0x00120000
 5b8:	1baf0200 	blne	febc0dc0 <ball+0xdebbfee8>
 5bc:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 5c0:	106c9102 	rsbne	r9, ip, r2, lsl #2
 5c4:	20000702 	andcs	r0, r0, r2, lsl #14
 5c8:	00000054 	andeq	r0, r0, r4, asr r0
 5cc:	0200740f 	andeq	r7, r0, #251658240	; 0xf000000
 5d0:	00a90ab0 	strhteq	r0, [r9], r0
 5d4:	91020000 	mrsls	r0, (UNDEF: 2)
 5d8:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
 5dc:	00000447 	andeq	r0, r0, r7, asr #8
 5e0:	9406a902 	strls	sl, [r6], #-2306	; 0xfffff6fe
 5e4:	66200006 	strtvs	r0, [r0], -r6
 5e8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ec:	0006169c 	muleq	r6, ip, r6
 5f0:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 5f4:	ba1aa902 	blt	6aaa04 <startup-0x1f9555fc>
 5f8:	02000001 	andeq	r0, r0, #1
 5fc:	9c106c91 	ldcls	12, cr6, [r0], {145}	; 0x91
 600:	54200006 	strtpl	r0, [r0], #-6
 604:	0f000000 	svceq	0x00000000
 608:	aa020074 	bge	807e0 <startup-0x1ff7f820>
 60c:	0000a90a 	andeq	sl, r0, sl, lsl #18
 610:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 614:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
 618:	02000000 	andeq	r0, r0, #0
 61c:	04ca0682 	strbeq	r0, [sl], #1666	; 0x682
 620:	01ca2000 	biceq	r2, sl, r0
 624:	9c010000 	stcls	0, cr0, [r1], {-0}
 628:	000006a1 	andeq	r0, r0, r1, lsr #13
 62c:	02007812 	andeq	r7, r0, #1179648	; 0x120000
 630:	00251482 	eoreq	r1, r5, r2, lsl #9
 634:	91020000 	mrsls	r0, (UNDEF: 2)
 638:	0079125f 	rsbseq	r1, r9, pc, asr r2
 63c:	251f8202 	ldrcs	r8, [pc, #-514]	; 442 <startup-0x1ffffbbe>
 640:	02000000 	andeq	r0, r0, #0
 644:	73125e91 	tstvc	r2, #2320	; 0x910
 648:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
 64c:	00252a82 	eoreq	r2, r5, r2, lsl #21
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	038a0d5d 	orreq	r0, sl, #5952	; 0x1740
 658:	84020000 	strhi	r0, [r2], #-0
 65c:	0000250a 	andeq	r2, r0, sl, lsl #10
 660:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 664:	0000ef0d 	andeq	lr, r0, sp, lsl #30
 668:	10840200 	addne	r0, r4, r0, lsl #4
 66c:	00000025 	andeq	r0, r0, r5, lsr #32
 670:	0d669102 	stfeqp	f1, [r6, #-8]!
 674:	000001dd 	ldrdeq	r0, [r0], -sp
 678:	251c8402 	ldrcs	r8, [ip, #-1026]	; 0xfffffbfe
 67c:	02000000 	andeq	r0, r0, #0
 680:	9d0d6591 	cfstr32ls	mvfx6, [sp, #-580]	; 0xfffffdbc
 684:	02000002 	andeq	r0, r0, #2
 688:	00252484 	eoreq	r2, r5, r4, lsl #9
 68c:	91020000 	mrsls	r0, (UNDEF: 2)
 690:	001f0d63 	andseq	r0, pc, r3, ror #26
 694:	85020000 	strhi	r0, [r2, #-0]
 698:	0000250a 	andeq	r2, r0, sl, lsl #10
 69c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 6a0:	00891900 	addeq	r1, r9, r0, lsl #18
 6a4:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
 6a8:	00046206 	andeq	r6, r4, r6, lsl #4
 6ac:	00006820 	andeq	r6, r0, r0, lsr #16
 6b0:	ea9c0100 	b	fe700ab8 <ball+0xde6ffbe0>
 6b4:	10000006 	andne	r0, r0, r6
 6b8:	20000468 	andcs	r0, r0, r8, ror #8
 6bc:	00000058 	andeq	r0, r0, r8, asr r0
 6c0:	0000fa0d 	andeq	pc, r0, sp, lsl #20
 6c4:	0f790200 	svceq	0x00790200
 6c8:	00000025 	andeq	r0, r0, r5, lsr #32
 6cc:	10779102 	rsbsne	r9, r7, r2, lsl #2
 6d0:	2000048c 	andcs	r0, r0, ip, lsl #9
 6d4:	00000022 	andeq	r0, r0, r2, lsr #32
 6d8:	6464610f 	strbtvs	r6, [r4], #-271	; 0xfffffef1
 6dc:	0f7c0200 	svceq	0x007c0200
 6e0:	00000025 	andeq	r0, r0, r5, lsr #32
 6e4:	00769102 	rsbseq	r9, r6, r2, lsl #2
 6e8:	1a1a0000 	bne	6806f0 <startup-0x1f97f910>
 6ec:	02000002 	andeq	r0, r0, #2
 6f0:	040c066a 	streq	r0, [ip], #-1642	; 0xfffff996
 6f4:	00562000 	subseq	r2, r6, r0
 6f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6fc:	0000ff14 	andeq	pc, r0, r4, lsl pc	; <UNPREDICTABLE>
 700:	09650200 	stmdbeq	r5!, {r9}^
 704:	00000025 	andeq	r0, r0, r5, lsr #32
 708:	200003e2 	andcs	r0, r0, r2, ror #7
 70c:	0000002a 	andeq	r0, r0, sl, lsr #32
 710:	07269c01 	streq	r9, [r6, -r1, lsl #24]!
 714:	ef130000 	svc	0x00130000
 718:	02000000 	andeq	r0, r0, #0
 71c:	00252365 	eoreq	r2, r5, r5, ror #6
 720:	91020000 	mrsls	r0, (UNDEF: 2)
 724:	250e0077 	strcs	r0, [lr, #-119]	; 0xffffff89
 728:	02000000 	andeq	r0, r0, #0
 72c:	039c065d 	orrseq	r0, ip, #97517568	; 0x5d00000
 730:	00462000 	subeq	r2, r6, r0
 734:	9c010000 	stcls	0, cr0, [r1], {-0}
 738:	0000075b 	andeq	r0, r0, fp, asr r7
 73c:	00010c13 	andeq	r0, r1, r3, lsl ip
 740:	215d0200 	cmpcs	sp, r0, lsl #4
 744:	00000025 	andeq	r0, r0, r5, lsr #32
 748:	13779102 	cmnne	r7, #-2147483648	; 0x80000000
 74c:	000000ef 	andeq	r0, r0, pc, ror #1
 750:	252f5d02 	strcs	r5, [pc, #-3330]!	; fffffa56 <ball+0xdfffeb7e>
 754:	02000000 	andeq	r0, r0, #0
 758:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 75c:	00000053 	andeq	r0, r0, r3, asr r0
 760:	5c065602 	stcpl	6, cr5, [r6], {2}
 764:	40200003 	eormi	r0, r0, r3
 768:	01000000 	mrseq	r0, (UNDEF: 0)
 76c:	0007909c 	muleq	r7, ip, r0
 770:	00611300 	rsbeq	r1, r1, r0, lsl #6
 774:	56020000 	strpl	r0, [r2], -r0
 778:	00002524 	andeq	r2, r0, r4, lsr #10
 77c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 780:	0000ef13 	andeq	lr, r0, r3, lsl pc
 784:	35560200 	ldrbcc	r0, [r6, #-512]	; 0xfffffe00
 788:	00000025 	andeq	r0, r0, r5, lsr #32
 78c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 790:	0001e40e 	andeq	lr, r1, lr, lsl #8
 794:	06410200 	strbeq	r0, [r1], -r0, lsl #4
 798:	200002dc 	ldrdcs	r0, [r0], -ip
 79c:	00000080 	andeq	r0, r0, r0, lsl #1
 7a0:	07c59c01 	strbeq	r9, [r5, r1, lsl #24]
 7a4:	83130000 	tsthi	r3, #0
 7a8:	02000000 	andeq	r0, r0, #0
 7ac:	00251c41 	eoreq	r1, r5, r1, asr #24
 7b0:	91020000 	mrsls	r0, (UNDEF: 2)
 7b4:	00ef1377 	rsceq	r1, pc, r7, ror r3	; <UNPREDICTABLE>
 7b8:	41020000 	mrsmi	r0, (UNDEF: 2)
 7bc:	0000252b 	andeq	r2, r0, fp, lsr #10
 7c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 7c4:	00b31400 	adcseq	r1, r3, r0, lsl #8
 7c8:	2b020000 	blcs	807d0 <startup-0x1ff7f830>
 7cc:	00002509 	andeq	r2, r0, r9, lsl #10
 7d0:	00024c00 	andeq	r4, r2, r0, lsl #24
 7d4:	00009020 	andeq	r9, r0, r0, lsr #32
 7d8:	fd9c0100 	ldc2	1, cr0, [ip]
 7dc:	13000007 	movwne	r0, #7
 7e0:	000000ef 	andeq	r0, r0, pc, ror #1
 7e4:	251e2b02 	ldrcs	r2, [lr, #-2818]	; 0xfffff4fe
 7e8:	02000000 	andeq	r0, r0, #0
 7ec:	720f6f91 	andvc	r6, pc, #580	; 0x244
 7f0:	33020076 	movwcc	r0, #8310	; 0x2076
 7f4:	0000250a 	andeq	r2, r0, sl, lsl #10
 7f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7fc:	03b00e00 	movseq	r0, #0, 28
 800:	17020000 	strne	r0, [r2, -r0]
 804:	0001d606 	andeq	sp, r1, r6, lsl #12
 808:	00007620 	andeq	r7, r0, r0, lsr #12
 80c:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
 810:	1b000008 	blne	838 <startup-0x1ffff7c8>
 814:	00000000 	andeq	r0, r0, r0
 818:	0200630f 	andeq	r6, r0, #1006632960	; 0x3c000000
 81c:	00250b20 	eoreq	r0, r5, r0, lsr #22
 820:	91020000 	mrsls	r0, (UNDEF: 2)
 824:	0e000077 	mcreq	0, 0, r0, cr0, cr7, {3}
 828:	000000e8 	andeq	r0, r0, r8, ror #1
 82c:	74060a02 	strvc	r0, [r6], #-2562	; 0xfffff5fe
 830:	62200001 	eorvs	r0, r0, #1
 834:	01000000 	mrseq	r0, (UNDEF: 0)
 838:	00085c9c 	muleq	r8, ip, ip
 83c:	00ef1300 	rsceq	r1, pc, r0, lsl #6
 840:	0a020000 	beq	80848 <startup-0x1ff7f7b8>
 844:	00002520 	andeq	r2, r0, r0, lsr #10
 848:	6f910200 	svcvs	0x00910200
 84c:	0002520d 	andeq	r5, r2, sp, lsl #4
 850:	0a0b0200 	beq	2c1058 <startup-0x1fd3efa8>
 854:	00000025 	andeq	r0, r0, r5, lsr #32
 858:	00779102 	rsbseq	r9, r7, r2, lsl #2
 85c:	0002b315 	andeq	fp, r2, r5, lsl r3
 860:	06060200 	streq	r0, [r6], -r0, lsl #4
 864:	20000138 	andcs	r0, r0, r8, lsr r1
 868:	0000003c 	andeq	r0, r0, ip, lsr r0
 86c:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
 870:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
 874:	25060200 	strcs	r0, [r6, #-512]	; 0xfffffe00
 878:	00000025 	andeq	r0, r0, r5, lsr #32
 87c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 880:	00027215 	andeq	r7, r2, r5, lsl r2
 884:	06010200 	streq	r0, [r1], -r0, lsl #4
 888:	200000f2 	strdcs	r0, [r0], -r2
 88c:	00000046 	andeq	r0, r0, r6, asr #32
 890:	08a49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}
 894:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
 898:	23010200 	movwcs	r0, #4608	; 0x1200
 89c:	00000025 	andeq	r0, r0, r5, lsr #32
 8a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 8a4:	00023a1a 	andeq	r3, r2, sl, lsl sl
 8a8:	06210100 	strteq	r0, [r1], -r0, lsl #2
 8ac:	200000e0 	andcs	r0, r0, r0, ror #1
 8b0:	00000012 	andeq	r0, r0, r2, lsl r0
 8b4:	230e9c01 	movwcs	r9, #60417	; 0xec01
 8b8:	01000001 	tsteq	r0, r1
 8bc:	009a0617 	addseq	r0, sl, r7, lsl r6
 8c0:	00462000 	subeq	r2, r6, r0
 8c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8c8:	000008f2 	strdeq	r0, [r0], -r2
 8cc:	00736d12 	rsbseq	r6, r3, r2, lsl sp
 8d0:	c01f1701 	andsgt	r1, pc, r1, lsl #14
 8d4:	02000000 	andeq	r0, r0, #0
 8d8:	b8106c91 	ldmdalt	r0, {r0, r4, r7, sl, fp, sp, lr}
 8dc:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 8e0:	0f000000 	svceq	0x00000000
 8e4:	1c010069 	stcne	0, cr0, [r1], {105}	; 0x69
 8e8:	0000a90a 	andeq	sl, r0, sl, lsl #18
 8ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8f0:	460e0000 	strmi	r0, [lr], -r0
 8f4:	01000002 	tsteq	r0, r2
 8f8:	0058060d 	subseq	r0, r8, sp, lsl #12
 8fc:	00422000 	subeq	r2, r2, r0
 900:	9c010000 	stcls	0, cr0, [r1], {-0}
 904:	0000092e 	andeq	r0, r0, lr, lsr #18
 908:	00737512 	rsbseq	r7, r3, r2, lsl r5
 90c:	c01f0d01 	andsgt	r0, pc, r1, lsl #26
 910:	02000000 	andeq	r0, r0, #0
 914:	76106c91 			; <UNDEFINED> instruction: 0x76106c91
 918:	1a200000 	bne	800920 <startup-0x1f7ff6e0>
 91c:	0f000000 	svceq	0x00000000
 920:	12010069 	andne	r0, r1, #105	; 0x69
 924:	0000a90a 	andeq	sl, r0, sl, lsl #18
 928:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 92c:	1f110000 	svcne	0x00110000
 930:	01000003 	tsteq	r0, r3
 934:	00100603 	andseq	r0, r0, r3, lsl #12
 938:	00482000 	subeq	r2, r8, r0
 93c:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b390b3b 	bleq	e42da4 <startup-0x1f1bd25c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	12000019 	andne	r0, r0, #25
  f8:	08030005 	stmdaeq	r3, {r0, r2}
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	13490b39 	movtne	r0, #39737	; 0x9b39
 104:	00001802 	andeq	r1, r0, r2, lsl #16
 108:	03000513 	movweq	r0, #1299	; 0x513
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 11c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 120:	0b3b0b3a 	bleq	ec2e10 <startup-0x1f13d1f0>
 124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 128:	01111349 	tsteq	r1, r9, asr #6
 12c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 130:	01194296 			; <UNDEFINED> instruction: 0x01194296
 134:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 138:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	0b390b3b 	bleq	e42e34 <startup-0x1f1bd1cc>
 144:	01111927 	tsteq	r1, r7, lsr #18
 148:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 14c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 150:	16000013 			; <UNDEFINED> instruction: 0x16000013
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <startup-0x1f17c694>
 15c:	0b390b3b 	bleq	e42e50 <startup-0x1f1bd1b0>
 160:	01111349 	tsteq	r1, r9, asr #6
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194296 			; <UNDEFINED> instruction: 0x01194296
 16c:	17000013 	smladne	r0, r3, r0, r0
 170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b390b3b 	bleq	e42e6c <startup-0x1f1bd194>
 17c:	13491927 	movtne	r1, #39207	; 0x9927
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 190:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 194:	0b3b0b3a 	bleq	ec2e84 <startup-0x1f13d17c>
 198:	13490b39 	movtne	r0, #39737	; 0x9b39
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	01110b39 	tsteq	r1, r9, lsr fp
 1b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1c0:	1a000013 	bne	214 <startup-0x1ffffdec>
 1c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1c8:	0b3a0e03 	bleq	e839dc <startup-0x1f17c624>
 1cc:	0b390b3b 	bleq	e42ec0 <startup-0x1f1bd140>
 1d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1d8:	1b000019 	blne	244 <startup-0x1ffffdbc>
 1dc:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 1e0:	Address 0x000001e0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000cdc 	ldrdeq	r0, [r0], -ip
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001f8 	strdcs	r0, [r0], -r8
   4:	20000222 	andcs	r0, r0, r2, lsr #4
   8:	20000224 	andcs	r0, r0, r4, lsr #4
   c:	20000226 	andcs	r0, r0, r6, lsr #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	20000cec 	andcs	r0, r0, ip, ror #25
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000777 	andeq	r0, r0, r7, ror r7
   4:	00d60003 	sbcseq	r0, r6, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff98 <ball+0xdffff0c0>
  58:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  5c:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
  60:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
  64:	5f525044 	svcpl	0x00525044
  68:	50525452 	subspl	r5, r2, r2, asr r4
  6c:	6f502f41 	svcvs	0x00502f41
  70:	0000676e 	andeq	r6, r0, lr, ror #14
  74:	616c6544 	cmnvs	ip, r4, asr #10
  78:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	70617247 	rsbvc	r7, r1, r7, asr #4
  84:	44636968 	strbtmi	r6, [r3], #-2408	; 0xfffff698
  88:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  8c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  90:	00000100 	andeq	r0, r0, r0, lsl #2
  94:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
  98:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  9c:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  a0:	00010068 	andeq	r0, r1, r8, rrx
  a4:	6d614700 	stclvs	7, cr4, [r1, #-0]
  a8:	676f4c65 	strbvs	r4, [pc, -r5, ror #24]!
  ac:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  b0:	00000100 	andeq	r0, r0, r0, lsl #2
  b4:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
  b8:	0100632e 	tsteq	r0, lr, lsr #6
  bc:	74530000 	ldrbvc	r0, [r3], #-0
  c0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
  c4:	73657275 	cmnvc	r5, #1342177287	; 0x50000007
  c8:	0100682e 	tsteq	r0, lr, lsr #16
  cc:	65440000 	strbvs	r0, [r4, #-0]
  d0:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
  d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  d8:	00682e73 	rsbeq	r2, r8, r3, ror lr
  dc:	00000001 	andeq	r0, r0, r1
  e0:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
  e4:	00001002 	andeq	r1, r0, r2
  e8:	02051420 	andeq	r1, r5, #32, 8	; 0x20000000
  ec:	200c052f 	andcs	r0, ip, pc, lsr #10
  f0:	052f0205 	streq	r0, [pc, #-517]!	; fffffef3 <ball+0xdffff01b>
  f4:	0205200c 	andeq	r2, r5, #12
  f8:	200b052f 	andcs	r0, fp, pc, lsr #10
  fc:	052f0205 	streq	r0, [pc, #-517]!	; fffffeff <ball+0xdffff027>
 100:	0705200c 	streq	r2, [r5, -ip]
 104:	000a052f 	andeq	r0, sl, pc, lsr #10
 108:	20010402 	andcs	r0, r1, r2, lsl #8
 10c:	02001905 	andeq	r1, r0, #81920	; 0x14000
 110:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 114:	04020007 	streq	r0, [r2], #-7
 118:	02053c01 	andeq	r3, r5, #256	; 0x100
 11c:	200c0522 	andcs	r0, ip, r2, lsr #10
 120:	052f0105 	streq	r0, [pc, #-261]!	; 23 <startup-0x1fffffdd>
 124:	0505ae22 	streq	sl, [r5, #-3618]	; 0xfffff1de
 128:	0a05834c 	beq	160e60 <startup-0x1fe9f1a0>
 12c:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 130:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 134:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 138:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 13c:	16052d03 	strne	r2, [r5], -r3, lsl #26
 140:	01040200 	mrseq	r0, R12_usr
 144:	0013053c 	andseq	r0, r3, ip, lsr r5
 148:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 14c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 150:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 154:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
 158:	4c06055a 	cfstr32mi	mvfx0, [r6], {90}	; 0x5a
 15c:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 160:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 164:	04020003 	streq	r0, [r2], #-3
 168:	1a052103 	bne	14857c <startup-0x1feb7a84>
 16c:	03040200 	movweq	r0, #16896	; 0x4200
 170:	00130557 	andseq	r0, r3, r7, asr r5
 174:	3c010402 	cfstrscc	mvf0, [r1], {2}
 178:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 17c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 180:	13053f01 	movwne	r3, #24321	; 0x5f01
 184:	2f02055a 	svccs	0x0002055a
 188:	2f01052f 	svccs	0x0001052f
 18c:	25050204 	strcs	r0, [r5, #-516]	; 0xfffffdfc
 190:	053c5d03 	ldreq	r5, [ip, #-3331]!	; 0xfffff2fd
 194:	1505670f 	strne	r6, [r5, #-1807]	; 0xfffff8f1
 198:	660f054a 	strvs	r0, [pc], -sl, asr #10
 19c:	83010559 	movwhi	r0, #5465	; 0x1559
 1a0:	05682705 	strbeq	r2, [r8, #-1797]!	; 0xfffff8fb
 1a4:	0105670f 	tsteq	r5, pc, lsl #14
 1a8:	2b051308 	blcs	144dd0 <startup-0x1febb230>
 1ac:	670a0576 	smlsdxvs	sl, r6, r5, r0
 1b0:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 1b4:	0b05c10c 	bleq	1705ec <startup-0x1fe8fa14>
 1b8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
 1bc:	0f053c03 	svceq	0x00053c03
 1c0:	3d060521 	cfstr32cc	mvfx0, [r6, #-132]	; 0xffffff7c
 1c4:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 1c8:	1b053d06 	blne	14f5e8 <startup-0x1feb0a18>
 1cc:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 1d0:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 1d4:	1e052201 	cdpne	2, 0, cr2, cr5, cr1, {0}
 1d8:	3d02053e 	cfstr32cc	mvfx0, [r2, #-248]	; 0xffffff08
 1dc:	200d053d 	andcs	r0, sp, sp, lsr r5
 1e0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1d4 <startup-0x1ffffe2c>
 1e4:	3003053d 	andcc	r0, r3, sp, lsr r5
 1e8:	2f1d053d 	svccs	0x001d053d
 1ec:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
 1f0:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 1f4:	0a052f05 	beq	14be10 <startup-0x1feb41f0>
 1f8:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
 1fc:	02052704 	andeq	r2, r5, #4, 14	; 0x100000
 200:	0e053d23 	cdpeq	13, 0, cr3, cr5, cr3, {1}
 204:	2f010520 	svccs	0x00010520
 208:	05ca2905 	strbeq	r2, [sl, #2309]	; 0x905
 20c:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 210:	0205200d 	andeq	r2, r5, #13
 214:	2f593d2f 	svccs	0x00593d2f
 218:	2f0f053d 	svccs	0x000f053d
 21c:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
 220:	053d4b02 	ldreq	r4, [sp, #-2818]!	; 0xfffff4fe
 224:	0405200e 	streq	r2, [r5], #-14
 228:	4b03052f 	blmi	c16ec <startup-0x1ff3e914>
 22c:	3004053d 	andcc	r0, r4, sp, lsr r5
 230:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 234:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 238:	36053d01 	strcc	r3, [r5], -r1, lsl #26
 23c:	910205ca 	smlabtls	r2, sl, r5, r0
 240:	05201005 	streq	r1, [r0, #-5]!
 244:	2f593d02 	svccs	0x00593d02
 248:	10052f3d 	andne	r2, r5, sp, lsr pc
 24c:	4a04053e 	bmi	10174c <startup-0x1fefe8b4>
 250:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 254:	05301005 	ldreq	r1, [r0, #-5]!
 258:	03054a04 	movweq	r4, #23044	; 0x5a04
 25c:	02053d21 	andeq	r3, r5, #2112	; 0x840
 260:	200f0530 	andcs	r0, pc, r0, lsr r5	; <UNPREDICTABLE>
 264:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 258 <startup-0x1ffffda8>
 268:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 26c:	02057640 	andeq	r7, r5, #64, 12	; 0x4000000
 270:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 274:	05830105 	streq	r0, [r3, #261]	; 0x105
 278:	02054c3a 	andeq	r4, r5, #14848	; 0x3a00
 27c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 280:	8301053d 	movwhi	r0, #5437	; 0x153d
 284:	054c2e05 	strbeq	r2, [ip, #-3589]	; 0xfffff1fb
 288:	09056702 	stmdbeq	r5, {r1, r8, r9, sl, sp, lr}
 28c:	67010559 	smlsdvs	r1, r9, r5, r0
 290:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
 294:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 298:	4b3d3d3d 	blmi	f4f794 <startup-0x1f0b086c>
 29c:	4b4b4b4b 	blmi	12d2fd0 <startup-0x1ed2d030>
 2a0:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 2a4:	0f053e1c 	svceq	0x00053e1c
 2a8:	3c02053d 	cfstr32cc	mvfx0, [r2], {61}	; 0x3d
 2ac:	9f210305 	svcls	0x00210305
 2b0:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 2b4:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
 2b8:	03040200 	movweq	r0, #16896	; 0x4200
 2bc:	00250521 	eoreq	r0, r5, r1, lsr #10
 2c0:	49030402 	stmdbmi	r3, {r1, sl}
 2c4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 2c8:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 2cc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 2d0:	02054702 	andeq	r4, r5, #524288	; 0x80000
 2d4:	01040200 	mrseq	r0, R12_usr
 2d8:	51010558 	tstpl	r1, r8, asr r5
 2dc:	055a2e05 	ldrbeq	r2, [sl, #-3589]	; 0xfffff1fb
 2e0:	0e05e504 	cfsh32eq	mvfx14, mvfx5, #4
 2e4:	02040200 	andeq	r0, r4, #0, 4
 2e8:	00180558 	andseq	r0, r8, r8, asr r5
 2ec:	58040402 	stmdapl	r4, {r1, sl}
 2f0:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 2f4:	05580604 	ldrbeq	r0, [r8, #-1540]	; 0xfffff9fc
 2f8:	18055a14 	stmdane	r5, {r2, r4, r9, fp, ip, lr}
 2fc:	580a053c 	stmdapl	sl, {r2, r3, r4, r5, r8, sl}
 300:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
 304:	10053c0f 	andne	r3, r5, pc, lsl #24
 308:	4a0305e5 	bmi	c1aa4 <startup-0x1ff3e55c>
 30c:	05211005 	streq	r1, [r1, #-5]!
 310:	10054a03 	andne	r4, r5, r3, lsl #20
 314:	4a030521 	bmi	c17a0 <startup-0x1ff3e860>
 318:	05211005 	streq	r1, [r1, #-5]!
 31c:	10054a03 	andne	r4, r5, r3, lsl #20
 320:	4a030521 	bmi	c17ac <startup-0x1ff3e854>
 324:	05211005 	streq	r1, [r1, #-5]!
 328:	10054a03 	andne	r4, r5, r3, lsl #20
 32c:	4a030521 	bmi	c17b8 <startup-0x1ff3e848>
 330:	05211005 	streq	r1, [r1, #-5]!
 334:	05214a03 	streq	r4, [r1, #-2563]!	; 0xfffff5fd
 338:	08052204 	stmdaeq	r5, {r2, r9, sp}
 33c:	6904054b 	stmdbvs	r4, {r0, r1, r3, r6, r8, sl}
 340:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 344:	0e054b0a 	vmlaeq.f64	d4, d5, d10
 348:	4b0a0576 	blmi	281928 <startup-0x1fd7e6d8>
 34c:	c9680205 	stmdbgt	r8!, {r0, r2, r9}^
 350:	05c91005 	strbeq	r1, [r9, #5]
 354:	04059102 	streq	r9, [r5], #-258	; 0xfffffefe
 358:	4b0805ad 	blmi	201a14 <startup-0x1fdfe5ec>
 35c:	920205a0 	andls	r0, r2, #160, 10	; 0x28000000
 360:	5d032c05 	stcpl	12, cr2, [r3, #-20]	; 0xffffffec
 364:	030105ac 	movweq	r0, #5548	; 0x15ac
 368:	1c052024 	stcne	0, cr2, [r5], {36}	; 0x24
 36c:	4b0a0584 	blmi	281984 <startup-0x1fd7e67c>
 370:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 374:	0402000a 	streq	r0, [r2], #-10
 378:	16052103 	strne	r2, [r5], -r3, lsl #2
 37c:	03040200 	movweq	r0, #16896	; 0x4200
 380:	001c052e 	andseq	r0, ip, lr, lsr #10
 384:	66030402 	strvs	r0, [r3], -r2, lsl #8
 388:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 38c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 390:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 394:	31053c03 	tstcc	r5, r3, lsl #24
 398:	03040200 	movweq	r0, #16896	; 0x4200
 39c:	0037052e 	eorseq	r0, r7, lr, lsr #10
 3a0:	66030402 	strvs	r0, [r3], -r2, lsl #8
 3a4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3a8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3ac:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 3b0:	16057303 	strne	r7, [r5], -r3, lsl #6
 3b4:	01040200 	mrseq	r0, R12_usr
 3b8:	0027053c 	eoreq	r0, r7, ip, lsr r5
 3bc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3c0:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 3c4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3c8:	1d053f01 	stcne	15, cr3, [r5, #-4]
 3cc:	4b0a055a 	blmi	28193c <startup-0x1fd7e6c4>
 3d0:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 3d4:	0402000a 	streq	r0, [r2], #-10
 3d8:	16052103 	strne	r2, [r5], -r3, lsl #2
 3dc:	03040200 	movweq	r0, #16896	; 0x4200
 3e0:	001c052e 	andseq	r0, ip, lr, lsr #10
 3e4:	66030402 	strvs	r0, [r3], -r2, lsl #8
 3e8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3ec:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3f0:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 3f4:	31053c03 	tstcc	r5, r3, lsl #24
 3f8:	03040200 	movweq	r0, #16896	; 0x4200
 3fc:	0037052e 	eorseq	r0, r7, lr, lsr #10
 400:	66030402 	strvs	r0, [r3], -r2, lsl #8
 404:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 408:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 40c:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 410:	16057303 	strne	r7, [r5], -r3, lsl #6
 414:	01040200 	mrseq	r0, R12_usr
 418:	001b053c 	andseq	r0, fp, ip, lsr r5
 41c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 420:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 424:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 428:	03043f01 	movweq	r3, #20225	; 0x4f01
 42c:	d0031e05 	andle	r1, r3, r5, lsl #28
 430:	0205587e 	andeq	r5, r5, #8257536	; 0x7e0000
 434:	080b054b 	stmdaeq	fp, {r0, r1, r3, r6, r8, sl}
 438:	201c052f 	andscs	r0, ip, pc, lsr #10
 43c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 440:	1c05210b 	stfnes	f2, [r5], {11}
 444:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 448:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 44c:	0305201c 	movweq	r2, #20508	; 0x501c
 450:	210b052e 	tstcs	fp, lr, lsr #10
 454:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 458:	0c052e03 	stceq	14, cr2, [r5], {3}
 45c:	201d0521 	andscs	r0, sp, r1, lsr #10
 460:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
 464:	0205841d 	andeq	r8, r5, #486539264	; 0x1d000000
 468:	080b054b 	stmdaeq	fp, {r0, r1, r3, r6, r8, sl}
 46c:	201b052f 	andscs	r0, fp, pc, lsr #10
 470:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 474:	1b05210b 	blne	1488a8 <startup-0x1feb7758>
 478:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 47c:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 480:	0305201b 	movweq	r2, #20507	; 0x501b
 484:	210b052e 	tstcs	fp, lr, lsr #10
 488:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 48c:	0c052e03 	stceq	14, cr2, [r5], {3}
 490:	201c0521 	andscs	r0, ip, r1, lsr #10
 494:	05300105 	ldreq	r0, [r0, #-261]!	; 0xfffffefb
 498:	14058415 	strne	r8, [r5], #-1045	; 0xfffffbeb
 49c:	2010053d 	andscs	r0, r0, sp, lsr r5
 4a0:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 4a4:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 4a8:	01040200 	mrseq	r0, R12_usr
 4ac:	2f070520 	svccs	0x00070520
 4b0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 4b4:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 4b8:	07052001 	streq	r2, [r5, -r1]
 4bc:	4a04052f 	bmi	101980 <startup-0x1fefe680>
 4c0:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 4c4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4c8:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 4cc:	0015054a 	andseq	r0, r5, sl, asr #10
 4d0:	20010402 	andcs	r0, r1, r2, lsl #8
 4d4:	052f0905 	streq	r0, [pc, #-2309]!	; fffffbd7 <ball+0xdfffecff>
 4d8:	14052101 	strne	r2, [r5], #-257	; 0xfffffeff
 4dc:	10053d68 	andne	r3, r5, r8, ror #26
 4e0:	3d070520 	cfstr32cc	mvfx0, [r7, #-128]	; 0xffffff80
 4e4:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 4e8:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 4ec:	07052001 	streq	r2, [r5, -r1]
 4f0:	4a04052f 	bmi	1019b4 <startup-0x1fefe64c>
 4f4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 4f8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4fc:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 500:	0015054a 	andseq	r0, r5, sl, asr #10
 504:	20010402 	andcs	r0, r1, r2, lsl #8
 508:	052f0705 	streq	r0, [pc, #-1797]!	; fffffe0b <ball+0xdfffef33>
 50c:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 510:	01040200 	mrseq	r0, R12_usr
 514:	2f090520 	svccs	0x00090520
 518:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 51c:	10056825 	andne	r6, r5, r5, lsr #16
 520:	75120559 	ldrvc	r0, [r2, #-1369]	; 0xfffffaa7
 524:	05750105 	ldrbeq	r0, [r5, #-261]!	; 0xfffffefb
 528:	0a057719 	beq	15e194 <startup-0x1fea1e6c>
 52c:	2e02053f 	mcrcs	5, 0, r0, cr2, cr15, {1}
 530:	053d0305 	ldreq	r0, [sp, #-773]!	; 0xfffffcfb
 534:	0a054b0c 	beq	15316c <startup-0x1feace94>
 538:	0805313c 	stmdaeq	r5, {r2, r3, r4, r5, r8, ip, sp}
 53c:	2f0b0582 	svccs	0x000b0582
 540:	053f0905 	ldreq	r0, [pc, #-2309]!	; fffffc43 <ball+0xdfffed6b>
 544:	18052101 	stmdane	r5, {r0, r8, sp}
 548:	3f0a054c 	svccc	0x000a054c
 54c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 550:	0c052103 	stfeqs	f2, [r5], {3}
 554:	3c0a054b 	cfstr32cc	mvfx0, [sl], {75}	; 0x4b
 558:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
 55c:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 560:	2f0b0582 	svccs	0x000b0582
 564:	02001f05 	andeq	r1, r0, #5, 30
 568:	7a030204 	bvc	c0d80 <startup-0x1ff3f280>
 56c:	0002053c 	andeq	r0, r2, ip, lsr r5
 570:	3c010402 	cfstrscc	mvf0, [r1], {2}
 574:	09030905 	stmdbeq	r3, {r0, r2, r8, fp}
 578:	2101053c 	tstcs	r1, ip, lsr r5
 57c:	39050404 	stmdbcc	r5, {r2, sl}
 580:	4a7fb903 	bmi	1fee994 <startup-0x1e01166c>
 584:	3d670805 	stclcc	8, cr0, [r7, #-20]!	; 0xffffffec
 588:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 58c:	02054c29 	andeq	r4, r5, #10496	; 0x2900
 590:	4b0e0559 	blmi	381afc <startup-0x1fc7e504>
 594:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 598:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 59c:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 5a0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 5a4:	0b053004 	bleq	14c5bc <startup-0x1feb3a44>
 5a8:	12053d3d 	andne	r3, r5, #3904	; 0xf40
 5ac:	7613053d 			; <UNDEFINED> instruction: 0x7613053d
 5b0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 5b4:	09052010 	stmdbeq	r5, {r4, sp}
 5b8:	2f0b052e 	svccs	0x000b052e
 5bc:	3d12053d 	cfldr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 5c0:	05760905 	ldrbeq	r0, [r6, #-2309]!	; 0xfffff6fb
 5c4:	0b053d0d 	bleq	14fa00 <startup-0x1feb0600>
 5c8:	2009052e 	andcs	r0, r9, lr, lsr #10
 5cc:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffacf <ball+0xdfffebf7>
 5d0:	1c054c17 	stcne	12, cr4, [r5], {23}
 5d4:	2014052e 	andscs	r0, r4, lr, lsr #10
 5d8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 5dc:	0b053d0d 	bleq	14fa18 <startup-0x1feb05e8>
 5e0:	2009052e 	andcs	r0, r9, lr, lsr #10
 5e4:	052f1305 	streq	r1, [pc, #-773]!	; 2e7 <startup-0x1ffffd19>
 5e8:	10052e18 	andne	r2, r5, r8, lsl lr
 5ec:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 5f0:	02053d3e 	andeq	r3, r5, #3968	; 0xf80
 5f4:	4b01053e 	blmi	41af4 <startup-0x1ffbe50c>
 5f8:	05843f05 	streq	r3, [r4, #3845]	; 0xf05
 5fc:	1b05680e 	blne	15a63c <startup-0x1fea59c4>
 600:	2e20052e 	cfsh64cs	mvdx0, mvdx0, #30
 604:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
 608:	0505202d 	streq	r2, [r5, #-45]	; 0xffffffd3
 60c:	0009052e 	andeq	r0, r9, lr, lsr #10
 610:	2f010402 	svccs	0x00010402
 614:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 618:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 61c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 620:	23052e01 	movwcs	r2, #24065	; 0x5e01
 624:	01040200 	mrseq	r0, R12_usr
 628:	001b052e 	andseq	r0, fp, lr, lsr #10
 62c:	20010402 	andcs	r0, r1, r2, lsl #8
 630:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
 634:	051f0104 	ldreq	r0, [pc, #-260]	; 538 <startup-0x1ffffac8>
 638:	1805300b 	stmdane	r5, {r0, r1, r3, ip, sp}
 63c:	2e1d052e 	cfmul64cs	mvdx0, mvdx13, mvdx14
 640:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
 644:	0a051f2d 	beq	148300 <startup-0x1feb7d00>
 648:	2e1c053e 	mrccs	5, 0, r0, cr12, cr14, {1}
 64c:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
 650:	2e052019 	mcrcs	0, 0, r2, cr5, cr9, {0}
 654:	3004052d 	andcc	r0, r4, sp, lsr #10
 658:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 65c:	01053009 	tsteq	r5, r9
 660:	4c2a0521 	cfstr32mi	mvfx0, [sl], #-132	; 0xffffff7c
 664:	05590205 	ldrbeq	r0, [r9, #-517]	; 0xfffffdfb
 668:	18054c0e 	stmdane	r5, {r1, r2, r3, sl, fp, lr}
 66c:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 670:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 674:	07057404 	streq	r7, [r5, -r4, lsl #8]
 678:	2e050521 	cfsh32cs	mvfx0, mvfx5, #17
 67c:	052f1505 	streq	r1, [pc, #-1285]!	; 17f <startup-0x1ffffe81>
 680:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
 684:	2f0f0520 	svccs	0x000f0520
 688:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 68c:	0d052e19 	stceq	14, cr2, [r5, #-100]	; 0xffffff9c
 690:	2f0f0520 	svccs	0x000f0520
 694:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
 698:	0d055b09 	vstreq	d5, [r5, #-36]	; 0xffffffdc
 69c:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 6a0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 6a4:	17052f0b 	strne	r2, [r5, -fp, lsl #30]
 6a8:	2e1c054c 	cfmac32cs	mvfx0, mvfx12, mvfx12
 6ac:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 6b0:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 6b4:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 6b8:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 6bc:	18052f13 	stmdane	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 6c0:	2010052e 	andscs	r0, r0, lr, lsr #10
 6c4:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 6c8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 6cc:	05044b01 	streq	r4, [r4, #-2817]	; 0xfffff4ff
 6d0:	50031405 	andpl	r1, r3, r5, lsl #8
 6d4:	3502054a 	strcc	r0, [r2, #-1354]	; 0xfffffab6
 6d8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 6dc:	10052f02 	andne	r2, r5, r2, lsl #30
 6e0:	2f020520 	svccs	0x00020520
 6e4:	05201005 	streq	r1, [r0, #-5]!
 6e8:	11052f02 	tstne	r5, r2, lsl #30
 6ec:	2f010520 	svccs	0x00010520
 6f0:	23081005 	movwcs	r1, #32773	; 0x8005
 6f4:	2f3d0a05 	svccs	0x003d0a05
 6f8:	02052f2f 	andeq	r2, r5, #47, 30	; 0xbc
 6fc:	08052f2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 700:	04053d2f 	streq	r3, [r5], #-3375	; 0xfffff2d1
 704:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 708:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 70c:	2e03054b 	cfsh32cs	mvfx0, mvfx3, #43
 710:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 714:	054b2e03 	strbeq	r2, [fp, #-3587]	; 0xfffff1fd
 718:	05593d12 	ldrbeq	r3, [r9, #-3346]	; 0xfffff2ee
 71c:	12055906 	andne	r5, r5, #98304	; 0x18000
 720:	2e0c0575 	cfrshl64cs	mvdx12, mvdx5, r0
 724:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 728:	0c052112 	stfeqs	f2, [r5], {18}
 72c:	4a04052e 	bmi	101bec <startup-0x1fefe414>
 730:	05211305 	streq	r1, [r1, #-773]!	; 0xfffffcfb
 734:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
 738:	2203054a 	andcs	r0, r3, #310378496	; 0x12800000
 73c:	05751305 	ldrbeq	r1, [r5, #-773]!	; 0xfffffcfb
 740:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 744:	21130558 	tstcs	r3, r8, asr r5
 748:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 74c:	14054a04 	strne	r4, [r5], #-2564	; 0xfffff5fc
 750:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 754:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 758:	2071030a 	rsbscs	r0, r1, sl, lsl #6
 75c:	01000802 	tsteq	r0, r2, lsl #16
 760:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
 764:	02050016 	andeq	r0, r5, #22
 768:	20000000 	andcs	r0, r0, r0
 76c:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
 770:	21211301 			; <UNDEFINED> instruction: 0x21211301
 774:	0302212f 	movweq	r2, #8495	; 0x212f
 778:	Address 0x00000778 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
   4:	00776f4c 	rsbseq	r6, r7, ip, asr #30
   8:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
   c:	6461705f 	strbtvs	r7, [r1], #-95	; 0xffffffa1
  10:	00656c64 	rsbeq	r6, r5, r4, ror #24
  14:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	78697000 	stmdavc	r9!, {ip, sp, lr}^
  1c:	69006c65 	stmdbvs	r0, {r0, r2, r5, r6, sl, fp, sp, lr}
  20:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
  24:	61726700 	cmnvs	r2, r0, lsl #14
  28:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  2c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  30:	645f6574 	ldrbvs	r6, [pc], #-1396	; 38 <startup-0x1fffffc8>
  34:	00617461 	rsbeq	r7, r1, r1, ror #8
  38:	6f654774 	svcvs	0x00654774
  3c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  40:	65670079 	strbvs	r0, [r7, #-121]!	; 0xffffff87
  44:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
  48:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
  4c:	616d0065 	cmnvs	sp, r5, rrx
  50:	67006e69 	strvs	r6, [r0, -r9, ror #28]
  54:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  58:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  5c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  60:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffeec <ball+0xdffff014>
  64:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  68:	64617000 	strbtvs	r7, [r1], #-0
  6c:	5f656c64 	svcpl	0x00656c64
  70:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffedc <ball+0xdffff004>
  74:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  78:	45475000 	strbmi	r5, [r7, #-0]
  7c:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  80:	76005952 			; <UNDEFINED> instruction: 0x76005952
  84:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  88:	61726700 	cmnvs	r2, r0, lsl #14
  8c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  90:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  94:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  98:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  9c:	6975006e 	ldmdbvs	r5!, {r1, r2, r3, r5, r6}^
  a0:	5f38746e 	svcpl	0x0038746e
  a4:	61700074 	cmnvs	r0, r4, ror r0
  a8:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  ac:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
  b0:	67007468 	strvs	r7, [r0, -r8, ror #8]
  b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  b8:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  bc:	00646165 	rsbeq	r6, r4, r5, ror #2
  c0:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  c4:	6f700054 	svcvs	0x00700054
  c8:	72007973 	andvc	r7, r0, #1884160	; 0x1cc000
  cc:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
  d0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
  d4:	776f4c6e 	strbvc	r4, [pc, -lr, ror #24]!
  d8:	61657200 	cmnvs	r5, r0, lsl #4
  dc:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; ffffff54 <ball+0xdffff07c>
  e0:	486e6d75 	stmdami	lr!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
  e4:	00686769 	rsbeq	r6, r8, r9, ror #14
  e8:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  ec:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  f4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  f8:	61700072 	cmnvs	r0, r2, ror r0
  fc:	67006567 	strvs	r6, [r0, -r7, ror #10]
 100:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 104:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 108:	5f646165 	svcpl	0x00646165
 10c:	61746164 	cmnvs	r4, r4, ror #2
 110:	6d756400 	cfldrdvs	mvd6, [r5, #-0]
 114:	7300796d 	movwvc	r7, #2413	; 0x96d
 118:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 11c:	7a697300 	bvc	1a5cd24 <startup-0x1e5a32dc>
 120:	64007965 	strvs	r7, [r0], #-2405	; 0xfffff69b
 124:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 128:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 12c:	7000696c 	andvc	r6, r0, ip, ror #18
 130:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 134:	656c5f65 	strbvs	r5, [ip, #-3941]!	; 0xfffff09b
 138:	73007466 	movwvc	r7, #1126	; 0x466
 13c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 140:	70730078 	rsbsvc	r0, r3, r8, ror r0
 144:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 148:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 14c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 150:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 154:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 158:	2064656e 	rsbcs	r6, r4, lr, ror #10
 15c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 160:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 164:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 168:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 16c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 170:	31393130 	teqcc	r9, r0, lsr r1
 174:	20353230 	eorscs	r3, r5, r0, lsr r2
 178:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 17c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 180:	415b2029 	cmpmi	fp, r9, lsr #32
 184:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 188:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 18c:	6172622d 	cmnvs	r2, sp, lsr #4
 190:	2068636e 	rsbcs	r6, r8, lr, ror #6
 194:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 198:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 19c:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 1a0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 1a4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 1a8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 1ac:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 1b0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 1b4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 1b8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 1bc:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 1c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 1c4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 1c8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1cc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 1d0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 1d4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 1d8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 1dc:	725f7800 	subsvc	r7, pc, #0, 16
 1e0:	006c6165 	rsbeq	r6, ip, r5, ror #2
 1e4:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e8:	5f636968 	svcpl	0x00636968
 1ec:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1f0:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
 1f4:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 1f8:	705f315f 	subsvc	r3, pc, pc, asr r1	; <UNPREDICTABLE>
 1fc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 200:	50740073 	rsbspl	r0, r4, r3, ror r0
 204:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 208:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 20c:	6a626f5f 	bvs	189bf90 <startup-0x1e764070>
 210:	5f746365 	svcpl	0x00746365
 214:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 218:	72670064 	rsbvc	r0, r7, #100	; 0x64
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 224:	61697469 	cmnvs	r9, r9, ror #8
 228:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 22c:	736e7500 	cmnvc	lr, #0, 10
 230:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 234:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 238:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 23c:	5f79616c 	svcpl	0x0079616c
 240:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 244:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 248:	5f79616c 	svcpl	0x0079616c
 24c:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 250:	6f62006f 	svcvs	0x0062006f
 254:	6e006874 	mcrvs	8, 0, r6, cr0, cr4, {3}
 258:	00597765 	subseq	r7, r9, r5, ror #14
 25c:	69725f70 	ldmdbvs	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 260:	00746867 	rsbseq	r6, r4, r7, ror #16
 264:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 268:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 26c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 270:	72670070 	rsbvc	r0, r7, #112	; 0x70
 274:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 278:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 27c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 280:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 284:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 288:	006a624f 	rsbeq	r6, sl, pc, asr #4
 28c:	5f6c5f70 	svcpl	0x006c5f70
 290:	0079656b 	rsbseq	r6, r9, fp, ror #10
 294:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 298:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 29c:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
 2a0:	6f685f61 	svcvs	0x00685f61
 2a4:	7265646c 	rsbvc	r6, r5, #108, 8	; 0x6c000000
 2a8:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 2ac:	656e0078 	strbvs	r0, [lr, #-120]!	; 0xffffff88
 2b0:	67007977 	smlsdxvs	r0, r7, r9, r7
 2b4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2b8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2bc:	5f6c7274 	svcpl	0x006c7274
 2c0:	5f746962 	svcpl	0x00746962
 2c4:	61656c63 	cmnvs	r5, r3, ror #24
 2c8:	63610072 	cmnvs	r1, #114	; 0x72
 2cc:	61766974 	cmnvs	r6, r4, ror r9
 2d0:	6f526574 	svcvs	0x00526574
 2d4:	776f4c77 			; <UNDEFINED> instruction: 0x776f4c77
 2d8:	61726400 	cmnvs	r2, r0, lsl #8
 2dc:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 2e0:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 2e4:	00646565 	rsbeq	r6, r4, r5, ror #10
 2e8:	6c6c6f63 	stclvs	15, cr6, [ip], #-396	; 0xfffffe74
 2ec:	6f697369 	svcvs	0x00697369
 2f0:	69775f6e 	ldmdbvs	r7!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2f4:	625f6874 	subsvs	r6, pc, #116, 16	; 0x740000
 2f8:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 2fc:	5f725f70 	svcpl	0x00725f70
 300:	0079656b 	rsbseq	r6, r9, fp, ror #10
 304:	61656c63 	cmnvs	r5, r3, ror #24
 308:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 30c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 310:	6c616200 	sfmvs	f6, 2, [r1], #-0
 314:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 318:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 31c:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 320:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 324:	3035325f 	eorscc	r3, r5, pc, asr r2
 328:	4300736e 	movwmi	r7, #878	; 0x36e
 32c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 330:	2f737265 	svccs	0x00737265
 334:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
 338:	6f442f73 	svcvs	0x00442f73
 33c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 340:	2f73746e 	svccs	0x0073746e
 344:	5f746967 	svcpl	0x00746967
 348:	6a6f7270 	bvs	1bdcd10 <startup-0x1e4232f0>
 34c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 350:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 354:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 358:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 35c:	2f737463 	svccs	0x00737463
 360:	30544144 	subscc	r4, r4, r4, asr #2
 364:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 2a8 <startup-0x1ffffd58>
 368:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 36c:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 370:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
 374:	5f525044 	svcpl	0x00525044
 378:	50525452 	subspl	r5, r2, r2, asr r4
 37c:	6f502f41 	svcvs	0x00502f41
 380:	502f676e 	eorpl	r6, pc, lr, ror #14
 384:	2e676e6f 	cdpcs	14, 6, cr6, cr7, cr15, {3}
 388:	616d0063 	cmnvs	sp, r3, rrx
 38c:	6d006b73 	vstrvs	d6, [r0, #-460]	; 0xfffffe34
 390:	5f65766f 	svcpl	0x0065766f
 394:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 398:	616c7000 	cmnvs	ip, r0
 39c:	5f726579 	svcpl	0x00726579
 3a0:	6f705f32 	svcvs	0x00705f32
 3a4:	73746e69 	cmnvc	r4, #1680	; 0x690
 3a8:	6c5f7000 	mravs	r7, pc, acc0
 3ac:	00746665 	rsbseq	r6, r4, r5, ror #12
 3b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 3b4:	5f636968 	svcpl	0x00636968
 3b8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 3bc:	6165725f 	cmnvs	r5, pc, asr r2
 3c0:	63007964 	movwvs	r7, #2404	; 0x964
 3c4:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 3c8:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
 3cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 3d0:	4f500070 	svcmi	0x00500070
 3d4:	43454a42 	movtmi	r4, #23106	; 0x5a42
 3d8:	63610054 	cmnvs	r1, #84	; 0x54
 3dc:	61766974 	cmnvs	r6, r4, ror r9
 3e0:	6f526574 	svcvs	0x00526574
 3e4:	67694877 			; <UNDEFINED> instruction: 0x67694877
 3e8:	3a430068 	bcc	10c0590 <startup-0x1ef3fa70>
 3ec:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 3f0:	6f5c7372 	svcvs	0x005c7372
 3f4:	73666f6c 	cmnvc	r6, #108, 30	; 0x1b0
 3f8:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 3fc:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 400:	675c7374 			; <UNDEFINED> instruction: 0x675c7374
 404:	705f7469 	subsvc	r7, pc, r9, ror #8
 408:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 40c:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 410:	6f686353 	svcvs	0x00686353
 414:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 418:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 41c:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 420:	31305441 	teqcc	r0, r1, asr #8
 424:	614c5c37 	cmpvs	ip, r7, lsr ip
 428:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
 42c:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
 430:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
 434:	525f5250 	subspl	r5, pc, #80, 4
 438:	41505254 	cmpmi	r0, r4, asr r2
 43c:	6e6f505c 	mcrvs	0, 3, r5, cr15, cr12, {2}
 440:	6f6d0067 	svcvs	0x006d0067
 444:	64006576 	strvs	r6, [r0], #-1398	; 0xfffffa8a
 448:	5f776172 	svcpl	0x00776172
 44c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 450:	Address 0x00000450 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	00000042 	andeq	r0, r0, r2, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000009a 	mulcs	r0, sl, r0
  58:	00000046 	andeq	r0, r0, r6, asr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000f2 	strdcs	r0, [r0], -r2
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000138 	andcs	r0, r0, r8, lsr r1
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000174 	andcs	r0, r0, r4, ror r1
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001d6 	ldrdcs	r0, [r0], -r6
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000024c 	andcs	r0, r0, ip, asr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002dc 	ldrdcs	r0, [r0], -ip
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000035c 	andcs	r0, r0, ip, asr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000039c 	mulcs	r0, ip, r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003e2 	andcs	r0, r0, r2, ror #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	2000040c 	andcs	r0, r0, ip, lsl #8
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000462 	andcs	r0, r0, r2, ror #8
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004ca 	andcs	r0, r0, sl, asr #9
 1f0:	000001ca 	andeq	r0, r0, sl, asr #3
 1f4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 1f8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 1fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 200:	280e4101 	stmdacs	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	20000694 	mulcs	r0, r4, r6
 214:	00000066 	andeq	r0, r0, r6, rrx
 218:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 21c:	41018e02 	tstmi	r1, r2, lsl #28
 220:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 224:	00000007 	andeq	r0, r0, r7
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	200006fa 	strdcs	r0, [r0], -sl
 234:	00000066 	andeq	r0, r0, r6, rrx
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 244:	00000007 	andeq	r0, r0, r7
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	20000760 	andcs	r0, r0, r0, ror #14
 254:	00000064 	andeq	r0, r0, r4, rrx
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 264:	00000007 	andeq	r0, r0, r7
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	200007c4 	andcs	r0, r0, r4, asr #15
 274:	00000064 	andeq	r0, r0, r4, rrx
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 284:	00000007 	andeq	r0, r0, r7
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	20000828 	andcs	r0, r0, r8, lsr #16
 294:	00000054 	andeq	r0, r0, r4, asr r0
 298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	2000087c 	andcs	r0, r0, ip, ror r8
 2b4:	00000054 	andeq	r0, r0, r4, asr r0
 2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2bc:	41018e02 	tstmi	r1, r2, lsl #28
 2c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c4:	00000007 	andeq	r0, r0, r7
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2d4:	00000034 	andeq	r0, r0, r4, lsr r0
 2d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2dc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2e0:	41018e02 	tstmi	r1, r2, lsl #28
 2e4:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2e8:	00000007 	andeq	r0, r0, r7
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000904 	andcs	r0, r0, r4, lsl #18
 2f8:	00000046 	andeq	r0, r0, r6, asr #32
 2fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 300:	41018e02 	tstmi	r1, r2, lsl #28
 304:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 308:	00000007 	andeq	r0, r0, r7
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	2000094a 	andcs	r0, r0, sl, asr #18
 318:	00000056 	andeq	r0, r0, r6, asr r0
 31c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 320:	41018e02 	tstmi	r1, r2, lsl #28
 324:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 328:	00000007 	andeq	r0, r0, r7
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200009a0 	andcs	r0, r0, r0, lsr #19
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 340:	41018e02 	tstmi	r1, r2, lsl #28
 344:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 348:	00000007 	andeq	r0, r0, r7
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200009c0 	andcs	r0, r0, r0, asr #19
 358:	000000d8 	ldrdeq	r0, [r0], -r8
 35c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 360:	41018e02 	tstmi	r1, r2, lsl #28
 364:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 368:	00000007 	andeq	r0, r0, r7
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	20000a98 	mulcs	r0, r8, sl
 378:	0000006e 	andeq	r0, r0, lr, rrx
 37c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 380:	41018e02 	tstmi	r1, r2, lsl #28
 384:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 388:	00000007 	andeq	r0, r0, r7
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	20000b06 	andcs	r0, r0, r6, lsl #22
 398:	000000ba 	strheq	r0, [r0], -sl
 39c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a0:	41018e02 	tstmi	r1, r2, lsl #28
 3a4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3a8:	00000007 	andeq	r0, r0, r7
 3ac:	0000000c 	andeq	r0, r0, ip
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000000 	andcs	r0, r0, r0
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	00000018 	andeq	r0, r0, r8, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	20000bc0 	andcs	r0, r0, r0, asr #23
 3c8:	00000040 	andeq	r0, r0, r0, asr #32
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	00000000 	andeq	r0, r0, r0
 3e0:	20000c00 	andcs	r0, r0, r0, lsl #24
 3e4:	000000ec 	andeq	r0, r0, ip, ror #1
 3e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 3ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 3f0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 3f4:	00070d41 	andeq	r0, r7, r1, asr #26
 3f8:	0000000c 	andeq	r0, r0, ip
 3fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 400:	7c010001 	stcvc	0, cr0, [r1], {1}
 404:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 408:	0000000c 	andeq	r0, r0, ip
 40c:	000003f8 	strdeq	r0, [r0], -r8
 410:	20000ced 	andcs	r0, r0, sp, ror #25
 414:	0000010a 	andeq	r0, r0, sl, lsl #2
