
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "Startmenu.xbm"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f001 f8b2 	bl	2000116c <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	22fa      	movs	r2, #250	; 0xfa
20000064:	0091      	lsls	r1, r2, #2
20000066:	0018      	movs	r0, r3
20000068:	f001 f910 	bl	2000128c <__udivsi3>
2000006c:	0003      	movs	r3, r0
2000006e:	607b      	str	r3, [r7, #4]
	us ++;
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	3301      	adds	r3, #1
20000074:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
20000076:	2300      	movs	r3, #0
20000078:	60fb      	str	r3, [r7, #12]
2000007a:	e004      	b.n	20000086 <delay_mikro+0x2e>
		delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	009a      	lsls	r2, r3, #2
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	429a      	cmp	r2, r3
2000008e:	d8f5      	bhi.n	2000007c <delay_mikro+0x24>
	}
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b004      	add	sp, #16
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms){
2000009a:	b580      	push	{r7, lr}
2000009c:	b084      	sub	sp, #16
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f001 f8ef 	bl	2000128c <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
		ms ++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x34>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc8 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0x24>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <delay_500ns>:

void delay_500ns(){
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	delay_250ns();
200000e4:	f7ff ff94 	bl	20000010 <delay_250ns>
	delay_250ns();
200000e8:	f7ff ff92 	bl	20000010 <delay_250ns>
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_ctrl_bit_set>:
static uint8_t backBuffer[1024]; // 128 * 64 / 8


void graphic_ctrl_bit_set(uint8_t x){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	0002      	movs	r2, r0
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000fe:	4b0d      	ldr	r3, [pc, #52]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	b2db      	uxtb	r3, r3
20000104:	b25a      	sxtb	r2, r3
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	2104      	movs	r1, #4
2000010e:	438b      	bics	r3, r1
20000110:	b25b      	sxtb	r3, r3
20000112:	4313      	orrs	r3, r2
20000114:	b25a      	sxtb	r2, r3
20000116:	4b07      	ldr	r3, [pc, #28]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000118:	b2d2      	uxtb	r2, r2
2000011a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
2000011c:	4b05      	ldr	r3, [pc, #20]	; (20000134 <graphic_ctrl_bit_set+0x42>)
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	b2db      	uxtb	r3, r3
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b2db      	uxtb	r3, r3
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000144:	4b0a      	ldr	r3, [pc, #40]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	1dfa      	adds	r2, r7, #7
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	2104      	movs	r1, #4
20000152:	430a      	orrs	r2, r1
20000154:	b2d2      	uxtb	r2, r2
20000156:	b252      	sxtb	r2, r2
20000158:	43d2      	mvns	r2, r2
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	4b03      	ldr	r3, [pc, #12]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000162:	b2d2      	uxtb	r2, r2
20000164:	701a      	strb	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b002      	add	sp, #8
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <select_controller>:

void select_controller(uint8_t controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000180:	230f      	movs	r3, #15
20000182:	18fb      	adds	r3, r7, r3
20000184:	2200      	movs	r2, #0
20000186:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b18      	cmp	r3, #24
2000018e:	d01a      	beq.n	200001c6 <select_controller+0x52>
20000190:	dc1d      	bgt.n	200001ce <select_controller+0x5a>
20000192:	2b10      	cmp	r3, #16
20000194:	d010      	beq.n	200001b8 <select_controller+0x44>
20000196:	dc1a      	bgt.n	200001ce <select_controller+0x5a>
20000198:	2b00      	cmp	r3, #0
2000019a:	d002      	beq.n	200001a2 <select_controller+0x2e>
2000019c:	2b08      	cmp	r3, #8
2000019e:	d004      	beq.n	200001aa <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001a0:	e015      	b.n	200001ce <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001a2:	2018      	movs	r0, #24
200001a4:	f7ff ffc8 	bl	20000138 <graphic_ctrl_bit_clear>
200001a8:	e012      	b.n	200001d0 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001aa:	2010      	movs	r0, #16
200001ac:	f7ff ffc4 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ff9e 	bl	200000f2 <graphic_ctrl_bit_set>
200001b6:	e00b      	b.n	200001d0 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001b8:	2008      	movs	r0, #8
200001ba:	f7ff ffbd 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff97 	bl	200000f2 <graphic_ctrl_bit_set>
200001c4:	e004      	b.n	200001d0 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ff93 	bl	200000f2 <graphic_ctrl_bit_set>
200001cc:	e000      	b.n	200001d0 <select_controller+0x5c>
		default: return;
200001ce:	46c0      	nop			; (mov r8, r8)
	}
}
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}

200001d6 <graphic_wait_ready>:

void graphic_wait_ready(void){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ffab 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001e2:	4b16      	ldr	r3, [pc, #88]	; (2000023c <graphic_wait_ready+0x66>)
200001e4:	4a16      	ldr	r2, [pc, #88]	; (20000240 <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ff82 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ee:	2001      	movs	r0, #1
200001f0:	f7ff ffa2 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_500ns();
200001f4:	f7ff ff74 	bl	200000e0 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff7a 	bl	200000f2 <graphic_ctrl_bit_set>
		delay_500ns();
200001fe:	f7ff ff6f 	bl	200000e0 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
20000202:	4b10      	ldr	r3, [pc, #64]	; (20000244 <graphic_wait_ready+0x6e>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2da      	uxtb	r2, r3
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	217f      	movs	r1, #127	; 0x7f
2000020c:	438a      	bics	r2, r1
2000020e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff91 	bl	20000138 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff63 	bl	200000e0 <delay_500ns>
		if(c == 0){
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	2b00      	cmp	r3, #0
20000220:	d000      	beq.n	20000224 <graphic_wait_ready+0x4e>
	while(1){
20000222:	e7e9      	b.n	200001f8 <graphic_wait_ready+0x22>
			break;
20000224:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000226:	2040      	movs	r0, #64	; 0x40
20000228:	f7ff ff63 	bl	200000f2 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000022c:	4b03      	ldr	r3, [pc, #12]	; (2000023c <graphic_wait_ready+0x66>)
2000022e:	4a06      	ldr	r2, [pc, #24]	; (20000248 <graphic_wait_ready+0x72>)
20000230:	601a      	str	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff6d 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff44 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff80 	bl	20000174 <select_controller>
	delay_500ns();
20000274:	f7ff ff34 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff3a 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff ff2f 	bl	200000e0 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff53 	bl	20000138 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff67 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff96 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff5e 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff8d 	bl	200001d6 <graphic_wait_ready>
	}
	return rv;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff3a 	bl	20000174 <select_controller>
	delay_500ns();
20000300:	f7ff feee 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff fef4 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff fee9 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff12 	bl	20000138 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff28 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff57 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff1e 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff4d 	bl	200001d6 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed5 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff13 	bl	20000174 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fee2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fefb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff feda 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fec2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fedb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fe97 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff feb7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initialize>:

void graphic_initialize(){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6e 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe1e 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe39 	bl	2000009a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe62 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe8c 	bl	20000174 <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen(){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:
	graphic_write_data(mask, controller);
}
#endif

#ifndef OLD_PIXEL
void pixel(int x, int y, int set) {
200004ca:	b580      	push	{r7, lr}
200004cc:	b086      	sub	sp, #24
200004ce:	af00      	add	r7, sp, #0
200004d0:	60f8      	str	r0, [r7, #12]
200004d2:	60b9      	str	r1, [r7, #8]
200004d4:	607a      	str	r2, [r7, #4]
	uint8_t mask;
	int index = 0;
200004d6:	2300      	movs	r3, #0
200004d8:	617b      	str	r3, [r7, #20]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	2b80      	cmp	r3, #128	; 0x80
200004de:	dc3d      	bgt.n	2000055c <pixel+0x92>
200004e0:	68fb      	ldr	r3, [r7, #12]
200004e2:	2b00      	cmp	r3, #0
200004e4:	dd3a      	ble.n	2000055c <pixel+0x92>
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	2b40      	cmp	r3, #64	; 0x40
200004ea:	dc37      	bgt.n	2000055c <pixel+0x92>
200004ec:	68bb      	ldr	r3, [r7, #8]
200004ee:	2b00      	cmp	r3, #0
200004f0:	dd34      	ble.n	2000055c <pixel+0x92>
		mask = 1 << ((y-1)%8);
200004f2:	68bb      	ldr	r3, [r7, #8]
200004f4:	3b01      	subs	r3, #1
200004f6:	4a1b      	ldr	r2, [pc, #108]	; (20000564 <pixel+0x9a>)
200004f8:	4013      	ands	r3, r2
200004fa:	d504      	bpl.n	20000506 <pixel+0x3c>
200004fc:	3b01      	subs	r3, #1
200004fe:	2208      	movs	r2, #8
20000500:	4252      	negs	r2, r2
20000502:	4313      	orrs	r3, r2
20000504:	3301      	adds	r3, #1
20000506:	001a      	movs	r2, r3
20000508:	2301      	movs	r3, #1
2000050a:	4093      	lsls	r3, r2
2000050c:	001a      	movs	r2, r3
2000050e:	2313      	movs	r3, #19
20000510:	18fb      	adds	r3, r7, r3
20000512:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20000514:	68fb      	ldr	r3, [r7, #12]
20000516:	2b40      	cmp	r3, #64	; 0x40
20000518:	dd05      	ble.n	20000526 <pixel+0x5c>
		x -= 65;
2000051a:	68fb      	ldr	r3, [r7, #12]
2000051c:	3b41      	subs	r3, #65	; 0x41
2000051e:	60fb      	str	r3, [r7, #12]
		index = 512;
20000520:	2380      	movs	r3, #128	; 0x80
20000522:	009b      	lsls	r3, r3, #2
20000524:	617b      	str	r3, [r7, #20]
	}
	index += x + ((y-1)/8)*64;
20000526:	68bb      	ldr	r3, [r7, #8]
20000528:	3b01      	subs	r3, #1
2000052a:	2b00      	cmp	r3, #0
2000052c:	da00      	bge.n	20000530 <pixel+0x66>
2000052e:	3307      	adds	r3, #7
20000530:	10db      	asrs	r3, r3, #3
20000532:	019a      	lsls	r2, r3, #6
20000534:	68fb      	ldr	r3, [r7, #12]
20000536:	18d3      	adds	r3, r2, r3
20000538:	697a      	ldr	r2, [r7, #20]
2000053a:	18d3      	adds	r3, r2, r3
2000053c:	617b      	str	r3, [r7, #20]
	backBuffer[index] |= mask;
2000053e:	4a0a      	ldr	r2, [pc, #40]	; (20000568 <pixel+0x9e>)
20000540:	697b      	ldr	r3, [r7, #20]
20000542:	18d3      	adds	r3, r2, r3
20000544:	781a      	ldrb	r2, [r3, #0]
20000546:	2313      	movs	r3, #19
20000548:	18fb      	adds	r3, r7, r3
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	4313      	orrs	r3, r2
2000054e:	b2d9      	uxtb	r1, r3
20000550:	4a05      	ldr	r2, [pc, #20]	; (20000568 <pixel+0x9e>)
20000552:	697b      	ldr	r3, [r7, #20]
20000554:	18d3      	adds	r3, r2, r3
20000556:	1c0a      	adds	r2, r1, #0
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	e000      	b.n	2000055e <pixel+0x94>
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
2000055c:	46c0      	nop			; (mov r8, r8)
}
2000055e:	46bd      	mov	sp, r7
20000560:	b006      	add	sp, #24
20000562:	bd80      	pop	{r7, pc}
20000564:	80000007 	andhi	r0, r0, r7
20000568:	200013a4 	andcs	r1, r0, r4, lsr #7

2000056c <graphic_draw_screen>:

void graphic_draw_screen(void) {
2000056c:	b580      	push	{r7, lr}
2000056e:	b084      	sub	sp, #16
20000570:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000572:	2300      	movs	r3, #0
20000574:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
20000576:	230d      	movs	r3, #13
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2200      	movs	r2, #0
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	e04f      	b.n	20000620 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000580:	230d      	movs	r3, #13
20000582:	18fb      	adds	r3, r7, r3
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	2b00      	cmp	r3, #0
20000588:	d101      	bne.n	2000058e <graphic_draw_screen+0x22>
2000058a:	2208      	movs	r2, #8
2000058c:	e000      	b.n	20000590 <graphic_draw_screen+0x24>
2000058e:	2210      	movs	r2, #16
20000590:	1dfb      	adds	r3, r7, #7
20000592:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000594:	230e      	movs	r3, #14
20000596:	18fb      	adds	r3, r7, r3
20000598:	2200      	movs	r2, #0
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	e035      	b.n	2000060a <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000059e:	230e      	movs	r3, #14
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	2248      	movs	r2, #72	; 0x48
200005a6:	4252      	negs	r2, r2
200005a8:	4313      	orrs	r3, r2
200005aa:	b2da      	uxtb	r2, r3
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	781b      	ldrb	r3, [r3, #0]
200005b0:	0019      	movs	r1, r3
200005b2:	0010      	movs	r0, r2
200005b4:	f7ff fed2 	bl	2000035c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	0019      	movs	r1, r3
200005be:	2040      	movs	r0, #64	; 0x40
200005c0:	f7ff fecc 	bl	2000035c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	2200      	movs	r2, #0
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e012      	b.n	200005f4 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
200005ce:	4a19      	ldr	r2, [pc, #100]	; (20000634 <graphic_draw_screen+0xc8>)
200005d0:	68bb      	ldr	r3, [r7, #8]
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	781a      	ldrb	r2, [r3, #0]
200005d6:	1dfb      	adds	r3, r7, #7
200005d8:	781b      	ldrb	r3, [r3, #0]
200005da:	0019      	movs	r1, r3
200005dc:	0010      	movs	r0, r2
200005de:	f7ff fedd 	bl	2000039c <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200005e2:	210f      	movs	r1, #15
200005e4:	187b      	adds	r3, r7, r1
200005e6:	781a      	ldrb	r2, [r3, #0]
200005e8:	187b      	adds	r3, r7, r1
200005ea:	3201      	adds	r2, #1
200005ec:	701a      	strb	r2, [r3, #0]
200005ee:	68bb      	ldr	r3, [r7, #8]
200005f0:	3301      	adds	r3, #1
200005f2:	60bb      	str	r3, [r7, #8]
200005f4:	230f      	movs	r3, #15
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2b3f      	cmp	r3, #63	; 0x3f
200005fc:	d9e7      	bls.n	200005ce <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
200005fe:	210e      	movs	r1, #14
20000600:	187b      	adds	r3, r7, r1
20000602:	781a      	ldrb	r2, [r3, #0]
20000604:	187b      	adds	r3, r7, r1
20000606:	3201      	adds	r2, #1
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	230e      	movs	r3, #14
2000060c:	18fb      	adds	r3, r7, r3
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	2b07      	cmp	r3, #7
20000612:	d9c4      	bls.n	2000059e <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
20000614:	210d      	movs	r1, #13
20000616:	187b      	adds	r3, r7, r1
20000618:	781a      	ldrb	r2, [r3, #0]
2000061a:	187b      	adds	r3, r7, r1
2000061c:	3201      	adds	r2, #1
2000061e:	701a      	strb	r2, [r3, #0]
20000620:	230d      	movs	r3, #13
20000622:	18fb      	adds	r3, r7, r3
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	2b01      	cmp	r3, #1
20000628:	d9aa      	bls.n	20000580 <graphic_draw_screen+0x14>
			}
		}
	}
}
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46c0      	nop			; (mov r8, r8)
2000062e:	46bd      	mov	sp, r7
20000630:	b004      	add	sp, #16
20000632:	bd80      	pop	{r7, pc}
20000634:	200013a4 	andcs	r1, r0, r4, lsr #7

20000638 <draw_object>:

#endif


void draw_object(POBJECT o){
20000638:	b580      	push	{r7, lr}
2000063a:	b084      	sub	sp, #16
2000063c:	af00      	add	r7, sp, #0
2000063e:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000640:	2300      	movs	r3, #0
20000642:	60fb      	str	r3, [r7, #12]
20000644:	e01e      	b.n	20000684 <draw_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	681a      	ldr	r2, [r3, #0]
2000064a:	68fb      	ldr	r3, [r7, #12]
2000064c:	3304      	adds	r3, #4
2000064e:	005b      	lsls	r3, r3, #1
20000650:	18d3      	adds	r3, r2, r3
20000652:	3304      	adds	r3, #4
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	001a      	movs	r2, r3
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	68db      	ldr	r3, [r3, #12]
2000065c:	18d0      	adds	r0, r2, r3
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	681a      	ldr	r2, [r3, #0]
20000662:	68fb      	ldr	r3, [r7, #12]
20000664:	3304      	adds	r3, #4
20000666:	005b      	lsls	r3, r3, #1
20000668:	18d3      	adds	r3, r2, r3
2000066a:	3305      	adds	r3, #5
2000066c:	781b      	ldrb	r3, [r3, #0]
2000066e:	001a      	movs	r2, r3
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	691b      	ldr	r3, [r3, #16]
20000674:	18d3      	adds	r3, r2, r3
20000676:	2201      	movs	r2, #1
20000678:	0019      	movs	r1, r3
2000067a:	f7ff ff26 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
2000067e:	68fb      	ldr	r3, [r7, #12]
20000680:	3301      	adds	r3, #1
20000682:	60fb      	str	r3, [r7, #12]
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	681b      	ldr	r3, [r3, #0]
20000688:	681b      	ldr	r3, [r3, #0]
2000068a:	68fa      	ldr	r2, [r7, #12]
2000068c:	429a      	cmp	r2, r3
2000068e:	dbda      	blt.n	20000646 <draw_object+0xe>
	}
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b004      	add	sp, #16
20000698:	bd80      	pop	{r7, pc}

2000069a <clear_object>:

void clear_object(POBJECT o){
2000069a:	b580      	push	{r7, lr}
2000069c:	b084      	sub	sp, #16
2000069e:	af00      	add	r7, sp, #0
200006a0:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
200006a2:	2300      	movs	r3, #0
200006a4:	60fb      	str	r3, [r7, #12]
200006a6:	e01e      	b.n	200006e6 <clear_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	681a      	ldr	r2, [r3, #0]
200006ac:	68fb      	ldr	r3, [r7, #12]
200006ae:	3304      	adds	r3, #4
200006b0:	005b      	lsls	r3, r3, #1
200006b2:	18d3      	adds	r3, r2, r3
200006b4:	3304      	adds	r3, #4
200006b6:	781b      	ldrb	r3, [r3, #0]
200006b8:	001a      	movs	r2, r3
200006ba:	687b      	ldr	r3, [r7, #4]
200006bc:	68db      	ldr	r3, [r3, #12]
200006be:	18d0      	adds	r0, r2, r3
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	681a      	ldr	r2, [r3, #0]
200006c4:	68fb      	ldr	r3, [r7, #12]
200006c6:	3304      	adds	r3, #4
200006c8:	005b      	lsls	r3, r3, #1
200006ca:	18d3      	adds	r3, r2, r3
200006cc:	3305      	adds	r3, #5
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	001a      	movs	r2, r3
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	691b      	ldr	r3, [r3, #16]
200006d6:	18d3      	adds	r3, r2, r3
200006d8:	2200      	movs	r2, #0
200006da:	0019      	movs	r1, r3
200006dc:	f7ff fef5 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
200006e0:	68fb      	ldr	r3, [r7, #12]
200006e2:	3301      	adds	r3, #1
200006e4:	60fb      	str	r3, [r7, #12]
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	681b      	ldr	r3, [r3, #0]
200006ec:	68fa      	ldr	r2, [r7, #12]
200006ee:	429a      	cmp	r2, r3
200006f0:	dbda      	blt.n	200006a8 <clear_object+0xe>
	}
	

}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	46bd      	mov	sp, r7
200006f8:	b004      	add	sp, #16
200006fa:	bd80      	pop	{r7, pc}

200006fc <clear_backBuffer>:

void clear_backBuffer() {
200006fc:	b580      	push	{r7, lr}
200006fe:	b082      	sub	sp, #8
20000700:	af00      	add	r7, sp, #0
int i;
for (i = 0; i < 1024; i++)
20000702:	2300      	movs	r3, #0
20000704:	607b      	str	r3, [r7, #4]
20000706:	e007      	b.n	20000718 <clear_backBuffer+0x1c>
backBuffer[i] = 0;
20000708:	4a08      	ldr	r2, [pc, #32]	; (2000072c <clear_backBuffer+0x30>)
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	18d3      	adds	r3, r2, r3
2000070e:	2200      	movs	r2, #0
20000710:	701a      	strb	r2, [r3, #0]
for (i = 0; i < 1024; i++)
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	3301      	adds	r3, #1
20000716:	607b      	str	r3, [r7, #4]
20000718:	687a      	ldr	r2, [r7, #4]
2000071a:	2380      	movs	r3, #128	; 0x80
2000071c:	00db      	lsls	r3, r3, #3
2000071e:	429a      	cmp	r2, r3
20000720:	dbf2      	blt.n	20000708 <clear_backBuffer+0xc>
}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	46c0      	nop			; (mov r8, r8)
20000726:	46bd      	mov	sp, r7
20000728:	b002      	add	sp, #8
2000072a:	bd80      	pop	{r7, pc}
2000072c:	200013a4 	andcs	r1, r0, r4, lsr #7

20000730 <load_sprite>:
	unsigned char width;
	unsigned char height;
	unsigned char* data;
} sprite;

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000730:	b580      	push	{r7, lr}
20000732:	b084      	sub	sp, #16
20000734:	af00      	add	r7, sp, #0
20000736:	60f8      	str	r0, [r7, #12]
20000738:	60b9      	str	r1, [r7, #8]
2000073a:	607a      	str	r2, [r7, #4]
2000073c:	603b      	str	r3, [r7, #0]
	s->width = width;
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	b2da      	uxtb	r2, r3
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	701a      	strb	r2, [r3, #0]
	s->height = height;
20000746:	683b      	ldr	r3, [r7, #0]
20000748:	b2da      	uxtb	r2, r3
2000074a:	68fb      	ldr	r3, [r7, #12]
2000074c:	705a      	strb	r2, [r3, #1]
	s->data = data;
2000074e:	68fb      	ldr	r3, [r7, #12]
20000750:	68ba      	ldr	r2, [r7, #8]
20000752:	605a      	str	r2, [r3, #4]
}
20000754:	46c0      	nop			; (mov r8, r8)
20000756:	46bd      	mov	sp, r7
20000758:	b004      	add	sp, #16
2000075a:	bd80      	pop	{r7, pc}

2000075c <draw_sprite>:

void draw_sprite(sprite* s, int x, int y, int set) {
2000075c:	b580      	push	{r7, lr}
2000075e:	b08a      	sub	sp, #40	; 0x28
20000760:	af00      	add	r7, sp, #0
20000762:	60f8      	str	r0, [r7, #12]
20000764:	60b9      	str	r1, [r7, #8]
20000766:	607a      	str	r2, [r7, #4]
20000768:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000076a:	68fb      	ldr	r3, [r7, #12]
2000076c:	781b      	ldrb	r3, [r3, #0]
2000076e:	2207      	movs	r2, #7
20000770:	4013      	ands	r3, r2
20000772:	b2db      	uxtb	r3, r3
20000774:	2b00      	cmp	r3, #0
20000776:	d105      	bne.n	20000784 <draw_sprite+0x28>
		width_in_bytes = s->width / 8;
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	08db      	lsrs	r3, r3, #3
2000077e:	b2db      	uxtb	r3, r3
20000780:	61bb      	str	r3, [r7, #24]
20000782:	e005      	b.n	20000790 <draw_sprite+0x34>
	else
		width_in_bytes = s->width / 8 + 1;
20000784:	68fb      	ldr	r3, [r7, #12]
20000786:	781b      	ldrb	r3, [r3, #0]
20000788:	08db      	lsrs	r3, r3, #3
2000078a:	b2db      	uxtb	r3, r3
2000078c:	3301      	adds	r3, #1
2000078e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++){
20000790:	2300      	movs	r3, #0
20000792:	627b      	str	r3, [r7, #36]	; 0x24
20000794:	e039      	b.n	2000080a <draw_sprite+0xae>
		for (j = 0; j < width_in_bytes; j++) {
20000796:	2300      	movs	r3, #0
20000798:	623b      	str	r3, [r7, #32]
2000079a:	e02f      	b.n	200007fc <draw_sprite+0xa0>
			unsigned char byte = s->data[i * width_in_bytes + j];
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	685b      	ldr	r3, [r3, #4]
200007a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007a2:	69b9      	ldr	r1, [r7, #24]
200007a4:	4351      	muls	r1, r2
200007a6:	6a3a      	ldr	r2, [r7, #32]
200007a8:	188a      	adds	r2, r1, r2
200007aa:	189a      	adds	r2, r3, r2
200007ac:	2317      	movs	r3, #23
200007ae:	18fb      	adds	r3, r7, r3
200007b0:	7812      	ldrb	r2, [r2, #0]
200007b2:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
200007b4:	2300      	movs	r3, #0
200007b6:	61fb      	str	r3, [r7, #28]
200007b8:	e01a      	b.n	200007f0 <draw_sprite+0x94>
				if (byte & (1 << k))
200007ba:	2317      	movs	r3, #23
200007bc:	18fb      	adds	r3, r7, r3
200007be:	781a      	ldrb	r2, [r3, #0]
200007c0:	69fb      	ldr	r3, [r7, #28]
200007c2:	411a      	asrs	r2, r3
200007c4:	0013      	movs	r3, r2
200007c6:	2201      	movs	r2, #1
200007c8:	4013      	ands	r3, r2
200007ca:	d00e      	beq.n	200007ea <draw_sprite+0x8e>
					pixel(8 * j + k + x + 1, i + y + 1, set);
200007cc:	6a3b      	ldr	r3, [r7, #32]
200007ce:	00da      	lsls	r2, r3, #3
200007d0:	69fb      	ldr	r3, [r7, #28]
200007d2:	18d2      	adds	r2, r2, r3
200007d4:	68bb      	ldr	r3, [r7, #8]
200007d6:	18d3      	adds	r3, r2, r3
200007d8:	1c58      	adds	r0, r3, #1
200007da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	18d3      	adds	r3, r2, r3
200007e0:	3301      	adds	r3, #1
200007e2:	683a      	ldr	r2, [r7, #0]
200007e4:	0019      	movs	r1, r3
200007e6:	f7ff fe70 	bl	200004ca <pixel>
			for (k =0; k < 8; k++) {
200007ea:	69fb      	ldr	r3, [r7, #28]
200007ec:	3301      	adds	r3, #1
200007ee:	61fb      	str	r3, [r7, #28]
200007f0:	69fb      	ldr	r3, [r7, #28]
200007f2:	2b07      	cmp	r3, #7
200007f4:	dde1      	ble.n	200007ba <draw_sprite+0x5e>
		for (j = 0; j < width_in_bytes; j++) {
200007f6:	6a3b      	ldr	r3, [r7, #32]
200007f8:	3301      	adds	r3, #1
200007fa:	623b      	str	r3, [r7, #32]
200007fc:	6a3a      	ldr	r2, [r7, #32]
200007fe:	69bb      	ldr	r3, [r7, #24]
20000800:	429a      	cmp	r2, r3
20000802:	dbcb      	blt.n	2000079c <draw_sprite+0x40>
	for (i = 0; i < s->height; i++){
20000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000806:	3301      	adds	r3, #1
20000808:	627b      	str	r3, [r7, #36]	; 0x24
2000080a:	68fb      	ldr	r3, [r7, #12]
2000080c:	785b      	ldrb	r3, [r3, #1]
2000080e:	001a      	movs	r2, r3
20000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000812:	4293      	cmp	r3, r2
20000814:	dbbf      	blt.n	20000796 <draw_sprite+0x3a>
			}
		}
	}
20000816:	46c0      	nop			; (mov r8, r8)
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46bd      	mov	sp, r7
2000081c:	b00a      	add	sp, #40	; 0x28
2000081e:	bd80      	pop	{r7, pc}

20000820 <activateRowHigh>:


void activateRowHigh(int row){
20000820:	b580      	push	{r7, lr}
20000822:	b082      	sub	sp, #8
20000824:	af00      	add	r7, sp, #0
20000826:	6078      	str	r0, [r7, #4]
	switch(row){
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	2b03      	cmp	r3, #3
2000082c:	d01b      	beq.n	20000866 <activateRowHigh+0x46>
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	2b03      	cmp	r3, #3
20000832:	dc1c      	bgt.n	2000086e <activateRowHigh+0x4e>
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	2b02      	cmp	r3, #2
20000838:	d011      	beq.n	2000085e <activateRowHigh+0x3e>
2000083a:	687b      	ldr	r3, [r7, #4]
2000083c:	2b02      	cmp	r3, #2
2000083e:	dc16      	bgt.n	2000086e <activateRowHigh+0x4e>
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	2b00      	cmp	r3, #0
20000844:	d003      	beq.n	2000084e <activateRowHigh+0x2e>
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	2b01      	cmp	r3, #1
2000084a:	d004      	beq.n	20000856 <activateRowHigh+0x36>
2000084c:	e00f      	b.n	2000086e <activateRowHigh+0x4e>
		case 0: * GPIOD_ODR_HIGH = 0x10; break;
2000084e:	4b0c      	ldr	r3, [pc, #48]	; (20000880 <activateRowHigh+0x60>)
20000850:	2210      	movs	r2, #16
20000852:	701a      	strb	r2, [r3, #0]
20000854:	e00f      	b.n	20000876 <activateRowHigh+0x56>
		case 1: * GPIOD_ODR_HIGH = 0x20; break;
20000856:	4b0a      	ldr	r3, [pc, #40]	; (20000880 <activateRowHigh+0x60>)
20000858:	2220      	movs	r2, #32
2000085a:	701a      	strb	r2, [r3, #0]
2000085c:	e00b      	b.n	20000876 <activateRowHigh+0x56>
		case 2: * GPIOD_ODR_HIGH = 0x40; break;
2000085e:	4b08      	ldr	r3, [pc, #32]	; (20000880 <activateRowHigh+0x60>)
20000860:	2240      	movs	r2, #64	; 0x40
20000862:	701a      	strb	r2, [r3, #0]
20000864:	e007      	b.n	20000876 <activateRowHigh+0x56>
		case 3: * GPIOD_ODR_HIGH = 0x80; break;
20000866:	4b06      	ldr	r3, [pc, #24]	; (20000880 <activateRowHigh+0x60>)
20000868:	2280      	movs	r2, #128	; 0x80
2000086a:	701a      	strb	r2, [r3, #0]
2000086c:	e003      	b.n	20000876 <activateRowHigh+0x56>
		default: * GPIOD_ODR_HIGH = 0x0;
2000086e:	4b04      	ldr	r3, [pc, #16]	; (20000880 <activateRowHigh+0x60>)
20000870:	2200      	movs	r2, #0
20000872:	701a      	strb	r2, [r3, #0]
	}
}
20000874:	46c0      	nop			; (mov r8, r8)
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	46bd      	mov	sp, r7
2000087a:	b002      	add	sp, #8
2000087c:	bd80      	pop	{r7, pc}
2000087e:	46c0      	nop			; (mov r8, r8)
20000880:	40020c15 	andmi	r0, r2, r5, lsl ip

20000884 <activateRowLow>:

void activateRowLow(int row){
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
2000088a:	6078      	str	r0, [r7, #4]
	switch(row){
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	2b03      	cmp	r3, #3
20000890:	d01b      	beq.n	200008ca <activateRowLow+0x46>
20000892:	687b      	ldr	r3, [r7, #4]
20000894:	2b03      	cmp	r3, #3
20000896:	dc1c      	bgt.n	200008d2 <activateRowLow+0x4e>
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	2b02      	cmp	r3, #2
2000089c:	d011      	beq.n	200008c2 <activateRowLow+0x3e>
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	2b02      	cmp	r3, #2
200008a2:	dc16      	bgt.n	200008d2 <activateRowLow+0x4e>
200008a4:	687b      	ldr	r3, [r7, #4]
200008a6:	2b00      	cmp	r3, #0
200008a8:	d003      	beq.n	200008b2 <activateRowLow+0x2e>
200008aa:	687b      	ldr	r3, [r7, #4]
200008ac:	2b01      	cmp	r3, #1
200008ae:	d004      	beq.n	200008ba <activateRowLow+0x36>
200008b0:	e00f      	b.n	200008d2 <activateRowLow+0x4e>
		case 0: * GPIOD_ODR_LOW = 0x10; break;
200008b2:	4b0c      	ldr	r3, [pc, #48]	; (200008e4 <activateRowLow+0x60>)
200008b4:	2210      	movs	r2, #16
200008b6:	701a      	strb	r2, [r3, #0]
200008b8:	e00f      	b.n	200008da <activateRowLow+0x56>
		case 1: * GPIOD_ODR_LOW = 0x20; break;
200008ba:	4b0a      	ldr	r3, [pc, #40]	; (200008e4 <activateRowLow+0x60>)
200008bc:	2220      	movs	r2, #32
200008be:	701a      	strb	r2, [r3, #0]
200008c0:	e00b      	b.n	200008da <activateRowLow+0x56>
		case 2: * GPIOD_ODR_LOW = 0x40; break;
200008c2:	4b08      	ldr	r3, [pc, #32]	; (200008e4 <activateRowLow+0x60>)
200008c4:	2240      	movs	r2, #64	; 0x40
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	e007      	b.n	200008da <activateRowLow+0x56>
		case 3: * GPIOD_ODR_LOW = 0x80; break;
200008ca:	4b06      	ldr	r3, [pc, #24]	; (200008e4 <activateRowLow+0x60>)
200008cc:	2280      	movs	r2, #128	; 0x80
200008ce:	701a      	strb	r2, [r3, #0]
200008d0:	e003      	b.n	200008da <activateRowLow+0x56>
		default: * GPIOD_ODR_LOW = 0x0;
200008d2:	4b04      	ldr	r3, [pc, #16]	; (200008e4 <activateRowLow+0x60>)
200008d4:	2200      	movs	r2, #0
200008d6:	701a      	strb	r2, [r3, #0]
	}
}
200008d8:	46c0      	nop			; (mov r8, r8)
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	46bd      	mov	sp, r7
200008de:	b002      	add	sp, #8
200008e0:	bd80      	pop	{r7, pc}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	40020c14 	andmi	r0, r2, r4, lsl ip

200008e8 <readColumnHigh>:

int readColumnHigh(){
200008e8:	b580      	push	{r7, lr}
200008ea:	b082      	sub	sp, #8
200008ec:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_HIGH;
200008ee:	4a12      	ldr	r2, [pc, #72]	; (20000938 <readColumnHigh+0x50>)
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	7812      	ldrb	r2, [r2, #0]
200008f4:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
200008f6:	1dfb      	adds	r3, r7, #7
200008f8:	781b      	ldrb	r3, [r3, #0]
200008fa:	2208      	movs	r2, #8
200008fc:	4013      	ands	r3, r2
200008fe:	d001      	beq.n	20000904 <readColumnHigh+0x1c>
20000900:	2303      	movs	r3, #3
20000902:	e015      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x4){return 2;}
20000904:	1dfb      	adds	r3, r7, #7
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	2204      	movs	r2, #4
2000090a:	4013      	ands	r3, r2
2000090c:	d001      	beq.n	20000912 <readColumnHigh+0x2a>
2000090e:	2302      	movs	r3, #2
20000910:	e00e      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x2){return 1;}
20000912:	1dfb      	adds	r3, r7, #7
20000914:	781b      	ldrb	r3, [r3, #0]
20000916:	2202      	movs	r2, #2
20000918:	4013      	ands	r3, r2
2000091a:	d001      	beq.n	20000920 <readColumnHigh+0x38>
2000091c:	2301      	movs	r3, #1
2000091e:	e007      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x1){return 0;}
20000920:	1dfb      	adds	r3, r7, #7
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	2201      	movs	r2, #1
20000926:	4013      	ands	r3, r2
20000928:	d001      	beq.n	2000092e <readColumnHigh+0x46>
2000092a:	2300      	movs	r3, #0
2000092c:	e000      	b.n	20000930 <readColumnHigh+0x48>
	return 4;
2000092e:	2304      	movs	r3, #4
}
20000930:	0018      	movs	r0, r3
20000932:	46bd      	mov	sp, r7
20000934:	b002      	add	sp, #8
20000936:	bd80      	pop	{r7, pc}
20000938:	40020c11 	andmi	r0, r2, r1, lsl ip

2000093c <readColumnLow>:

int readColumnLow(){
2000093c:	b580      	push	{r7, lr}
2000093e:	b082      	sub	sp, #8
20000940:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_LOW;
20000942:	4a12      	ldr	r2, [pc, #72]	; (2000098c <readColumnLow+0x50>)
20000944:	1dfb      	adds	r3, r7, #7
20000946:	7812      	ldrb	r2, [r2, #0]
20000948:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000094a:	1dfb      	adds	r3, r7, #7
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	2208      	movs	r2, #8
20000950:	4013      	ands	r3, r2
20000952:	d001      	beq.n	20000958 <readColumnLow+0x1c>
20000954:	2303      	movs	r3, #3
20000956:	e015      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x4){return 2;}
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	2204      	movs	r2, #4
2000095e:	4013      	ands	r3, r2
20000960:	d001      	beq.n	20000966 <readColumnLow+0x2a>
20000962:	2302      	movs	r3, #2
20000964:	e00e      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x2){return 1;}
20000966:	1dfb      	adds	r3, r7, #7
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2202      	movs	r2, #2
2000096c:	4013      	ands	r3, r2
2000096e:	d001      	beq.n	20000974 <readColumnLow+0x38>
20000970:	2301      	movs	r3, #1
20000972:	e007      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x1){return 0;}
20000974:	1dfb      	adds	r3, r7, #7
20000976:	781b      	ldrb	r3, [r3, #0]
20000978:	2201      	movs	r2, #1
2000097a:	4013      	ands	r3, r2
2000097c:	d001      	beq.n	20000982 <readColumnLow+0x46>
2000097e:	2300      	movs	r3, #0
20000980:	e000      	b.n	20000984 <readColumnLow+0x48>
	return 4;
20000982:	2304      	movs	r3, #4
}
20000984:	0018      	movs	r0, r3
20000986:	46bd      	mov	sp, r7
20000988:	b002      	add	sp, #8
2000098a:	bd80      	pop	{r7, pc}
2000098c:	40020c10 	andmi	r0, r2, r0, lsl ip

20000990 <getKeyValue>:

int getKeyValue(int row, int column){
20000990:	b5b0      	push	{r4, r5, r7, lr}
20000992:	b086      	sub	sp, #24
20000994:	af00      	add	r7, sp, #0
20000996:	6078      	str	r0, [r7, #4]
20000998:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
2000099a:	2108      	movs	r1, #8
2000099c:	187b      	adds	r3, r7, r1
2000099e:	4a08      	ldr	r2, [pc, #32]	; (200009c0 <getKeyValue+0x30>)
200009a0:	ca31      	ldmia	r2!, {r0, r4, r5}
200009a2:	c331      	stmia	r3!, {r0, r4, r5}
200009a4:	6812      	ldr	r2, [r2, #0]
200009a6:	601a      	str	r2, [r3, #0]
	return keys[row][column];
200009a8:	187a      	adds	r2, r7, r1
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	009b      	lsls	r3, r3, #2
200009ae:	18d2      	adds	r2, r2, r3
200009b0:	683b      	ldr	r3, [r7, #0]
200009b2:	18d3      	adds	r3, r2, r3
200009b4:	781b      	ldrb	r3, [r3, #0]
}
200009b6:	0018      	movs	r0, r3
200009b8:	46bd      	mov	sp, r7
200009ba:	b006      	add	sp, #24
200009bc:	bdb0      	pop	{r4, r5, r7, pc}
200009be:	46c0      	nop			; (mov r8, r8)
200009c0:	2000309c 	mulcs	r0, ip, r0

200009c4 <keybHigh>:


unsigned char keybHigh(){
200009c4:	b580      	push	{r7, lr}
200009c6:	b082      	sub	sp, #8
200009c8:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
200009ca:	2300      	movs	r3, #0
200009cc:	607b      	str	r3, [r7, #4]
200009ce:	e01c      	b.n	20000a0a <keybHigh+0x46>
		activateRowHigh(row);
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	0018      	movs	r0, r3
200009d4:	f7ff ff24 	bl	20000820 <activateRowHigh>
		column = readColumnHigh();
200009d8:	f7ff ff86 	bl	200008e8 <readColumnHigh>
200009dc:	0002      	movs	r2, r0
200009de:	1cfb      	adds	r3, r7, #3
200009e0:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	781b      	ldrb	r3, [r3, #0]
200009e6:	2b04      	cmp	r3, #4
200009e8:	d00c      	beq.n	20000a04 <keybHigh+0x40>
			key = getKeyValue(row, column);
200009ea:	1cfb      	adds	r3, r7, #3
200009ec:	781a      	ldrb	r2, [r3, #0]
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	0011      	movs	r1, r2
200009f2:	0018      	movs	r0, r3
200009f4:	f7ff ffcc 	bl	20000990 <getKeyValue>
200009f8:	0002      	movs	r2, r0
200009fa:	1cbb      	adds	r3, r7, #2
200009fc:	701a      	strb	r2, [r3, #0]
			return key;
200009fe:	1cbb      	adds	r3, r7, #2
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	e006      	b.n	20000a12 <keybHigh+0x4e>
	for(int row = 0; row < 4; row++){
20000a04:	687b      	ldr	r3, [r7, #4]
20000a06:	3301      	adds	r3, #1
20000a08:	607b      	str	r3, [r7, #4]
20000a0a:	687b      	ldr	r3, [r7, #4]
20000a0c:	2b03      	cmp	r3, #3
20000a0e:	dddf      	ble.n	200009d0 <keybHigh+0xc>
		}
	}
	return -1;
20000a10:	23ff      	movs	r3, #255	; 0xff
}
20000a12:	0018      	movs	r0, r3
20000a14:	46bd      	mov	sp, r7
20000a16:	b002      	add	sp, #8
20000a18:	bd80      	pop	{r7, pc}

20000a1a <keybLow>:

unsigned char keybLow(){
20000a1a:	b580      	push	{r7, lr}
20000a1c:	b082      	sub	sp, #8
20000a1e:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000a20:	2300      	movs	r3, #0
20000a22:	607b      	str	r3, [r7, #4]
20000a24:	e01c      	b.n	20000a60 <keybLow+0x46>
		activateRowLow(row);
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	0018      	movs	r0, r3
20000a2a:	f7ff ff2b 	bl	20000884 <activateRowLow>
		column = readColumnLow();
20000a2e:	f7ff ff85 	bl	2000093c <readColumnLow>
20000a32:	0002      	movs	r2, r0
20000a34:	1cfb      	adds	r3, r7, #3
20000a36:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000a38:	1cfb      	adds	r3, r7, #3
20000a3a:	781b      	ldrb	r3, [r3, #0]
20000a3c:	2b04      	cmp	r3, #4
20000a3e:	d00c      	beq.n	20000a5a <keybLow+0x40>
			key = getKeyValue(row, column);
20000a40:	1cfb      	adds	r3, r7, #3
20000a42:	781a      	ldrb	r2, [r3, #0]
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	0011      	movs	r1, r2
20000a48:	0018      	movs	r0, r3
20000a4a:	f7ff ffa1 	bl	20000990 <getKeyValue>
20000a4e:	0002      	movs	r2, r0
20000a50:	1cbb      	adds	r3, r7, #2
20000a52:	701a      	strb	r2, [r3, #0]
			return key;
20000a54:	1cbb      	adds	r3, r7, #2
20000a56:	781b      	ldrb	r3, [r3, #0]
20000a58:	e006      	b.n	20000a68 <keybLow+0x4e>
	for(int row = 0; row < 4; row++){
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	3301      	adds	r3, #1
20000a5e:	607b      	str	r3, [r7, #4]
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	2b03      	cmp	r3, #3
20000a64:	dddf      	ble.n	20000a26 <keybLow+0xc>
		}
	}
	return -1;
20000a66:	23ff      	movs	r3, #255	; 0xff
20000a68:	0018      	movs	r0, r3
20000a6a:	46bd      	mov	sp, r7
20000a6c:	b002      	add	sp, #8
20000a6e:	bd80      	pop	{r7, pc}

20000a70 <set_object_speed>:
static uint8_t player_right_points = 4;
static uint8_t player_left_points = 5; 

void set_object_speed(POBJECT o, int speedx, int speedy){
20000a70:	b580      	push	{r7, lr}
20000a72:	b084      	sub	sp, #16
20000a74:	af00      	add	r7, sp, #0
20000a76:	60f8      	str	r0, [r7, #12]
20000a78:	60b9      	str	r1, [r7, #8]
20000a7a:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000a7c:	68fb      	ldr	r3, [r7, #12]
20000a7e:	68ba      	ldr	r2, [r7, #8]
20000a80:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
20000a82:	68fb      	ldr	r3, [r7, #12]
20000a84:	687a      	ldr	r2, [r7, #4]
20000a86:	609a      	str	r2, [r3, #8]
}
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b004      	add	sp, #16
20000a8e:	bd80      	pop	{r7, pc}

20000a90 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
20000a90:	b580      	push	{r7, lr}
20000a92:	b084      	sub	sp, #16
20000a94:	af00      	add	r7, sp, #0
20000a96:	6078      	str	r0, [r7, #4]
20000a98:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	int newx = o->posx + o->dx;
20000a9a:	687b      	ldr	r3, [r7, #4]
20000a9c:	68da      	ldr	r2, [r3, #12]
20000a9e:	687b      	ldr	r3, [r7, #4]
20000aa0:	685b      	ldr	r3, [r3, #4]
20000aa2:	18d3      	adds	r3, r2, r3
20000aa4:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	691a      	ldr	r2, [r3, #16]
20000aaa:	687b      	ldr	r3, [r7, #4]
20000aac:	689b      	ldr	r3, [r3, #8]
20000aae:	18d3      	adds	r3, r2, r3
20000ab0:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
20000ab2:	68fb      	ldr	r3, [r7, #12]
20000ab4:	2b00      	cmp	r3, #0
20000ab6:	dc16      	bgt.n	20000ae6 <move_ball+0x56>
		o->posx = 64;
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	2240      	movs	r2, #64	; 0x40
20000abc:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000abe:	687b      	ldr	r3, [r7, #4]
20000ac0:	2220      	movs	r2, #32
20000ac2:	611a      	str	r2, [r3, #16]
		player_right_points++;
20000ac4:	4b2e      	ldr	r3, [pc, #184]	; (20000b80 <move_ball+0xf0>)
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	3301      	adds	r3, #1
20000aca:	b2da      	uxtb	r2, r3
20000acc:	4b2c      	ldr	r3, [pc, #176]	; (20000b80 <move_ball+0xf0>)
20000ace:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(15,2);
20000ad0:	2102      	movs	r1, #2
20000ad2:	200f      	movs	r0, #15
20000ad4:	f000 f9f5 	bl	20000ec2 <ascii_gotoxy>
		ascii_write_char(player_right_points + 48);
20000ad8:	4b29      	ldr	r3, [pc, #164]	; (20000b80 <move_ball+0xf0>)
20000ada:	781b      	ldrb	r3, [r3, #0]
20000adc:	3330      	adds	r3, #48	; 0x30
20000ade:	0018      	movs	r0, r3
20000ae0:	f000 fa16 	bl	20000f10 <ascii_write_char>
20000ae4:	e044      	b.n	20000b70 <move_ball+0xe0>
	}
	else if((newx + o->geo->sizex) > 128){
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	681b      	ldr	r3, [r3, #0]
20000aea:	685a      	ldr	r2, [r3, #4]
20000aec:	68fb      	ldr	r3, [r7, #12]
20000aee:	18d3      	adds	r3, r2, r3
20000af0:	2b80      	cmp	r3, #128	; 0x80
20000af2:	dd16      	ble.n	20000b22 <move_ball+0x92>
		o->posx = 64;
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	2240      	movs	r2, #64	; 0x40
20000af8:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	2220      	movs	r2, #32
20000afe:	611a      	str	r2, [r3, #16]
		player_left_points++;
20000b00:	4b20      	ldr	r3, [pc, #128]	; (20000b84 <move_ball+0xf4>)
20000b02:	781b      	ldrb	r3, [r3, #0]
20000b04:	3301      	adds	r3, #1
20000b06:	b2da      	uxtb	r2, r3
20000b08:	4b1e      	ldr	r3, [pc, #120]	; (20000b84 <move_ball+0xf4>)
20000b0a:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(14,1);
20000b0c:	2101      	movs	r1, #1
20000b0e:	200e      	movs	r0, #14
20000b10:	f000 f9d7 	bl	20000ec2 <ascii_gotoxy>
		ascii_write_char(player_left_points + 48);
20000b14:	4b1b      	ldr	r3, [pc, #108]	; (20000b84 <move_ball+0xf4>)
20000b16:	781b      	ldrb	r3, [r3, #0]
20000b18:	3330      	adds	r3, #48	; 0x30
20000b1a:	0018      	movs	r0, r3
20000b1c:	f000 f9f8 	bl	20000f10 <ascii_write_char>
20000b20:	e026      	b.n	20000b70 <move_ball+0xe0>
	}
	else if(newy < 1){
20000b22:	68bb      	ldr	r3, [r7, #8]
20000b24:	2b00      	cmp	r3, #0
20000b26:	dc08      	bgt.n	20000b3a <move_ball+0xaa>
		o->dy = -o->dy;
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	689b      	ldr	r3, [r3, #8]
20000b2c:	425a      	negs	r2, r3
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	2201      	movs	r2, #1
20000b36:	611a      	str	r2, [r3, #16]
20000b38:	e01a      	b.n	20000b70 <move_ball+0xe0>
	}
	else if(newy > 64 - o->geo->sizey){
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	681b      	ldr	r3, [r3, #0]
20000b3e:	689b      	ldr	r3, [r3, #8]
20000b40:	2240      	movs	r2, #64	; 0x40
20000b42:	1ad3      	subs	r3, r2, r3
20000b44:	68ba      	ldr	r2, [r7, #8]
20000b46:	429a      	cmp	r2, r3
20000b48:	dd0c      	ble.n	20000b64 <move_ball+0xd4>
		o->dy = -o->dy;
20000b4a:	687b      	ldr	r3, [r7, #4]
20000b4c:	689b      	ldr	r3, [r3, #8]
20000b4e:	425a      	negs	r2, r3
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000b54:	687b      	ldr	r3, [r7, #4]
20000b56:	681b      	ldr	r3, [r3, #0]
20000b58:	689b      	ldr	r3, [r3, #8]
20000b5a:	2240      	movs	r2, #64	; 0x40
20000b5c:	1ad2      	subs	r2, r2, r3
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	611a      	str	r2, [r3, #16]
20000b62:	e005      	b.n	20000b70 <move_ball+0xe0>
	}else{
		o->posx = newx;
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	68fa      	ldr	r2, [r7, #12]
20000b68:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	68ba      	ldr	r2, [r7, #8]
20000b6e:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	0018      	movs	r0, r3
20000b74:	f7ff fd60 	bl	20000638 <draw_object>
}
20000b78:	46c0      	nop			; (mov r8, r8)
20000b7a:	46bd      	mov	sp, r7
20000b7c:	b004      	add	sp, #16
20000b7e:	bd80      	pop	{r7, pc}
20000b80:	200017a4 	andcs	r1, r0, r4, lsr #15
20000b84:	200017a5 	andcs	r1, r0, r5, lsr #15

20000b88 <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
20000b88:	b580      	push	{r7, lr}
20000b8a:	b084      	sub	sp, #16
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	60f8      	str	r0, [r7, #12]
20000b90:	60b9      	str	r1, [r7, #8]
20000b92:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	68da      	ldr	r2, [r3, #12]
20000b98:	687b      	ldr	r3, [r7, #4]
20000b9a:	681b      	ldr	r3, [r3, #0]
20000b9c:	685b      	ldr	r3, [r3, #4]
20000b9e:	18d2      	adds	r2, r2, r3
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	68db      	ldr	r3, [r3, #12]
20000ba4:	429a      	cmp	r2, r3
20000ba6:	db21      	blt.n	20000bec <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	68da      	ldr	r2, [r3, #12]
20000bac:	68fb      	ldr	r3, [r7, #12]
20000bae:	68d9      	ldr	r1, [r3, #12]
20000bb0:	68fb      	ldr	r3, [r7, #12]
20000bb2:	681b      	ldr	r3, [r3, #0]
20000bb4:	685b      	ldr	r3, [r3, #4]
20000bb6:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000bb8:	429a      	cmp	r2, r3
20000bba:	da17      	bge.n	20000bec <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	691a      	ldr	r2, [r3, #16]
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	681b      	ldr	r3, [r3, #0]
20000bc4:	689b      	ldr	r3, [r3, #8]
20000bc6:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000bc8:	68ba      	ldr	r2, [r7, #8]
20000bca:	429a      	cmp	r2, r3
20000bcc:	dc0e      	bgt.n	20000bec <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	691a      	ldr	r2, [r3, #16]
20000bd2:	68fb      	ldr	r3, [r7, #12]
20000bd4:	681b      	ldr	r3, [r3, #0]
20000bd6:	6899      	ldr	r1, [r3, #8]
20000bd8:	68bb      	ldr	r3, [r7, #8]
20000bda:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000bdc:	429a      	cmp	r2, r3
20000bde:	da05      	bge.n	20000bec <collision_with_ball+0x64>
			clear_object(ball);
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	0018      	movs	r0, r3
20000be4:	f7ff fd59 	bl	2000069a <clear_object>
			   return 1;
20000be8:	2301      	movs	r3, #1
20000bea:	e000      	b.n	20000bee <collision_with_ball+0x66>
		   }
	return 0;
20000bec:	2300      	movs	r3, #0
}
20000bee:	0018      	movs	r0, r3
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b004      	add	sp, #16
20000bf4:	bd80      	pop	{r7, pc}

20000bf6 <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000bf6:	b580      	push	{r7, lr}
20000bf8:	b084      	sub	sp, #16
20000bfa:	af00      	add	r7, sp, #0
20000bfc:	6078      	str	r0, [r7, #4]
20000bfe:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	
	int newy = o->posy + o->dy;
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	691a      	ldr	r2, [r3, #16]
20000c04:	687b      	ldr	r3, [r7, #4]
20000c06:	689b      	ldr	r3, [r3, #8]
20000c08:	18d3      	adds	r3, r2, r3
20000c0a:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000c0c:	683a      	ldr	r2, [r7, #0]
20000c0e:	68f9      	ldr	r1, [r7, #12]
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	0018      	movs	r0, r3
20000c14:	f7ff ffb8 	bl	20000b88 <collision_with_ball>
20000c18:	1e03      	subs	r3, r0, #0
20000c1a:	d019      	beq.n	20000c50 <move_paddle+0x5a>
		if(o->posx < 64){
20000c1c:	687b      	ldr	r3, [r7, #4]
20000c1e:	68db      	ldr	r3, [r3, #12]
20000c20:	2b3f      	cmp	r3, #63	; 0x3f
20000c22:	dc08      	bgt.n	20000c36 <move_paddle+0x40>
			ball->dx = -(ball->dx);
20000c24:	683b      	ldr	r3, [r7, #0]
20000c26:	685b      	ldr	r3, [r3, #4]
20000c28:	425a      	negs	r2, r3
20000c2a:	683b      	ldr	r3, [r7, #0]
20000c2c:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000c2e:	683b      	ldr	r3, [r7, #0]
20000c30:	2234      	movs	r2, #52	; 0x34
20000c32:	60da      	str	r2, [r3, #12]
20000c34:	e007      	b.n	20000c46 <move_paddle+0x50>
		}else{
			ball->dx = (ball->dx)*(-1);
20000c36:	683b      	ldr	r3, [r7, #0]
20000c38:	685b      	ldr	r3, [r3, #4]
20000c3a:	425a      	negs	r2, r3
20000c3c:	683b      	ldr	r3, [r7, #0]
20000c3e:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000c40:	683b      	ldr	r3, [r7, #0]
20000c42:	224a      	movs	r2, #74	; 0x4a
20000c44:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000c46:	683b      	ldr	r3, [r7, #0]
20000c48:	0018      	movs	r0, r3
20000c4a:	f7ff fcf5 	bl	20000638 <draw_object>
20000c4e:	e023      	b.n	20000c98 <move_paddle+0xa2>
	}

	else if(newy < 1){
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	2b00      	cmp	r3, #0
20000c54:	dc08      	bgt.n	20000c68 <move_paddle+0x72>
		o->dy = -o->dy;
20000c56:	687b      	ldr	r3, [r7, #4]
20000c58:	689b      	ldr	r3, [r3, #8]
20000c5a:	425a      	negs	r2, r3
20000c5c:	687b      	ldr	r3, [r7, #4]
20000c5e:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	2201      	movs	r2, #1
20000c64:	611a      	str	r2, [r3, #16]
20000c66:	e017      	b.n	20000c98 <move_paddle+0xa2>
	}
	else if(newy > 64 - o->geo->sizey){
20000c68:	687b      	ldr	r3, [r7, #4]
20000c6a:	681b      	ldr	r3, [r3, #0]
20000c6c:	689b      	ldr	r3, [r3, #8]
20000c6e:	2240      	movs	r2, #64	; 0x40
20000c70:	1ad3      	subs	r3, r2, r3
20000c72:	68fa      	ldr	r2, [r7, #12]
20000c74:	429a      	cmp	r2, r3
20000c76:	dd0c      	ble.n	20000c92 <move_paddle+0x9c>
		o->dy = -o->dy;
20000c78:	687b      	ldr	r3, [r7, #4]
20000c7a:	689b      	ldr	r3, [r3, #8]
20000c7c:	425a      	negs	r2, r3
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000c82:	687b      	ldr	r3, [r7, #4]
20000c84:	681b      	ldr	r3, [r3, #0]
20000c86:	689b      	ldr	r3, [r3, #8]
20000c88:	2240      	movs	r2, #64	; 0x40
20000c8a:	1ad2      	subs	r2, r2, r3
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	611a      	str	r2, [r3, #16]
20000c90:	e002      	b.n	20000c98 <move_paddle+0xa2>
	}else{
		o->posy = newy;
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	68fa      	ldr	r2, [r7, #12]
20000c96:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	0018      	movs	r0, r3
20000c9c:	f7ff fccc 	bl	20000638 <draw_object>
}
20000ca0:	46c0      	nop			; (mov r8, r8)
20000ca2:	46bd      	mov	sp, r7
20000ca4:	b004      	add	sp, #16
20000ca6:	bd80      	pop	{r7, pc}

20000ca8 <ascii_ctrl_bit_set>:
#define B_CS1 8




void ascii_ctrl_bit_set(unsigned char x){
20000ca8:	b580      	push	{r7, lr}
20000caa:	b082      	sub	sp, #8
20000cac:	af00      	add	r7, sp, #0
20000cae:	0002      	movs	r2, r0
20000cb0:	1dfb      	adds	r3, r7, #7
20000cb2:	701a      	strb	r2, [r3, #0]
	(* portOdrLow) |=x|B_SELECT;
20000cb4:	4b07      	ldr	r3, [pc, #28]	; (20000cd4 <ascii_ctrl_bit_set+0x2c>)
20000cb6:	781b      	ldrb	r3, [r3, #0]
20000cb8:	b2da      	uxtb	r2, r3
20000cba:	1dfb      	adds	r3, r7, #7
20000cbc:	781b      	ldrb	r3, [r3, #0]
20000cbe:	4313      	orrs	r3, r2
20000cc0:	b2db      	uxtb	r3, r3
20000cc2:	4a04      	ldr	r2, [pc, #16]	; (20000cd4 <ascii_ctrl_bit_set+0x2c>)
20000cc4:	2104      	movs	r1, #4
20000cc6:	430b      	orrs	r3, r1
20000cc8:	b2db      	uxtb	r3, r3
20000cca:	7013      	strb	r3, [r2, #0]
}
20000ccc:	46c0      	nop			; (mov r8, r8)
20000cce:	46bd      	mov	sp, r7
20000cd0:	b002      	add	sp, #8
20000cd2:	bd80      	pop	{r7, pc}
20000cd4:	40021014 	andmi	r1, r2, r4, lsl r0

20000cd8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000cd8:	b580      	push	{r7, lr}
20000cda:	b084      	sub	sp, #16
20000cdc:	af00      	add	r7, sp, #0
20000cde:	0002      	movs	r2, r0
20000ce0:	1dfb      	adds	r3, r7, #7
20000ce2:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
20000ce4:	200f      	movs	r0, #15
20000ce6:	183b      	adds	r3, r7, r0
20000ce8:	1dfa      	adds	r2, r7, #7
20000cea:	7812      	ldrb	r2, [r2, #0]
20000cec:	43d2      	mvns	r2, r2
20000cee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &=notX;
20000cf0:	4b0a      	ldr	r3, [pc, #40]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000cf2:	781b      	ldrb	r3, [r3, #0]
20000cf4:	b2db      	uxtb	r3, r3
20000cf6:	4909      	ldr	r1, [pc, #36]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000cf8:	183a      	adds	r2, r7, r0
20000cfa:	7812      	ldrb	r2, [r2, #0]
20000cfc:	4013      	ands	r3, r2
20000cfe:	b2db      	uxtb	r3, r3
20000d00:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
20000d02:	4b06      	ldr	r3, [pc, #24]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000d04:	781b      	ldrb	r3, [r3, #0]
20000d06:	b2db      	uxtb	r3, r3
20000d08:	4a04      	ldr	r2, [pc, #16]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000d0a:	2104      	movs	r1, #4
20000d0c:	430b      	orrs	r3, r1
20000d0e:	b2db      	uxtb	r3, r3
20000d10:	7013      	strb	r3, [r2, #0]
}
20000d12:	46c0      	nop			; (mov r8, r8)
20000d14:	46bd      	mov	sp, r7
20000d16:	b004      	add	sp, #16
20000d18:	bd80      	pop	{r7, pc}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	40021014 	andmi	r1, r2, r4, lsl r0

20000d20 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000d20:	b580      	push	{r7, lr}
20000d22:	b082      	sub	sp, #8
20000d24:	af00      	add	r7, sp, #0
20000d26:	0002      	movs	r2, r0
20000d28:	1dfb      	adds	r3, r7, #7
20000d2a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d2c:	2001      	movs	r0, #1
20000d2e:	f7ff ffd3 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d32:	2002      	movs	r0, #2
20000d34:	f7ff ffd0 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d38:	1dfb      	adds	r3, r7, #7
20000d3a:	781b      	ldrb	r3, [r3, #0]
20000d3c:	0018      	movs	r0, r3
20000d3e:	f000 f819 	bl	20000d74 <ascii_write_controller>
}
20000d42:	46c0      	nop			; (mov r8, r8)
20000d44:	46bd      	mov	sp, r7
20000d46:	b002      	add	sp, #8
20000d48:	bd80      	pop	{r7, pc}

20000d4a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d4a:	b580      	push	{r7, lr}
20000d4c:	b082      	sub	sp, #8
20000d4e:	af00      	add	r7, sp, #0
20000d50:	0002      	movs	r2, r0
20000d52:	1dfb      	adds	r3, r7, #7
20000d54:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d56:	2001      	movs	r0, #1
20000d58:	f7ff ffa6 	bl	20000ca8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d5c:	2002      	movs	r0, #2
20000d5e:	f7ff ffbb 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d62:	1dfb      	adds	r3, r7, #7
20000d64:	781b      	ldrb	r3, [r3, #0]
20000d66:	0018      	movs	r0, r3
20000d68:	f000 f804 	bl	20000d74 <ascii_write_controller>
}
20000d6c:	46c0      	nop			; (mov r8, r8)
20000d6e:	46bd      	mov	sp, r7
20000d70:	b002      	add	sp, #8
20000d72:	bd80      	pop	{r7, pc}

20000d74 <ascii_write_controller>:

void ascii_write_controller(unsigned char command){
20000d74:	b580      	push	{r7, lr}
20000d76:	b082      	sub	sp, #8
20000d78:	af00      	add	r7, sp, #0
20000d7a:	0002      	movs	r2, r0
20000d7c:	1dfb      	adds	r3, r7, #7
20000d7e:	701a      	strb	r2, [r3, #0]
		//	delay_250ns();
	ascii_ctrl_bit_set(B_E);
20000d80:	2040      	movs	r0, #64	; 0x40
20000d82:	f7ff ff91 	bl	20000ca8 <ascii_ctrl_bit_set>
	* portOdrHigh = command;
20000d86:	4a06      	ldr	r2, [pc, #24]	; (20000da0 <ascii_write_controller+0x2c>)
20000d88:	1dfb      	adds	r3, r7, #7
20000d8a:	781b      	ldrb	r3, [r3, #0]
20000d8c:	7013      	strb	r3, [r2, #0]
		//	delay_250ns();
	ascii_ctrl_bit_clear(B_E);
20000d8e:	2040      	movs	r0, #64	; 0x40
20000d90:	f7ff ffa2 	bl	20000cd8 <ascii_ctrl_bit_clear>
	delay_250ns();
20000d94:	f7ff f93c 	bl	20000010 <delay_250ns>
}
20000d98:	46c0      	nop			; (mov r8, r8)
20000d9a:	46bd      	mov	sp, r7
20000d9c:	b002      	add	sp, #8
20000d9e:	bd80      	pop	{r7, pc}
20000da0:	40021015 	andmi	r1, r2, r5, lsl r0

20000da4 <ascii_read_controller>:

unsigned char ascii_read_controller(){
20000da4:	b580      	push	{r7, lr}
20000da6:	b082      	sub	sp, #8
20000da8:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set(B_E);
20000daa:	2040      	movs	r0, #64	; 0x40
20000dac:	f7ff ff7c 	bl	20000ca8 <ascii_ctrl_bit_set>
	delay_250ns();
20000db0:	f7ff f92e 	bl	20000010 <delay_250ns>
	delay_250ns();
20000db4:	f7ff f92c 	bl	20000010 <delay_250ns>
	rv = * portIdrHigh;
20000db8:	4a06      	ldr	r2, [pc, #24]	; (20000dd4 <ascii_read_controller+0x30>)
20000dba:	1dfb      	adds	r3, r7, #7
20000dbc:	7812      	ldrb	r2, [r2, #0]
20000dbe:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000dc0:	2040      	movs	r0, #64	; 0x40
20000dc2:	f7ff ff89 	bl	20000cd8 <ascii_ctrl_bit_clear>
	return rv;
20000dc6:	1dfb      	adds	r3, r7, #7
20000dc8:	781b      	ldrb	r3, [r3, #0]
}
20000dca:	0018      	movs	r0, r3
20000dcc:	46bd      	mov	sp, r7
20000dce:	b002      	add	sp, #8
20000dd0:	bd80      	pop	{r7, pc}
20000dd2:	46c0      	nop			; (mov r8, r8)
20000dd4:	40021011 	andmi	r1, r2, r1, lsl r0

20000dd8 <ascii_read_data>:

unsigned char ascii_read_data(){
20000dd8:	b580      	push	{r7, lr}
20000dda:	b082      	sub	sp, #8
20000ddc:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000dde:	4b0a      	ldr	r3, [pc, #40]	; (20000e08 <ascii_read_data+0x30>)
20000de0:	4a0a      	ldr	r2, [pc, #40]	; (20000e0c <ascii_read_data+0x34>)
20000de2:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_set(B_RS);
20000de4:	2001      	movs	r0, #1
20000de6:	f7ff ff5f 	bl	20000ca8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000dea:	2002      	movs	r0, #2
20000dec:	f7ff ff5c 	bl	20000ca8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000df0:	4a07      	ldr	r2, [pc, #28]	; (20000e10 <ascii_read_data+0x38>)
20000df2:	1dfb      	adds	r3, r7, #7
20000df4:	701a      	strb	r2, [r3, #0]
	* portModer = 0x55555555;
20000df6:	4b04      	ldr	r3, [pc, #16]	; (20000e08 <ascii_read_data+0x30>)
20000df8:	4a06      	ldr	r2, [pc, #24]	; (20000e14 <ascii_read_data+0x3c>)
20000dfa:	601a      	str	r2, [r3, #0]
	return rv;
20000dfc:	1dfb      	adds	r3, r7, #7
20000dfe:	781b      	ldrb	r3, [r3, #0]
}
20000e00:	0018      	movs	r0, r3
20000e02:	46bd      	mov	sp, r7
20000e04:	b002      	add	sp, #8
20000e06:	bd80      	pop	{r7, pc}
20000e08:	40021000 	andmi	r1, r2, r0
20000e0c:	00005555 	andeq	r5, r0, r5, asr r5
20000e10:	20000da5 	andcs	r0, r0, r5, lsr #27
20000e14:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e18 <ascii_read_status>:

unsigned char ascii_read_status(){
20000e18:	b590      	push	{r4, r7, lr}
20000e1a:	b083      	sub	sp, #12
20000e1c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000e1e:	4b0b      	ldr	r3, [pc, #44]	; (20000e4c <ascii_read_status+0x34>)
20000e20:	4a0b      	ldr	r2, [pc, #44]	; (20000e50 <ascii_read_status+0x38>)
20000e22:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_clear(B_RS);
20000e24:	2001      	movs	r0, #1
20000e26:	f7ff ff57 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000e2a:	2002      	movs	r0, #2
20000e2c:	f7ff ff3c 	bl	20000ca8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000e30:	1dfc      	adds	r4, r7, #7
20000e32:	f7ff ffb7 	bl	20000da4 <ascii_read_controller>
20000e36:	0003      	movs	r3, r0
20000e38:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000e3a:	4b04      	ldr	r3, [pc, #16]	; (20000e4c <ascii_read_status+0x34>)
20000e3c:	4a05      	ldr	r2, [pc, #20]	; (20000e54 <ascii_read_status+0x3c>)
20000e3e:	601a      	str	r2, [r3, #0]
	return rv;
20000e40:	1dfb      	adds	r3, r7, #7
20000e42:	781b      	ldrb	r3, [r3, #0]
} 
20000e44:	0018      	movs	r0, r3
20000e46:	46bd      	mov	sp, r7
20000e48:	b003      	add	sp, #12
20000e4a:	bd90      	pop	{r4, r7, pc}
20000e4c:	40021000 	andmi	r1, r2, r0
20000e50:	00005555 	andeq	r5, r0, r5, asr r5
20000e54:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e58 <ascii_command>:

void ascii_command(unsigned char command){
20000e58:	b580      	push	{r7, lr}
20000e5a:	b082      	sub	sp, #8
20000e5c:	af00      	add	r7, sp, #0
20000e5e:	0002      	movs	r2, r0
20000e60:	1dfb      	adds	r3, r7, #7
20000e62:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e64:	46c0      	nop			; (mov r8, r8)
20000e66:	f7ff ffd7 	bl	20000e18 <ascii_read_status>
20000e6a:	0003      	movs	r3, r0
20000e6c:	001a      	movs	r2, r3
20000e6e:	2380      	movs	r3, #128	; 0x80
20000e70:	4013      	ands	r3, r2
20000e72:	2b80      	cmp	r3, #128	; 0x80
20000e74:	d0f7      	beq.n	20000e66 <ascii_command+0xe>
	delay_mikro(8);
20000e76:	2008      	movs	r0, #8
20000e78:	f7ff f8ee 	bl	20000058 <delay_mikro>
	ascii_write_cmd(command);
20000e7c:	1dfb      	adds	r3, r7, #7
20000e7e:	781b      	ldrb	r3, [r3, #0]
20000e80:	0018      	movs	r0, r3
20000e82:	f7ff ff4d 	bl	20000d20 <ascii_write_cmd>
	delay_milli(2);
20000e86:	2002      	movs	r0, #2
20000e88:	f7ff f907 	bl	2000009a <delay_milli>
}
20000e8c:	46c0      	nop			; (mov r8, r8)
20000e8e:	46bd      	mov	sp, r7
20000e90:	b002      	add	sp, #8
20000e92:	bd80      	pop	{r7, pc}

20000e94 <ascii_init>:

void ascii_init(){
20000e94:	b580      	push	{r7, lr}
20000e96:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS);
20000e98:	2001      	movs	r0, #1
20000e9a:	f7ff ff1d 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000e9e:	2002      	movs	r0, #2
20000ea0:	f7ff ff1a 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_command(0x38);
20000ea4:	2038      	movs	r0, #56	; 0x38
20000ea6:	f7ff ffd7 	bl	20000e58 <ascii_command>
	ascii_command(0x0E);
20000eaa:	200e      	movs	r0, #14
20000eac:	f7ff ffd4 	bl	20000e58 <ascii_command>
	ascii_command(0x01);
20000eb0:	2001      	movs	r0, #1
20000eb2:	f7ff ffd1 	bl	20000e58 <ascii_command>
	ascii_command(0x04);
20000eb6:	2004      	movs	r0, #4
20000eb8:	f7ff ffce 	bl	20000e58 <ascii_command>
}
20000ebc:	46c0      	nop			; (mov r8, r8)
20000ebe:	46bd      	mov	sp, r7
20000ec0:	bd80      	pop	{r7, pc}

20000ec2 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000ec2:	b580      	push	{r7, lr}
20000ec4:	b084      	sub	sp, #16
20000ec6:	af00      	add	r7, sp, #0
20000ec8:	6078      	str	r0, [r7, #4]
20000eca:	6039      	str	r1, [r7, #0]
	ascii_ctrl_bit_clear(B_RS);
20000ecc:	2001      	movs	r0, #1
20000ece:	f7ff ff03 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000ed2:	2002      	movs	r0, #2
20000ed4:	f7ff ff00 	bl	20000cd8 <ascii_ctrl_bit_clear>
	unsigned char adress = x - 1;
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	b2da      	uxtb	r2, r3
20000edc:	210f      	movs	r1, #15
20000ede:	187b      	adds	r3, r7, r1
20000ee0:	3a01      	subs	r2, #1
20000ee2:	701a      	strb	r2, [r3, #0]
	if(y == 2){
20000ee4:	683b      	ldr	r3, [r7, #0]
20000ee6:	2b02      	cmp	r3, #2
20000ee8:	d104      	bne.n	20000ef4 <ascii_gotoxy+0x32>
		adress += 0x40;
20000eea:	187b      	adds	r3, r7, r1
20000eec:	187a      	adds	r2, r7, r1
20000eee:	7812      	ldrb	r2, [r2, #0]
20000ef0:	3240      	adds	r2, #64	; 0x40
20000ef2:	701a      	strb	r2, [r3, #0]
	}
	ascii_command(0x80 | adress);
20000ef4:	230f      	movs	r3, #15
20000ef6:	18fb      	adds	r3, r7, r3
20000ef8:	781b      	ldrb	r3, [r3, #0]
20000efa:	2280      	movs	r2, #128	; 0x80
20000efc:	4252      	negs	r2, r2
20000efe:	4313      	orrs	r3, r2
20000f00:	b2db      	uxtb	r3, r3
20000f02:	0018      	movs	r0, r3
20000f04:	f7ff ffa8 	bl	20000e58 <ascii_command>
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46bd      	mov	sp, r7
20000f0c:	b004      	add	sp, #16
20000f0e:	bd80      	pop	{r7, pc}

20000f10 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000f10:	b580      	push	{r7, lr}
20000f12:	b082      	sub	sp, #8
20000f14:	af00      	add	r7, sp, #0
20000f16:	0002      	movs	r2, r0
20000f18:	1dfb      	adds	r3, r7, #7
20000f1a:	701a      	strb	r2, [r3, #0]
	while(ascii_read_status() & 0x80 == 0x80){}
20000f1c:	46c0      	nop			; (mov r8, r8)
20000f1e:	f7ff ff7b 	bl	20000e18 <ascii_read_status>
20000f22:	0003      	movs	r3, r0
20000f24:	001a      	movs	r2, r3
20000f26:	2301      	movs	r3, #1
20000f28:	4013      	ands	r3, r2
20000f2a:	d1f8      	bne.n	20000f1e <ascii_write_char+0xe>
	delay_mikro(8);
20000f2c:	2008      	movs	r0, #8
20000f2e:	f7ff f893 	bl	20000058 <delay_mikro>
	ascii_write_data(c);
20000f32:	1dfb      	adds	r3, r7, #7
20000f34:	781b      	ldrb	r3, [r3, #0]
20000f36:	0018      	movs	r0, r3
20000f38:	f7ff ff07 	bl	20000d4a <ascii_write_data>
	delay_mikro(50);
20000f3c:	2032      	movs	r0, #50	; 0x32
20000f3e:	f7ff f88b 	bl	20000058 <delay_mikro>
}
20000f42:	46c0      	nop			; (mov r8, r8)
20000f44:	46bd      	mov	sp, r7
20000f46:	b002      	add	sp, #8
20000f48:	bd80      	pop	{r7, pc}

20000f4a <ascii_playerscore_init>:

void ascii_playerscore_init(void){
20000f4a:	b5b0      	push	{r4, r5, r7, lr}
20000f4c:	b08a      	sub	sp, #40	; 0x28
20000f4e:	af00      	add	r7, sp, #0
	char * s;
	char test1[] = "Player Left: 0";	//plats 14
20000f50:	2414      	movs	r4, #20
20000f52:	193b      	adds	r3, r7, r4
20000f54:	4a1b      	ldr	r2, [pc, #108]	; (20000fc4 <ascii_playerscore_init+0x7a>)
20000f56:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f58:	c323      	stmia	r3!, {r0, r1, r5}
20000f5a:	8811      	ldrh	r1, [r2, #0]
20000f5c:	8019      	strh	r1, [r3, #0]
20000f5e:	7892      	ldrb	r2, [r2, #2]
20000f60:	709a      	strb	r2, [r3, #2]
	char test2[] = "Player Right: 0";	//plats 15
20000f62:	1d3b      	adds	r3, r7, #4
20000f64:	4a18      	ldr	r2, [pc, #96]	; (20000fc8 <ascii_playerscore_init+0x7e>)
20000f66:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f68:	c323      	stmia	r3!, {r0, r1, r5}
20000f6a:	6812      	ldr	r2, [r2, #0]
20000f6c:	601a      	str	r2, [r3, #0]
	
	ascii_init();
20000f6e:	f7ff ff91 	bl	20000e94 <ascii_init>
	ascii_gotoxy(1,1);
20000f72:	2101      	movs	r1, #1
20000f74:	2001      	movs	r0, #1
20000f76:	f7ff ffa4 	bl	20000ec2 <ascii_gotoxy>
	s = test1;
20000f7a:	193b      	adds	r3, r7, r4
20000f7c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f7e:	e006      	b.n	20000f8e <ascii_playerscore_init+0x44>
		ascii_write_char(*s++);
20000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f82:	1c5a      	adds	r2, r3, #1
20000f84:	627a      	str	r2, [r7, #36]	; 0x24
20000f86:	781b      	ldrb	r3, [r3, #0]
20000f88:	0018      	movs	r0, r3
20000f8a:	f7ff ffc1 	bl	20000f10 <ascii_write_char>
	while(*s){
20000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f90:	781b      	ldrb	r3, [r3, #0]
20000f92:	2b00      	cmp	r3, #0
20000f94:	d1f4      	bne.n	20000f80 <ascii_playerscore_init+0x36>
	}
	ascii_gotoxy(1,2);
20000f96:	2102      	movs	r1, #2
20000f98:	2001      	movs	r0, #1
20000f9a:	f7ff ff92 	bl	20000ec2 <ascii_gotoxy>
	s=test2;
20000f9e:	1d3b      	adds	r3, r7, #4
20000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000fa2:	e006      	b.n	20000fb2 <ascii_playerscore_init+0x68>
		ascii_write_char(*s++);
20000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000fa6:	1c5a      	adds	r2, r3, #1
20000fa8:	627a      	str	r2, [r7, #36]	; 0x24
20000faa:	781b      	ldrb	r3, [r3, #0]
20000fac:	0018      	movs	r0, r3
20000fae:	f7ff ffaf 	bl	20000f10 <ascii_write_char>
	while(*s){
20000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000fb4:	781b      	ldrb	r3, [r3, #0]
20000fb6:	2b00      	cmp	r3, #0
20000fb8:	d1f4      	bne.n	20000fa4 <ascii_playerscore_init+0x5a>
	}
	return 0;
20000fba:	46c0      	nop			; (mov r8, r8)
}
20000fbc:	46bd      	mov	sp, r7
20000fbe:	b00a      	add	sp, #40	; 0x28
20000fc0:	bdb0      	pop	{r4, r5, r7, pc}
20000fc2:	46c0      	nop			; (mov r8, r8)
20000fc4:	200030ac 	andcs	r3, r0, ip, lsr #1
20000fc8:	200030bc 	strhcs	r3, [r0], -ip

20000fcc <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000fcc:	b580      	push	{r7, lr}
20000fce:	af00      	add	r7, sp, #0
	* ((unsigned long *) 0x40023830) = 0x18;
	__asm__ volatile(" LDR R0, =0x08000209\n");
	__asm__ volatile(" BLX R0 \n");
#endif
	
	* portModer = 0x55555555;
20000fd0:	4b07      	ldr	r3, [pc, #28]	; (20000ff0 <init_app+0x24>)
20000fd2:	4a08      	ldr	r2, [pc, #32]	; (20000ff4 <init_app+0x28>)
20000fd4:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000fd6:	4b08      	ldr	r3, [pc, #32]	; (20000ff8 <init_app+0x2c>)
20000fd8:	4a08      	ldr	r2, [pc, #32]	; (20000ffc <init_app+0x30>)
20000fda:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000fdc:	4b08      	ldr	r3, [pc, #32]	; (20001000 <init_app+0x34>)
20000fde:	4a09      	ldr	r2, [pc, #36]	; (20001004 <init_app+0x38>)
20000fe0:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000fe2:	4b09      	ldr	r3, [pc, #36]	; (20001008 <init_app+0x3c>)
20000fe4:	2200      	movs	r2, #0
20000fe6:	801a      	strh	r2, [r3, #0]
}
20000fe8:	46c0      	nop			; (mov r8, r8)
20000fea:	46bd      	mov	sp, r7
20000fec:	bd80      	pop	{r7, pc}
20000fee:	46c0      	nop			; (mov r8, r8)
20000ff0:	40021000 	andmi	r1, r2, r0
20000ff4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000ff8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000ffc:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20001000:	40020c30 	andmi	r0, r2, r0, lsr ip
20001004:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20001008:	40020c08 	andmi	r0, r2, r8, lsl #24

2000100c <win_state>:

void win_state(){
2000100c:	b580      	push	{r7, lr}
2000100e:	b086      	sub	sp, #24
20001010:	af00      	add	r7, sp, #0
	clear_backBuffer();
20001012:	f7ff fb73 	bl	200006fc <clear_backBuffer>
	while(1){
			if(player_left_points == 5){
20001016:	4b4f      	ldr	r3, [pc, #316]	; (20001154 <win_state+0x148>)
20001018:	781b      	ldrb	r3, [r3, #0]
2000101a:	2b05      	cmp	r3, #5
2000101c:	d13f      	bne.n	2000109e <win_state+0x92>
			for (int i = 0; i < 1024; i++ ){
2000101e:	2300      	movs	r3, #0
20001020:	617b      	str	r3, [r7, #20]
20001022:	e011      	b.n	20001048 <win_state+0x3c>
					backBuffer[i] |= PlayerLeftWinsWithText_bits[i];
20001024:	4a4c      	ldr	r2, [pc, #304]	; (20001158 <win_state+0x14c>)
20001026:	697b      	ldr	r3, [r7, #20]
20001028:	18d3      	adds	r3, r2, r3
2000102a:	781a      	ldrb	r2, [r3, #0]
2000102c:	494b      	ldr	r1, [pc, #300]	; (2000115c <win_state+0x150>)
2000102e:	697b      	ldr	r3, [r7, #20]
20001030:	18cb      	adds	r3, r1, r3
20001032:	781b      	ldrb	r3, [r3, #0]
20001034:	4313      	orrs	r3, r2
20001036:	b2d9      	uxtb	r1, r3
20001038:	4a47      	ldr	r2, [pc, #284]	; (20001158 <win_state+0x14c>)
2000103a:	697b      	ldr	r3, [r7, #20]
2000103c:	18d3      	adds	r3, r2, r3
2000103e:	1c0a      	adds	r2, r1, #0
20001040:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++ ){
20001042:	697b      	ldr	r3, [r7, #20]
20001044:	3301      	adds	r3, #1
20001046:	617b      	str	r3, [r7, #20]
20001048:	697a      	ldr	r2, [r7, #20]
2000104a:	2380      	movs	r3, #128	; 0x80
2000104c:	00db      	lsls	r3, r3, #3
2000104e:	429a      	cmp	r2, r3
20001050:	dbe8      	blt.n	20001024 <win_state+0x18>
			}
			graphic_draw_screen();
20001052:	f7ff fa8b 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
20001056:	f7ff fb51 	bl	200006fc <clear_backBuffer>
			delay_mikro(10);
2000105a:	200a      	movs	r0, #10
2000105c:	f7fe fffc 	bl	20000058 <delay_mikro>
			for (int i = 0; i < 1024; i++ ){
20001060:	2300      	movs	r3, #0
20001062:	613b      	str	r3, [r7, #16]
20001064:	e011      	b.n	2000108a <win_state+0x7e>
					backBuffer[i] |= PlayerLeftWins_bits[i];
20001066:	4a3c      	ldr	r2, [pc, #240]	; (20001158 <win_state+0x14c>)
20001068:	693b      	ldr	r3, [r7, #16]
2000106a:	18d3      	adds	r3, r2, r3
2000106c:	781a      	ldrb	r2, [r3, #0]
2000106e:	493c      	ldr	r1, [pc, #240]	; (20001160 <win_state+0x154>)
20001070:	693b      	ldr	r3, [r7, #16]
20001072:	18cb      	adds	r3, r1, r3
20001074:	781b      	ldrb	r3, [r3, #0]
20001076:	4313      	orrs	r3, r2
20001078:	b2d9      	uxtb	r1, r3
2000107a:	4a37      	ldr	r2, [pc, #220]	; (20001158 <win_state+0x14c>)
2000107c:	693b      	ldr	r3, [r7, #16]
2000107e:	18d3      	adds	r3, r2, r3
20001080:	1c0a      	adds	r2, r1, #0
20001082:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++ ){
20001084:	693b      	ldr	r3, [r7, #16]
20001086:	3301      	adds	r3, #1
20001088:	613b      	str	r3, [r7, #16]
2000108a:	693a      	ldr	r2, [r7, #16]
2000108c:	2380      	movs	r3, #128	; 0x80
2000108e:	00db      	lsls	r3, r3, #3
20001090:	429a      	cmp	r2, r3
20001092:	dbe8      	blt.n	20001066 <win_state+0x5a>
			}
			graphic_draw_screen();
20001094:	f7ff fa6a 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
20001098:	f7ff fb30 	bl	200006fc <clear_backBuffer>
2000109c:	e03e      	b.n	2000111c <win_state+0x110>
		}else{
			for (int i = 0; i < 1024; i++ ){
2000109e:	2300      	movs	r3, #0
200010a0:	60fb      	str	r3, [r7, #12]
200010a2:	e011      	b.n	200010c8 <win_state+0xbc>
					backBuffer[i] |= PlayerRightWinsWithText_bits[i];
200010a4:	4a2c      	ldr	r2, [pc, #176]	; (20001158 <win_state+0x14c>)
200010a6:	68fb      	ldr	r3, [r7, #12]
200010a8:	18d3      	adds	r3, r2, r3
200010aa:	781a      	ldrb	r2, [r3, #0]
200010ac:	492d      	ldr	r1, [pc, #180]	; (20001164 <win_state+0x158>)
200010ae:	68fb      	ldr	r3, [r7, #12]
200010b0:	18cb      	adds	r3, r1, r3
200010b2:	781b      	ldrb	r3, [r3, #0]
200010b4:	4313      	orrs	r3, r2
200010b6:	b2d9      	uxtb	r1, r3
200010b8:	4a27      	ldr	r2, [pc, #156]	; (20001158 <win_state+0x14c>)
200010ba:	68fb      	ldr	r3, [r7, #12]
200010bc:	18d3      	adds	r3, r2, r3
200010be:	1c0a      	adds	r2, r1, #0
200010c0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++ ){
200010c2:	68fb      	ldr	r3, [r7, #12]
200010c4:	3301      	adds	r3, #1
200010c6:	60fb      	str	r3, [r7, #12]
200010c8:	68fa      	ldr	r2, [r7, #12]
200010ca:	2380      	movs	r3, #128	; 0x80
200010cc:	00db      	lsls	r3, r3, #3
200010ce:	429a      	cmp	r2, r3
200010d0:	dbe8      	blt.n	200010a4 <win_state+0x98>
			}
			graphic_draw_screen();
200010d2:	f7ff fa4b 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
200010d6:	f7ff fb11 	bl	200006fc <clear_backBuffer>
			delay_mikro(10);
200010da:	200a      	movs	r0, #10
200010dc:	f7fe ffbc 	bl	20000058 <delay_mikro>
			for (int i = 0; i < 1024; i++ ){
200010e0:	2300      	movs	r3, #0
200010e2:	60bb      	str	r3, [r7, #8]
200010e4:	e011      	b.n	2000110a <win_state+0xfe>
					backBuffer[i] |= PlayerRightWins_bits[i];
200010e6:	4a1c      	ldr	r2, [pc, #112]	; (20001158 <win_state+0x14c>)
200010e8:	68bb      	ldr	r3, [r7, #8]
200010ea:	18d3      	adds	r3, r2, r3
200010ec:	781a      	ldrb	r2, [r3, #0]
200010ee:	491e      	ldr	r1, [pc, #120]	; (20001168 <win_state+0x15c>)
200010f0:	68bb      	ldr	r3, [r7, #8]
200010f2:	18cb      	adds	r3, r1, r3
200010f4:	781b      	ldrb	r3, [r3, #0]
200010f6:	4313      	orrs	r3, r2
200010f8:	b2d9      	uxtb	r1, r3
200010fa:	4a17      	ldr	r2, [pc, #92]	; (20001158 <win_state+0x14c>)
200010fc:	68bb      	ldr	r3, [r7, #8]
200010fe:	18d3      	adds	r3, r2, r3
20001100:	1c0a      	adds	r2, r1, #0
20001102:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 1024; i++ ){
20001104:	68bb      	ldr	r3, [r7, #8]
20001106:	3301      	adds	r3, #1
20001108:	60bb      	str	r3, [r7, #8]
2000110a:	68ba      	ldr	r2, [r7, #8]
2000110c:	2380      	movs	r3, #128	; 0x80
2000110e:	00db      	lsls	r3, r3, #3
20001110:	429a      	cmp	r2, r3
20001112:	dbe8      	blt.n	200010e6 <win_state+0xda>
			}
			graphic_draw_screen();
20001114:	f7ff fa2a 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
20001118:	f7ff faf0 	bl	200006fc <clear_backBuffer>
		}
		signed char check1 = keybHigh();
2000111c:	f7ff fc52 	bl	200009c4 <keybHigh>
20001120:	0003      	movs	r3, r0
20001122:	001a      	movs	r2, r3
20001124:	1dfb      	adds	r3, r7, #7
20001126:	701a      	strb	r2, [r3, #0]
		signed char check2 = keybLow();
20001128:	f7ff fc77 	bl	20000a1a <keybLow>
2000112c:	0003      	movs	r3, r0
2000112e:	001a      	movs	r2, r3
20001130:	1dbb      	adds	r3, r7, #6
20001132:	701a      	strb	r2, [r3, #0]
		
		if ( ( check1 != -1) || ( check2 != -1) ){
20001134:	1dfb      	adds	r3, r7, #7
20001136:	781b      	ldrb	r3, [r3, #0]
20001138:	b25b      	sxtb	r3, r3
2000113a:	3301      	adds	r3, #1
2000113c:	d105      	bne.n	2000114a <win_state+0x13e>
2000113e:	1dbb      	adds	r3, r7, #6
20001140:	781b      	ldrb	r3, [r3, #0]
20001142:	b25b      	sxtb	r3, r3
20001144:	3301      	adds	r3, #1
20001146:	d100      	bne.n	2000114a <win_state+0x13e>
	while(1){
20001148:	e765      	b.n	20001016 <win_state+0xa>
			break;
		} else {continue;}
	}
}
2000114a:	46c0      	nop			; (mov r8, r8)
2000114c:	46bd      	mov	sp, r7
2000114e:	b006      	add	sp, #24
20001150:	bd80      	pop	{r7, pc}
20001152:	46c0      	nop			; (mov r8, r8)
20001154:	200017a5 	andcs	r1, r0, r5, lsr #15
20001158:	200013a4 	andcs	r1, r0, r4, lsr #7
2000115c:	20001ba8 	andcs	r1, r0, r8, lsr #23
20001160:	200017a8 	andcs	r1, r0, r8, lsr #15
20001164:	200023a8 	andcs	r2, r0, r8, lsr #7
20001168:	20001fa8 	andcs	r1, r0, r8, lsr #31

2000116c <main>:
}

#endif

#ifndef OLD_PIXEL
void main(void){
2000116c:	b590      	push	{r4, r7, lr}
2000116e:	b087      	sub	sp, #28
20001170:	af00      	add	r7, sp, #0
	POBJECT b = &ball;
20001172:	4b41      	ldr	r3, [pc, #260]	; (20001278 <main+0x10c>)
20001174:	617b      	str	r3, [r7, #20]
	POBJECT b2 = &ball;
20001176:	4b40      	ldr	r3, [pc, #256]	; (20001278 <main+0x10c>)
20001178:	613b      	str	r3, [r7, #16]
	POBJECT p_left = &paddle_left;
2000117a:	4b40      	ldr	r3, [pc, #256]	; (2000127c <main+0x110>)
2000117c:	60fb      	str	r3, [r7, #12]
	POBJECT p_right = &paddle_right;
2000117e:	4b40      	ldr	r3, [pc, #256]	; (20001280 <main+0x114>)
20001180:	60bb      	str	r3, [r7, #8]
	init_app();
20001182:	f7ff ff23 	bl	20000fcc <init_app>
	ascii_playerscore_init();
20001186:	f7ff fee0 	bl	20000f4a <ascii_playerscore_init>
	graphic_initialize();
2000118a:	f7ff f93f 	bl	2000040c <graphic_initialize>
	b->dx = 15;
2000118e:	697b      	ldr	r3, [r7, #20]
20001190:	220f      	movs	r2, #15
20001192:	605a      	str	r2, [r3, #4]
	b->dy = 15;
20001194:	697b      	ldr	r3, [r7, #20]
20001196:	220f      	movs	r2, #15
20001198:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	while(1){
		clear_backBuffer();
2000119a:	f7ff faaf 	bl	200006fc <clear_backBuffer>
		b->move(b, b);
2000119e:	697b      	ldr	r3, [r7, #20]
200011a0:	69db      	ldr	r3, [r3, #28]
200011a2:	6979      	ldr	r1, [r7, #20]
200011a4:	697a      	ldr	r2, [r7, #20]
200011a6:	0010      	movs	r0, r2
200011a8:	4798      	blx	r3
		p_left->move(p_left, b);
200011aa:	68fb      	ldr	r3, [r7, #12]
200011ac:	69db      	ldr	r3, [r3, #28]
200011ae:	6979      	ldr	r1, [r7, #20]
200011b0:	68fa      	ldr	r2, [r7, #12]
200011b2:	0010      	movs	r0, r2
200011b4:	4798      	blx	r3
		p_right->move(p_right, b);
200011b6:	68bb      	ldr	r3, [r7, #8]
200011b8:	69db      	ldr	r3, [r3, #28]
200011ba:	6979      	ldr	r1, [r7, #20]
200011bc:	68ba      	ldr	r2, [r7, #8]
200011be:	0010      	movs	r0, r2
200011c0:	4798      	blx	r3
		char p_l_key = keybHigh();
200011c2:	1dfc      	adds	r4, r7, #7
200011c4:	f7ff fbfe 	bl	200009c4 <keybHigh>
200011c8:	0003      	movs	r3, r0
200011ca:	7023      	strb	r3, [r4, #0]
		char p_r_key = keybLow();
200011cc:	1dbc      	adds	r4, r7, #6
200011ce:	f7ff fc24 	bl	20000a1a <keybLow>
200011d2:	0003      	movs	r3, r0
200011d4:	7023      	strb	r3, [r4, #0]
    	switch(p_l_key){																				//PD8-15
200011d6:	1dfb      	adds	r3, r7, #7
200011d8:	781b      	ldrb	r3, [r3, #0]
200011da:	2b02      	cmp	r3, #2
200011dc:	d002      	beq.n	200011e4 <main+0x78>
200011de:	2b05      	cmp	r3, #5
200011e0:	d008      	beq.n	200011f4 <main+0x88>
200011e2:	e00e      	b.n	20001202 <main+0x96>
			case 2: p_left->set_speed(p_left,0,-20);break;
200011e4:	68fb      	ldr	r3, [r7, #12]
200011e6:	6a1b      	ldr	r3, [r3, #32]
200011e8:	2214      	movs	r2, #20
200011ea:	4252      	negs	r2, r2
200011ec:	68f8      	ldr	r0, [r7, #12]
200011ee:	2100      	movs	r1, #0
200011f0:	4798      	blx	r3
200011f2:	e00d      	b.n	20001210 <main+0xa4>
			case 5: p_left->set_speed(p_left,0,20);break;
200011f4:	68fb      	ldr	r3, [r7, #12]
200011f6:	6a1b      	ldr	r3, [r3, #32]
200011f8:	68f8      	ldr	r0, [r7, #12]
200011fa:	2214      	movs	r2, #20
200011fc:	2100      	movs	r1, #0
200011fe:	4798      	blx	r3
20001200:	e006      	b.n	20001210 <main+0xa4>
			default: p_left->set_speed(p_left,0,0);break;
20001202:	68fb      	ldr	r3, [r7, #12]
20001204:	6a1b      	ldr	r3, [r3, #32]
20001206:	68f8      	ldr	r0, [r7, #12]
20001208:	2200      	movs	r2, #0
2000120a:	2100      	movs	r1, #0
2000120c:	4798      	blx	r3
2000120e:	46c0      	nop			; (mov r8, r8)
		}
		switch(p_r_key){																				//PD0-7
20001210:	1dbb      	adds	r3, r7, #6
20001212:	781b      	ldrb	r3, [r3, #0]
20001214:	2b02      	cmp	r3, #2
20001216:	d002      	beq.n	2000121e <main+0xb2>
20001218:	2b05      	cmp	r3, #5
2000121a:	d008      	beq.n	2000122e <main+0xc2>
2000121c:	e00e      	b.n	2000123c <main+0xd0>
			case 2: p_right->set_speed(p_right,0,-20);break;
2000121e:	68bb      	ldr	r3, [r7, #8]
20001220:	6a1b      	ldr	r3, [r3, #32]
20001222:	2214      	movs	r2, #20
20001224:	4252      	negs	r2, r2
20001226:	68b8      	ldr	r0, [r7, #8]
20001228:	2100      	movs	r1, #0
2000122a:	4798      	blx	r3
2000122c:	e00d      	b.n	2000124a <main+0xde>
			case 5: p_right->set_speed(p_right,0,20);break;
2000122e:	68bb      	ldr	r3, [r7, #8]
20001230:	6a1b      	ldr	r3, [r3, #32]
20001232:	68b8      	ldr	r0, [r7, #8]
20001234:	2214      	movs	r2, #20
20001236:	2100      	movs	r1, #0
20001238:	4798      	blx	r3
2000123a:	e006      	b.n	2000124a <main+0xde>
			default: p_right->set_speed(p_right,0,0);break;
2000123c:	68bb      	ldr	r3, [r7, #8]
2000123e:	6a1b      	ldr	r3, [r3, #32]
20001240:	68b8      	ldr	r0, [r7, #8]
20001242:	2200      	movs	r2, #0
20001244:	2100      	movs	r1, #0
20001246:	4798      	blx	r3
20001248:	46c0      	nop			; (mov r8, r8)
		}
		graphic_draw_screen();
2000124a:	f7ff f98f 	bl	2000056c <graphic_draw_screen>
		delay_milli(40);
2000124e:	2028      	movs	r0, #40	; 0x28
20001250:	f7fe ff23 	bl	2000009a <delay_milli>
		if(player_left_points == 5 || player_right_points == 5){
20001254:	4b0b      	ldr	r3, [pc, #44]	; (20001284 <main+0x118>)
20001256:	781b      	ldrb	r3, [r3, #0]
20001258:	2b05      	cmp	r3, #5
2000125a:	d003      	beq.n	20001264 <main+0xf8>
2000125c:	4b0a      	ldr	r3, [pc, #40]	; (20001288 <main+0x11c>)
2000125e:	781b      	ldrb	r3, [r3, #0]
20001260:	2b05      	cmp	r3, #5
20001262:	d19a      	bne.n	2000119a <main+0x2e>
			win_state();
20001264:	f7ff fed2 	bl	2000100c <win_state>
			player_left_points = 0;
20001268:	4b06      	ldr	r3, [pc, #24]	; (20001284 <main+0x118>)
2000126a:	2200      	movs	r2, #0
2000126c:	701a      	strb	r2, [r3, #0]
			player_right_points = 0;
2000126e:	4b06      	ldr	r3, [pc, #24]	; (20001288 <main+0x11c>)
20001270:	2200      	movs	r2, #0
20001272:	701a      	strb	r2, [r3, #0]
	while(1){
20001274:	e791      	b.n	2000119a <main+0x2e>
20001276:	46c0      	nop			; (mov r8, r8)
20001278:	20003078 	andcs	r3, r0, r8, ror r0
2000127c:	20002fec 	andcs	r2, r0, ip, ror #31
20001280:	20003010 	andcs	r3, r0, r0, lsl r0
20001284:	200017a5 	andcs	r1, r0, r5, lsr #15
20001288:	200017a4 	andcs	r1, r0, r4, lsr #15

2000128c <__udivsi3>:
2000128c:	2200      	movs	r2, #0
2000128e:	0843      	lsrs	r3, r0, #1
20001290:	428b      	cmp	r3, r1
20001292:	d374      	bcc.n	2000137e <__udivsi3+0xf2>
20001294:	0903      	lsrs	r3, r0, #4
20001296:	428b      	cmp	r3, r1
20001298:	d35f      	bcc.n	2000135a <__udivsi3+0xce>
2000129a:	0a03      	lsrs	r3, r0, #8
2000129c:	428b      	cmp	r3, r1
2000129e:	d344      	bcc.n	2000132a <__udivsi3+0x9e>
200012a0:	0b03      	lsrs	r3, r0, #12
200012a2:	428b      	cmp	r3, r1
200012a4:	d328      	bcc.n	200012f8 <__udivsi3+0x6c>
200012a6:	0c03      	lsrs	r3, r0, #16
200012a8:	428b      	cmp	r3, r1
200012aa:	d30d      	bcc.n	200012c8 <__udivsi3+0x3c>
200012ac:	22ff      	movs	r2, #255	; 0xff
200012ae:	0209      	lsls	r1, r1, #8
200012b0:	ba12      	rev	r2, r2
200012b2:	0c03      	lsrs	r3, r0, #16
200012b4:	428b      	cmp	r3, r1
200012b6:	d302      	bcc.n	200012be <__udivsi3+0x32>
200012b8:	1212      	asrs	r2, r2, #8
200012ba:	0209      	lsls	r1, r1, #8
200012bc:	d065      	beq.n	2000138a <__udivsi3+0xfe>
200012be:	0b03      	lsrs	r3, r0, #12
200012c0:	428b      	cmp	r3, r1
200012c2:	d319      	bcc.n	200012f8 <__udivsi3+0x6c>
200012c4:	e000      	b.n	200012c8 <__udivsi3+0x3c>
200012c6:	0a09      	lsrs	r1, r1, #8
200012c8:	0bc3      	lsrs	r3, r0, #15
200012ca:	428b      	cmp	r3, r1
200012cc:	d301      	bcc.n	200012d2 <__udivsi3+0x46>
200012ce:	03cb      	lsls	r3, r1, #15
200012d0:	1ac0      	subs	r0, r0, r3
200012d2:	4152      	adcs	r2, r2
200012d4:	0b83      	lsrs	r3, r0, #14
200012d6:	428b      	cmp	r3, r1
200012d8:	d301      	bcc.n	200012de <__udivsi3+0x52>
200012da:	038b      	lsls	r3, r1, #14
200012dc:	1ac0      	subs	r0, r0, r3
200012de:	4152      	adcs	r2, r2
200012e0:	0b43      	lsrs	r3, r0, #13
200012e2:	428b      	cmp	r3, r1
200012e4:	d301      	bcc.n	200012ea <__udivsi3+0x5e>
200012e6:	034b      	lsls	r3, r1, #13
200012e8:	1ac0      	subs	r0, r0, r3
200012ea:	4152      	adcs	r2, r2
200012ec:	0b03      	lsrs	r3, r0, #12
200012ee:	428b      	cmp	r3, r1
200012f0:	d301      	bcc.n	200012f6 <__udivsi3+0x6a>
200012f2:	030b      	lsls	r3, r1, #12
200012f4:	1ac0      	subs	r0, r0, r3
200012f6:	4152      	adcs	r2, r2
200012f8:	0ac3      	lsrs	r3, r0, #11
200012fa:	428b      	cmp	r3, r1
200012fc:	d301      	bcc.n	20001302 <__udivsi3+0x76>
200012fe:	02cb      	lsls	r3, r1, #11
20001300:	1ac0      	subs	r0, r0, r3
20001302:	4152      	adcs	r2, r2
20001304:	0a83      	lsrs	r3, r0, #10
20001306:	428b      	cmp	r3, r1
20001308:	d301      	bcc.n	2000130e <__udivsi3+0x82>
2000130a:	028b      	lsls	r3, r1, #10
2000130c:	1ac0      	subs	r0, r0, r3
2000130e:	4152      	adcs	r2, r2
20001310:	0a43      	lsrs	r3, r0, #9
20001312:	428b      	cmp	r3, r1
20001314:	d301      	bcc.n	2000131a <__udivsi3+0x8e>
20001316:	024b      	lsls	r3, r1, #9
20001318:	1ac0      	subs	r0, r0, r3
2000131a:	4152      	adcs	r2, r2
2000131c:	0a03      	lsrs	r3, r0, #8
2000131e:	428b      	cmp	r3, r1
20001320:	d301      	bcc.n	20001326 <__udivsi3+0x9a>
20001322:	020b      	lsls	r3, r1, #8
20001324:	1ac0      	subs	r0, r0, r3
20001326:	4152      	adcs	r2, r2
20001328:	d2cd      	bcs.n	200012c6 <__udivsi3+0x3a>
2000132a:	09c3      	lsrs	r3, r0, #7
2000132c:	428b      	cmp	r3, r1
2000132e:	d301      	bcc.n	20001334 <__udivsi3+0xa8>
20001330:	01cb      	lsls	r3, r1, #7
20001332:	1ac0      	subs	r0, r0, r3
20001334:	4152      	adcs	r2, r2
20001336:	0983      	lsrs	r3, r0, #6
20001338:	428b      	cmp	r3, r1
2000133a:	d301      	bcc.n	20001340 <__udivsi3+0xb4>
2000133c:	018b      	lsls	r3, r1, #6
2000133e:	1ac0      	subs	r0, r0, r3
20001340:	4152      	adcs	r2, r2
20001342:	0943      	lsrs	r3, r0, #5
20001344:	428b      	cmp	r3, r1
20001346:	d301      	bcc.n	2000134c <__udivsi3+0xc0>
20001348:	014b      	lsls	r3, r1, #5
2000134a:	1ac0      	subs	r0, r0, r3
2000134c:	4152      	adcs	r2, r2
2000134e:	0903      	lsrs	r3, r0, #4
20001350:	428b      	cmp	r3, r1
20001352:	d301      	bcc.n	20001358 <__udivsi3+0xcc>
20001354:	010b      	lsls	r3, r1, #4
20001356:	1ac0      	subs	r0, r0, r3
20001358:	4152      	adcs	r2, r2
2000135a:	08c3      	lsrs	r3, r0, #3
2000135c:	428b      	cmp	r3, r1
2000135e:	d301      	bcc.n	20001364 <__udivsi3+0xd8>
20001360:	00cb      	lsls	r3, r1, #3
20001362:	1ac0      	subs	r0, r0, r3
20001364:	4152      	adcs	r2, r2
20001366:	0883      	lsrs	r3, r0, #2
20001368:	428b      	cmp	r3, r1
2000136a:	d301      	bcc.n	20001370 <__udivsi3+0xe4>
2000136c:	008b      	lsls	r3, r1, #2
2000136e:	1ac0      	subs	r0, r0, r3
20001370:	4152      	adcs	r2, r2
20001372:	0843      	lsrs	r3, r0, #1
20001374:	428b      	cmp	r3, r1
20001376:	d301      	bcc.n	2000137c <__udivsi3+0xf0>
20001378:	004b      	lsls	r3, r1, #1
2000137a:	1ac0      	subs	r0, r0, r3
2000137c:	4152      	adcs	r2, r2
2000137e:	1a41      	subs	r1, r0, r1
20001380:	d200      	bcs.n	20001384 <__udivsi3+0xf8>
20001382:	4601      	mov	r1, r0
20001384:	4152      	adcs	r2, r2
20001386:	4610      	mov	r0, r2
20001388:	4770      	bx	lr
2000138a:	e7ff      	b.n	2000138c <__udivsi3+0x100>
2000138c:	b501      	push	{r0, lr}
2000138e:	2000      	movs	r0, #0
20001390:	f000 f806 	bl	200013a0 <__aeabi_idiv0>
20001394:	bd02      	pop	{r1, pc}
20001396:	46c0      	nop			; (mov r8, r8)

20001398 <__aeabi_uidivmod>:
20001398:	2900      	cmp	r1, #0
2000139a:	d0f7      	beq.n	2000138c <__udivsi3+0x100>
2000139c:	e776      	b.n	2000128c <__udivsi3>
2000139e:	4770      	bx	lr

200013a0 <__aeabi_idiv0>:
200013a0:	4770      	bx	lr
200013a2:	46c0      	nop			; (mov r8, r8)

200013a4 <backBuffer>:
	...

200017a4 <player_right_points>:
200017a4:	 	andeq	r0, r0, r4, lsl #10

200017a5 <player_left_points>:
200017a5:	 	andeq	r0, r0, r5

200017a8 <PlayerLeftWins_bits>:
	...
200017d8:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
200017e8:	00007ff0 	strdeq	r7, [r0], -r0
	...
200017f4:	001fc000 	andseq	ip, pc, r0
200017f8:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
200017fc:	00000000 	andeq	r0, r0, r0
20001800:	00000700 	andeq	r0, r0, r0, lsl #14
20001804:	001fe000 	andseq	lr, pc, r0
20001808:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
2000180c:	00000000 	andeq	r0, r0, r0
20001810:	00000700 	andeq	r0, r0, r0, lsl #14
20001814:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
20001818:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
2000181c:	00000000 	andeq	r0, r0, r0
20001820:	00000700 	andeq	r0, r0, r0, lsl #14
20001824:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
20001828:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
2000182c:	00000000 	andeq	r0, r0, r0
20001830:	00000f00 	andeq	r0, r0, r0, lsl #30
20001834:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
20001838:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
2000183c:	00000000 	andeq	r0, r0, r0
20001840:	00000f00 	andeq	r0, r0, r0, lsl #30
20001844:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
20001848:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
2000184c:	00000000 	andeq	r0, r0, r0
20001850:	00000e00 	andeq	r0, r0, r0, lsl #28
20001854:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001858:	000e7870 	andeq	r7, lr, r0, ror r8
2000185c:	00000000 	andeq	r0, r0, r0
20001860:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001864:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
20001868:	000e7ff0 	strdeq	r7, [lr], -r0
2000186c:	000fc000 	andeq	ip, pc, r0
20001870:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001874:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
20001878:	000e7ff0 	strdeq	r7, [lr], -r0
2000187c:	001fe000 	andseq	lr, pc, r0
20001880:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001884:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
20001888:	000e3ff0 	strdeq	r3, [lr], -r0
2000188c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001890:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001894:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
20001898:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000189c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
200018a0:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
200018a4:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
200018a8:	3f0f00e0 	svccc	0x000f00e0
200018ac:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
200018b0:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
200018b4:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
200018b8:	3f8700e0 	svccc	0x008700e0
200018bc:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
200018c0:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
200018c4:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
200018c8:	3f8700e0 	svccc	0x008700e0
200018cc:	3f8ffbce 	svccc	0x008ffbce
200018d0:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
200018d4:	0fe01c0f 	svceq	0x00e01c0f
200018d8:	7bc701e0 	blvc	1f1c2060 <startup-0xe3dfa0>
200018dc:	1f0ffbde 	svcne	0x000ffbde
200018e0:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
200018e4:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
200018e8:	7bc701e0 	blvc	1f1c2070 <startup-0xe3df90>
200018ec:	0f0fbbfe 	svceq	0x000fbbfe
200018f0:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
200018f4:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
200018f8:	7bc701c0 	blvc	1f1c2000 <startup-0xe3e000>
200018fc:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20001900:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
20001904:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001908:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000190c:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20001910:	3c003c00 	stccc	12, cr3, [r0], {-0}
20001914:	0f007838 	svceq	0x00007838
20001918:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000191c:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20001920:	fc003c00 	stc2	12, cr3, [r0], {-0}
20001924:	0f00783e 	svceq	0x0000783e
20001928:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
2000192c:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20001930:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
20001934:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
20001938:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
2000193c:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20001940:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
20001944:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
20001948:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
2000194c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001950:	e0fffc00 	rscs	pc, pc, r0, lsl #24
20001954:	07807007 	streq	r7, [r0, r7]
20001958:	df800070 	svcle	0x00800070
2000195c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001960:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001964:	03807000 	orreq	r7, r0, #0
20001968:	c0000000 	andgt	r0, r0, r0
2000196c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001970:	00f00000 	rscseq	r0, r0, r0
20001974:	03800000 	orreq	r0, r0, #0
20001978:	00000000 	andeq	r0, r0, r0
2000197c:	000007c0 	andeq	r0, r0, r0, asr #15
	...
2000198c:	000003e7 	andeq	r0, r0, r7, ror #7
	...
2000199c:	000003ef 	andeq	r0, r0, pc, ror #7
	...
200019ac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
200019bc:	e38000ff 	orr	r0, r0, #255	; 0xff
200019c0:	00000038 	andeq	r0, r0, r8, lsr r0
	...
200019cc:	e38e007e 	orr	r0, lr, #126	; 0x7e
200019d0:	00000078 	andeq	r0, r0, r8, ror r0
	...
200019dc:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200019e0:	00001cf8 	strdeq	r1, [r0], -r8
	...
200019ec:	e38ee700 	orr	lr, lr, #0, 14
200019f0:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
200019fc:	e38ee700 	orr	lr, lr, #0, 14
20001a00:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
20001a0c:	e3cfef00 	bic	lr, pc, #0, 30
20001a10:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
20001a1c:	e3cfef00 	bic	lr, pc, #0, 30
20001a20:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001a2c:	e3cfde00 	bic	sp, pc, #0, 28
20001a30:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001a3c:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001a40:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001a4c:	e1ffbe00 	mvns	fp, r0, lsl #28
20001a50:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001a5c:	e1fffc00 	mvns	pc, r0, lsl #24
20001a60:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001a6c:	e1fff800 	mvns	pc, r0, lsl #16
20001a70:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001a7c:	e1fbf800 	mvns	pc, r0, lsl #16
20001a80:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001a8c:	e0f1f000 	rscs	pc, r1, r0
20001a90:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001a9c:	e0f0f000 	rscs	pc, r0, r0
20001aa0:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001aac:	0000e000 	andeq	lr, r0, r0
20001ab0:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001ac0:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

20001ba8 <PlayerLeftWinsWithText_bits>:
	...
20001bd8:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001be8:	00007ff0 	strdeq	r7, [r0], -r0
	...
20001bf4:	001fc000 	andseq	ip, pc, r0
20001bf8:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
20001bfc:	00000000 	andeq	r0, r0, r0
20001c00:	00000700 	andeq	r0, r0, r0, lsl #14
20001c04:	001fe000 	andseq	lr, pc, r0
20001c08:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
20001c0c:	00000000 	andeq	r0, r0, r0
20001c10:	00000700 	andeq	r0, r0, r0, lsl #14
20001c14:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
20001c18:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
20001c1c:	00000000 	andeq	r0, r0, r0
20001c20:	00000700 	andeq	r0, r0, r0, lsl #14
20001c24:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
20001c28:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
20001c2c:	00000000 	andeq	r0, r0, r0
20001c30:	00000f00 	andeq	r0, r0, r0, lsl #30
20001c34:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
20001c38:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20001c3c:	00000000 	andeq	r0, r0, r0
20001c40:	00000f00 	andeq	r0, r0, r0, lsl #30
20001c44:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
20001c48:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20001c4c:	00000000 	andeq	r0, r0, r0
20001c50:	00000e00 	andeq	r0, r0, r0, lsl #28
20001c54:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001c58:	000e7870 	andeq	r7, lr, r0, ror r8
20001c5c:	00000000 	andeq	r0, r0, r0
20001c60:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001c64:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
20001c68:	000e7ff0 	strdeq	r7, [lr], -r0
20001c6c:	000fc000 	andeq	ip, pc, r0
20001c70:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001c74:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
20001c78:	000e7ff0 	strdeq	r7, [lr], -r0
20001c7c:	001fe000 	andseq	lr, pc, r0
20001c80:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001c84:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
20001c88:	000e3ff0 	strdeq	r3, [lr], -r0
20001c8c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001c90:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001c94:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
20001c98:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20001c9c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20001ca0:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
20001ca4:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
20001ca8:	3f0f00e0 	svccc	0x000f00e0
20001cac:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20001cb0:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001cb4:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001cb8:	3f8700e0 	svccc	0x008700e0
20001cbc:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20001cc0:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001cc4:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001cc8:	3f8700e0 	svccc	0x008700e0
20001ccc:	3f8ffbce 	svccc	0x008ffbce
20001cd0:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
20001cd4:	0fe01c0f 	svceq	0x00e01c0f
20001cd8:	7bc701e0 	blvc	1f1c2460 <startup-0xe3dba0>
20001cdc:	1f0ffbde 	svcne	0x000ffbde
20001ce0:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001ce4:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
20001ce8:	7bc701e0 	blvc	1f1c2470 <startup-0xe3db90>
20001cec:	0f0fbbfe 	svceq	0x000fbbfe
20001cf0:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
20001cf4:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001cf8:	7bc701c0 	blvc	1f1c2400 <startup-0xe3dc00>
20001cfc:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20001d00:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
20001d04:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001d08:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001d0c:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20001d10:	3c003c00 	stccc	12, cr3, [r0], {-0}
20001d14:	0f007838 	svceq	0x00007838
20001d18:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001d1c:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20001d20:	fc003c00 	stc2	12, cr3, [r0], {-0}
20001d24:	0f00783e 	svceq	0x0000783e
20001d28:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
20001d2c:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20001d30:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
20001d34:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
20001d38:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20001d3c:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20001d40:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
20001d44:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
20001d48:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20001d4c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001d50:	e0fffc00 	rscs	pc, pc, r0, lsl #24
20001d54:	07807007 	streq	r7, [r0, r7]
20001d58:	df800070 	svcle	0x00800070
20001d5c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001d60:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001d64:	03807000 	orreq	r7, r0, #0
20001d68:	c0000000 	andgt	r0, r0, r0
20001d6c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001d70:	00f00000 	rscseq	r0, r0, r0
20001d74:	03800000 	orreq	r0, r0, #0
20001d78:	00000000 	andeq	r0, r0, r0
20001d7c:	000007c0 	andeq	r0, r0, r0, asr #15
	...
20001d8c:	000003e7 	andeq	r0, r0, r7, ror #7
	...
20001d9c:	000003ef 	andeq	r0, r0, pc, ror #7
	...
20001dac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20001dbc:	e38000ff 	orr	r0, r0, #255	; 0xff
20001dc0:	00000038 	andeq	r0, r0, r8, lsr r0
	...
20001dcc:	e38e007e 	orr	r0, lr, #126	; 0x7e
20001dd0:	00000078 	andeq	r0, r0, r8, ror r0
	...
20001ddc:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20001de0:	00001cf8 	strdeq	r1, [r0], -r8
	...
20001dec:	e38ee700 	orr	lr, lr, #0, 14
20001df0:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
20001dfc:	e38ee700 	orr	lr, lr, #0, 14
20001e00:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
20001e0c:	e3cfef00 	bic	lr, pc, #0, 30
20001e10:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
20001e1c:	e3cfef00 	bic	lr, pc, #0, 30
20001e20:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001e2c:	e3cfde00 	bic	sp, pc, #0, 28
20001e30:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001e3c:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001e40:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001e4c:	e1ffbe00 	mvns	fp, r0, lsl #28
20001e50:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001e5c:	e1fffc00 	mvns	pc, r0, lsl #24
20001e60:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001e6c:	e1fff800 	mvns	pc, r0, lsl #16
20001e70:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001e7c:	e1fbf800 	mvns	pc, r0, lsl #16
20001e80:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001e8c:	e0f1f000 	rscs	pc, r1, r0
20001e90:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001e9c:	e0f0f000 	rscs	pc, r0, r0
20001ea0:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001eac:	0000e000 	andeq	lr, r0, r0
20001eb0:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001ec0:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
20001ee0:	00080000 	andeq	r0, r8, r0
20001ee4:	00000000 	andeq	r0, r0, r0
20001ee8:	c0000000 	andgt	r0, r0, r0
20001eec:	00000003 	andeq	r0, r0, r3
20001ef0:	00080000 	andeq	r0, r8, r0
20001ef4:	00000000 	andeq	r0, r0, r0
20001ef8:	40000000 	andmi	r0, r0, r0
20001efc:	00000004 	andeq	r0, r0, r4
20001f00:	00080000 	andeq	r0, r8, r0
20001f04:	00000000 	andeq	r0, r0, r0
20001f08:	40000000 	andmi	r0, r0, r0
20001f0c:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20001f10:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20001f14:	00000004 	andeq	r0, r0, r4
20001f18:	40000000 	andmi	r0, r0, r0
20001f1c:	00209264 	eoreq	r9, r0, r4, ror #4
20001f20:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20001f24:	00000004 	andeq	r0, r0, r4
20001f28:	c0000000 	andgt	r0, r0, r0
20001f2c:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20001f30:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20001f34:	00000004 	andeq	r0, r0, r4
20001f38:	40000000 	andmi	r0, r0, r0
20001f3c:	41040220 	tstmi	r4, r0, lsr #4
20001f40:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20001f44:	00000003 	andeq	r0, r0, r3
20001f48:	40000000 	andmi	r0, r0, r0
20001f4c:	80e39c20 	rschi	r9, r3, r0, lsr #24
20001f50:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20001f54:	00000002 	andeq	r0, r0, r2
	...
20001f60:	00000800 	andeq	r0, r0, r0, lsl #16
20001f64:	00000001 	andeq	r0, r0, r1
	...
20001f70:	00000800 	andeq	r0, r0, r0, lsl #16
20001f74:	00000001 	andeq	r0, r0, r1
	...

20001fa8 <PlayerRightWins_bits>:
	...
20001fd8:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001fe8:	00007ff0 	strdeq	r7, [r0], -r0
20001fec:	00000000 	andeq	r0, r0, r0
20001ff0:	0007fc00 	andeq	pc, r7, r0, lsl #24
20001ff4:	00000000 	andeq	r0, r0, r0
20001ff8:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
20001ffc:	00000000 	andeq	r0, r0, r0
20002000:	001fff80 	andseq	pc, pc, r0, lsl #31
20002004:	00000000 	andeq	r0, r0, r0
20002008:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
2000200c:	00000000 	andeq	r0, r0, r0
20002010:	003fff80 	eorseq	pc, pc, r0, lsl #31
20002014:	00000000 	andeq	r0, r0, r0
20002018:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
2000201c:	00000000 	andeq	r0, r0, r0
20002020:	003e0f80 	eorseq	r0, lr, r0, lsl #31
20002024:	000000e0 	andeq	r0, r0, r0, ror #1
20002028:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
2000202c:	00000000 	andeq	r0, r0, r0
20002030:	003c0780 	eorseq	r0, ip, r0, lsl #15
20002034:	007000e0 	rsbseq	r0, r0, r0, ror #1
20002038:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
2000203c:	00000000 	andeq	r0, r0, r0
20002040:	00380700 	eorseq	r0, r8, r0, lsl #14
20002044:	007000e0 	rsbseq	r0, r0, r0, ror #1
20002048:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
2000204c:	00000000 	andeq	r0, r0, r0
20002050:	00380f00 	eorseq	r0, r8, r0, lsl #30
20002054:	007001e0 	rsbseq	r0, r0, r0, ror #3
20002058:	000e7870 	andeq	r7, lr, r0, ror r8
2000205c:	00000000 	andeq	r0, r0, r0
20002060:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002064:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
20002068:	000e7ff0 	strdeq	r7, [lr], -r0
2000206c:	000fc000 	andeq	ip, pc, r0
20002070:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002074:	3ff001c0 	svccc	0x00f001c0
20002078:	000e7ff0 	strdeq	r7, [lr], -r0
2000207c:	001fe000 	andseq	lr, pc, r0
20002080:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002084:	3ffc01c0 	svccc	0x00fc01c0
20002088:	000e3ff0 	strdeq	r3, [lr], -r0
2000208c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002090:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002094:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
20002098:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000209c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
200020a0:	000ffe03 	andeq	pc, pc, r3, lsl #28
200020a4:	00fc03c0 	rscseq	r0, ip, r0, asr #7
200020a8:	3f0f00e0 	svccc	0x000f00e0
200020ac:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
200020b0:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
200020b4:	00e00780 	rsceq	r0, r0, r0, lsl #15
200020b8:	3f8700e0 	svccc	0x008700e0
200020bc:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
200020c0:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
200020c4:	00e0078f 	rsceq	r0, r0, pc, lsl #15
200020c8:	3f8700e0 	svccc	0x008700e0
200020cc:	3f8ffbce 	svccc	0x008ffbce
200020d0:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200020d4:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
200020d8:	7bc701e0 	blvc	1f1c2860 <startup-0xe3d7a0>
200020dc:	1f0ffbde 	svcne	0x000ffbde
200020e0:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200020e4:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
200020e8:	7bc701e0 	blvc	1f1c2870 <startup-0xe3d790>
200020ec:	0f0fbbfe 	svceq	0x000fbbfe
200020f0:	e783cf00 	str	ip, [r3, r0, lsl #30]
200020f4:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
200020f8:	7bc701c0 	blvc	1f1c2800 <startup-0xe3d800>
200020fc:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20002100:	e7838f00 	str	r8, [r3, r0, lsl #30]
20002104:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
20002108:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000210c:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20002110:	e7838f00 	str	r8, [r3, r0, lsl #30]
20002114:	01e39e3c 	mvneq	r9, ip, lsr lr
20002118:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000211c:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20002120:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
20002124:	01c39e3c 	biceq	r9, r3, ip, lsr lr
20002128:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
2000212c:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20002130:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
20002134:	01c39e3c 	biceq	r9, r3, ip, lsr lr
20002138:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
2000213c:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20002140:	e3838380 	orr	r8, r3, #128, 6
20002144:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
20002148:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
2000214c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002150:	e3838380 	orr	r8, r3, #128, 6
20002154:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
20002158:	df800070 	svcle	0x00800070
2000215c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002160:	e3838380 	orr	r8, r3, #128, 6
20002164:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
20002168:	c0000000 	andgt	r0, r0, r0
2000216c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002170:	c3838380 	orrgt	r8, r3, #128, 6
20002174:	0383803f 	orreq	r8, r3, #63	; 0x3f
20002178:	00000000 	andeq	r0, r0, r0
2000217c:	000007c0 	andeq	r0, r0, r0, asr #15
20002180:	c3838380 	orrgt	r8, r3, #128, 6
20002184:	0380003f 	orreq	r0, r0, #63	; 0x3f
20002188:	00000000 	andeq	r0, r0, r0
2000218c:	000003e7 	andeq	r0, r0, r7, ror #7
20002190:	03838000 	orreq	r8, r3, #0
20002194:	0000003c 	andeq	r0, r0, ip, lsr r0
20002198:	00000000 	andeq	r0, r0, r0
2000219c:	000003ef 	andeq	r0, r0, pc, ror #7
200021a0:	00000000 	andeq	r0, r0, r0
200021a4:	0000003c 	andeq	r0, r0, ip, lsr r0
200021a8:	00000000 	andeq	r0, r0, r0
200021ac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200021b0:	70000000 	andvc	r0, r0, r0
200021b4:	0000001c 	andeq	r0, r0, ip, lsl r0
200021b8:	00000000 	andeq	r0, r0, r0
200021bc:	e38000ff 	orr	r0, r0, #255	; 0xff
200021c0:	70000038 	andvc	r0, r0, r8, lsr r0
200021c4:	0000001e 	andeq	r0, r0, lr, lsl r0
200021c8:	00000000 	andeq	r0, r0, r0
200021cc:	e38e007e 	orr	r0, lr, #126	; 0x7e
200021d0:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
200021d4:	0000001e 	andeq	r0, r0, lr, lsl r0
200021d8:	00000000 	andeq	r0, r0, r0
200021dc:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200021e0:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
200021e4:	0000001f 	andeq	r0, r0, pc, lsl r0
200021e8:	00000000 	andeq	r0, r0, r0
200021ec:	e38ee700 	orr	lr, lr, #0, 14
200021f0:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
200021f4:	0000000f 	andeq	r0, r0, pc
200021f8:	00000000 	andeq	r0, r0, r0
200021fc:	e38ee700 	orr	lr, lr, #0, 14
20002200:	e03f1df8 	ldrsht	r1, [pc], -r8
20002204:	0000000f 	andeq	r0, r0, pc
20002208:	00000000 	andeq	r0, r0, r0
2000220c:	e3cfef00 	bic	lr, pc, #0, 30
20002210:	c03f9df8 	ldrshtgt	r9, [pc], -r8
20002214:	00000007 	andeq	r0, r0, r7
20002218:	00000000 	andeq	r0, r0, r0
2000221c:	e3cfef00 	bic	lr, pc, #0, 30
20002220:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000222c:	e3cfde00 	bic	sp, pc, #0, 28
20002230:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000223c:	e1dffe00 	bics	pc, pc, r0, lsl #28
20002240:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000224c:	e1ffbe00 	mvns	fp, r0, lsl #28
20002250:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
2000225c:	e1fffc00 	mvns	pc, r0, lsl #24
20002260:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
2000226c:	e1fff800 	mvns	pc, r0, lsl #16
20002270:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
2000227c:	e1fbf800 	mvns	pc, r0, lsl #16
20002280:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
2000228c:	e0f1f000 	rscs	pc, r1, r0
20002290:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
2000229c:	e0f0f000 	rscs	pc, r0, r0
200022a0:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
200022ac:	0000e000 	andeq	lr, r0, r0
200022b0:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
200022c0:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

200023a8 <PlayerRightWinsWithText_bits>:
	...
200023d8:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
200023e8:	00007ff0 	strdeq	r7, [r0], -r0
200023ec:	00000000 	andeq	r0, r0, r0
200023f0:	0007fc00 	andeq	pc, r7, r0, lsl #24
200023f4:	00000000 	andeq	r0, r0, r0
200023f8:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
200023fc:	00000000 	andeq	r0, r0, r0
20002400:	001fff80 	andseq	pc, pc, r0, lsl #31
20002404:	00000000 	andeq	r0, r0, r0
20002408:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
2000240c:	00000000 	andeq	r0, r0, r0
20002410:	003fff80 	eorseq	pc, pc, r0, lsl #31
20002414:	00000000 	andeq	r0, r0, r0
20002418:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
2000241c:	00000000 	andeq	r0, r0, r0
20002420:	003e0f80 	eorseq	r0, lr, r0, lsl #31
20002424:	000000e0 	andeq	r0, r0, r0, ror #1
20002428:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
2000242c:	00000000 	andeq	r0, r0, r0
20002430:	003c0780 	eorseq	r0, ip, r0, lsl #15
20002434:	007000e0 	rsbseq	r0, r0, r0, ror #1
20002438:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
2000243c:	00000000 	andeq	r0, r0, r0
20002440:	00380700 	eorseq	r0, r8, r0, lsl #14
20002444:	007000e0 	rsbseq	r0, r0, r0, ror #1
20002448:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
2000244c:	00000000 	andeq	r0, r0, r0
20002450:	00380f00 	eorseq	r0, r8, r0, lsl #30
20002454:	007001e0 	rsbseq	r0, r0, r0, ror #3
20002458:	000e7870 	andeq	r7, lr, r0, ror r8
2000245c:	00000000 	andeq	r0, r0, r0
20002460:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002464:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
20002468:	000e7ff0 	strdeq	r7, [lr], -r0
2000246c:	000fc000 	andeq	ip, pc, r0
20002470:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002474:	3ff001c0 	svccc	0x00f001c0
20002478:	000e7ff0 	strdeq	r7, [lr], -r0
2000247c:	001fe000 	andseq	lr, pc, r0
20002480:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002484:	3ffc01c0 	svccc	0x00fc01c0
20002488:	000e3ff0 	strdeq	r3, [lr], -r0
2000248c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002490:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002494:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
20002498:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000249c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
200024a0:	000ffe03 	andeq	pc, pc, r3, lsl #28
200024a4:	00fc03c0 	rscseq	r0, ip, r0, asr #7
200024a8:	3f0f00e0 	svccc	0x000f00e0
200024ac:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
200024b0:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
200024b4:	00e00780 	rsceq	r0, r0, r0, lsl #15
200024b8:	3f8700e0 	svccc	0x008700e0
200024bc:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
200024c0:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
200024c4:	00e0078f 	rsceq	r0, r0, pc, lsl #15
200024c8:	3f8700e0 	svccc	0x008700e0
200024cc:	3f8ffbce 	svccc	0x008ffbce
200024d0:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200024d4:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
200024d8:	7bc701e0 	blvc	1f1c2c60 <startup-0xe3d3a0>
200024dc:	1f0ffbde 	svcne	0x000ffbde
200024e0:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
200024e4:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
200024e8:	7bc701e0 	blvc	1f1c2c70 <startup-0xe3d390>
200024ec:	0f0fbbfe 	svceq	0x000fbbfe
200024f0:	e783cf00 	str	ip, [r3, r0, lsl #30]
200024f4:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
200024f8:	7bc701c0 	blvc	1f1c2c00 <startup-0xe3d400>
200024fc:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20002500:	e7838f00 	str	r8, [r3, r0, lsl #30]
20002504:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
20002508:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000250c:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20002510:	e7838f00 	str	r8, [r3, r0, lsl #30]
20002514:	01e39e3c 	mvneq	r9, ip, lsr lr
20002518:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
2000251c:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20002520:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
20002524:	01c39e3c 	biceq	r9, r3, ip, lsr lr
20002528:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
2000252c:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20002530:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
20002534:	01c39e3c 	biceq	r9, r3, ip, lsr lr
20002538:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
2000253c:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20002540:	e3838380 	orr	r8, r3, #128, 6
20002544:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
20002548:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
2000254c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002550:	e3838380 	orr	r8, r3, #128, 6
20002554:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
20002558:	df800070 	svcle	0x00800070
2000255c:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002560:	e3838380 	orr	r8, r3, #128, 6
20002564:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
20002568:	c0000000 	andgt	r0, r0, r0
2000256c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002570:	c3838380 	orrgt	r8, r3, #128, 6
20002574:	0383803f 	orreq	r8, r3, #63	; 0x3f
20002578:	00000000 	andeq	r0, r0, r0
2000257c:	000007c0 	andeq	r0, r0, r0, asr #15
20002580:	c3838380 	orrgt	r8, r3, #128, 6
20002584:	0380003f 	orreq	r0, r0, #63	; 0x3f
20002588:	00000000 	andeq	r0, r0, r0
2000258c:	000003e7 	andeq	r0, r0, r7, ror #7
20002590:	03838000 	orreq	r8, r3, #0
20002594:	0000003c 	andeq	r0, r0, ip, lsr r0
20002598:	00000000 	andeq	r0, r0, r0
2000259c:	000003ef 	andeq	r0, r0, pc, ror #7
200025a0:	00000000 	andeq	r0, r0, r0
200025a4:	0000003c 	andeq	r0, r0, ip, lsr r0
200025a8:	00000000 	andeq	r0, r0, r0
200025ac:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200025b0:	70000000 	andvc	r0, r0, r0
200025b4:	0000001c 	andeq	r0, r0, ip, lsl r0
200025b8:	00000000 	andeq	r0, r0, r0
200025bc:	e38000ff 	orr	r0, r0, #255	; 0xff
200025c0:	70000038 	andvc	r0, r0, r8, lsr r0
200025c4:	0000001e 	andeq	r0, r0, lr, lsl r0
200025c8:	00000000 	andeq	r0, r0, r0
200025cc:	e38e007e 	orr	r0, lr, #126	; 0x7e
200025d0:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
200025d4:	0000001e 	andeq	r0, r0, lr, lsl r0
200025d8:	00000000 	andeq	r0, r0, r0
200025dc:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
200025e0:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
200025e4:	0000001f 	andeq	r0, r0, pc, lsl r0
200025e8:	00000000 	andeq	r0, r0, r0
200025ec:	e38ee700 	orr	lr, lr, #0, 14
200025f0:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
200025f4:	0000000f 	andeq	r0, r0, pc
200025f8:	00000000 	andeq	r0, r0, r0
200025fc:	e38ee700 	orr	lr, lr, #0, 14
20002600:	e03f1df8 	ldrsht	r1, [pc], -r8
20002604:	0000000f 	andeq	r0, r0, pc
20002608:	00000000 	andeq	r0, r0, r0
2000260c:	e3cfef00 	bic	lr, pc, #0, 30
20002610:	c03f9df8 	ldrshtgt	r9, [pc], -r8
20002614:	00000007 	andeq	r0, r0, r7
20002618:	00000000 	andeq	r0, r0, r0
2000261c:	e3cfef00 	bic	lr, pc, #0, 30
20002620:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000262c:	e3cfde00 	bic	sp, pc, #0, 28
20002630:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000263c:	e1dffe00 	bics	pc, pc, r0, lsl #28
20002640:	00079ff8 	strdeq	r9, [r7], -r8
	...
2000264c:	e1ffbe00 	mvns	fp, r0, lsl #28
20002650:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
2000265c:	e1fffc00 	mvns	pc, r0, lsl #24
20002660:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
2000266c:	e1fff800 	mvns	pc, r0, lsl #16
20002670:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
2000267c:	e1fbf800 	mvns	pc, r0, lsl #16
20002680:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
2000268c:	e0f1f000 	rscs	pc, r1, r0
20002690:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
2000269c:	e0f0f000 	rscs	pc, r0, r0
200026a0:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
200026ac:	0000e000 	andeq	lr, r0, r0
200026b0:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
200026c0:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
200026e0:	00080000 	andeq	r0, r8, r0
200026e4:	00000000 	andeq	r0, r0, r0
200026e8:	c0000000 	andgt	r0, r0, r0
200026ec:	00000003 	andeq	r0, r0, r3
200026f0:	00080000 	andeq	r0, r8, r0
200026f4:	00000000 	andeq	r0, r0, r0
200026f8:	40000000 	andmi	r0, r0, r0
200026fc:	00000004 	andeq	r0, r0, r4
20002700:	00080000 	andeq	r0, r8, r0
20002704:	00000000 	andeq	r0, r0, r0
20002708:	40000000 	andmi	r0, r0, r0
2000270c:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20002710:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20002714:	00000004 	andeq	r0, r0, r4
20002718:	40000000 	andmi	r0, r0, r0
2000271c:	00209264 	eoreq	r9, r0, r4, ror #4
20002720:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20002724:	00000004 	andeq	r0, r0, r4
20002728:	c0000000 	andgt	r0, r0, r0
2000272c:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20002730:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20002734:	00000004 	andeq	r0, r0, r4
20002738:	40000000 	andmi	r0, r0, r0
2000273c:	41040220 	tstmi	r4, r0, lsr #4
20002740:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20002744:	00000003 	andeq	r0, r0, r3
20002748:	40000000 	andmi	r0, r0, r0
2000274c:	80e39c20 	rschi	r9, r3, r0, lsr #24
20002750:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20002754:	00000002 	andeq	r0, r0, r2
	...
20002760:	00000800 	andeq	r0, r0, r0, lsl #16
20002764:	00000001 	andeq	r0, r0, r1
	...
20002770:	00000800 	andeq	r0, r0, r0, lsl #16
20002774:	00000001 	andeq	r0, r0, r1
	...

200027a8 <StartmenuWithText_bits>:
	...
200027e4:	00fff000 	rscseq	pc, pc, r0
	...
200027f4:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
20002804:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
20002814:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
20002824:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
20002834:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
20002844:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
20002854:	0700003c 	smladxeq	r0, ip, r0, r0
20002858:	003fc000 	eorseq	ip, pc, r0
	...
20002864:	0700001e 	smladeq	r0, lr, r0, r0
20002868:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002874:	0780001e 	usada8eq	r0, lr, r0, r0
20002878:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002884:	0780000f 	streq	r0, [r0, pc]
20002888:	01f9ffc0 	mvnseq	pc, r0, asr #31
2000288c:	0000007f 	andeq	r0, r0, pc, ror r0
20002890:	00000000 	andeq	r0, r0, r0
20002894:	03c0000f 	biceq	r0, r0, #15
20002898:	01f007c0 	mvnseq	r0, r0, asr #15
2000289c:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
200028a0:	00000038 	andeq	r0, r0, r8, lsr r0
200028a4:	03c00007 	biceq	r0, r0, #7
200028a8:	81e00f80 	mvnhi	r0, r0, lsl #31
200028ac:	003e01ff 	ldrshteq	r0, [lr], -pc
200028b0:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
200028b4:	03e00007 	mvneq	r0, #7
200028b8:	81c00f00 	bichi	r0, r0, r0, lsl #30
200028bc:	003e03e7 	eorseq	r0, lr, r7, ror #7
200028c0:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
200028c4:	01e00007 	mvneq	r0, r7
200028c8:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
200028cc:	007c03e3 	rsbseq	r0, ip, r3, ror #7
200028d0:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
200028d4:	01f00003 	mvnseq	r0, r3
200028d8:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
200028dc:	007c07c3 	rsbseq	r0, ip, r3, asr #15
200028e0:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
200028e4:	00f80003 	rscseq	r0, r8, r3
200028e8:	e1c01e00 	bic	r1, r0, r0, lsl #28
200028ec:	00f80781 	rscseq	r0, r8, r1, lsl #15
200028f0:	0001fc0f 	andeq	pc, r1, pc, lsl #24
200028f4:	007c0000 	rsbseq	r0, ip, r0
200028f8:	e1c01c00 	bic	r1, r0, r0, lsl #24
200028fc:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002900:	00007e0f 	andeq	r7, r0, pc, lsl #28
20002904:	003e0000 	eorseq	r0, lr, r0
20002908:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
2000290c:	81f00f00 	mvnshi	r0, r0, lsl #30
20002910:	00003e07 	andeq	r3, r0, r7, lsl #28
20002914:	001f8000 	andseq	r8, pc, r0
20002918:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
2000291c:	81f00f00 	mvnshi	r0, r0, lsl #30
20002920:	00001f07 	andeq	r1, r0, r7, lsl #30
20002924:	000fe000 	andeq	lr, pc, r0
20002928:	70fff800 	rscsvc	pc, pc, r0, lsl #16
2000292c:	83e00f00 	mvnhi	r0, #0, 30
20002930:	00000f07 	andeq	r0, r0, r7, lsl #30
20002934:	0007f000 	andeq	pc, r7, r0
20002938:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
2000293c:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
20002940:	00000783 	andeq	r0, r0, r3, lsl #15
20002944:	0001f800 	andeq	pc, r1, r0, lsl #16
20002948:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
2000294c:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
20002950:	00ff0783 	rscseq	r0, pc, r3, lsl #15
20002954:	0000fc00 	andeq	pc, r0, r0, lsl #24
20002958:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
2000295c:	8fe03c00 	svchi	0x00e03c00
20002960:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002964:	00003e00 	andeq	r3, r0, r0, lsl #28
20002968:	38007000 	stmdacc	r0, {ip, sp, lr}
2000296c:	9fe03c00 	svcls	0x00e03c00
20002970:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002974:	00001f00 	andeq	r1, r0, r0, lsl #30
20002978:	38007000 	stmdacc	r0, {ip, sp, lr}
2000297c:	9fe03c00 	svcls	0x00e03c00
20002980:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002984:	00001f00 	andeq	r1, r0, r0, lsl #30
20002988:	38007000 	stmdacc	r0, {ip, sp, lr}
2000298c:	bdc03c00 	stcllt	12, cr3, [r0]
20002990:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002994:	00000f80 	andeq	r0, r0, r0, lsl #31
20002998:	38007000 	stmdacc	r0, {ip, sp, lr}
2000299c:	fdc01c00 	stc2l	12, cr1, [r0]
200029a0:	01e079c3 	mvneq	r7, r3, asr #19
200029a4:	00000780 	andeq	r0, r0, r0, lsl #15
200029a8:	78007000 	stmdavc	r0, {ip, sp, lr}
200029ac:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
200029b0:	01e039c3 	mvneq	r3, r3, asr #19
200029b4:	000003c0 	andeq	r0, r0, r0, asr #7
200029b8:	78007000 	stmdavc	r0, {ip, sp, lr}
200029bc:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
200029c0:	01c001c3 	biceq	r0, r0, r3, asr #3
200029c4:	000003e0 	andeq	r0, r0, r0, ror #7
200029c8:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
200029cc:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
200029d0:	01c001c3 	biceq	r0, r0, r3, asr #3
200029d4:	000001e0 	andeq	r0, r0, r0, ror #3
200029d8:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
200029dc:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
200029e0:	01c001c3 	biceq	r0, r0, r3, asr #3
200029e4:	000000e0 	andeq	r0, r0, r0, ror #1
200029e8:	e0007000 	and	r7, r0, r0
200029ec:	e1c00f01 	bic	r0, r0, r1, lsl #30
200029f0:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
200029f4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
200029f8:	e0007000 	and	r7, r0, r0
200029fc:	e1c00781 	bic	r0, r0, r1, lsl #15
20002a00:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002a04:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002a08:	e0007800 	and	r7, r0, r0, lsl #16
20002a0c:	c1c007c7 	bicgt	r0, r0, r7, asr #15
20002a10:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
20002a14:	00000070 	andeq	r0, r0, r0, ror r0
20002a18:	c0007800 	andgt	r7, r0, r0, lsl #16
20002a1c:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
20002a20:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
20002a24:	00000078 	andeq	r0, r0, r8, ror r0
20002a28:	80003c00 	andhi	r3, r0, r0, lsl #24
20002a2c:	81c001ff 	strdhi	r0, [r0, #31]
20002a30:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
20002a34:	1ff00078 	svcne	0x00f00078
20002a38:	00003e00 	andeq	r3, r0, r0, lsl #28
20002a3c:	81c001fe 	strdhi	r0, [r0, #30]
20002a40:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002a44:	1fff0078 	svcne	0x00ff0078
20002a48:	00001e00 	andeq	r1, r0, r0, lsl #28
20002a4c:	81e000f8 	strdhi	r0, [r0, #8]!
20002a50:	039fff03 	orrseq	pc, pc, #3, 30
20002a54:	1fffe078 	svcne	0x00ffe078
20002a58:	00001e00 	andeq	r1, r0, r0, lsl #28
20002a5c:	81e00000 	mvnhi	r0, r0
20002a60:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002a64:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002a68:	00000000 	andeq	r0, r0, r0
20002a6c:	80e00000 	rschi	r0, r0, r0
20002a70:	0381f003 	orreq	pc, r1, #3
20002a74:	0003fff8 	strdeq	pc, [r3], -r8
20002a78:	00000000 	andeq	r0, r0, r0
20002a7c:	00e00000 	rsceq	r0, r0, r0
20002a80:	03800000 	orreq	r0, r0, #0
20002a84:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002a90:	07800000 	streq	r0, [r0, r0]
	...
20002aa0:	07800000 	streq	r0, [r0, r0]
	...
20002ab0:	07000000 	streq	r0, [r0, -r0]
	...
20002ac0:	07000000 	streq	r0, [r0, -r0]
	...
20002ad0:	07000000 	streq	r0, [r0, -r0]
	...
20002ae0:	07080000 	streq	r0, [r8, -r0]
20002ae4:	00000000 	andeq	r0, r0, r0
20002ae8:	c0000000 	andgt	r0, r0, r0
20002aec:	00000003 	andeq	r0, r0, r3
20002af0:	00080000 	andeq	r0, r8, r0
20002af4:	00000000 	andeq	r0, r0, r0
20002af8:	40000000 	andmi	r0, r0, r0
20002afc:	00000004 	andeq	r0, r0, r4
20002b00:	00080000 	andeq	r0, r8, r0
20002b04:	00000000 	andeq	r0, r0, r0
20002b08:	40000000 	andmi	r0, r0, r0
20002b0c:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20002b10:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20002b14:	00000004 	andeq	r0, r0, r4
20002b18:	40000000 	andmi	r0, r0, r0
20002b1c:	00209264 	eoreq	r9, r0, r4, ror #4
20002b20:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20002b24:	00000004 	andeq	r0, r0, r4
20002b28:	c0000000 	andgt	r0, r0, r0
20002b2c:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20002b30:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20002b34:	00000004 	andeq	r0, r0, r4
20002b38:	40000000 	andmi	r0, r0, r0
20002b3c:	41040220 	tstmi	r4, r0, lsr #4
20002b40:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20002b44:	00000003 	andeq	r0, r0, r3
20002b48:	40000000 	andmi	r0, r0, r0
20002b4c:	80e39c20 	rschi	r9, r3, r0, lsr #24
20002b50:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20002b54:	00000002 	andeq	r0, r0, r2
	...
20002b60:	00000800 	andeq	r0, r0, r0, lsl #16
20002b64:	00000001 	andeq	r0, r0, r1
	...
20002b70:	00000800 	andeq	r0, r0, r0, lsl #16
20002b74:	00000001 	andeq	r0, r0, r1
	...

20002ba8 <Startmenu_bits>:
	...
20002be4:	00fff000 	rscseq	pc, pc, r0
	...
20002bf4:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
20002c04:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
20002c14:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
20002c24:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
20002c34:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
20002c44:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
20002c54:	0700003c 	smladxeq	r0, ip, r0, r0
20002c58:	003fc000 	eorseq	ip, pc, r0
	...
20002c64:	0700001e 	smladeq	r0, lr, r0, r0
20002c68:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002c74:	0780001e 	usada8eq	r0, lr, r0, r0
20002c78:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002c84:	0780000f 	streq	r0, [r0, pc]
20002c88:	01f9ffc0 	mvnseq	pc, r0, asr #31
20002c8c:	0000007f 	andeq	r0, r0, pc, ror r0
20002c90:	00000000 	andeq	r0, r0, r0
20002c94:	03c0000f 	biceq	r0, r0, #15
20002c98:	01f007c0 	mvnseq	r0, r0, asr #15
20002c9c:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
20002ca0:	00000038 	andeq	r0, r0, r8, lsr r0
20002ca4:	03c00007 	biceq	r0, r0, #7
20002ca8:	81e00f80 	mvnhi	r0, r0, lsl #31
20002cac:	003e01ff 	ldrshteq	r0, [lr], -pc
20002cb0:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
20002cb4:	03e00007 	mvneq	r0, #7
20002cb8:	81c00f00 	bichi	r0, r0, r0, lsl #30
20002cbc:	003e03e7 	eorseq	r0, lr, r7, ror #7
20002cc0:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
20002cc4:	01e00007 	mvneq	r0, r7
20002cc8:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
20002ccc:	007c03e3 	rsbseq	r0, ip, r3, ror #7
20002cd0:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
20002cd4:	01f00003 	mvnseq	r0, r3
20002cd8:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
20002cdc:	007c07c3 	rsbseq	r0, ip, r3, asr #15
20002ce0:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
20002ce4:	00f80003 	rscseq	r0, r8, r3
20002ce8:	e1c01e00 	bic	r1, r0, r0, lsl #28
20002cec:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002cf0:	0001fc0f 	andeq	pc, r1, pc, lsl #24
20002cf4:	007c0000 	rsbseq	r0, ip, r0
20002cf8:	e1c01c00 	bic	r1, r0, r0, lsl #24
20002cfc:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002d00:	00007e0f 	andeq	r7, r0, pc, lsl #28
20002d04:	003e0000 	eorseq	r0, lr, r0
20002d08:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
20002d0c:	81f00f00 	mvnshi	r0, r0, lsl #30
20002d10:	00003e07 	andeq	r3, r0, r7, lsl #28
20002d14:	001f8000 	andseq	r8, pc, r0
20002d18:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
20002d1c:	81f00f00 	mvnshi	r0, r0, lsl #30
20002d20:	00001f07 	andeq	r1, r0, r7, lsl #30
20002d24:	000fe000 	andeq	lr, pc, r0
20002d28:	70fff800 	rscsvc	pc, pc, r0, lsl #16
20002d2c:	83e00f00 	mvnhi	r0, #0, 30
20002d30:	00000f07 	andeq	r0, r0, r7, lsl #30
20002d34:	0007f000 	andeq	pc, r7, r0
20002d38:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002d3c:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
20002d40:	00000783 	andeq	r0, r0, r3, lsl #15
20002d44:	0001f800 	andeq	pc, r1, r0, lsl #16
20002d48:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002d4c:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
20002d50:	00ff0783 	rscseq	r0, pc, r3, lsl #15
20002d54:	0000fc00 	andeq	pc, r0, r0, lsl #24
20002d58:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
20002d5c:	8fe03c00 	svchi	0x00e03c00
20002d60:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002d64:	00003e00 	andeq	r3, r0, r0, lsl #28
20002d68:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d6c:	9fe03c00 	svcls	0x00e03c00
20002d70:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002d74:	00001f00 	andeq	r1, r0, r0, lsl #30
20002d78:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d7c:	9fe03c00 	svcls	0x00e03c00
20002d80:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002d84:	00001f00 	andeq	r1, r0, r0, lsl #30
20002d88:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d8c:	bdc03c00 	stcllt	12, cr3, [r0]
20002d90:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002d94:	00000f80 	andeq	r0, r0, r0, lsl #31
20002d98:	38007000 	stmdacc	r0, {ip, sp, lr}
20002d9c:	fdc01c00 	stc2l	12, cr1, [r0]
20002da0:	01e079c3 	mvneq	r7, r3, asr #19
20002da4:	00000780 	andeq	r0, r0, r0, lsl #15
20002da8:	78007000 	stmdavc	r0, {ip, sp, lr}
20002dac:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002db0:	01e039c3 	mvneq	r3, r3, asr #19
20002db4:	000003c0 	andeq	r0, r0, r0, asr #7
20002db8:	78007000 	stmdavc	r0, {ip, sp, lr}
20002dbc:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002dc0:	01c001c3 	biceq	r0, r0, r3, asr #3
20002dc4:	000003e0 	andeq	r0, r0, r0, ror #7
20002dc8:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002dcc:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
20002dd0:	01c001c3 	biceq	r0, r0, r3, asr #3
20002dd4:	000001e0 	andeq	r0, r0, r0, ror #3
20002dd8:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002ddc:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
20002de0:	01c001c3 	biceq	r0, r0, r3, asr #3
20002de4:	000000e0 	andeq	r0, r0, r0, ror #1
20002de8:	e0007000 	and	r7, r0, r0
20002dec:	e1c00f01 	bic	r0, r0, r1, lsl #30
20002df0:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002df4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002df8:	e0007000 	and	r7, r0, r0
20002dfc:	e1c00781 	bic	r0, r0, r1, lsl #15
20002e00:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002e04:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002e08:	e0007800 	and	r7, r0, r0, lsl #16
20002e0c:	c1c007c7 	bicgt	r0, r0, r7, asr #15
20002e10:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
20002e14:	00000070 	andeq	r0, r0, r0, ror r0
20002e18:	c0007800 	andgt	r7, r0, r0, lsl #16
20002e1c:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
20002e20:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
20002e24:	00000078 	andeq	r0, r0, r8, ror r0
20002e28:	80003c00 	andhi	r3, r0, r0, lsl #24
20002e2c:	81c001ff 	strdhi	r0, [r0, #31]
20002e30:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
20002e34:	1ff00078 	svcne	0x00f00078
20002e38:	00003e00 	andeq	r3, r0, r0, lsl #28
20002e3c:	81c001fe 	strdhi	r0, [r0, #30]
20002e40:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002e44:	1fff0078 	svcne	0x00ff0078
20002e48:	00001e00 	andeq	r1, r0, r0, lsl #28
20002e4c:	81e000f8 	strdhi	r0, [r0, #8]!
20002e50:	039fff03 	orrseq	pc, pc, #3, 30
20002e54:	1fffe078 	svcne	0x00ffe078
20002e58:	00001e00 	andeq	r1, r0, r0, lsl #28
20002e5c:	81e00000 	mvnhi	r0, r0
20002e60:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002e64:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002e68:	00000000 	andeq	r0, r0, r0
20002e6c:	80e00000 	rschi	r0, r0, r0
20002e70:	0381f003 	orreq	pc, r1, #3
20002e74:	0003fff8 	strdeq	pc, [r3], -r8
20002e78:	00000000 	andeq	r0, r0, r0
20002e7c:	00e00000 	rsceq	r0, r0, r0
20002e80:	03800000 	orreq	r0, r0, #0
20002e84:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002e90:	07800000 	streq	r0, [r0, r0]
	...
20002ea0:	07800000 	streq	r0, [r0, r0]
	...
20002eb0:	07000000 	streq	r0, [r0, -r0]
	...
20002ec0:	07000000 	streq	r0, [r0, -r0]
	...
20002ed0:	07000000 	streq	r0, [r0, -r0]
	...
20002ee0:	07000000 	streq	r0, [r0, -r0]
	...

20002fa8 <paddle_geometry>:
20002fa8:	0000001c 	andeq	r0, r0, ip, lsl r0
20002fac:	00000002 	andeq	r0, r0, r2
20002fb0:	0000000e 	andeq	r0, r0, lr
20002fb4:	01000000 	mrseq	r0, (UNDEF: 0)
20002fb8:	03000200 	movweq	r0, #512	; 0x200
20002fbc:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20002fc0:	07000600 	streq	r0, [r0, -r0, lsl #12]
20002fc4:	09000800 	stmdbeq	r0, {fp}
20002fc8:	0b000a00 	bleq	200057d0 <ball+0x2758>
20002fcc:	0d000c00 	stceq	12, cr0, [r0, #-0]
20002fd0:	01010001 	tsteq	r1, r1
20002fd4:	03010201 	movweq	r0, #4609	; 0x1201
20002fd8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
20002fdc:	07010601 	streq	r0, [r1, -r1, lsl #12]
20002fe0:	09010801 	stmdbeq	r1, {r0, fp}
20002fe4:	0b010a01 	bleq	200457f0 <ball+0x42778>
20002fe8:	0d010c01 	stceq	12, cr0, [r1, #-4]

20002fec <paddle_left>:
20002fec:	20002fa8 	andcs	r2, r0, r8, lsr #31
	...
20002ff8:	00000032 	andeq	r0, r0, r2, lsr r0
20002ffc:	00000019 	andeq	r0, r0, r9, lsl r0
20003000:	20000639 	andcs	r0, r0, r9, lsr r6
20003004:	2000069b 	mulcs	r0, fp, r6
20003008:	20000bf7 	strdcs	r0, [r0], -r7
2000300c:	20000a71 	andcs	r0, r0, r1, ror sl

20003010 <paddle_right>:
20003010:	20002fa8 	andcs	r2, r0, r8, lsr #31
	...
2000301c:	0000004e 	andeq	r0, r0, lr, asr #32
20003020:	00000019 	andeq	r0, r0, r9, lsl r0
20003024:	20000639 	andcs	r0, r0, r9, lsr r6
20003028:	2000069b 	mulcs	r0, fp, r6
2000302c:	20000bf7 	strdcs	r0, [r0], -r7
20003030:	20000a71 	andcs	r0, r0, r1, ror sl

20003034 <ball_geometry>:
20003034:	0000000c 	andeq	r0, r0, ip
20003038:	00000004 	andeq	r0, r0, r4
2000303c:	00000004 	andeq	r0, r0, r4
20003040:	02000100 	andeq	r0, r0, #0, 2
20003044:	01010001 	tsteq	r1, r1
20003048:	03010201 	movweq	r0, #4609	; 0x1201
2000304c:	01020002 	tsteq	r2, r2
20003050:	03020202 	movweq	r0, #8706	; 0x2202
20003054:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20003078 <ball>:
20003078:	20003034 	andcs	r3, r0, r4, lsr r0
	...
20003084:	00000040 	andeq	r0, r0, r0, asr #32
20003088:	00000020 	andeq	r0, r0, r0, lsr #32
2000308c:	20000639 	andcs	r0, r0, r9, lsr r6
20003090:	2000069b 	mulcs	r0, fp, r6
20003094:	20000a91 	mulcs	r0, r1, sl
20003098:	20000a71 	andcs	r0, r0, r1, ror sl
2000309c:	0a030201 	beq	200c38a8 <ball+0xc0830>
200030a0:	0b060504 	bleq	201844b8 <ball+0x181440>
200030a4:	0c090807 	stceq	8, cr0, [r9], {7}
200030a8:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4
200030ac:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200030b0:	4c207265 	sfmmi	f7, 4, [r0], #-404	; 0xfffffe6c
200030b4:	3a746665 	bcc	21d1ca50 <ball+0x1d199d8>
200030b8:	00003020 	andeq	r3, r0, r0, lsr #32
200030bc:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200030c0:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
200030c4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
200030c8:	0030203a 	eorseq	r2, r0, sl, lsr r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000ece 	andeq	r0, r0, lr, asr #29
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000265 	andeq	r0, r0, r5, ror #4
  10:	0004c00c 	andeq	ip, r4, ip
  14:	0005b900 	andeq	fp, r5, r0, lsl #18
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	011d0200 	tsteq	sp, r0, lsl #4
  28:	3c080000 	stccc	0, cr0, [r8], {-0}
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000257 	andeq	r0, r0, r7, asr r2
  38:	00031704 	andeq	r1, r3, r4, lsl #14
  3c:	01070200 	mrseq	r0, (UNDEF: 39)
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0207 	strcs	r0, [sl, #-519]	; 0xfffffdf9
  4c:	00000000 	andeq	r0, r0, r0
  50:	07007905 	streq	r7, [r0, -r5, lsl #18]
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	00016902 	andeq	r6, r1, r2, lsl #18
  60:	02040700 	andeq	r0, r4, #0, 14
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00005a04 	andeq	r5, r0, r4, lsl #20
  6c:	06074400 	streq	r4, [r7], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	024d0600 	subeq	r0, sp, #0, 12
  78:	07070000 	streq	r0, [r7, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	ff060000 			; <UNDEFINED> instruction: 0xff060000
  84:	07000001 	streq	r0, [r0, -r1]
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000205 	andeq	r0, r0, r5, lsl #4
  94:	a9060907 	stmdbge	r6, {r0, r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a07 	andlt	r0, r8, r7, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	40070403 	andmi	r0, r7, r3, lsl #8
  c4:	02000003 	andeq	r0, r0, #3
  c8:	000000f9 	strdeq	r0, [r0], -r9
  cc:	68030b07 	stmdavs	r3, {r0, r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	000000f8 	strdeq	r0, [r0], -r8
  d8:	df0e0b07 	svcle	0x000e0b07
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	03c10400 	biceq	r0, r1, #0, 8
  e8:	07240000 	streq	r0, [r4, -r0]!
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	07006f65 	streq	r6, [r0, -r5, ror #30]
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	07007864 	streq	r7, [r0, -r4, ror #16]
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	07007964 	streq	r7, [r0, -r4, ror #18]
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	0000001b 	andeq	r0, r0, fp, lsl r0
 11c:	a9061007 	stmdbge	r6, {r0, r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00018c06 	andeq	r8, r1, r6, lsl #24
 128:	0b100700 	bleq	401d30 <startup-0x1fbfe2d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	044e0610 	strbeq	r0, [lr], #-1552	; 0xfffff9f0
 134:	11070000 	mrsne	r0, (UNDEF: 7)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	00061400 	andeq	r1, r6, r0, lsl #8
 140:	07000003 	streq	r0, [r0, -r3]
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000611 	andeq	r0, r0, r1, lsl r6
 150:	8d0a1307 	stchi	3, cr1, [sl, #-28]	; 0xffffffe4
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00045306 	andeq	r5, r4, r6, lsl #6
 15c:	0a140700 	beq	501d64 <startup-0x1fafe29c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	94020000 	strls	r0, [r2], #-0
 1b0:	07000005 	streq	r0, [r0, -r5]
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	93020000 	movwls	r0, #8192	; 0x2000
 1bc:	07000005 	streq	r0, [r0, -r5]
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	25080000 	strcs	r0, [r8, #-0]
 1c8:	d7000000 	strle	r0, [r0, -r0]
 1cc:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d0:	000000c0 	andeq	r0, r0, r0, asr #1
 1d4:	0e0003ff 	mcreq	3, 0, r0, cr0, cr15, {7}
 1d8:	0000030c 	andeq	r0, r0, ip, lsl #6
 1dc:	c6100102 	ldrgt	r0, [r0], -r2, lsl #2
 1e0:	05000001 	streq	r0, [r0, #-1]
 1e4:	0013a403 	andseq	sl, r3, r3, lsl #8
 1e8:	02080f20 	andeq	r0, r8, #32, 30	; 0x80
 1ec:	021a09e2 	andseq	r0, sl, #3702784	; 0x388000
 1f0:	86060000 	strhi	r0, [r6], -r0
 1f4:	02000001 	andeq	r0, r0, #1
 1f8:	003110e3 	eorseq	r1, r1, r3, ror #1
 1fc:	06000000 	streq	r0, [r0], -r0
 200:	00000339 	andeq	r0, r0, r9, lsr r3
 204:	3110e402 	tstcc	r0, r2, lsl #8
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	0001f406 	andeq	pc, r1, r6, lsl #8
 210:	11e50200 	mvnne	r0, r0, lsl #4
 214:	0000021a 	andeq	r0, r0, sl, lsl r2
 218:	040a0004 	streq	r0, [sl], #-4
 21c:	00000031 	andeq	r0, r0, r1, lsr r0
 220:	00042702 	andeq	r2, r4, r2, lsl #14
 224:	03e60200 	mvneq	r0, #0, 4
 228:	000001e9 	andeq	r0, r0, r9, ror #3
 22c:	00045d0e 	andeq	r5, r4, lr, lsl #26
 230:	10010400 	andne	r0, r1, r0, lsl #8
 234:	00000025 	andeq	r0, r0, r5, lsr #32
 238:	17a40305 	strne	r0, [r4, r5, lsl #6]!
 23c:	360e2000 	strcc	r2, [lr], -r0
 240:	04000001 	streq	r0, [r0], #-1
 244:	00251002 	eoreq	r1, r5, r2
 248:	03050000 	movweq	r0, #20480	; 0x5000
 24c:	200017a5 	andcs	r1, r0, r5, lsr #15
 250:	00003108 	andeq	r3, r0, r8, lsl #2
 254:	00026100 	andeq	r6, r2, r0, lsl #2
 258:	00c00d00 	sbceq	r0, r0, r0, lsl #26
 25c:	03ff0000 	mvnseq	r0, #0
 260:	00770e00 	rsbseq	r0, r7, r0, lsl #28
 264:	03090000 	movweq	r0, #36864	; 0x9000
 268:	00025016 	andeq	r5, r2, r6, lsl r0
 26c:	a8030500 	stmdage	r3, {r8, sl}
 270:	0e200017 	miaeq	acc0, r7, r0
 274:	0000008b 	andeq	r0, r0, fp, lsl #1
 278:	5016030a 	andspl	r0, r6, sl, lsl #6
 27c:	05000002 	streq	r0, [r0, #-2]
 280:	001ba803 	andseq	sl, fp, r3, lsl #16
 284:	03650e20 	cmneq	r5, #32, 28	; 0x200
 288:	030b0000 	movweq	r0, #45056	; 0xb000
 28c:	00025016 	andeq	r5, r2, r6, lsl r0
 290:	a8030500 	stmdage	r3, {r8, sl}
 294:	0e20001f 	miaeq	acc0, pc, r0
 298:	000003da 	ldrdeq	r0, [r0], -sl
 29c:	5016030c 	andspl	r0, r6, ip, lsl #6
 2a0:	05000002 	streq	r0, [r0, #-2]
 2a4:	0023a803 	eoreq	sl, r3, r3, lsl #16
 2a8:	016f0e20 	cmneq	pc, r0, lsr #28
 2ac:	030d0000 	movweq	r0, #53248	; 0xd000
 2b0:	00025016 	andeq	r5, r2, r6, lsl r0
 2b4:	a8030500 	stmdage	r3, {r8, sl}
 2b8:	0e200027 	cdpeq	0, 2, cr0, cr0, cr7, {1}
 2bc:	000001ad 	andeq	r0, r0, sp, lsr #3
 2c0:	5016030e 	andspl	r0, r6, lr, lsl #6
 2c4:	05000002 	streq	r0, [r0, #-2]
 2c8:	002ba803 	eoreq	sl, fp, r3, lsl #16
 2cc:	00d60e20 	sbcseq	r0, r6, r0, lsr #28
 2d0:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
 2d4:	0000c711 	andeq	ip, r0, r1, lsl r7
 2d8:	a8030500 	stmdage	r3, {r8, sl}
 2dc:	0e20002f 	cdpeq	0, 2, cr0, cr0, cr15, {1}
 2e0:	00000225 	andeq	r0, r0, r5, lsr #4
 2e4:	ae0f1f06 	cdpge	15, 0, cr1, cr15, cr6, {0}
 2e8:	05000001 	streq	r0, [r0, #-1]
 2ec:	002fec03 	eoreq	lr, pc, r3, lsl #24
 2f0:	01490e20 	cmpeq	r9, r0, lsr #28
 2f4:	20060000 	andcs	r0, r6, r0
 2f8:	0001ae0f 	andeq	sl, r1, pc, lsl #28
 2fc:	10030500 	andne	r0, r3, r0, lsl #10
 300:	0e200030 	mcreq	0, 1, r0, cr0, cr0, {1}
 304:	000004a6 	andeq	r0, r0, r6, lsr #9
 308:	c7112206 	ldrgt	r2, [r1, -r6, lsl #4]
 30c:	05000000 	streq	r0, [r0, #-0]
 310:	00303403 	eorseq	r3, r0, r3, lsl #8
 314:	052e0e20 	streq	r0, [lr, #-3616]!	; 0xfffff1e0
 318:	23060000 	movwcs	r0, #24576	; 0x6000
 31c:	0001ae0f 	andeq	sl, r1, pc, lsl #28
 320:	78030500 	stmdavc	r3, {r8, sl}
 324:	10200030 	eorne	r0, r0, r0, lsr r0
 328:	000000a7 	andeq	r0, r0, r7, lsr #1
 32c:	6c068206 	sfmvs	f0, 1, [r6], {6}
 330:	20200011 	eorcs	r0, r0, r1, lsl r0
 334:	01000001 	tsteq	r0, r1
 338:	00039f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 33c:	00621100 	rsbeq	r1, r2, r0, lsl #2
 340:	ba0a8306 	blt	2a0f60 <startup-0x1fd5f0a0>
 344:	02000001 	andeq	r0, r0, #1
 348:	62116c91 	andsvs	r6, r1, #37120	; 0x9100
 34c:	84060032 	strhi	r0, [r6], #-50	; 0xffffffce
 350:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 354:	68910200 	ldmvs	r1, {r9}
 358:	0005390e 	andeq	r3, r5, lr, lsl #18
 35c:	0a850600 	beq	fe141b64 <ball+0xde13eaec>
 360:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 364:	0e649102 	lgneqs	f1, f2
 368:	00000391 	muleq	r0, r1, r3
 36c:	ba0a8606 	blt	2a1b8c <startup-0x1fd5e474>
 370:	02000001 	andeq	r0, r0, #1
 374:	9a126091 	bls	4985c0 <startup-0x1fb67a40>
 378:	da200011 	ble	8003c4 <startup-0x1f7ffc3c>
 37c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 380:	000003c6 	andeq	r0, r0, r6, asr #7
 384:	9f089806 	svcls	0x00089806
 388:	02000003 	andeq	r0, r0, #3
 38c:	910e5f91 			; <UNDEFINED> instruction: 0x910e5f91
 390:	06000004 	streq	r0, [r0], -r4
 394:	039f0899 	orrseq	r0, pc, #10027008	; 0x990000
 398:	91020000 	mrsls	r0, (UNDEF: 2)
 39c:	0300005e 	movweq	r0, #94	; 0x5e
 3a0:	02600801 	rsbeq	r0, r0, #65536	; 0x10000
 3a4:	2f130000 	svccs	0x00130000
 3a8:	06000003 	streq	r0, [r0], -r3
 3ac:	100c0632 	andne	r0, ip, r2, lsr r6
 3b0:	01602000 	cmneq	r0, r0
 3b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3b8:	0000044d 	andeq	r0, r0, sp, asr #8
 3bc:	00101612 	andseq	r1, r0, r2, lsl r6
 3c0:	00013220 	andeq	r3, r1, r0, lsr #4
 3c4:	00260e00 	eoreq	r0, r6, r0, lsl #28
 3c8:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
 3cc:	00044d0f 	andeq	r4, r4, pc, lsl #26
 3d0:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 3d4:	00002d0e 	andeq	r2, r0, lr, lsl #26
 3d8:	0f4f0600 	svceq	0x004f0600
 3dc:	0000044d 	andeq	r0, r0, sp, asr #8
 3e0:	14669102 	strbtne	r9, [r6], #-258	; 0xfffffefe
 3e4:	2000101e 	andcs	r1, r0, lr, lsl r0
 3e8:	00000034 	andeq	r0, r0, r4, lsr r0
 3ec:	000003fe 	strdeq	r0, [r0], -lr
 3f0:	06006911 			; <UNDEFINED> instruction: 0x06006911
 3f4:	00a90d36 	adceq	r0, r9, r6, lsr sp
 3f8:	91020000 	mrsls	r0, (UNDEF: 2)
 3fc:	60140074 	andsvs	r0, r4, r4, ror r0
 400:	34200010 	strtcc	r0, [r0], #-16
 404:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 408:	11000004 	tstne	r0, r4
 40c:	3c060069 	stccc	0, cr0, [r6], {105}	; 0x69
 410:	0000a90d 	andeq	sl, r0, sp, lsl #18
 414:	70910200 	addsvc	r0, r1, r0, lsl #4
 418:	109e1400 	addsne	r1, lr, r0, lsl #8
 41c:	00342000 	eorseq	r2, r4, r0
 420:	04340000 	ldrteq	r0, [r4], #-0
 424:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 428:	0d420600 	stcleq	6, cr0, [r2, #-0]
 42c:	000000a9 	andeq	r0, r0, r9, lsr #1
 430:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 434:	0010e012 	andseq	lr, r0, r2, lsl r0
 438:	00003420 	andeq	r3, r0, r0, lsr #8
 43c:	00691100 	rsbeq	r1, r9, r0, lsl #2
 440:	a90d4806 	stmdbge	sp, {r1, r2, fp, lr}
 444:	02000000 	andeq	r0, r0, #0
 448:	00006891 	muleq	r0, r1, r8
 44c:	06010300 	streq	r0, [r1], -r0, lsl #6
 450:	00000259 	andeq	r0, r0, r9, asr r2
 454:	00039e15 	andeq	r9, r3, r5, lsl lr
 458:	06250600 	strteq	r0, [r5], -r0, lsl #12
 45c:	20000fcc 	andcs	r0, r0, ip, asr #31
 460:	00000040 	andeq	r0, r0, r0, asr #32
 464:	85159c01 	ldrhi	r9, [r5, #-3073]	; 0xfffff3ff
 468:	06000005 	streq	r0, [r0], -r5
 46c:	00000617 	andeq	r0, r0, r7, lsl r6
 470:	000c2000 	andeq	r2, ip, r0
 474:	9c010000 	stcls	0, cr0, [r1], {-0}
 478:	00019610 	andeq	r9, r1, r0, lsl r6
 47c:	06810500 	streq	r0, [r1], r0, lsl #10
 480:	20000f4a 	andcs	r0, r0, sl, asr #30
 484:	00000082 	andeq	r0, r0, r2, lsl #1
 488:	04ba9c01 	ldrteq	r9, [sl], #3073	; 0xc01
 48c:	73110000 	tstvc	r1, #0
 490:	09820500 	stmibeq	r2, {r8, sl}
 494:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
 498:	0e6c9102 	lgneqe	f1, f2
 49c:	00000533 	andeq	r0, r0, r3, lsr r5
 4a0:	c0078305 	andgt	r8, r7, r5, lsl #6
 4a4:	02000004 	andeq	r0, r0, #4
 4a8:	560e5c91 			; <UNDEFINED> instruction: 0x560e5c91
 4ac:	05000001 	streq	r0, [r0, #-1]
 4b0:	04d00784 	ldrbeq	r0, [r0], #1924	; 0x784
 4b4:	91020000 	mrsls	r0, (UNDEF: 2)
 4b8:	040a004c 	streq	r0, [sl], #-76	; 0xffffffb4
 4bc:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
 4c0:	00039f08 	andeq	r9, r3, r8, lsl #30
 4c4:	0004d000 	andeq	sp, r4, r0
 4c8:	00c00900 	sbceq	r0, r0, r0, lsl #18
 4cc:	000e0000 	andeq	r0, lr, r0
 4d0:	00039f08 	andeq	r9, r3, r8, lsl #30
 4d4:	0004e000 	andeq	lr, r4, r0
 4d8:	00c00900 	sbceq	r0, r0, r0, lsl #18
 4dc:	000f0000 	andeq	r0, pc, r0
 4e0:	00012510 	andeq	r2, r1, r0, lsl r5
 4e4:	067a0500 	ldrbteq	r0, [sl], -r0, lsl #10
 4e8:	20000f10 	andcs	r0, r0, r0, lsl pc
 4ec:	0000003a 	andeq	r0, r0, sl, lsr r0
 4f0:	05049c01 	streq	r9, [r4, #-3073]	; 0xfffff3ff
 4f4:	63160000 	tstvs	r6, #0
 4f8:	257a0500 	ldrbcs	r0, [sl, #-1280]!	; 0xfffffb00
 4fc:	00000031 	andeq	r0, r0, r1, lsr r0
 500:	00779102 	rsbseq	r9, r7, r2, lsl #2
 504:	00038410 	andeq	r8, r3, r0, lsl r4
 508:	06700500 	ldrbteq	r0, [r0], -r0, lsl #10
 50c:	20000ec2 	andcs	r0, r0, r2, asr #29
 510:	0000004e 	andeq	r0, r0, lr, asr #32
 514:	05449c01 	strbeq	r9, [r4, #-3073]	; 0xfffff3ff
 518:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
 51c:	17700500 	ldrbne	r0, [r0, -r0, lsl #10]!
 520:	000000a9 	andeq	r0, r0, r9, lsr #1
 524:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 528:	70050079 	andvc	r0, r5, r9, ror r0
 52c:	0000a91e 	andeq	sl, r0, lr, lsl r9
 530:	68910200 	ldmvs	r1, {r9}
 534:	0004160e 	andeq	r1, r4, lr, lsl #12
 538:	10730500 	rsbsne	r0, r3, r0, lsl #10
 53c:	00000031 	andeq	r0, r0, r1, lsr r0
 540:	00779102 	rsbseq	r9, r7, r2, lsl #2
 544:	00062817 	andeq	r2, r6, r7, lsl r8
 548:	06670500 	strbteq	r0, [r7], -r0, lsl #10
 54c:	20000e94 	mulcs	r0, r4, lr
 550:	0000002e 	andeq	r0, r0, lr, lsr #32
 554:	0b109c01 	bleq	427560 <startup-0x1fbd8aa0>
 558:	05000002 	streq	r0, [r0, #-2]
 55c:	0e580660 	cdpeq	6, 5, cr0, cr8, cr0, {3}
 560:	003c2000 	eorseq	r2, ip, r0
 564:	9c010000 	stcls	0, cr0, [r1], {-0}
 568:	0000057c 	andeq	r0, r0, ip, ror r5
 56c:	0000ce18 	andeq	ip, r0, r8, lsl lr
 570:	22600500 	rsbcs	r0, r0, #0, 10
 574:	00000031 	andeq	r0, r0, r1, lsr r0
 578:	00779102 	rsbseq	r9, r7, r2, lsl #2
 57c:	00061619 	andeq	r1, r6, r9, lsl r6
 580:	0f560500 	svceq	0x00560500
 584:	00000031 	andeq	r0, r0, r1, lsr r0
 588:	20000e18 	andcs	r0, r0, r8, lsl lr
 58c:	00000040 	andeq	r0, r0, r0, asr #32
 590:	05a59c01 	streq	r9, [r5, #3073]!	; 0xc01
 594:	72110000 	andsvc	r0, r1, #0
 598:	58050076 	stmdapl	r5, {r1, r2, r4, r5, r6}
 59c:	00003110 	andeq	r3, r0, r0, lsl r1
 5a0:	6f910200 	svcvs	0x00910200
 5a4:	055a1900 	ldrbeq	r1, [sl, #-2304]	; 0xfffff700
 5a8:	4c050000 	stcmi	0, cr0, [r5], {-0}
 5ac:	0000310f 	andeq	r3, r0, pc, lsl #2
 5b0:	000dd800 	andeq	sp, sp, r0, lsl #16
 5b4:	00004020 	andeq	r4, r0, r0, lsr #32
 5b8:	ce9c0100 	fmlgte	f0, f4, f0
 5bc:	11000005 	tstne	r0, r5
 5c0:	05007672 	streq	r7, [r0, #-1650]	; 0xfffff98e
 5c4:	0031104e 	eorseq	r1, r1, lr, asr #32
 5c8:	91020000 	mrsls	r0, (UNDEF: 2)
 5cc:	00190077 	andseq	r0, r9, r7, ror r0
 5d0:	05000004 	streq	r0, [r0, #-4]
 5d4:	00310f42 	eorseq	r0, r1, r2, asr #30
 5d8:	0da40000 	stceq	0, cr0, [r4]
 5dc:	00342000 	eorseq	r2, r4, r0
 5e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5e4:	000005f7 	strdeq	r0, [r0], -r7
 5e8:	00767211 	rsbseq	r7, r6, r1, lsl r2
 5ec:	31104305 	tstcc	r0, r5, lsl #6
 5f0:	02000000 	andeq	r0, r0, #0
 5f4:	10007791 	mulne	r0, r1, r7
 5f8:	000001cb 	andeq	r0, r0, fp, asr #3
 5fc:	74063905 	strvc	r3, [r6], #-2309	; 0xfffff6fb
 600:	3020000d 	eorcc	r0, r0, sp
 604:	01000000 	mrseq	r0, (UNDEF: 0)
 608:	00061d9c 	muleq	r6, ip, sp
 60c:	00ce1800 	sbceq	r1, lr, r0, lsl #16
 610:	39050000 	stmdbcc	r5, {}	; <UNPREDICTABLE>
 614:	0000312b 	andeq	r3, r0, fp, lsr #2
 618:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 61c:	042e1000 	strteq	r1, [lr], #-0
 620:	33050000 	movwcc	r0, #20480	; 0x5000
 624:	000d4a06 	andeq	r4, sp, r6, lsl #20
 628:	00002a20 	andeq	r2, r0, r0, lsr #20
 62c:	519c0100 	orrspl	r0, ip, r0, lsl #2
 630:	18000006 	stmdane	r0, {r1, r2}
 634:	000001f4 	strdeq	r0, [r0], -r4
 638:	31253305 			; <UNDEFINED> instruction: 0x31253305
 63c:	02000000 	andeq	r0, r0, #0
 640:	cb1a7791 	blgt	69e48c <startup-0x1f961b74>
 644:	05000001 	streq	r0, [r0, #-1]
 648:	00a90230 	adceq	r0, r9, r0, lsr r2
 64c:	001b0000 	andseq	r0, fp, r0
 650:	06331000 	ldrteq	r1, [r3], -r0
 654:	2d050000 	stccs	0, cr0, [r5, #-0]
 658:	000d2006 	andeq	r2, sp, r6
 65c:	00002a20 	andeq	r2, r0, r0, lsr #20
 660:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
 664:	18000006 	stmdane	r0, {r1, r2}
 668:	000000ce 	andeq	r0, r0, lr, asr #1
 66c:	31242d05 			; <UNDEFINED> instruction: 0x31242d05
 670:	02000000 	andeq	r0, r0, #0
 674:	cb1a7791 	blgt	69e4c0 <startup-0x1f961b40>
 678:	05000001 	streq	r0, [r0, #-1]
 67c:	00a90230 	adceq	r0, r9, r0, lsr r2
 680:	001b0000 	andseq	r0, fp, r0
 684:	02381c00 	eorseq	r1, r8, #0, 24
 688:	27050000 	strcs	r0, [r5, -r0]
 68c:	000cd806 	andeq	sp, ip, r6, lsl #16
 690:	00004820 	andeq	r4, r0, r0, lsr #16
 694:	b89c0100 	ldmlt	ip, {r8}
 698:	16000006 	strne	r0, [r0], -r6
 69c:	27050078 	smlsdxcs	r5, r8, r0, r0
 6a0:	00003129 	andeq	r3, r0, r9, lsr #2
 6a4:	6f910200 	svcvs	0x00910200
 6a8:	0003a70e 	andeq	sl, r3, lr, lsl #14
 6ac:	07280500 	streq	r0, [r8, -r0, lsl #10]!
 6b0:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
 6b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6b8:	0000641c 	andeq	r6, r0, ip, lsl r4
 6bc:	06230500 	strteq	r0, [r3], -r0, lsl #10
 6c0:	20000ca8 	andcs	r0, r0, r8, lsr #25
 6c4:	00000030 	andeq	r0, r0, r0, lsr r0
 6c8:	06dc9c01 	ldrbeq	r9, [ip], r1, lsl #24
 6cc:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
 6d0:	27230500 	strcs	r0, [r3, -r0, lsl #10]!
 6d4:	00000031 	andeq	r0, r0, r1, lsr r0
 6d8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6dc:	00000f10 	andeq	r0, r0, r0, lsl pc
 6e0:	06380400 	ldrteq	r0, [r8], -r0, lsl #8
 6e4:	20000bf6 	strdcs	r0, [r0], -r6
 6e8:	000000b2 	strheq	r0, [r0], -r2
 6ec:	071e9c01 	ldreq	r9, [lr, -r1, lsl #24]
 6f0:	6f160000 	svcvs	0x00160000
 6f4:	1a380400 	bne	e016fc <startup-0x1f1fe904>
 6f8:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 6fc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
 700:	0000052e 	andeq	r0, r0, lr, lsr #10
 704:	ba253804 	blt	94e71c <startup-0x1f6b18e4>
 708:	02000001 	andeq	r0, r0, #1
 70c:	1d0e6891 	stcne	8, cr6, [lr, #-580]	; 0xfffffdbc
 710:	04000004 	streq	r0, [r0], #-4
 714:	00a9063d 	adceq	r0, r9, sp, lsr r6
 718:	91020000 	mrsls	r0, (UNDEF: 2)
 71c:	711d0074 	tstvc	sp, r4, ror r0
 720:	04000004 	streq	r0, [r0], #-4
 724:	0025092c 	eoreq	r0, r5, ip, lsr #18
 728:	0b880000 	bleq	fe200730 <ball+0xde1fd6b8>
 72c:	006e2000 	rsbeq	r2, lr, r0
 730:	9c010000 	stcls	0, cr0, [r1], {-0}
 734:	00000764 	andeq	r0, r0, r4, ror #14
 738:	04006f16 	streq	r6, [r0], #-3862	; 0xfffff0ea
 73c:	01ba252c 			; <UNDEFINED> instruction: 0x01ba252c
 740:	91020000 	mrsls	r0, (UNDEF: 2)
 744:	037f1874 	cmneq	pc, #116, 16	; 0x740000
 748:	2c040000 	stccs	0, cr0, [r4], {-0}
 74c:	0000a92c 	andeq	sl, r0, ip, lsr #18
 750:	70910200 	addsvc	r0, r1, r0, lsl #4
 754:	00052e18 	andeq	r2, r5, r8, lsl lr
 758:	3a2c0400 	bcc	b01760 <startup-0x1f4fe8a0>
 75c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 760:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 764:	00052910 	andeq	r2, r5, r0, lsl r9
 768:	06090400 	streq	r0, [r9], -r0, lsl #8
 76c:	20000a90 	mulcs	r0, r0, sl
 770:	000000f8 	strdeq	r0, [r0], -r8
 774:	080d9c01 	stmdaeq	sp, {r0, sl, fp, ip, pc}
 778:	6f160000 	svcvs	0x00160000
 77c:	18090400 	stmdane	r9, {sl}
 780:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 784:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
 788:	000001f9 	strdeq	r0, [r0], -r9
 78c:	ba230904 	blt	8c2ba4 <startup-0x1f73d45c>
 790:	02000001 	andeq	r0, r0, #1
 794:	910e6891 			; <UNDEFINED> instruction: 0x910e6891
 798:	04000001 	streq	r0, [r0], #-1
 79c:	00a9060d 	adceq	r0, r9, sp, lsl #12
 7a0:	91020000 	mrsls	r0, (UNDEF: 2)
 7a4:	041d0e74 	ldreq	r0, [sp], #-3700	; 0xfffff18c
 7a8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
 7ac:	0000a906 	andeq	sl, r0, r6, lsl #18
 7b0:	70910200 	addsvc	r0, r1, r0, lsl #4
 7b4:	000ab814 	andeq	fp, sl, r4, lsl r8
 7b8:	00002c20 	andeq	r2, r0, r0, lsr #24
 7bc:	0007e200 	andeq	lr, r7, r0, lsl #4
 7c0:	03841e00 	orreq	r1, r4, #0, 28
 7c4:	14040000 	strne	r0, [r4], #-0
 7c8:	0000a903 	andeq	sl, r0, r3, lsl #18
 7cc:	0007d300 	andeq	sp, r7, r0, lsl #6
 7d0:	1a001b00 	bne	73d8 <startup-0x1fff8c28>
 7d4:	00000125 	andeq	r0, r0, r5, lsr #2
 7d8:	a9031504 	stmdbge	r3, {r2, r8, sl, ip}
 7dc:	1b000000 	blne	7e4 <startup-0x1ffff81c>
 7e0:	f4120000 			; <UNDEFINED> instruction: 0xf4120000
 7e4:	2c20000a 	stccs	0, cr0, [r0], #-40	; 0xffffffd8
 7e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 7ec:	00000384 	andeq	r0, r0, r4, lsl #7
 7f0:	a9031404 	stmdbge	r3, {r2, sl, ip}
 7f4:	fd000000 	stc2	0, cr0, [r0, #-0]
 7f8:	1b000007 	blne	81c <startup-0x1ffff7e4>
 7fc:	01251a00 			; <UNDEFINED> instruction: 0x01251a00
 800:	15040000 	strne	r0, [r4, #-0]
 804:	0000a903 	andeq	sl, r0, r3, lsl #18
 808:	00001b00 	andeq	r1, r0, r0, lsl #22
 80c:	031e1c00 	tsteq	lr, #0, 24
 810:	04040000 	streq	r0, [r4], #-0
 814:	000a7006 	andeq	r7, sl, r6
 818:	00002020 	andeq	r2, r0, r0, lsr #32
 81c:	4f9c0100 	svcmi	0x009c0100
 820:	16000008 	strne	r0, [r0], -r8
 824:	0404006f 	streq	r0, [r4], #-111	; 0xffffff91
 828:	0001ba1f 	andeq	fp, r1, pc, lsl sl
 82c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 830:	00023118 	andeq	r3, r2, r8, lsl r1
 834:	26040400 	strcs	r0, [r4], -r0, lsl #8
 838:	000000a9 	andeq	r0, r0, r9, lsr #1
 83c:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
 840:	00000000 	andeq	r0, r0, r0
 844:	a9320404 	ldmdbge	r2!, {r2, sl}
 848:	02000000 	andeq	r0, r0, #0
 84c:	19006c91 	stmdbne	r0, {r0, r4, r7, sl, fp, sp, lr}
 850:	00000007 	andeq	r0, r0, r7
 854:	310f3e03 	tstcc	pc, r3, lsl #28
 858:	1a000000 	bne	860 <startup-0x1ffff7a0>
 85c:	5620000a 	strtpl	r0, [r0], -sl
 860:	01000000 	mrseq	r0, (UNDEF: 0)
 864:	0008a19c 	muleq	r8, ip, r1
 868:	05530e00 	ldrbeq	r0, [r3, #-3584]	; 0xfffff200
 86c:	3f030000 	svccc	0x00030000
 870:	00039f07 	andeq	r9, r3, r7, lsl #30
 874:	73910200 	orrsvc	r0, r1, #0, 4
 878:	79656b11 	stmdbvc	r5!, {r0, r4, r8, r9, fp, sp, lr}^
 87c:	07400300 	strbeq	r0, [r0, -r0, lsl #6]
 880:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
 884:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
 888:	20000a20 	andcs	r0, r0, r0, lsr #20
 88c:	00000046 	andeq	r0, r0, r6, asr #32
 890:	776f7211 			; <UNDEFINED> instruction: 0x776f7211
 894:	0a410300 	beq	104149c <startup-0x1efbeb64>
 898:	000000a9 	andeq	r0, r0, r9, lsr #1
 89c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8a0:	03f71900 	mvnseq	r1, #0, 18
 8a4:	2f030000 	svccs	0x00030000
 8a8:	0000310f 	andeq	r3, r0, pc, lsl #2
 8ac:	0009c400 	andeq	ip, r9, r0, lsl #8
 8b0:	00005620 	andeq	r5, r0, r0, lsr #12
 8b4:	f39c0100 	vaddw.u16	q0, q6, d0
 8b8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
 8bc:	00000553 	andeq	r0, r0, r3, asr r5
 8c0:	9f073003 	svcls	0x00073003
 8c4:	02000003 	andeq	r0, r0, #3
 8c8:	6b117391 	blvs	45d714 <startup-0x1fba28ec>
 8cc:	03007965 	movweq	r7, #2405	; 0x965
 8d0:	039f0731 	orrseq	r0, pc, #12845056	; 0xc40000
 8d4:	91020000 	mrsls	r0, (UNDEF: 2)
 8d8:	09ca1272 	stmibeq	sl, {r1, r4, r5, r6, r9, ip}^
 8dc:	00462000 	subeq	r2, r6, r0
 8e0:	72110000 	andsvc	r0, r1, #0
 8e4:	0300776f 	movweq	r7, #1903	; 0x76f
 8e8:	00a90a32 	adceq	r0, r9, r2, lsr sl
 8ec:	91020000 	mrsls	r0, (UNDEF: 2)
 8f0:	1f000074 	svcne	0x00000074
 8f4:	000003ce 	andeq	r0, r0, lr, asr #7
 8f8:	a9052903 	stmdbge	r5, {r0, r1, r8, fp, sp}
 8fc:	90000000 	andls	r0, r0, r0
 900:	34200009 	strtcc	r0, [r0], #-9
 904:	01000000 	mrseq	r0, (UNDEF: 0)
 908:	00093b9c 	muleq	r9, ip, fp
 90c:	6f721600 	svcvs	0x00721600
 910:	29030077 	stmdbcs	r3, {r0, r1, r2, r4, r5, r6}
 914:	0000a915 	andeq	sl, r0, r5, lsl r9
 918:	5c910200 	lfmpl	f0, 4, [r1], {0}
 91c:	00055318 	andeq	r5, r5, r8, lsl r3
 920:	1e290300 	cdpne	3, 2, cr0, cr9, cr0, {0}
 924:	000000a9 	andeq	r0, r0, r9, lsr #1
 928:	0e589102 	logeqe	f1, f2
 92c:	00000399 	muleq	r0, r9, r3
 930:	3b102a03 	blcc	40b144 <startup-0x1fbf4ebc>
 934:	02000009 	andeq	r0, r0, #9
 938:	08006091 	stmdaeq	r0, {r0, r4, r7, sp, lr}
 93c:	00000031 	andeq	r0, r0, r1, lsr r0
 940:	00000951 	andeq	r0, r0, r1, asr r9
 944:	0000c009 	andeq	ip, r0, r9
 948:	c0090300 	andgt	r0, r9, r0, lsl #6
 94c:	03000000 	movweq	r0, #0
 950:	02e12000 	rsceq	r2, r1, #0
 954:	20030000 	andcs	r0, r3, r0
 958:	0000a905 	andeq	sl, r0, r5, lsl #18
 95c:	00093c00 	andeq	r3, r9, r0, lsl #24
 960:	00005420 	andeq	r5, r0, r0, lsr #8
 964:	799c0100 	ldmibvc	ip, {r8}
 968:	11000009 	tstne	r0, r9
 96c:	21030063 	tstcs	r3, r3, rrx
 970:	00003110 	andeq	r3, r0, r0, lsl r1
 974:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 978:	01bc2000 			; <UNDEFINED> instruction: 0x01bc2000
 97c:	17030000 	strne	r0, [r3, -r0]
 980:	0000a905 	andeq	sl, r0, r5, lsl #18
 984:	0008e800 	andeq	lr, r8, r0, lsl #16
 988:	00005420 	andeq	r5, r0, r0, lsr #8
 98c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
 990:	11000009 	tstne	r0, r9
 994:	18030063 	stmdane	r3, {r0, r1, r5, r6}
 998:	00003110 	andeq	r3, r0, r0, lsl r1
 99c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 9a0:	043f1c00 	ldrteq	r1, [pc], #-3072	; 9a8 <startup-0x1ffff658>
 9a4:	0d030000 	stceq	0, cr0, [r3, #-0]
 9a8:	00088406 	andeq	r8, r8, r6, lsl #8
 9ac:	00006420 	andeq	r6, r0, r0, lsr #8
 9b0:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
 9b4:	16000009 	strne	r0, [r0], -r9
 9b8:	00776f72 	rsbseq	r6, r7, r2, ror pc
 9bc:	a9190d03 	ldmdbge	r9, {r0, r1, r8, sl, fp}
 9c0:	02000000 	andeq	r0, r0, #0
 9c4:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
 9c8:	0000059b 	muleq	r0, fp, r5
 9cc:	20060303 	andcs	r0, r6, r3, lsl #6
 9d0:	64200008 	strtvs	r0, [r0], #-8
 9d4:	01000000 	mrseq	r0, (UNDEF: 0)
 9d8:	0009ed9c 	muleq	r9, ip, sp
 9dc:	6f721600 	svcvs	0x00721600
 9e0:	03030077 	movweq	r0, #12407	; 0x3077
 9e4:	0000a91a 	andeq	sl, r0, sl, lsl r9
 9e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 9ec:	05791000 	ldrbeq	r1, [r9, #-0]!
 9f0:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
 9f4:	00075c06 	andeq	r5, r7, r6, lsl #24
 9f8:	0000c420 	andeq	ip, r0, r0, lsr #8
 9fc:	899c0100 	ldmibhi	ip, {r8}
 a00:	1600000a 	strne	r0, [r0], -sl
 a04:	ee020073 	mcr	0, 0, r0, cr2, cr3, {3}
 a08:	000a891a 	andeq	r8, sl, sl, lsl r9
 a0c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 a10:	02007816 	andeq	r7, r0, #1441792	; 0x160000
 a14:	00a921ee 	adceq	r2, r9, lr, ror #3
 a18:	91020000 	mrsls	r0, (UNDEF: 2)
 a1c:	00791658 	rsbseq	r1, r9, r8, asr r6
 a20:	a928ee02 	stmdbge	r8!, {r1, r9, sl, fp, sp, lr, pc}
 a24:	02000000 	andeq	r0, r0, #0
 a28:	73165491 	tstvc	r6, #-1862270976	; 0x91000000
 a2c:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
 a30:	00a92fee 	adceq	r2, r9, lr, ror #31
 a34:	91020000 	mrsls	r0, (UNDEF: 2)
 a38:	00691150 	rsbeq	r1, r9, r0, asr r1
 a3c:	a906ef02 	stmdbge	r6, {r1, r8, r9, sl, fp, sp, lr, pc}
 a40:	02000000 	andeq	r0, r0, #0
 a44:	6a117491 	bvs	45dc90 <startup-0x1fba2370>
 a48:	08ef0200 	stmiaeq	pc!, {r9}^	; <UNPREDICTABLE>
 a4c:	000000a9 	andeq	r0, r0, r9, lsr #1
 a50:	11709102 	cmnne	r0, r2, lsl #2
 a54:	ef02006b 	svc	0x0002006b
 a58:	0000a90a 	andeq	sl, r0, sl, lsl #18
 a5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 a60:	00056a0e 	andeq	r6, r5, lr, lsl #20
 a64:	0def0200 	sfmeq	f0, 2, [pc]	; a6c <startup-0x1ffff594>
 a68:	000000a9 	andeq	r0, r0, r9, lsr #1
 a6c:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
 a70:	2000079c 	mulcs	r0, ip, r7
 a74:	0000005a 	andeq	r0, r0, sl, asr r0
 a78:	00051f0e 	andeq	r1, r5, lr, lsl #30
 a7c:	12f60200 	rscsne	r0, r6, #0, 4
 a80:	00000031 	andeq	r0, r0, r1, lsr r0
 a84:	00679102 	rsbeq	r9, r7, r2, lsl #2
 a88:	20040a00 	andcs	r0, r4, r0, lsl #20
 a8c:	21000002 	tstcs	r0, r2
 a90:	00000422 	andeq	r0, r0, r2, lsr #8
 a94:	300de802 	andcc	lr, sp, r2, lsl #16
 a98:	2c200007 	stccs	0, cr0, [r0], #-28	; 0xffffffe4
 a9c:	01000000 	mrseq	r0, (UNDEF: 0)
 aa0:	000ae09c 	muleq	sl, ip, r0
 aa4:	00731600 	rsbseq	r1, r3, r0, lsl #12
 aa8:	8921e802 	stmdbhi	r1!, {r1, fp, sp, lr, pc}
 aac:	0200000a 	andeq	r0, r0, #10
 ab0:	f4187491 			; <UNDEFINED> instruction: 0xf4187491
 ab4:	02000001 	andeq	r0, r0, #1
 ab8:	021a33e8 	andseq	r3, sl, #232, 6	; 0xa0000003
 abc:	91020000 	mrsls	r0, (UNDEF: 2)
 ac0:	01861870 	orreq	r1, r6, r0, ror r8
 ac4:	e8020000 	stmda	r2, {}	; <UNPREDICTABLE>
 ac8:	0000a93d 	andeq	sl, r0, sp, lsr r9
 acc:	6c910200 	lfmvs	f0, 4, [r1], {0}
 ad0:	00033918 	andeq	r3, r3, r8, lsl r9
 ad4:	48e80200 	stmiami	r8!, {r9}^
 ad8:	000000a9 	andeq	r0, r0, r9, lsr #1
 adc:	00689102 	rsbeq	r9, r8, r2, lsl #2
 ae0:	00030622 	andeq	r0, r3, r2, lsr #12
 ae4:	06dc0200 	ldrbeq	r0, [ip], r0, lsl #4
 ae8:	200006fc 	strdcs	r0, [r0], -ip
 aec:	00000034 	andeq	r0, r0, r4, lsr r0
 af0:	0b049c01 	bleq	127afc <startup-0x1fed8504>
 af4:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 af8:	05dd0200 	ldrbeq	r0, [sp, #512]	; 0x200
 afc:	000000a9 	andeq	r0, r0, r9, lsr #1
 b00:	00749102 	rsbseq	r9, r4, r2, lsl #2
 b04:	00049910 	andeq	r9, r4, r0, lsl r9
 b08:	06d40200 	ldrbeq	r0, [r4], r0, lsl #4
 b0c:	2000069a 	mulcs	r0, sl, r6
 b10:	00000062 	andeq	r0, r0, r2, rrx
 b14:	0b3f9c01 	bleq	fe7b20 <startup-0x1f0184e0>
 b18:	6f160000 	svcvs	0x00160000
 b1c:	1bd40200 	blne	ff501324 <ball+0xdf4fe2ac>
 b20:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 b24:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 b28:	200006a2 	andcs	r0, r0, r2, lsr #13
 b2c:	00000050 	andeq	r0, r0, r0, asr r0
 b30:	02007411 	andeq	r7, r0, #285212672	; 0x11000000
 b34:	00a90ad5 	ldrdeq	r0, [r9], r5	; <UNPREDICTABLE>
 b38:	91020000 	mrsls	r0, (UNDEF: 2)
 b3c:	10000074 	andne	r0, r0, r4, ror r0
 b40:	0000034d 	andeq	r0, r0, sp, asr #6
 b44:	3806ce02 	stmdacc	r6, {r1, r9, sl, fp, lr, pc}
 b48:	62200006 	eorvs	r0, r0, #6
 b4c:	01000000 	mrseq	r0, (UNDEF: 0)
 b50:	000b7a9c 	muleq	fp, ip, sl
 b54:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 b58:	ba1ace02 	blt	6b4368 <startup-0x1f94bc98>
 b5c:	02000001 	andeq	r0, r0, #1
 b60:	40126c91 	mulsmi	r2, r1, ip
 b64:	50200006 	eorpl	r0, r0, r6
 b68:	11000000 	mrsne	r0, (UNDEF: 0)
 b6c:	cf020074 	svcgt	0x00020074
 b70:	0000a90a 	andeq	sl, r0, sl, lsl #18
 b74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b78:	ac100000 	ldcge	0, cr0, [r0], {-0}
 b7c:	02000000 	andeq	r0, r0, #0
 b80:	056c06bc 	strbeq	r0, [ip, #-1724]!	; 0xfffff944
 b84:	00cc2000 	sbceq	r2, ip, r0
 b88:	9c010000 	stcls	0, cr0, [r1], {-0}
 b8c:	00000bd4 	ldrdeq	r0, [r0], -r4
 b90:	02006911 	andeq	r6, r0, #278528	; 0x44000
 b94:	00250abd 	strhteq	r0, [r5], -sp
 b98:	91020000 	mrsls	r0, (UNDEF: 2)
 b9c:	006a1177 	rsbeq	r1, sl, r7, ror r1
 ba0:	250dbd02 	strcs	fp, [sp, #-3330]	; 0xfffff2fe
 ba4:	02000000 	andeq	r0, r0, #0
 ba8:	0b0e7691 	bleq	39e5f4 <startup-0x1fc61a0c>
 bac:	02000004 	andeq	r0, r0, #4
 bb0:	002510bd 	strhteq	r1, [r5], -sp
 bb4:	91020000 	mrsls	r0, (UNDEF: 2)
 bb8:	0063116f 	rsbeq	r1, r3, pc, ror #2
 bbc:	251cbd02 	ldrcs	fp, [ip, #-3330]	; 0xfffff2fe
 bc0:	02000000 	andeq	r0, r0, #0
 bc4:	6b117591 	blvs	45e210 <startup-0x1fba1df0>
 bc8:	0fbe0200 	svceq	0x00be0200
 bcc:	000000c0 	andeq	r0, r0, r0, asr #1
 bd0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 bd4:	0000201c 	andeq	r2, r0, ip, lsl r0
 bd8:	06af0200 	strteq	r0, [pc], r0, lsl #4
 bdc:	200004ca 	andcs	r0, r0, sl, asr #9
 be0:	000000a2 	andeq	r0, r0, r2, lsr #1
 be4:	0c329c01 	ldceq	12, cr9, [r2], #-4
 be8:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
 bec:	10af0200 	adcne	r0, pc, r0, lsl #4
 bf0:	000000a9 	andeq	r0, r0, r9, lsr #1
 bf4:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 bf8:	af020079 	svcge	0x00020079
 bfc:	0000a917 	andeq	sl, r0, r7, lsl r9
 c00:	68910200 	ldmvs	r1, {r9}
 c04:	74657316 	strbtvc	r7, [r5], #-790	; 0xfffffcea
 c08:	1eaf0200 	cdpne	2, 10, cr0, cr15, cr0, {0}
 c0c:	000000a9 	andeq	r0, r0, r9, lsr #1
 c10:	0e649102 	lgneqs	f1, f2
 c14:	00000524 	andeq	r0, r0, r4, lsr #10
 c18:	250ab002 	strcs	fp, [sl, #-2]
 c1c:	02000000 	andeq	r0, r0, #0
 c20:	8d0e7391 	stchi	3, cr7, [lr, #-580]	; 0xfffffdbc
 c24:	02000005 	andeq	r0, r0, #5
 c28:	00a906b1 	strhteq	r0, [r9], r1
 c2c:	91020000 	mrsls	r0, (UNDEF: 2)
 c30:	08130074 	ldmdaeq	r3, {r2, r4, r5, r6}
 c34:	02000001 	andeq	r0, r0, #1
 c38:	0462067b 	strbteq	r0, [r2], #-1659	; 0xfffff985
 c3c:	00682000 	rsbeq	r2, r8, r0
 c40:	9c010000 	stcls	0, cr0, [r1], {-0}
 c44:	00000c7b 	andeq	r0, r0, fp, ror ip
 c48:	00046812 	andeq	r6, r4, r2, lsl r8
 c4c:	00005820 	andeq	r5, r0, r0, lsr #16
 c50:	01e20e00 	mvneq	r0, r0, lsl #28
 c54:	7c020000 	stcvc	0, cr0, [r2], {-0}
 c58:	0000250f 	andeq	r2, r0, pc, lsl #10
 c5c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c60:	00048c12 	andeq	r8, r4, r2, lsl ip
 c64:	00002220 	andeq	r2, r0, r0, lsr #4
 c68:	64611100 	strbtvs	r1, [r1], #-256	; 0xffffff00
 c6c:	7f020064 	svcvc	0x00020064
 c70:	0000250f 	andeq	r2, r0, pc, lsl #10
 c74:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 c78:	17000000 	strne	r0, [r0, -r0]
 c7c:	00000047 	andeq	r0, r0, r7, asr #32
 c80:	0c066d02 	stceq	13, cr6, [r6], {2}
 c84:	56200004 	strtpl	r0, [r0], -r4
 c88:	01000000 	mrseq	r0, (UNDEF: 0)
 c8c:	01e71d9c 			; <UNDEFINED> instruction: 0x01e71d9c
 c90:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 c94:	00002509 	andeq	r2, r0, r9, lsl #10
 c98:	0003e200 	andeq	lr, r3, r0, lsl #4
 c9c:	00002a20 	andeq	r2, r0, r0, lsr #20
 ca0:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
 ca4:	1800000c 	stmdane	r0, {r2, r3}
 ca8:	0000040b 	andeq	r0, r0, fp, lsl #8
 cac:	25236802 	strcs	r6, [r3, #-2050]!	; 0xfffff7fe
 cb0:	02000000 	andeq	r0, r0, #0
 cb4:	10007791 	mulne	r0, r1, r7
 cb8:	00000034 	andeq	r0, r0, r4, lsr r0
 cbc:	9c066002 	stcls	0, cr6, [r6], {2}
 cc0:	46200003 	strtmi	r0, [r0], -r3
 cc4:	01000000 	mrseq	r0, (UNDEF: 0)
 cc8:	000cec9c 	muleq	ip, ip, ip
 ccc:	01f41800 	mvnseq	r1, r0, lsl #16
 cd0:	60020000 	andvs	r0, r2, r0
 cd4:	00002521 	andeq	r2, r0, r1, lsr #10
 cd8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 cdc:	00040b18 	andeq	r0, r4, r8, lsl fp
 ce0:	2f600200 	svccs	0x00600200
 ce4:	00000025 	andeq	r0, r0, r5, lsr #32
 ce8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 cec:	0000c010 	andeq	ip, r0, r0, lsl r0
 cf0:	06590200 	ldrbeq	r0, [r9], -r0, lsl #4
 cf4:	2000035c 	andcs	r0, r0, ip, asr r3
 cf8:	00000040 	andeq	r0, r0, r0, asr #32
 cfc:	0d219c01 	stceq	12, cr9, [r1, #-4]!
 d00:	ce180000 	cdpgt	0, 1, cr0, cr8, cr0, {0}
 d04:	02000000 	andeq	r0, r0, #0
 d08:	00252459 	eoreq	r2, r5, r9, asr r4
 d0c:	91020000 	mrsls	r0, (UNDEF: 2)
 d10:	040b1877 	streq	r1, [fp], #-2167	; 0xfffff789
 d14:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
 d18:	00002535 	andeq	r2, r0, r5, lsr r5
 d1c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 d20:	05ab1000 	streq	r1, [fp, #0]!
 d24:	44020000 	strmi	r0, [r2], #-0
 d28:	0002dc06 	andeq	sp, r2, r6, lsl #24
 d2c:	00008020 	andeq	r8, r0, r0, lsr #32
 d30:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
 d34:	1800000d 	stmdane	r0, {r0, r2, r3}
 d38:	00000102 	andeq	r0, r0, r2, lsl #2
 d3c:	251c4402 	ldrcs	r4, [ip, #-1026]	; 0xfffffbfe
 d40:	02000000 	andeq	r0, r0, #0
 d44:	0b187791 	bleq	61eb90 <startup-0x1f9e1470>
 d48:	02000004 	andeq	r0, r0, #4
 d4c:	00252b44 	eoreq	r2, r5, r4, asr #22
 d50:	91020000 	mrsls	r0, (UNDEF: 2)
 d54:	5c1d0076 	ldcpl	0, cr0, [sp], {118}	; 0x76
 d58:	02000001 	andeq	r0, r0, #1
 d5c:	0025092e 	eoreq	r0, r5, lr, lsr #18
 d60:	024c0000 	subeq	r0, ip, #0
 d64:	00902000 	addseq	r2, r0, r0
 d68:	9c010000 	stcls	0, cr0, [r1], {-0}
 d6c:	00000d8e 	andeq	r0, r0, lr, lsl #27
 d70:	00040b18 	andeq	r0, r4, r8, lsl fp
 d74:	1e2e0200 	cdpne	2, 2, cr0, cr14, cr0, {0}
 d78:	00000025 	andeq	r0, r0, r5, lsr #32
 d7c:	116f9102 	cmnne	pc, r2, lsl #2
 d80:	02007672 	andeq	r7, r0, #119537664	; 0x7200000
 d84:	00250a36 	eoreq	r0, r5, r6, lsr sl
 d88:	91020000 	mrsls	r0, (UNDEF: 2)
 d8c:	40100077 	andsmi	r0, r0, r7, ror r0
 d90:	02000005 	andeq	r0, r0, #5
 d94:	01d6061a 	bicseq	r0, r6, sl, lsl r6
 d98:	00762000 	rsbseq	r2, r6, r0
 d9c:	9c010000 	stcls	0, cr0, [r1], {-0}
 da0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
 da4:	00000023 	andeq	r0, r0, r3, lsr #32
 da8:	00631100 	rsbeq	r1, r3, r0, lsl #2
 dac:	250b2302 	strcs	r2, [fp, #-770]	; 0xfffffcfe
 db0:	02000000 	andeq	r0, r0, #0
 db4:	00007791 	muleq	r0, r1, r7
 db8:	0000e610 	andeq	lr, r0, r0, lsl r6
 dbc:	060d0200 	streq	r0, [sp], -r0, lsl #4
 dc0:	20000174 	andcs	r0, r0, r4, ror r1
 dc4:	00000062 	andeq	r0, r0, r2, rrx
 dc8:	0ded9c01 	stcleq	12, cr9, [sp, #4]!
 dcc:	0b180000 	bleq	600dd4 <startup-0x1f9ff22c>
 dd0:	02000004 	andeq	r0, r0, #4
 dd4:	0025200d 	eoreq	r2, r5, sp
 dd8:	91020000 	mrsls	r0, (UNDEF: 2)
 ddc:	037a0e6f 	cmneq	sl, #1776	; 0x6f0
 de0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 de4:	0000250a 	andeq	r2, r0, sl, lsl #10
 de8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 dec:	02ef1c00 	rsceq	r1, pc, #0, 24
 df0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
 df4:	00013806 	andeq	r3, r1, r6, lsl #16
 df8:	00003c20 	andeq	r3, r0, r0, lsr #24
 dfc:	119c0100 	orrsne	r0, ip, r0, lsl #2
 e00:	1600000e 	strne	r0, [r0], -lr
 e04:	09020078 	stmdbeq	r2, {r3, r4, r5, r6}
 e08:	00002525 	andeq	r2, r0, r5, lsr #10
 e0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 e10:	03ac1c00 			; <UNDEFINED> instruction: 0x03ac1c00
 e14:	04020000 	streq	r0, [r2], #-0
 e18:	0000f206 	andeq	pc, r0, r6, lsl #4
 e1c:	00004620 	andeq	r4, r0, r0, lsr #12
 e20:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
 e24:	1600000e 	strne	r0, [r0], -lr
 e28:	04020078 	streq	r0, [r2], #-120	; 0xffffff88
 e2c:	00002523 	andeq	r2, r0, r3, lsr #10
 e30:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 e34:	03591700 	cmpeq	r9, #0, 14
 e38:	21010000 	mrscs	r0, (UNDEF: 1)
 e3c:	0000e006 	andeq	lr, r0, r6
 e40:	00001220 	andeq	r1, r0, r0, lsr #4
 e44:	109c0100 	addsne	r0, ip, r0, lsl #2
 e48:	00000219 	andeq	r0, r0, r9, lsl r2
 e4c:	9a061701 	bls	186a58 <startup-0x1fe795a8>
 e50:	46200000 	strtmi	r0, [r0], -r0
 e54:	01000000 	mrseq	r0, (UNDEF: 0)
 e58:	000e839c 	muleq	lr, ip, r3
 e5c:	736d1600 	cmnvc	sp, #0, 12
 e60:	1f170100 	svcne	0x00170100
 e64:	000000c0 	andeq	r0, r0, r0, asr #1
 e68:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 e6c:	200000b8 	strhcs	r0, [r0], -r8
 e70:	0000001e 	andeq	r0, r0, lr, lsl r0
 e74:	01006911 	tsteq	r0, r1, lsl r9
 e78:	00a90a1c 	adceq	r0, r9, ip, lsl sl
 e7c:	91020000 	mrsls	r0, (UNDEF: 2)
 e80:	10000074 	andne	r0, r0, r4, ror r0
 e84:	00000485 	andeq	r0, r0, r5, lsl #9
 e88:	58060d01 	stmdapl	r6, {r0, r8, sl, fp}
 e8c:	42200000 	eormi	r0, r0, #0
 e90:	01000000 	mrseq	r0, (UNDEF: 0)
 e94:	000ebf9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
 e98:	73751600 	cmnvc	r5, #0, 12
 e9c:	1f0d0100 	svcne	0x000d0100
 ea0:	000000c0 	andeq	r0, r0, r0, asr #1
 ea4:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
 ea8:	20000076 	andcs	r0, r0, r6, ror r0
 eac:	0000001a 	andeq	r0, r0, sl, lsl r0
 eb0:	01006911 	tsteq	r0, r1, lsl r9
 eb4:	00a90a12 	adceq	r0, r9, r2, lsl sl
 eb8:	91020000 	mrsls	r0, (UNDEF: 2)
 ebc:	15000074 	strne	r0, [r0, #-116]	; 0xffffff8c
 ec0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
 ec4:	10060301 	andne	r0, r6, r1, lsl #6
 ec8:	48200000 	stmdami	r0!, {}	; <UNPREDICTABLE>
 ecc:	01000000 	mrseq	r0, (UNDEF: 0)
 ed0:	Address 0x00000ed0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	210d0000 	mrscs	r0, (UNDEF: 13)
  98:	2f134900 	svccs	0x00134900
  9c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b01130f 	bleq	44cf4 <startup-0x1ffbb30c>
  b4:	3b0b3a0b 	blcc	2ce8e8 <startup-0x1fd31718>
  b8:	010b390b 	tsteq	fp, fp, lsl #18
  bc:	10000013 	andne	r0, r0, r3, lsl r0
  c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c4:	0b3a0e03 	bleq	e838d8 <startup-0x1f17c728>
  c8:	0b390b3b 	bleq	e42dbc <startup-0x1f1bd244>
  cc:	01111927 	tsteq	r1, r7, lsr #18
  d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d8:	11000013 	tstne	r0, r3, lsl r0
  dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	13490b39 	movtne	r0, #39737	; 0x9b39
  e8:	00001802 	andeq	r1, r0, r2, lsl #16
  ec:	11010b12 	tstne	r1, r2, lsl fp
  f0:	00061201 	andeq	r1, r6, r1, lsl #4
  f4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
  f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	01110b39 	tsteq	r1, r9, lsr fp
 104:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 108:	01194296 			; <UNDEFINED> instruction: 0x01194296
 10c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 110:	0111010b 	tsteq	r1, fp, lsl #2
 114:	13010612 	movwne	r0, #5650	; 0x1612
 118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 11c:	03193f00 	tsteq	r9, #0, 30
 120:	3b0b3a0e 	blcc	2ce960 <startup-0x1fd316a0>
 124:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 128:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 12c:	97184006 	ldrls	r4, [r8, -r6]
 130:	00001942 	andeq	r1, r0, r2, asr #18
 134:	03000516 	movweq	r0, #1302	; 0x516
 138:	3b0b3a08 	blcc	2ce960 <startup-0x1fd316a0>
 13c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 140:	00180213 	andseq	r0, r8, r3, lsl r2
 144:	002e1700 	eoreq	r1, lr, r0, lsl #14
 148:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 14c:	0b3b0b3a 	bleq	ec2e3c <startup-0x1f13d1c4>
 150:	01110b39 	tsteq	r1, r9, lsr fp
 154:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 158:	00194296 	mulseq	r9, r6, r2
 15c:	00051800 	andeq	r1, r5, r0, lsl #16
 160:	0b3a0e03 	bleq	e83974 <startup-0x1f17c68c>
 164:	0b390b3b 	bleq	e42e58 <startup-0x1f1bd1a8>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 170:	03193f01 	tsteq	r9, #1, 30
 174:	3b0b3a0e 	blcc	2ce9b4 <startup-0x1fd3164c>
 178:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 17c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 180:	96184006 	ldrls	r4, [r8], -r6
 184:	13011942 	movwne	r1, #6466	; 0x1942
 188:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 18c:	03193f01 	tsteq	r9, #1, 30
 190:	3b0b3a0e 	blcc	2ce9d0 <startup-0x1fd31630>
 194:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 198:	00193c13 	andseq	r3, r9, r3, lsl ip
 19c:	00181b00 	andseq	r1, r8, r0, lsl #22
 1a0:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 1a4:	03193f01 	tsteq	r9, #1, 30
 1a8:	3b0b3a0e 	blcc	2ce9e8 <startup-0x1fd31618>
 1ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1b4:	97184006 	ldrls	r4, [r8, -r6]
 1b8:	13011942 	movwne	r1, #6466	; 0x1942
 1bc:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1c0:	03193f01 	tsteq	r9, #1, 30
 1c4:	3b0b3a0e 	blcc	2cea04 <startup-0x1fd315fc>
 1c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1cc:	11134919 	tstne	r3, r9, lsl r9
 1d0:	40061201 	andmi	r1, r6, r1, lsl #4
 1d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1d8:	00001301 	andeq	r1, r0, r1, lsl #6
 1dc:	3f012e1e 	svccc	0x00012e1e
 1e0:	3a0e0319 	bcc	380e4c <startup-0x1fc7f1b4>
 1e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 1f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f8:	0b3b0b3a 	bleq	ec2ee8 <startup-0x1f13d118>
 1fc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 200:	01111349 	tsteq	r1, r9, asr #6
 204:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 208:	01194297 			; <UNDEFINED> instruction: 0x01194297
 20c:	20000013 	andcs	r0, r0, r3, lsl r0
 210:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 214:	0b3a0e03 	bleq	e83a28 <startup-0x1f17c5d8>
 218:	0b390b3b 	bleq	e42f0c <startup-0x1f1bd0f4>
 21c:	01111349 	tsteq	r1, r9, asr #6
 220:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 224:	01194297 			; <UNDEFINED> instruction: 0x01194297
 228:	21000013 	tstcs	r0, r3, lsl r0
 22c:	0e03012e 	adfeqsp	f0, f3, #0.5
 230:	0b3b0b3a 	bleq	ec2f20 <startup-0x1f13d0e0>
 234:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 238:	06120111 			; <UNDEFINED> instruction: 0x06120111
 23c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 240:	00130119 	andseq	r0, r3, r9, lsl r1
 244:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 248:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 24c:	0b3b0b3a 	bleq	ec2f3c <startup-0x1f13d0c4>
 250:	01110b39 	tsteq	r1, r9, lsr fp
 254:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 258:	01194297 			; <UNDEFINED> instruction: 0x01194297
 25c:	23000013 	movwcs	r0, #19
 260:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 264:	Address 0x00000264 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000127c 	andeq	r1, r0, ip, ror r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001f8 	strdcs	r0, [r0], -r8
   4:	20000222 	andcs	r0, r0, r2, lsr #4
   8:	20000224 	andcs	r0, r0, r4, lsr #4
   c:	20000226 	andcs	r0, r0, r6, lsr #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	2000128c 	andcs	r1, r0, ip, lsl #5
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000b5e 	andeq	r0, r0, lr, asr fp
   4:	017c0003 	cmneq	ip, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff98 <ball+0xdfffcf20>
  58:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  5c:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
  60:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
  64:	5f525044 	svcpl	0x00525044
  68:	50525452 	subspl	r5, r2, r2, asr r4
  6c:	6f502f41 	svcvs	0x00502f41
  70:	0000676e 	andeq	r6, r0, lr, ror #14
  74:	616c6544 	cmnvs	ip, r4, asr #10
  78:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	70617247 	rsbvc	r7, r1, r7, asr #4
  84:	44636968 	strbtmi	r6, [r3], #-2408	; 0xfffff698
  88:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  8c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  90:	00000100 	andeq	r0, r0, r0, lsl #2
  94:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
  98:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  9c:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  a0:	00010068 	andeq	r0, r1, r8, rrx
  a4:	6d614700 	stclvs	7, cr4, [r1, #-0]
  a8:	676f4c65 	strbvs	r4, [pc, -r5, ror #24]!
  ac:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  b0:	00000100 	andeq	r0, r0, r0, lsl #2
  b4:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
  b8:	69724469 	ldmdbvs	r2!, {r0, r3, r5, r6, sl, lr}^
  bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
  c0:	0100682e 	tsteq	r0, lr, lsr #16
  c4:	6f500000 	svcvs	0x00500000
  c8:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
  cc:	00000100 	andeq	r0, r0, r0, lsl #2
  d0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
  d4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
  d8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  dc:	00000100 	andeq	r0, r0, r0, lsl #2
  e0:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
  e4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  e8:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
  ec:	00010068 	andeq	r0, r1, r8, rrx
  f0:	616c5000 	cmnvs	ip, r0
  f4:	4c726579 	cfldr64mi	mvdx6, [r2], #-484	; 0xfffffe1c
  f8:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
  fc:	2e736e69 	cdpcs	14, 7, cr6, cr3, cr9, {3}
 100:	006d6278 	rsbeq	r6, sp, r8, ror r2
 104:	50000001 	andpl	r0, r0, r1
 108:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 10c:	66654c72 			; <UNDEFINED> instruction: 0x66654c72
 110:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
 114:	74695773 	strbtvc	r5, [r9], #-1907	; 0xfffff88d
 118:	78655468 	stmdavc	r5!, {r3, r5, r6, sl, ip, lr}^
 11c:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 120:	0001006d 	andeq	r0, r1, sp, rrx
 124:	616c5000 	cmnvs	ip, r0
 128:	52726579 	rsbspl	r6, r2, #507510784	; 0x1e400000
 12c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 130:	736e6957 	cmnvc	lr, #1425408	; 0x15c000
 134:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 140:	69527265 	ldmdbvs	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
 144:	57746867 	ldrbpl	r6, [r4, -r7, ror #16]!
 148:	57736e69 	ldrbpl	r6, [r3, -r9, ror #28]!
 14c:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
 150:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
 154:	006d6278 	rsbeq	r6, sp, r8, ror r2
 158:	53000001 	movwpl	r0, #1
 15c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 160:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
 164:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 168:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 16c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 170:	00000100 	andeq	r0, r0, r0, lsl #2
 174:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 178:	6e656d74 	mcrvs	13, 3, r6, cr5, cr4, {3}
 17c:	62782e75 	rsbsvs	r2, r8, #1872	; 0x750
 180:	0001006d 	andeq	r0, r1, sp, rrx
 184:	17050000 	strne	r0, [r5, -r0]
 188:	10020500 	andne	r0, r2, r0, lsl #10
 18c:	14200000 	strtne	r0, [r0], #-0
 190:	052f0205 	streq	r0, [pc, #-517]!	; ffffff93 <ball+0xdfffcf1b>
 194:	0205200c 	andeq	r2, r5, #12
 198:	200c052f 	andcs	r0, ip, pc, lsr #10
 19c:	052f0205 	streq	r0, [pc, #-517]!	; ffffff9f <ball+0xdfffcf27>
 1a0:	0205200b 	andeq	r2, r5, #11
 1a4:	200c052f 	andcs	r0, ip, pc, lsr #10
 1a8:	052f0705 	streq	r0, [pc, #-1797]!	; fffffaab <ball+0xdfffca33>
 1ac:	0402000a 	streq	r0, [r2], #-10
 1b0:	19052001 	stmdbne	r5, {r0, sp}
 1b4:	01040200 	mrseq	r0, R12_usr
 1b8:	0007053c 	andeq	r0, r7, ip, lsr r5
 1bc:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1c0:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 1c4:	0105200c 	tsteq	r5, ip
 1c8:	ae22052f 	cfsh64ge	mvdx0, mvdx2, #31
 1cc:	834c0505 	movthi	r0, #50437	; 0xc505
 1d0:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 1d4:	03052e02 	movweq	r2, #24066	; 0x5e02
 1d8:	03040200 	movweq	r0, #16896	; 0x4200
 1dc:	001c0521 	andseq	r0, ip, r1, lsr #10
 1e0:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 1e4:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 1e8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1ec:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 1f0:	02052e01 	andeq	r2, r5, #1, 28
 1f4:	01040200 	mrseq	r0, R12_usr
 1f8:	31010520 	tstcc	r1, r0, lsr #10
 1fc:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 200:	05834c06 	streq	r4, [r3, #3078]	; 0xc06
 204:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 208:	0003052e 	andeq	r0, r3, lr, lsr #10
 20c:	21030402 	tstcs	r3, r2, lsl #8
 210:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 214:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 218:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 21c:	02053c01 	andeq	r3, r5, #256	; 0x100
 220:	01040200 	mrseq	r0, R12_usr
 224:	3f010520 	svccc	0x00010520
 228:	055a1305 	ldrbeq	r1, [sl, #-773]	; 0xfffffcfb
 22c:	052f2f02 	streq	r2, [pc, #-3842]!	; fffff332 <ball+0xdfffc2ba>
 230:	02042f01 	andeq	r2, r4, #1, 30
 234:	60032505 	andvs	r2, r3, r5, lsl #10
 238:	670f053c 	smladxvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 23c:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
 240:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 244:	27058301 	strcs	r8, [r5, -r1, lsl #6]
 248:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 24c:	13080105 	movwne	r0, #33029	; 0x8105
 250:	05762b05 	ldrbeq	r2, [r6, #-2821]!	; 0xfffff4fb
 254:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 258:	c10c054b 	tstgt	ip, fp, asr #10
 25c:	7a030b05 	bvc	c2e78 <startup-0x1ff3d188>
 260:	3c030520 	cfstr32cc	mvfx0, [r3], {32}
 264:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 268:	0f053d06 	svceq	0x00053d06
 26c:	3d06054b 	cfstr32cc	mvfx0, [r6, #-300]	; 0xfffffed4
 270:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
 274:	0c053c03 	stceq	12, cr3, [r5], {3}
 278:	22010521 	andcs	r0, r1, #138412032	; 0x8400000
 27c:	053e1e05 	ldreq	r1, [lr, #-3589]!	; 0xfffff1fb
 280:	053d3d02 	ldreq	r3, [sp, #-3330]!	; 0xfffff2fe
 284:	0205200d 	andeq	r2, r5, #13
 288:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 28c:	053d3003 	ldreq	r3, [sp, #-3]!
 290:	0b052f1d 	bleq	14bf0c <startup-0x1feb40f4>
 294:	4b03053c 	blmi	c178c <startup-0x1ff3e874>
 298:	2f05053d 	svccs	0x0005053d
 29c:	7a030a05 	bvc	c2ab8 <startup-0x1ff3d548>
 2a0:	2704054a 	strcs	r0, [r4, -sl, asr #10]
 2a4:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 2a8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 2ac:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 2b0:	670205ca 	strvs	r0, [r2, -sl, asr #11]
 2b4:	200d053d 	andcs	r0, sp, sp, lsr r5
 2b8:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 2ac <startup-0x1ffffd54>
 2bc:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 2c0:	0a052f0f 	beq	14bf04 <startup-0x1feb40fc>
 2c4:	4b020520 	blmi	8174c <startup-0x1ff7e8b4>
 2c8:	200e053d 	andcs	r0, lr, sp, lsr r5
 2cc:	052f0405 	streq	r0, [pc, #-1029]!	; fffffecf <ball+0xdfffce57>
 2d0:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 2d4:	03053004 	movweq	r3, #20484	; 0x5004
 2d8:	09053d4b 	stmdbeq	r5, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 2dc:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 2e0:	05ca3605 	strbeq	r3, [sl, #1541]	; 0x605
 2e4:	10059102 	andne	r9, r5, r2, lsl #2
 2e8:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 2ec:	2f3d2f59 	svccs	0x003d2f59
 2f0:	053e1005 	ldreq	r1, [lr, #-5]!
 2f4:	03054a04 	movweq	r4, #23044	; 0x5a04
 2f8:	10053d21 	andne	r3, r5, r1, lsr #26
 2fc:	4a040530 	bmi	1017c4 <startup-0x1fefe83c>
 300:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 304:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 308:	0205200f 	andeq	r2, r5, #15
 30c:	01053d2f 	tsteq	r5, pc, lsr #26
 310:	7640053d 			; <UNDEFINED> instruction: 0x7640053d
 314:	3d910205 	lfmcc	f0, 4, [r1, #20]
 318:	01053d59 	tsteq	r5, r9, asr sp
 31c:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 320:	3d910205 	lfmcc	f0, 4, [r1, #20]
 324:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 328:	2e058301 	cdpcs	3, 0, cr8, cr5, cr1, {0}
 32c:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 330:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 334:	1a056701 	bne	159f40 <startup-0x1fea60c0>
 338:	2f02054c 	svccs	0x0002054c
 33c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 340:	4b4b4b3d 	blmi	12d303c <startup-0x1ed2cfc4>
 344:	01054b4b 	tsteq	r5, fp, asr #22
 348:	3e1c053d 	mrccc	5, 0, r0, cr12, cr13, {1}
 34c:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 350:	03053c02 	movweq	r3, #23554	; 0x5c02
 354:	0f059f21 	svceq	0x00059f21
 358:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 35c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 360:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 364:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 368:	03054903 	movweq	r4, #22787	; 0x5903
 36c:	01040200 	mrseq	r0, R12_usr
 370:	00270558 	eoreq	r0, r7, r8, asr r5
 374:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 378:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 37c:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 380:	23055101 	movwcs	r5, #20737	; 0x5101
 384:	05582c03 	ldrbeq	r2, [r8, #-3075]	; 0xfffff3fd
 388:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 38c:	0011052f 	andseq	r0, r1, pc, lsr #10
 390:	3c020402 	cfstrscc	mvf0, [r2], {2}
 394:	02001c05 	andeq	r1, r0, #1280	; 0x500
 398:	053c0404 	ldreq	r0, [ip, #-1028]!	; 0xfffffbfc
 39c:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 3a0:	12053c06 	andne	r3, r5, #1536	; 0x600
 3a4:	2e15053d 	mrccs	5, 0, r0, cr5, cr13, {1}
 3a8:	05900c05 	ldreq	r0, [r0, #3077]	; 0xc05
 3ac:	04053c08 	streq	r3, [r5], #-3080	; 0xfffff3f8
 3b0:	3d05053d 	cfstr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 3b4:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 3b8:	15053e12 	strne	r3, [r5, #-3602]	; 0xfffff1ee
 3bc:	4a18052e 	bmi	60187c <startup-0x1f9fe784>
 3c0:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 3c4:	14052e08 	strne	r2, [r5], #-3592	; 0xfffff1f8
 3c8:	0335053d 	teqeq	r5, #255852544	; 0xf400000
 3cc:	0105e479 	tsteq	r5, r9, ror r4
 3d0:	76200528 	strtvc	r0, [r0], -r8, lsr #10
 3d4:	053e0f05 	ldreq	r0, [lr, #-3845]!	; 0xfffff0fb
 3d8:	02052f08 	andeq	r2, r5, #8, 30
 3dc:	210e054a 	tstcs	lr, sl, asr #10
 3e0:	01040200 	mrseq	r0, R12_usr
 3e4:	02005806 	andeq	r5, r0, #393216	; 0x60000
 3e8:	002e0204 	eoreq	r0, lr, r4, lsl #4
 3ec:	20040402 	andcs	r0, r4, r2, lsl #8
 3f0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 3f4:	2f060404 	svccs	0x00060404
 3f8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3fc:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
 400:	05c92104 	strbeq	r2, [r9, #260]	; 0x104
 404:	0405670a 	streq	r6, [r5], #-1802	; 0xfffff8f6
 408:	0005054a 	andeq	r0, r5, sl, asr #10
 40c:	21030402 	tstcs	r3, r2, lsl #8
 410:	02001905 	andeq	r1, r0, #81920	; 0x14000
 414:	059d0304 	ldreq	r0, [sp, #772]	; 0x304
 418:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 41c:	04056603 	streq	r6, [r5], #-1539	; 0xfffff9fd
 420:	01040200 	mrseq	r0, R12_usr
 424:	0016053c 	andseq	r0, r6, ip, lsr r5
 428:	55020402 	strpl	r0, [r2, #-1026]	; 0xfffffbfe
 42c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 430:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 434:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 438:	02055602 	andeq	r5, r5, #2097152	; 0x200000
 43c:	01040200 	mrseq	r0, R12_usr
 440:	03010566 	movweq	r0, #5478	; 0x1566
 444:	1c05580a 	stcne	8, cr5, [r5], {10}
 448:	4b0a0579 	blmi	281a34 <startup-0x1fd7e5cc>
 44c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 450:	0402000a 	streq	r0, [r2], #-10
 454:	16052103 	strne	r2, [r5], -r3, lsl #2
 458:	03040200 	movweq	r0, #16896	; 0x4200
 45c:	001c052e 	andseq	r0, ip, lr, lsr #10
 460:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 464:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 468:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 46c:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 470:	31052003 	tstcc	r5, r3
 474:	03040200 	movweq	r0, #16896	; 0x4200
 478:	0037052e 	eorseq	r0, r7, lr, lsr #10
 47c:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 480:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 484:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 488:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 48c:	16055703 	strne	r5, [r5], -r3, lsl #14
 490:	01040200 	mrseq	r0, R12_usr
 494:	0027053c 	eoreq	r0, r7, ip, lsr r5
 498:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 49c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 4a0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4a4:	1d053f01 	stcne	15, cr3, [r5, #-4]
 4a8:	4b0a055a 	blmi	281a18 <startup-0x1fd7e5e8>
 4ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 4b0:	0402000a 	streq	r0, [r2], #-10
 4b4:	16052103 	strne	r2, [r5], -r3, lsl #2
 4b8:	03040200 	movweq	r0, #16896	; 0x4200
 4bc:	001c052e 	andseq	r0, ip, lr, lsr #10
 4c0:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 4c4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4c8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4cc:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 4d0:	31052003 	tstcc	r5, r3
 4d4:	03040200 	movweq	r0, #16896	; 0x4200
 4d8:	0037052e 	eorseq	r0, r7, lr, lsr #10
 4dc:	74030402 	strvc	r0, [r3], #-1026	; 0xfffffbfe
 4e0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 4e4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4e8:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
 4ec:	16055703 	strne	r5, [r5], -r3, lsl #14
 4f0:	01040200 	mrseq	r0, R12_usr
 4f4:	001b053c 	andseq	r0, fp, ip, lsr r5
 4f8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4fc:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 500:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 504:	19054101 	stmdbne	r5, {r0, r8, lr}
 508:	3e08055a 	cfrshl32cc	mvfx8, mvfx10, r0
 50c:	052e0105 	streq	r0, [lr, #-261]!	; 0xfffffefb
 510:	0402000f 	streq	r0, [r2], #-15
 514:	18052103 	stmdane	r5, {r0, r1, r8, sp}
 518:	03040200 	movweq	r0, #16896	; 0x4200
 51c:	00010557 	andeq	r0, r1, r7, asr r5
 520:	3c010402 	cfstrscc	mvf0, [r1], {2}
 524:	7c4f055a 	cfstr64vc	mvdx0, [pc], {90}	; 0x5a
 528:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
 52c:	0a054b0c 	beq	153164 <startup-0x1feace9c>
 530:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 534:	054c3405 	strbeq	r3, [ip, #-1029]	; 0xfffffbfb
 538:	13057607 	movwne	r7, #22023	; 0x5607
 53c:	3c05052e 	cfstr32cc	mvfx0, [r5], {46}	; 0x2e
 540:	052f1505 	streq	r1, [pc, #-1285]!	; 43 <startup-0x1fffffbd>
 544:	12052e1d 	andne	r2, r5, #464	; 0x1d0
 548:	3015052e 	andscc	r0, r5, lr, lsr #10
 54c:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 550:	09052e12 	stmdbeq	r5, {r1, r4, r9, sl, fp, sp}
 554:	2e02052f 	cfsh32cs	mvfx0, mvfx2, #31
 558:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
 55c:	1a052e03 	bne	14bd70 <startup-0x1feb4290>
 560:	2e230521 	cfsh64cs	mvdx0, mvdx3, #17
 564:	053c3405 	ldreq	r3, [ip, #-1029]!	; 0xfffffbfb
 568:	12052e20 	andne	r2, r5, #32, 28	; 0x200
 56c:	4b0b0520 	blmi	2c19f4 <startup-0x1fd3e60c>
 570:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 574:	08052109 	stmdaeq	r5, {r0, r3, r8, sp}
 578:	210e0582 	smlabbcs	lr, r2, r5, r0
 57c:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 580:	06052e16 			; <UNDEFINED> instruction: 0x06052e16
 584:	2021052e 	eorcs	r0, r1, lr, lsr #10
 588:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 58c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 590:	04055602 	streq	r5, [r5], #-1538	; 0xfffff9fe
 594:	01040200 	mrseq	r0, R12_usr
 598:	0024053c 	eoreq	r0, r4, ip, lsr r5
 59c:	3a020402 	bcc	815ac <startup-0x1ff7ea54>
 5a0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 5a4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5a8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 5ac:	13054902 	movwne	r4, #22786	; 0x5902
 5b0:	01040200 	mrseq	r0, R12_usr
 5b4:	0002053c 	andeq	r0, r2, ip, lsr r5
 5b8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5bc:	09030105 	stmdbeq	r3, {r0, r2, r8}
 5c0:	0503043c 	streq	r0, [r3, #-1084]	; 0xfffffbc4
 5c4:	7e86031e 	mcrvc	3, 4, r0, cr6, cr14, {0}
 5c8:	4b020558 	blmi	81b30 <startup-0x1ff7e4d0>
 5cc:	2f080b05 	svccs	0x00080b05
 5d0:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 5d4:	0b052e03 	bleq	14bde8 <startup-0x1feb4218>
 5d8:	201c0521 	andscs	r0, ip, r1, lsr #10
 5dc:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 5e0:	1c05210b 	stfnes	f2, [r5], {11}
 5e4:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 5e8:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 5ec:	0305201c 	movweq	r2, #20508	; 0x501c
 5f0:	210c052e 	tstcs	ip, lr, lsr #10
 5f4:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
 5f8:	1d053001 	stcne	0, cr3, [r5, #-4]
 5fc:	4b020584 	blmi	81c14 <startup-0x1ff7e3ec>
 600:	2f080b05 	svccs	0x00080b05
 604:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 608:	0b052e03 	bleq	14be1c <startup-0x1feb41e4>
 60c:	201b0521 	andscs	r0, fp, r1, lsr #10
 610:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 614:	1b05210b 	blne	148a48 <startup-0x1feb75b8>
 618:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 61c:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 620:	0305201b 	movweq	r2, #20507	; 0x501b
 624:	210c052e 	tstcs	ip, lr, lsr #10
 628:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 62c:	15053001 	strne	r3, [r5, #-1]
 630:	3d140584 	cfldr32cc	mvfx0, [r4, #-528]	; 0xfffffdf0
 634:	05201005 	streq	r1, [r0, #-5]!
 638:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 63c:	0015054a 	andseq	r0, r5, sl, asr #10
 640:	20010402 	andcs	r0, r1, r2, lsl #8
 644:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff47 <ball+0xdfffcecf>
 648:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 64c:	01040200 	mrseq	r0, R12_usr
 650:	2f070520 	svccs	0x00070520
 654:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 658:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 65c:	07052001 	streq	r2, [r5, -r1]
 660:	4a04052f 	bmi	101b24 <startup-0x1fefe4dc>
 664:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 668:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 66c:	01052f09 	tsteq	r5, r9, lsl #30
 670:	68140521 	ldmdavs	r4, {r0, r5, r8, sl}
 674:	2010053d 	andscs	r0, r0, sp, lsr r5
 678:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 67c:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 680:	01040200 	mrseq	r0, R12_usr
 684:	2f070520 	svccs	0x00070520
 688:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 68c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 690:	07052001 	streq	r2, [r5, -r1]
 694:	4a04052f 	bmi	101b58 <startup-0x1fefe4a8>
 698:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 69c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6a0:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 6a4:	0015054a 	andseq	r0, r5, sl, asr #10
 6a8:	20010402 	andcs	r0, r1, r2, lsl #8
 6ac:	052f0905 	streq	r0, [pc, #-2309]!	; fffffdaf <ball+0xdfffcd37>
 6b0:	25052101 	strcs	r2, [r5, #-257]	; 0xfffffeff
 6b4:	59100568 	ldmdbpl	r0, {r3, r5, r6, r8, sl}
 6b8:	05751205 	ldrbeq	r1, [r5, #-517]!	; 0xfffffdfb
 6bc:	19057501 	stmdbne	r5, {r0, r8, sl, ip, sp, lr}
 6c0:	3f0a0577 	svccc	0x000a0577
 6c4:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 6c8:	0c052103 	stfeqs	f2, [r5], {3}
 6cc:	3c0a054b 	cfstr32cc	mvfx0, [sl], {75}	; 0x4b
 6d0:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
 6d4:	08054b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, lr}
 6d8:	2f0b0582 	svccs	0x000b0582
 6dc:	02001f05 	andeq	r1, r0, #5, 30
 6e0:	7a030204 	bvc	c0ef8 <startup-0x1ff3f108>
 6e4:	0002053c 	andeq	r0, r2, ip, lsr r5
 6e8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6ec:	09030905 	stmdbeq	r3, {r0, r2, r8, fp}
 6f0:	2101053c 	tstcs	r1, ip, lsr r5
 6f4:	054c1805 	strbeq	r1, [ip, #-2053]	; 0xfffff7fb
 6f8:	02053f0a 	andeq	r3, r5, #10, 30	; 0x28
 6fc:	2103052e 	tstcs	r3, lr, lsr #10
 700:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
 704:	06053c0a 	streq	r3, [r5], -sl, lsl #24
 708:	4b0a0530 	blmi	281bd0 <startup-0x1fd7e430>
 70c:	05820805 	streq	r0, [r2, #2053]	; 0x805
 710:	1f052f0b 	svcne	0x00052f0b
 714:	02040200 	andeq	r0, r4, #0, 4
 718:	053c7a03 	ldreq	r7, [ip, #-2563]!	; 0xfffff5fd
 71c:	04020002 	streq	r0, [r2], #-2
 720:	09053c01 	stmdbeq	r5, {r0, sl, fp, ip, sp}
 724:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 728:	04042101 	streq	r2, [r4], #-257	; 0xfffffeff
 72c:	b9033905 	stmdblt	r3, {r0, r2, r8, fp, ip, sp}
 730:	08054a7f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
 734:	01053d67 	tsteq	r5, r7, ror #26
 738:	4c29053d 	cfstr32mi	mvfx0, [r9], #-244	; 0xffffff0c
 73c:	055c0e05 	ldrbeq	r0, [ip, #-3589]	; 0xfffff1fb
 740:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 744:	2f0e052e 	svccs	0x000e052e
 748:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 74c:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
 750:	3d0b0530 	cfstr32cc	mvfx0, [fp, #-192]	; 0xffffff40
 754:	3d16053d 	cfldr32cc	mvfx0, [r6, #-244]	; 0xffffff0c
 758:	4b670305 	blmi	19c1374 <startup-0x1e63ec8c>
 75c:	05761305 	ldrbeq	r1, [r6, #-773]!	; 0xfffffcfb
 760:	10052e18 	andne	r2, r5, r8, lsl lr
 764:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 768:	3d2f0b05 	fstmdbxcc	pc!, {d0-d1}	;@ Deprecated
 76c:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 770:	054b6703 	strbeq	r6, [fp, #-1795]	; 0xfffff8fd
 774:	0d057609 	stceq	6, cr7, [r5, #-36]	; 0xffffffdc
 778:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 77c:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 780:	17052f0b 	strne	r2, [r5, -fp, lsl #30]
 784:	2e1c054c 	cfmac32cs	mvfx0, mvfx12, mvfx12
 788:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 78c:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 790:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 794:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 798:	18052f13 	stmdane	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 79c:	2010052e 	andscs	r0, r0, lr, lsr #10
 7a0:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 7a4:	3e02053d 	mcrcc	5, 0, r0, cr2, cr13, {1}
 7a8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 7ac:	0e05843f 	cfmvdhreq	mvd5, r8
 7b0:	2e1b0568 	cfmsc32cs	mvfx0, mvfx11, mvfx8
 7b4:	052e2005 	streq	r2, [lr, #-5]!
 7b8:	2d052015 	stccs	0, cr2, [r5, #-84]	; 0xffffffac
 7bc:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 7c0:	02000905 	andeq	r0, r0, #81920	; 0x14000
 7c4:	052f0104 	streq	r0, [pc, #-260]!	; 6c8 <startup-0x1ffff938>
 7c8:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 7cc:	1e052e01 	cdpne	14, 0, cr2, cr5, cr1, {0}
 7d0:	01040200 	mrseq	r0, R12_usr
 7d4:	0023052e 	eoreq	r0, r3, lr, lsr #10
 7d8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 7dc:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 7e0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 7e4:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 7e8:	0b051f01 	bleq	1483f4 <startup-0x1feb7c0c>
 7ec:	2e180530 	cfmvr64hcs	r0, mvdx8
 7f0:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
 7f4:	2d052012 	stccs	0, cr2, [r5, #-72]	; 0xffffffb8
 7f8:	3e0a051f 	mcrcc	5, 0, r0, cr10, cr15, {0}
 7fc:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 800:	19052e21 	stmdbne	r5, {r0, r5, r9, sl, fp, sp}
 804:	2d2e0520 	cfstr32cs	mvfx0, [lr, #-128]!	; 0xffffff80
 808:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 80c:	09054b0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, fp, lr}
 810:	21010530 	tstcs	r1, r0, lsr r5
 814:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
 818:	18055d0e 	stmdane	r5, {r1, r2, r3, r8, sl, fp, ip, lr}
 81c:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 820:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 824:	07057404 	streq	r7, [r5, -r4, lsl #8]
 828:	2e050521 	cfsh32cs	mvfx0, mvfx5, #17
 82c:	052f1505 	streq	r1, [pc, #-1285]!	; 32f <startup-0x1ffffcd1>
 830:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
 834:	2f0f0520 	svccs	0x000f0520
 838:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
 83c:	0d052e19 	stceq	14, cr2, [r5, #-100]	; 0xffffff9c
 840:	2f0f0520 	svccs	0x000f0520
 844:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
 848:	0d055b09 	vstreq	d5, [r5, #-36]	; 0xffffffdc
 84c:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 850:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 854:	17052f0b 	strne	r2, [r5, -fp, lsl #30]
 858:	2e1c054c 	cfmac32cs	mvfx0, mvfx12, mvfx12
 85c:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 860:	0d052e09 	stceq	14, cr2, [r5, #-36]	; 0xffffffdc
 864:	2e0b053d 	mcrcs	5, 0, r0, cr11, cr13, {1}
 868:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
 86c:	18052f13 	stmdane	r5, {r0, r1, r4, r8, r9, sl, fp, sp}
 870:	2010052e 	andscs	r0, r0, lr, lsr #10
 874:	3e2e0b05 	vmulcc.f64	d0, d14, d5
 878:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 87c:	05044b01 	streq	r4, [r4, #-2817]	; 0xfffff4ff
 880:	4e032905 	vmlami.f16	s4, s6, s10	; <UNPREDICTABLE>
 884:	6711054a 	ldrvs	r0, [r1, -sl, asr #10]
 888:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
 88c:	0705682b 	streq	r6, [r5, -fp, lsr #16]
 890:	670f0567 	strvs	r0, [pc, -r7, ror #10]
 894:	83010591 	movwhi	r0, #5521	; 0x1591
 898:	05762c05 	ldrbeq	r2, [r6, #-3077]!	; 0xfffff3fb
 89c:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 8a0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 8a4:	02054c2a 	andeq	r4, r5, #10752	; 0x2a00
 8a8:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 8ac:	33055901 	movwcc	r5, #22785	; 0x5901
 8b0:	6802054c 	stmdavs	r2, {r2, r3, r6, r8, sl}
 8b4:	2010053d 	andscs	r0, r0, sp, lsr r5
 8b8:	3d3e0205 	lfmcc	f0, 4, [lr, #-20]!	; 0xffffffec
 8bc:	052f0105 	streq	r0, [pc, #-261]!	; 7bf <startup-0x1ffff841>
 8c0:	02056826 	andeq	r6, r5, #2490368	; 0x260000
 8c4:	052f3d3e 	streq	r3, [pc, #-3390]!	; fffffb8e <ball+0xdfffcb16>
 8c8:	05052f07 	streq	r2, [r5, #-3847]	; 0xfffff0f9
 8cc:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 8d0:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 8d4:	20052f01 	andcs	r2, r5, r1, lsl #30
 8d8:	3d020576 	cfstr32cc	mvfx0, [r2, #-472]	; 0xfffffe28
 8dc:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 8e0:	053d3002 	ldreq	r3, [sp, #-2]!
 8e4:	02053d05 	andeq	r3, r5, #320	; 0x140
 8e8:	200e053d 	andcs	r0, lr, sp, lsr r5
 8ec:	052f0905 	streq	r0, [pc, #-2309]!	; ffffffef <ball+0xdfffcf77>
 8f0:	22052f01 	andcs	r2, r5, #1, 30
 8f4:	3d0205bc 	cfstr32cc	mvfx0, [r2, #-752]	; 0xfffffd10
 8f8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 8fc:	053d3002 	ldreq	r3, [sp, #-2]!
 900:	02053d07 	andeq	r3, r5, #448	; 0x1c0
 904:	200e0559 	andcs	r0, lr, r9, asr r5
 908:	052f0905 	streq	r0, [pc, #-2309]!	; b <startup-0x1ffffff5>
 90c:	2a052f01 	bcs	14c518 <startup-0x1feb3ae8>
 910:	670705a0 	strvs	r0, [r7, -r0, lsr #11]
 914:	02000905 	andeq	r0, r0, #81920	; 0x14000
 918:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 91c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 920:	07053c01 	streq	r3, [r5, -r1, lsl #24]
 924:	01040200 	mrseq	r0, R12_usr
 928:	2f02053c 	svccs	0x0002053c
 92c:	0105593d 	tsteq	r5, sp, lsr r9
 930:	4c12053d 	cfldr32mi	mvfx0, [r2], {61}	; 0x3d
 934:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 928 <startup-0x1ffff6d8>
 938:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 93c:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 940:	02053e20 	andeq	r3, r5, #32, 28	; 0x200
 944:	1b053d59 	blne	14feb0 <startup-0x1feb0150>
 948:	2e10053d 	mrccs	5, 0, r0, cr0, cr13, {1}
 94c:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 950:	02053d0a 	andeq	r3, r5, #640	; 0x280
 954:	9f01055a 	svcls	0x0001055a
 958:	054c2705 	strbeq	r2, [ip, #-1797]	; 0xfffff8fb
 95c:	08056707 	stmdaeq	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
 960:	01040200 	mrseq	r0, R12_usr
 964:	001c0520 	andseq	r0, ip, r0, lsr #10
 968:	3c010402 	cfstrscc	mvf0, [r1], {2}
 96c:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 970:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 974:	593d2102 	ldmdbpl	sp!, {r1, r8, sp}
 978:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 97c:	07054c22 	streq	r4, [r5, -r2, lsr #24]
 980:	0205913e 	andeq	r9, r5, #-2147483633	; 0x8000000f
 984:	04052f68 	streq	r2, [r5], #-3944	; 0xfffff098
 988:	2f07054b 	svccs	0x0007054b
 98c:	05211605 	streq	r1, [r1, #-1541]!	; 0xfffff9fb
 990:	08053c03 	stmdaeq	r5, {r0, r1, sl, fp, ip, sp}
 994:	2e070549 	cfsh32cs	mvfx0, mvfx7, #41
 998:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
 99c:	07054b03 	streq	r4, [r5, -r3, lsl #22]
 9a0:	2116052f 	tstcs	r6, pc, lsr #10
 9a4:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 9a8:	07054908 	streq	r4, [r5, -r8, lsl #18]
 9ac:	3109052e 	tstcc	r9, lr, lsr #10
 9b0:	04210105 	strteq	r0, [r1], #-261	; 0xfffffefb
 9b4:	03140506 	tsteq	r4, #25165824	; 0x1800000
 9b8:	05827f93 	streq	r7, [r2, #3987]	; 0xf93
 9bc:	0e053502 	cfsh32eq	mvfx3, mvfx5, #2
 9c0:	2f020520 	svccs	0x00020520
 9c4:	05201005 	streq	r1, [r0, #-5]!
 9c8:	10052f02 	andne	r2, r5, r2, lsl #30
 9cc:	2f020520 	svccs	0x00020520
 9d0:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 9d4:	11052f01 	tstne	r5, r1, lsl #30
 9d8:	02052208 	andeq	r2, r5, #8, 4	; 0x80000000
 9dc:	301a053d 	andscc	r0, sl, sp, lsr r5
 9e0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 9e4:	04052f0d 	streq	r2, [r5], #-3853	; 0xfffff0f3
 9e8:	0014052e 	andseq	r0, r4, lr, lsr #10
 9ec:	21030402 	tstcs	r3, r2, lsl #8
 9f0:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 9f4:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 9f8:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 9fc:	1f054a03 	svcne	0x00054a03
 a00:	03040200 	movweq	r0, #16896	; 0x4200
 a04:	00040573 	andeq	r0, r4, r3, ror r5
 a08:	3c010402 	cfstrscc	mvf0, [r1], {2}
 a0c:	052f2f5b 	streq	r2, [pc, #-3931]!	; fffffab9 <ball+0xdfffca41>
 a10:	04053d0d 	streq	r3, [r5], #-3341	; 0xfffff2f3
 a14:	0014052e 	andseq	r0, r4, lr, lsr #10
 a18:	21030402 	tstcs	r3, r2, lsl #8
 a1c:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 a20:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 a24:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 a28:	1f054a03 	svcne	0x00054a03
 a2c:	03040200 	movweq	r0, #16896	; 0x4200
 a30:	00040573 	andeq	r0, r4, r3, ror r5
 a34:	3c010402 	cfstrscc	mvf0, [r1], {2}
 a38:	0d052f5b 	stceq	15, cr2, [r5, #-364]	; 0xfffffe94
 a3c:	2e04053e 	mcrcs	5, 0, r0, cr4, cr14, {1}
 a40:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 a44:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 a48:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
 a4c:	14054a03 	strne	r4, [r5], #-2563	; 0xfffff5fd
 a50:	03040200 	movweq	r0, #16896	; 0x4200
 a54:	001f054a 	andseq	r0, pc, sl, asr #10
 a58:	73030402 	movwvc	r0, #13314	; 0x3402
 a5c:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 a60:	5b3c0104 	blpl	f00e78 <startup-0x1f0ff188>
 a64:	0d052f2f 	stceq	15, cr2, [r5, #-188]	; 0xffffff44
 a68:	2e04053d 	mcrcs	5, 0, r0, cr4, cr13, {1}
 a6c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
 a70:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 a74:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 a78:	14054a03 	strne	r4, [r5], #-2563	; 0xfffff5fd
 a7c:	03040200 	movweq	r0, #16896	; 0x4200
 a80:	001f054a 	andseq	r0, pc, sl, asr #10
 a84:	73030402 	movwvc	r0, #13314	; 0x3402
 a88:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 a8c:	5b3c0104 	blpl	f00ea4 <startup-0x1f0ff15c>
 a90:	3018052f 	andscc	r0, r8, pc, lsr #10
 a94:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
 a98:	0f052f18 	svceq	0x00052f18
 a9c:	3006054a 	andcc	r0, r6, sl, asr #10
 aa0:	02001805 	andeq	r1, r0, #327680	; 0x50000
 aa4:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 aa8:	5863030a 	stmdapl	r3!, {r1, r3, r8, r9}^
 aac:	21030105 	tstcs	r3, r5, lsl #2
 ab0:	03100520 	tsteq	r0, #32, 10	; 0x8000000
 ab4:	0512082d 	ldreq	r0, [r2, #-2093]	; 0xfffff7d3
 ab8:	2f2f3d0a 	svccs	0x002f3d0a
 abc:	2f02052f 	svccs	0x0002052f
 ac0:	08052f2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 ac4:	03053d2f 	movweq	r3, #23855	; 0x5d2f
 ac8:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 acc:	03052f04 	movweq	r2, #24324	; 0x5f04
 ad0:	4b09052e 	blmi	241f90 <startup-0x1fdbe070>
 ad4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 ad8:	03054b0a 	movweq	r4, #23306	; 0x5b0a
 adc:	4b12052e 	blmi	481f9c <startup-0x1fb7e064>
 ae0:	59060559 	stmdbpl	r6, {r0, r3, r4, r6, r8, sl}
 ae4:	05751205 	ldrbeq	r1, [r5, #-517]!	; 0xfffffdfb
 ae8:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 aec:	21120558 	tstcs	r2, r8, asr r5
 af0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 af4:	13054a04 	movwne	r4, #23044	; 0x5a04
 af8:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 afc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 b00:	13052203 	movwne	r2, #20995	; 0x5203
 b04:	2e0c0575 	cfrshl64cs	mvdx12, mvdx5, r0
 b08:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 b0c:	0c052113 	stfeqs	f2, [r5], {19}
 b10:	4a04052e 	bmi	101fd0 <startup-0x1fefe030>
 b14:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 b18:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
 b1c:	2203054a 	andcs	r0, r3, #310378496	; 0x12800000
 b20:	3d19052f 	cfldr32cc	mvfx0, [r9, #-188]	; 0xffffff44
 b24:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 b28:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
 b2c:	1e052e01 	cdpne	14, 0, cr2, cr5, cr1, {0}
 b30:	01040200 	mrseq	r0, R12_usr
 b34:	2f04052e 	svccs	0x0004052e
 b38:	052f1705 	streq	r1, [pc, #-1797]!	; 43b <startup-0x1ffffbc5>
 b3c:	0a053d18 	beq	14ffa4 <startup-0x1feb005c>
 b40:	023c6a03 	eorseq	r6, ip, #12288	; 0x3000
 b44:	0101000c 	tsteq	r1, ip
 b48:	16050604 	strne	r0, [r5], -r4, lsl #12
 b4c:	00020500 	andeq	r0, r2, r0, lsl #10
 b50:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 b54:	01050116 	tsteq	r5, r6, lsl r1
 b58:	2f212113 	svccs	0x00212113
 b5c:	00030221 	andeq	r0, r3, r1, lsr #4
 b60:	Address 0x00000b60 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	6b007964 	blvs	1e59c <startup-0x1ffe1a64>
   8:	4c627965 			; <UNDEFINED> instruction: 0x4c627965
   c:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
  10:	5f65766f 	svcpl	0x0065766f
  14:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  18:	7000656c 	andvc	r6, r0, ip, ror #10
  1c:	0078736f 	rsbseq	r7, r8, pc, ror #6
  20:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  24:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
  28:	316b6365 	cmncc	fp, r5, ror #6
  2c:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
  30:	00326b63 	eorseq	r6, r2, r3, ror #22
  34:	70617267 	rsbvc	r7, r1, r7, ror #4
  38:	5f636968 	svcpl	0x00636968
  3c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  40:	61645f65 	cmnvs	r4, r5, ror #30
  44:	67006174 	smlsdxvs	r0, r4, r1, r6
  48:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  4c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
  50:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  54:	7a696c61 	bvc	1a5b1e0 <startup-0x1e5a4e20>
  58:	47740065 	ldrbmi	r0, [r4, -r5, rrx]!
  5c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  60:	00797274 	rsbseq	r7, r9, r4, ror r2
  64:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  68:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
  6c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  70:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
  74:	50007465 	andpl	r7, r0, r5, ror #8
  78:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
  7c:	66654c72 			; <UNDEFINED> instruction: 0x66654c72
  80:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
  84:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  88:	50007374 	andpl	r7, r0, r4, ror r3
  8c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
  90:	66654c72 			; <UNDEFINED> instruction: 0x66654c72
  94:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
  98:	74695773 	strbtvc	r5, [r9], #-1907	; 0xfffff88d
  9c:	78655468 	stmdavc	r5!, {r3, r5, r6, sl, ip, lr}^
  a0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  a4:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
  a8:	006e6961 	rsbeq	r6, lr, r1, ror #18
  ac:	70617267 	rsbvc	r7, r1, r7, ror #4
  b0:	5f636968 	svcpl	0x00636968
  b4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  b8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
  bc:	006e6565 	rsbeq	r6, lr, r5, ror #10
  c0:	70617267 	rsbvc	r7, r1, r7, ror #4
  c4:	5f636968 	svcpl	0x00636968
  c8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  cc:	6f635f65 	svcvs	0x00635f65
  d0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
  d4:	61700064 	cmnvs	r0, r4, rrx
  d8:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  dc:	6f65675f 	svcvs	0x0065675f
  e0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  e4:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
  e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  ec:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
  f0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffff28 <ball+0xdfffceb0>
  f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
  f8:	4f454750 	svcmi	0x00454750
  fc:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 100:	61760059 	cmnvs	r6, r9, asr r0
 104:	0065756c 	rsbeq	r7, r5, ip, ror #10
 108:	70617267 	rsbvc	r7, r1, r7, ror #4
 10c:	5f636968 	svcpl	0x00636968
 110:	61656c63 	cmnvs	r5, r3, ror #24
 114:	63735f72 	cmnvs	r3, #456	; 0x1c8
 118:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 11c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 120:	745f3874 	ldrbvc	r3, [pc], #-2164	; 128 <startup-0x1ffffed8>
 124:	63736100 	cmnvs	r3, #0, 2
 128:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 12c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 130:	6168635f 	cmnvs	r8, pc, asr r3
 134:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
 138:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 13c:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 140:	6f705f74 	svcvs	0x00705f74
 144:	73746e69 	cmnvc	r4, #1680	; 0x690
 148:	64617000 	strbtvs	r7, [r1], #-0
 14c:	5f656c64 	svcpl	0x00656c64
 150:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 154:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0xffffff8c
 158:	00327473 	eorseq	r7, r2, r3, ror r4
 15c:	70617267 	rsbvc	r7, r1, r7, ror #4
 160:	5f636968 	svcpl	0x00636968
 164:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 168:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 16c:	5300544e 	movwpl	r5, #1102	; 0x44e
 170:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 174:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
 178:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 17c:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 180:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 184:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
 188:	00687464 	rsbeq	r7, r8, r4, ror #8
 18c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 190:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 194:	73610078 	cmnvc	r1, #120	; 0x78
 198:	5f696963 	svcpl	0x00696963
 19c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 1a0:	63737265 	cmnvs	r3, #1342177286	; 0x50000006
 1a4:	5f65726f 	svcpl	0x0065726f
 1a8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1ac:	61745300 	cmnvs	r4, r0, lsl #6
 1b0:	656d7472 	strbvs	r7, [sp, #-1138]!	; 0xfffffb8e
 1b4:	625f756e 	subsvs	r7, pc, #461373440	; 0x1b800000
 1b8:	00737469 	rsbseq	r7, r3, r9, ror #8
 1bc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1c0:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 1c4:	69486e6d 	stmdbvs	r8, {r0, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 1c8:	61006867 	tstvs	r0, r7, ror #16
 1cc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1d0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1d4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1d8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1dc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1e0:	61700072 	cmnvs	r0, r2, ror r0
 1e4:	67006567 	strvs	r6, [r0, -r7, ror #10]
 1e8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1ec:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 1f0:	5f646165 	svcpl	0x00646165
 1f4:	61746164 	cmnvs	r4, r4, ror #2
 1f8:	6d756400 	cfldrdvs	mvd6, [r5, #-0]
 1fc:	7300796d 	movwvc	r7, #2413	; 0x96d
 200:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 204:	7a697300 	bvc	1a5ce0c <startup-0x1e5a31f4>
 208:	61007965 	tstvs	r0, r5, ror #18
 20c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 210:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 9c <startup-0x1fffff64>
 214:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 218:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 21c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 162 <startup-0x1ffffe9e>	; <UNPREDICTABLE>
 220:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 224:	64617000 	strbtvs	r7, [r1], #-0
 228:	5f656c64 	svcpl	0x00656c64
 22c:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
 230:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 234:	00786465 	rsbseq	r6, r8, r5, ror #8
 238:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 23c:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 240:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 244:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 248:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 24c:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 250:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 254:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 258:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 25c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 260:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 264:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 268:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 26c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 270:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 274:	31393130 	teqcc	r9, r0, lsr r1
 278:	20353230 	eorscs	r3, r5, r0, lsr r2
 27c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 280:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 284:	415b2029 	cmpmi	fp, r9, lsr #32
 288:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 28c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 290:	6172622d 	cmnvs	r2, sp, lsr #4
 294:	2068636e 	rsbcs	r6, r8, lr, ror #6
 298:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 29c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 2a0:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 2a4:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 2a8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 2ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 2b0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 2b4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 2b8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 2bc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 2c0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 2c4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 2c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 2cc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 2d0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 2d4:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 2d8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 2dc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 2e0:	61657200 	cmnvs	r5, r0, lsl #4
 2e4:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; 15c <startup-0x1ffffea4>
 2e8:	4c6e6d75 	stclmi	13, cr6, [lr], #-468	; 0xfffffe2c
 2ec:	6700776f 	strvs	r7, [r0, -pc, ror #14]
 2f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2f4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2f8:	5f6c7274 	svcpl	0x006c7274
 2fc:	5f746962 	svcpl	0x00746962
 300:	61656c63 	cmnvs	r5, r3, ror #24
 304:	6c630072 	stclvs	0, cr0, [r3], #-456	; 0xfffffe38
 308:	5f726165 	svcpl	0x00726165
 30c:	6b636162 	blvs	18d889c <startup-0x1e727764>
 310:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 314:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 318:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 31c:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 320:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 324:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 328:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 32c:	77006465 	strvc	r6, [r0, -r5, ror #8]
 330:	735f6e69 	cmpvc	pc, #1680	; 0x690
 334:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 338:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
 33c:	00746867 	rsbseq	r6, r4, r7, ror #16
 340:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 344:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 348:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 34c:	61726400 	cmnvs	r2, r0, lsl #8
 350:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 354:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 358:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 35c:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffffa03 <ball+0xdfffc98b>
 360:	736e3030 	cmnvc	lr, #48	; 0x30
 364:	616c5000 	cmnvs	ip, r0
 368:	52726579 	rsbspl	r6, r2, #507510784	; 0x1e400000
 36c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 370:	736e6957 	cmnvc	lr, #1425408	; 0x15c000
 374:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 378:	6f620073 	svcvs	0x00620073
 37c:	6e006874 	mcrvs	8, 0, r6, cr0, cr4, {3}
 380:	00597765 	subseq	r7, r9, r5, ror #14
 384:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 388:	6f675f69 	svcvs	0x00675f69
 38c:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 390:	725f7000 	subsvc	r7, pc, #0
 394:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 398:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 39c:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 3a0:	615f7469 	cmpvs	pc, r9, ror #8
 3a4:	6e007070 	mcrvs	0, 0, r7, cr0, cr0, {3}
 3a8:	0058746f 	subseq	r7, r8, pc, ror #8
 3ac:	70617267 	rsbvc	r7, r1, r7, ror #4
 3b0:	5f636968 	svcpl	0x00636968
 3b4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 3b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3bc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 3c0:	624f7400 	subvs	r7, pc, #0, 8
 3c4:	5f70006a 	svcpl	0x0070006a
 3c8:	656b5f6c 	strbvs	r5, [fp, #-3948]!	; 0xfffff094
 3cc:	65670079 	strbvs	r0, [r7, #-121]!	; 0xffffff87
 3d0:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 3d4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
 3d8:	6c500065 	mrrcvs	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
 3dc:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 3e0:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 3e4:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
 3e8:	74695773 	strbtvc	r5, [r9], #-1907	; 0xfffff88d
 3ec:	78655468 	stmdavc	r5!, {r3, r5, r6, sl, ip, lr}^
 3f0:	69625f74 	stmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3f4:	6b007374 	blvs	1d1cc <startup-0x1ffe2e34>
 3f8:	48627965 	stmdami	r2!, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
 3fc:	00686769 	rsbeq	r6, r8, r9, ror #14
 400:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 404:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 408:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 40c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 410:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 414:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
 418:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 41c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 420:	6f6c0079 	svcvs	0x006c0079
 424:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 428:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 42c:	73610065 	cmnvc	r1, #101	; 0x65
 430:	5f696963 	svcpl	0x00696963
 434:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 438:	61645f65 	cmnvs	r4, r5, ror #30
 43c:	61006174 	tstvs	r0, r4, ror r1
 440:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 444:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 448:	6f4c776f 	svcvs	0x004c776f
 44c:	72640077 	rsbvc	r0, r4, #119	; 0x77
 450:	73007761 	movwvc	r7, #1889	; 0x761
 454:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 458:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 45c:	616c7000 	cmnvs	ip, r0
 460:	5f726579 	svcpl	0x00726579
 464:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 468:	6f705f74 	svcvs	0x00705f74
 46c:	73746e69 	cmnvc	r4, #1680	; 0x690
 470:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 478 <startup-0x1ffffb88>
 474:	6973696c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 478:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
 47c:	5f687469 	svcpl	0x00687469
 480:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 484:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 488:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 3ce <startup-0x1ffffc32>	; <UNPREDICTABLE>
 48c:	6f726b69 	svcvs	0x00726b69
 490:	725f7000 	subsvc	r7, pc, #0
 494:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 498:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 49c:	6f5f7261 	svcvs	0x005f7261
 4a0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4a4:	61620074 	smcvs	8196	; 0x2004
 4a8:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 4ac:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 4b0:	00797274 	rsbseq	r7, r9, r4, ror r2
 4b4:	616c6564 	cmnvs	ip, r4, ror #10
 4b8:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 4bc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 4c0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa85 <ball+0xdfffca0d>
 4c4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4c8:	6f6c6f2f 	svcvs	0x006c6f2f
 4cc:	442f7366 	strtmi	r7, [pc], #-870	; 4d4 <startup-0x1ffffb2c>
 4d0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 4d4:	73746e65 	cmnvc	r4, #1616	; 0x650
 4d8:	7469672f 	strbtvc	r6, [r9], #-1839	; 0xfffff8d1
 4dc:	6f72705f 	svcvs	0x0072705f
 4e0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 4e4:	63532f73 	cmpvs	r3, #460	; 0x1cc
 4e8:	6c6f6f68 	stclvs	15, cr6, [pc], #-416	; 350 <startup-0x1ffffcb0>
 4ec:	6a6f7250 	bvs	1bdce34 <startup-0x1e4231cc>
 4f0:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 4f4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4f8:	2f373130 	svccs	0x00373130
 4fc:	6262614c 	rsbvs	r6, r2, #76, 2
 500:	5f455735 	svcpl	0x00455735
 504:	5f454449 	svcpl	0x00454449
 508:	52504447 	subspl	r4, r0, #1191182336	; 0x47000000
 50c:	5254525f 	subspl	r5, r4, #-268435451	; 0xf0000005
 510:	502f4150 	eorpl	r4, pc, r0, asr r1	; <UNPREDICTABLE>
 514:	2f676e6f 	svccs	0x00676e6f
 518:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 51c:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
 520:	00657479 	rsbeq	r7, r5, r9, ror r4
 524:	6b73616d 	blvs	1cd8ae0 <startup-0x1e327520>
 528:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 52c:	61625f65 	cmnvs	r2, r5, ror #30
 530:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
 534:	31747365 	cmncc	r4, r5, ror #6
 538:	6c5f7000 	mravs	r7, pc, acc0
 53c:	00746665 	rsbseq	r6, r4, r5, ror #12
 540:	70617267 	rsbvc	r7, r1, r7, ror #4
 544:	5f636968 	svcpl	0x00636968
 548:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 54c:	6165725f 	cmnvs	r5, pc, asr r2
 550:	63007964 	movwvs	r7, #2404	; 0x964
 554:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 558:	7361006e 	cmnvc	r1, #110	; 0x6e
 55c:	5f696963 	svcpl	0x00696963
 560:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 564:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 568:	69770061 	ldmdbvs	r7!, {r0, r5, r6}^
 56c:	5f687464 	svcpl	0x00687464
 570:	625f6e69 	subsvs	r6, pc, #1680	; 0x690
 574:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 578:	61726400 	cmnvs	r2, r0, lsl #8
 57c:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 580:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 584:	61747300 	cmnvs	r4, r0, lsl #6
 588:	70757472 	rsbsvc	r7, r5, r2, ror r4
 58c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 590:	50007865 	andpl	r7, r0, r5, ror #16
 594:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 598:	61005443 	tstvs	r0, r3, asr #8
 59c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 5a0:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 5a4:	6948776f 	stmdbvs	r8, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
 5a8:	67006867 	strvs	r6, [r0, -r7, ror #16]
 5ac:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5b0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 5b4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5b8:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 5bc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 5c0:	6c6f5c73 	stclvs	12, cr5, [pc], #-460	; 3fc <startup-0x1ffffc04>
 5c4:	5c73666f 	ldclpl	6, cr6, [r3], #-444	; 0xfffffe44
 5c8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 5cc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 5d0:	69675c73 	stmdbvs	r7!, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
 5d4:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 5d8:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 5dc:	535c7374 	cmppl	ip, #116, 6	; 0xd0000001
 5e0:	6f6f6863 	svcvs	0x006f6863
 5e4:	6f72506c 	svcvs	0x0072506c
 5e8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5ec:	41445c73 	hvcmi	17859	; 0x45c3
 5f0:	37313054 			; <UNDEFINED> instruction: 0x37313054
 5f4:	62614c5c 	rsbvs	r4, r1, #92, 24	; 0x5c00
 5f8:	45573562 	ldrbmi	r3, [r7, #-1378]	; 0xfffffa9e
 5fc:	4544495f 	strbmi	r4, [r4, #-2399]	; 0xfffff6a1
 600:	5044475f 	subpl	r4, r4, pc, asr r7
 604:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 608:	5c415052 	mcrrpl	0, 5, r5, r1, cr2
 60c:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 610:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 614:	73610065 	cmnvc	r1, #101	; 0x65
 618:	5f696963 	svcpl	0x00696963
 61c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 620:	6174735f 	cmnvs	r4, pc, asr r3
 624:	00737574 	rsbseq	r7, r3, r4, ror r5
 628:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 62c:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 630:	61007469 	tstvs	r0, r9, ror #8
 634:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 638:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 63c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 640:	Address 0x00000640 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	00000042 	andeq	r0, r0, r2, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000009a 	mulcs	r0, sl, r0
  58:	00000046 	andeq	r0, r0, r6, asr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000f2 	strdcs	r0, [r0], -r2
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000138 	andcs	r0, r0, r8, lsr r1
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000174 	andcs	r0, r0, r4, ror r1
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001d6 	ldrdcs	r0, [r0], -r6
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000024c 	andcs	r0, r0, ip, asr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002dc 	ldrdcs	r0, [r0], -ip
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000035c 	andcs	r0, r0, ip, asr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000039c 	mulcs	r0, ip, r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003e2 	andcs	r0, r0, r2, ror #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	2000040c 	andcs	r0, r0, ip, lsl #8
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000462 	andcs	r0, r0, r2, ror #8
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004ca 	andcs	r0, r0, sl, asr #9
 1f0:	000000a2 	andeq	r0, r0, r2, lsr #1
 1f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f8:	41018e02 	tstmi	r1, r2, lsl #28
 1fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 200:	00000007 	andeq	r0, r0, r7
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	2000056c 	andcs	r0, r0, ip, ror #10
 210:	000000cc 	andeq	r0, r0, ip, asr #1
 214:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 218:	41018e02 	tstmi	r1, r2, lsl #28
 21c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 220:	00000007 	andeq	r0, r0, r7
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	20000638 	andcs	r0, r0, r8, lsr r6
 230:	00000062 	andeq	r0, r0, r2, rrx
 234:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 238:	41018e02 	tstmi	r1, r2, lsl #28
 23c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	2000069a 	mulcs	r0, sl, r6
 250:	00000062 	andeq	r0, r0, r2, rrx
 254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 258:	41018e02 	tstmi	r1, r2, lsl #28
 25c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 260:	00000007 	andeq	r0, r0, r7
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000000 	andeq	r0, r0, r0
 26c:	200006fc 	strdcs	r0, [r0], -ip
 270:	00000034 	andeq	r0, r0, r4, lsr r0
 274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 278:	41018e02 	tstmi	r1, r2, lsl #28
 27c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 280:	00000007 	andeq	r0, r0, r7
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	20000730 	andcs	r0, r0, r0, lsr r7
 290:	0000002c 	andeq	r0, r0, ip, lsr #32
 294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 298:	41018e02 	tstmi	r1, r2, lsl #28
 29c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a0:	00000007 	andeq	r0, r0, r7
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	2000075c 	andcs	r0, r0, ip, asr r7
 2b0:	000000c4 	andeq	r0, r0, r4, asr #1
 2b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b8:	41018e02 	tstmi	r1, r2, lsl #28
 2bc:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2c0:	00000007 	andeq	r0, r0, r7
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	20000820 	andcs	r0, r0, r0, lsr #16
 2d0:	00000064 	andeq	r0, r0, r4, rrx
 2d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d8:	41018e02 	tstmi	r1, r2, lsl #28
 2dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e0:	00000007 	andeq	r0, r0, r7
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	20000884 	andcs	r0, r0, r4, lsl #17
 2f0:	00000064 	andeq	r0, r0, r4, rrx
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000000 	andeq	r0, r0, r0
 30c:	200008e8 	andcs	r0, r0, r8, ror #17
 310:	00000054 	andeq	r0, r0, r4, asr r0
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	2000093c 	andcs	r0, r0, ip, lsr r9
 330:	00000054 	andeq	r0, r0, r4, asr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	00000020 	andeq	r0, r0, r0, lsr #32
 348:	00000000 	andeq	r0, r0, r0
 34c:	20000990 	mulcs	r0, r0, r9
 350:	00000034 	andeq	r0, r0, r4, lsr r0
 354:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 358:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 35c:	41018e02 	tstmi	r1, r2, lsl #28
 360:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 364:	00000007 	andeq	r0, r0, r7
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	00000000 	andeq	r0, r0, r0
 370:	200009c4 	andcs	r0, r0, r4, asr #19
 374:	00000056 	andeq	r0, r0, r6, asr r0
 378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 37c:	41018e02 	tstmi	r1, r2, lsl #28
 380:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 384:	00000007 	andeq	r0, r0, r7
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	20000a1a 	andcs	r0, r0, sl, lsl sl
 394:	00000056 	andeq	r0, r0, r6, asr r0
 398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 39c:	41018e02 	tstmi	r1, r2, lsl #28
 3a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a4:	00000007 	andeq	r0, r0, r7
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	20000a70 	andcs	r0, r0, r0, ror sl
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3bc:	41018e02 	tstmi	r1, r2, lsl #28
 3c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3c4:	00000007 	andeq	r0, r0, r7
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	20000a90 	mulcs	r0, r0, sl
 3d4:	000000f8 	strdeq	r0, [r0], -r8
 3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3dc:	41018e02 	tstmi	r1, r2, lsl #28
 3e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e4:	00000007 	andeq	r0, r0, r7
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	20000b88 	andcs	r0, r0, r8, lsl #23
 3f4:	0000006e 	andeq	r0, r0, lr, rrx
 3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3fc:	41018e02 	tstmi	r1, r2, lsl #28
 400:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 404:	00000007 	andeq	r0, r0, r7
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	20000bf6 	strdcs	r0, [r0], -r6
 414:	000000b2 	strheq	r0, [r0], -r2
 418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 41c:	41018e02 	tstmi	r1, r2, lsl #28
 420:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 424:	00000007 	andeq	r0, r0, r7
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	20000ca8 	andcs	r0, r0, r8, lsr #25
 434:	00000030 	andeq	r0, r0, r0, lsr r0
 438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 43c:	41018e02 	tstmi	r1, r2, lsl #28
 440:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 444:	00000007 	andeq	r0, r0, r7
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	00000000 	andeq	r0, r0, r0
 450:	20000cd8 	ldrdcs	r0, [r0], -r8
 454:	00000048 	andeq	r0, r0, r8, asr #32
 458:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 45c:	41018e02 	tstmi	r1, r2, lsl #28
 460:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 464:	00000007 	andeq	r0, r0, r7
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000000 	andeq	r0, r0, r0
 470:	20000d20 	andcs	r0, r0, r0, lsr #26
 474:	0000002a 	andeq	r0, r0, sl, lsr #32
 478:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 47c:	41018e02 	tstmi	r1, r2, lsl #28
 480:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 484:	00000007 	andeq	r0, r0, r7
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000000 	andeq	r0, r0, r0
 490:	20000d4a 	andcs	r0, r0, sl, asr #26
 494:	0000002a 	andeq	r0, r0, sl, lsr #32
 498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 49c:	41018e02 	tstmi	r1, r2, lsl #28
 4a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4a4:	00000007 	andeq	r0, r0, r7
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	20000d74 	andcs	r0, r0, r4, ror sp
 4b4:	00000030 	andeq	r0, r0, r0, lsr r0
 4b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4bc:	41018e02 	tstmi	r1, r2, lsl #28
 4c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c4:	00000007 	andeq	r0, r0, r7
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	00000000 	andeq	r0, r0, r0
 4d0:	20000da4 	andcs	r0, r0, r4, lsr #27
 4d4:	00000034 	andeq	r0, r0, r4, lsr r0
 4d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4dc:	41018e02 	tstmi	r1, r2, lsl #28
 4e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4e4:	00000007 	andeq	r0, r0, r7
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	20000dd8 	ldrdcs	r0, [r0], -r8
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 504:	00000007 	andeq	r0, r0, r7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000000 	andeq	r0, r0, r0
 510:	20000e18 	andcs	r0, r0, r8, lsl lr
 514:	00000040 	andeq	r0, r0, r0, asr #32
 518:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 51c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 520:	180e4101 	stmdane	lr, {r0, r8, lr}
 524:	00070d41 	andeq	r0, r7, r1, asr #26
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	20000e58 	andcs	r0, r0, r8, asr lr
 534:	0000003c 	andeq	r0, r0, ip, lsr r0
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	00000018 	andeq	r0, r0, r8, lsl r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	20000e94 	mulcs	r0, r4, lr
 554:	0000002e 	andeq	r0, r0, lr, lsr #32
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0000070d 	andeq	r0, r0, sp, lsl #14
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	00000000 	andeq	r0, r0, r0
 56c:	20000ec2 	andcs	r0, r0, r2, asr #29
 570:	0000004e 	andeq	r0, r0, lr, asr #32
 574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 578:	41018e02 	tstmi	r1, r2, lsl #28
 57c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 580:	00000007 	andeq	r0, r0, r7
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	20000f10 	andcs	r0, r0, r0, lsl pc
 590:	0000003a 	andeq	r0, r0, sl, lsr r0
 594:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 598:	41018e02 	tstmi	r1, r2, lsl #28
 59c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a0:	00000007 	andeq	r0, r0, r7
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	20000f4a 	andcs	r0, r0, sl, asr #30
 5b0:	00000082 	andeq	r0, r0, r2, lsl #1
 5b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5b8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	20000000 	andcs	r0, r0, r0
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	00000018 	andeq	r0, r0, r8, lsl r0
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	20000fcc 	andcs	r0, r0, ip, asr #31
 5e4:	00000040 	andeq	r0, r0, r0, asr #32
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	2000100c 	andcs	r1, r0, ip
 600:	00000160 	andeq	r0, r0, r0, ror #2
 604:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 608:	41018e02 	tstmi	r1, r2, lsl #28
 60c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 610:	00000007 	andeq	r0, r0, r7
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	2000116c 	andcs	r1, r0, ip, ror #2
 620:	00000120 	andeq	r0, r0, r0, lsr #2
 624:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 628:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 62c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 630:	00070d41 	andeq	r0, r7, r1, asr #26
 634:	0000000c 	andeq	r0, r0, ip
 638:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 63c:	7c010001 	stcvc	0, cr0, [r1], {1}
 640:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 644:	0000000c 	andeq	r0, r0, ip
 648:	00000634 	andeq	r0, r0, r4, lsr r6
 64c:	2000128d 	andcs	r1, r0, sp, lsl #5
 650:	0000010a 	andeq	r0, r0, sl, lsl #2
