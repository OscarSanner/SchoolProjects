
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "AsciiDrivers.h"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 ffaa 	bl	20000f5c <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	22fa      	movs	r2, #250	; 0xfa
20000064:	0091      	lsls	r1, r2, #2
20000066:	0018      	movs	r0, r3
20000068:	f000 fff0 	bl	2000104c <__udivsi3>
2000006c:	0003      	movs	r3, r0
2000006e:	607b      	str	r3, [r7, #4]
	us ++;
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	3301      	adds	r3, #1
20000074:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
20000076:	2300      	movs	r3, #0
20000078:	60fb      	str	r3, [r7, #12]
2000007a:	e004      	b.n	20000086 <delay_mikro+0x2e>
		delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	009a      	lsls	r2, r3, #2
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	429a      	cmp	r2, r3
2000008e:	d8f5      	bhi.n	2000007c <delay_mikro+0x24>
	}
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b004      	add	sp, #16
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms){
2000009a:	b580      	push	{r7, lr}
2000009c:	b084      	sub	sp, #16
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f000 ffcf 	bl	2000104c <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
		ms ++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x34>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc8 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0x24>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <delay_500ns>:

void delay_500ns(){
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	delay_250ns();
200000e4:	f7ff ff94 	bl	20000010 <delay_250ns>
	delay_250ns();
200000e8:	f7ff ff92 	bl	20000010 <delay_250ns>
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_ctrl_bit_set>:
void graphic_ctrl_bit_set(uint8_t x){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	0002      	movs	r2, r0
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000fe:	4b0d      	ldr	r3, [pc, #52]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	b2db      	uxtb	r3, r3
20000104:	b25a      	sxtb	r2, r3
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	2104      	movs	r1, #4
2000010e:	438b      	bics	r3, r1
20000110:	b25b      	sxtb	r3, r3
20000112:	4313      	orrs	r3, r2
20000114:	b25a      	sxtb	r2, r3
20000116:	4b07      	ldr	r3, [pc, #28]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000118:	b2d2      	uxtb	r2, r2
2000011a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
2000011c:	4b05      	ldr	r3, [pc, #20]	; (20000134 <graphic_ctrl_bit_set+0x42>)
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	b2db      	uxtb	r3, r3
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b2db      	uxtb	r3, r3
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000144:	4b0a      	ldr	r3, [pc, #40]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	1dfa      	adds	r2, r7, #7
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	2104      	movs	r1, #4
20000152:	430a      	orrs	r2, r1
20000154:	b2d2      	uxtb	r2, r2
20000156:	b252      	sxtb	r2, r2
20000158:	43d2      	mvns	r2, r2
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	4b03      	ldr	r3, [pc, #12]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000162:	b2d2      	uxtb	r2, r2
20000164:	701a      	strb	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b002      	add	sp, #8
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <select_controller>:

void select_controller(uint8_t controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000180:	230f      	movs	r3, #15
20000182:	18fb      	adds	r3, r7, r3
20000184:	2200      	movs	r2, #0
20000186:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b18      	cmp	r3, #24
2000018e:	d01a      	beq.n	200001c6 <select_controller+0x52>
20000190:	dc1d      	bgt.n	200001ce <select_controller+0x5a>
20000192:	2b10      	cmp	r3, #16
20000194:	d010      	beq.n	200001b8 <select_controller+0x44>
20000196:	dc1a      	bgt.n	200001ce <select_controller+0x5a>
20000198:	2b00      	cmp	r3, #0
2000019a:	d002      	beq.n	200001a2 <select_controller+0x2e>
2000019c:	2b08      	cmp	r3, #8
2000019e:	d004      	beq.n	200001aa <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001a0:	e015      	b.n	200001ce <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001a2:	2018      	movs	r0, #24
200001a4:	f7ff ffc8 	bl	20000138 <graphic_ctrl_bit_clear>
200001a8:	e012      	b.n	200001d0 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001aa:	2010      	movs	r0, #16
200001ac:	f7ff ffc4 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ff9e 	bl	200000f2 <graphic_ctrl_bit_set>
200001b6:	e00b      	b.n	200001d0 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001b8:	2008      	movs	r0, #8
200001ba:	f7ff ffbd 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff97 	bl	200000f2 <graphic_ctrl_bit_set>
200001c4:	e004      	b.n	200001d0 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ff93 	bl	200000f2 <graphic_ctrl_bit_set>
200001cc:	e000      	b.n	200001d0 <select_controller+0x5c>
		default: return;
200001ce:	46c0      	nop			; (mov r8, r8)
	}
}
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}

200001d6 <graphic_wait_ready>:

void graphic_wait_ready(void){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ffab 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001e2:	4b16      	ldr	r3, [pc, #88]	; (2000023c <graphic_wait_ready+0x66>)
200001e4:	4a16      	ldr	r2, [pc, #88]	; (20000240 <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ff82 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ee:	2001      	movs	r0, #1
200001f0:	f7ff ffa2 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_500ns();
200001f4:	f7ff ff74 	bl	200000e0 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff7a 	bl	200000f2 <graphic_ctrl_bit_set>
		delay_500ns();
200001fe:	f7ff ff6f 	bl	200000e0 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
20000202:	4b10      	ldr	r3, [pc, #64]	; (20000244 <graphic_wait_ready+0x6e>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2da      	uxtb	r2, r3
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	217f      	movs	r1, #127	; 0x7f
2000020c:	438a      	bics	r2, r1
2000020e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff91 	bl	20000138 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff63 	bl	200000e0 <delay_500ns>
		if(c == 0){
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	2b00      	cmp	r3, #0
20000220:	d000      	beq.n	20000224 <graphic_wait_ready+0x4e>
	while(1){
20000222:	e7e9      	b.n	200001f8 <graphic_wait_ready+0x22>
			break;
20000224:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000226:	2040      	movs	r0, #64	; 0x40
20000228:	f7ff ff63 	bl	200000f2 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000022c:	4b03      	ldr	r3, [pc, #12]	; (2000023c <graphic_wait_ready+0x66>)
2000022e:	4a06      	ldr	r2, [pc, #24]	; (20000248 <graphic_wait_ready+0x72>)
20000230:	601a      	str	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff6d 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff44 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff80 	bl	20000174 <select_controller>
	delay_500ns();
20000274:	f7ff ff34 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff3a 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff ff2f 	bl	200000e0 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff53 	bl	20000138 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff67 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff96 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff5e 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff8d 	bl	200001d6 <graphic_wait_ready>
	}
	return rv;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff3a 	bl	20000174 <select_controller>
	delay_500ns();
20000300:	f7ff feee 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff fef4 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff fee9 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff12 	bl	20000138 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff28 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff57 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff1e 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff4d 	bl	200001d6 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed5 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff13 	bl	20000174 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fee2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fefb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff feda 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fec2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fedb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fe97 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff feb7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initialize>:

void graphic_initialize(){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6e 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe1e 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe39 	bl	2000009a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe62 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe8c 	bl	20000174 <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen(){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:

void pixel(uint8_t x, uint8_t y, uint8_t set){
200004ca:	b5f0      	push	{r4, r5, r6, r7, lr}
200004cc:	b085      	sub	sp, #20
200004ce:	af00      	add	r7, sp, #0
200004d0:	0004      	movs	r4, r0
200004d2:	0008      	movs	r0, r1
200004d4:	0011      	movs	r1, r2
200004d6:	1dfb      	adds	r3, r7, #7
200004d8:	1c22      	adds	r2, r4, #0
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	1c02      	adds	r2, r0, #0
200004e0:	701a      	strb	r2, [r3, #0]
200004e2:	1d7b      	adds	r3, r7, #5
200004e4:	1c0a      	adds	r2, r1, #0
200004e6:	701a      	strb	r2, [r3, #0]
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	2b80      	cmp	r3, #128	; 0x80
200004ee:	d900      	bls.n	200004f2 <pixel+0x28>
200004f0:	e0c7      	b.n	20000682 <pixel+0x1b8>
200004f2:	1dbb      	adds	r3, r7, #6
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	2b40      	cmp	r3, #64	; 0x40
200004f8:	d900      	bls.n	200004fc <pixel+0x32>
200004fa:	e0c2      	b.n	20000682 <pixel+0x1b8>
200004fc:	1dfb      	adds	r3, r7, #7
200004fe:	781b      	ldrb	r3, [r3, #0]
20000500:	2b00      	cmp	r3, #0
20000502:	d100      	bne.n	20000506 <pixel+0x3c>
20000504:	e0bd      	b.n	20000682 <pixel+0x1b8>
20000506:	1dbb      	adds	r3, r7, #6
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	2b00      	cmp	r3, #0
2000050c:	d100      	bne.n	20000510 <pixel+0x46>
2000050e:	e0b8      	b.n	20000682 <pixel+0x1b8>
	uint8_t mask, controller, x_real, data_holder;
	uint8_t index = (y-1) / 8;
20000510:	1dbb      	adds	r3, r7, #6
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	3b01      	subs	r3, #1
20000516:	2b00      	cmp	r3, #0
20000518:	da00      	bge.n	2000051c <pixel+0x52>
2000051a:	3307      	adds	r3, #7
2000051c:	10db      	asrs	r3, r3, #3
2000051e:	001a      	movs	r2, r3
20000520:	230c      	movs	r3, #12
20000522:	18fb      	adds	r3, r7, r3
20000524:	701a      	strb	r2, [r3, #0]
	
	switch((y-1) % 8){
20000526:	1dbb      	adds	r3, r7, #6
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	3b01      	subs	r3, #1
2000052c:	4a57      	ldr	r2, [pc, #348]	; (2000068c <pixel+0x1c2>)
2000052e:	4013      	ands	r3, r2
20000530:	d504      	bpl.n	2000053c <pixel+0x72>
20000532:	3b01      	subs	r3, #1
20000534:	2208      	movs	r2, #8
20000536:	4252      	negs	r2, r2
20000538:	4313      	orrs	r3, r2
2000053a:	3301      	adds	r3, #1
2000053c:	2b07      	cmp	r3, #7
2000053e:	d82c      	bhi.n	2000059a <pixel+0xd0>
20000540:	009a      	lsls	r2, r3, #2
20000542:	4b53      	ldr	r3, [pc, #332]	; (20000690 <pixel+0x1c6>)
20000544:	18d3      	adds	r3, r2, r3
20000546:	681b      	ldr	r3, [r3, #0]
20000548:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000054a:	230f      	movs	r3, #15
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	2201      	movs	r2, #1
20000550:	701a      	strb	r2, [r3, #0]
20000552:	e023      	b.n	2000059c <pixel+0xd2>
		case 1: mask = 2; break;
20000554:	230f      	movs	r3, #15
20000556:	18fb      	adds	r3, r7, r3
20000558:	2202      	movs	r2, #2
2000055a:	701a      	strb	r2, [r3, #0]
2000055c:	e01e      	b.n	2000059c <pixel+0xd2>
		case 2: mask = 4; break;
2000055e:	230f      	movs	r3, #15
20000560:	18fb      	adds	r3, r7, r3
20000562:	2204      	movs	r2, #4
20000564:	701a      	strb	r2, [r3, #0]
20000566:	e019      	b.n	2000059c <pixel+0xd2>
		case 3: mask = 8; break;
20000568:	230f      	movs	r3, #15
2000056a:	18fb      	adds	r3, r7, r3
2000056c:	2208      	movs	r2, #8
2000056e:	701a      	strb	r2, [r3, #0]
20000570:	e014      	b.n	2000059c <pixel+0xd2>
		case 4: mask = 0x10; break;
20000572:	230f      	movs	r3, #15
20000574:	18fb      	adds	r3, r7, r3
20000576:	2210      	movs	r2, #16
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e00f      	b.n	2000059c <pixel+0xd2>
		case 5: mask = 0x20; break;
2000057c:	230f      	movs	r3, #15
2000057e:	18fb      	adds	r3, r7, r3
20000580:	2220      	movs	r2, #32
20000582:	701a      	strb	r2, [r3, #0]
20000584:	e00a      	b.n	2000059c <pixel+0xd2>
		case 6: mask = 0x40; break;
20000586:	230f      	movs	r3, #15
20000588:	18fb      	adds	r3, r7, r3
2000058a:	2240      	movs	r2, #64	; 0x40
2000058c:	701a      	strb	r2, [r3, #0]
2000058e:	e005      	b.n	2000059c <pixel+0xd2>
		case 7: mask = 0x80; break;
20000590:	230f      	movs	r3, #15
20000592:	18fb      	adds	r3, r7, r3
20000594:	2280      	movs	r2, #128	; 0x80
20000596:	701a      	strb	r2, [r3, #0]
20000598:	e000      	b.n	2000059c <pixel+0xd2>
		default: break;
2000059a:	46c0      	nop			; (mov r8, r8)
	}
	if(set == 0){
2000059c:	1d7b      	adds	r3, r7, #5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d105      	bne.n	200005b0 <pixel+0xe6>
		mask = ~mask;
200005a4:	220f      	movs	r2, #15
200005a6:	18bb      	adds	r3, r7, r2
200005a8:	18ba      	adds	r2, r7, r2
200005aa:	7812      	ldrb	r2, [r2, #0]
200005ac:	43d2      	mvns	r2, r2
200005ae:	701a      	strb	r2, [r3, #0]
	}
		
	if(x > 64){
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	2b40      	cmp	r3, #64	; 0x40
200005b6:	d90a      	bls.n	200005ce <pixel+0x104>
		controller = B_CS2;
200005b8:	230e      	movs	r3, #14
200005ba:	18fb      	adds	r3, r7, r3
200005bc:	2210      	movs	r2, #16
200005be:	701a      	strb	r2, [r3, #0]
		x_real = x-65;
200005c0:	230d      	movs	r3, #13
200005c2:	18fb      	adds	r3, r7, r3
200005c4:	1dfa      	adds	r2, r7, #7
200005c6:	7812      	ldrb	r2, [r2, #0]
200005c8:	3a41      	subs	r2, #65	; 0x41
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e009      	b.n	200005e2 <pixel+0x118>
	}else{
		controller = B_CS1;
200005ce:	230e      	movs	r3, #14
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	2208      	movs	r2, #8
200005d4:	701a      	strb	r2, [r3, #0]
		x_real = x-1;
200005d6:	230d      	movs	r3, #13
200005d8:	18fb      	adds	r3, r7, r3
200005da:	1dfa      	adds	r2, r7, #7
200005dc:	7812      	ldrb	r2, [r2, #0]
200005de:	3a01      	subs	r2, #1
200005e0:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_command(LCD_SET_ADD | x_real, controller);
200005e2:	260d      	movs	r6, #13
200005e4:	19bb      	adds	r3, r7, r6
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	2240      	movs	r2, #64	; 0x40
200005ea:	4313      	orrs	r3, r2
200005ec:	b2da      	uxtb	r2, r3
200005ee:	250e      	movs	r5, #14
200005f0:	197b      	adds	r3, r7, r5
200005f2:	781b      	ldrb	r3, [r3, #0]
200005f4:	0019      	movs	r1, r3
200005f6:	0010      	movs	r0, r2
200005f8:	f7ff feb0 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200005fc:	230c      	movs	r3, #12
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	2248      	movs	r2, #72	; 0x48
20000604:	4252      	negs	r2, r2
20000606:	4313      	orrs	r3, r2
20000608:	b2da      	uxtb	r2, r3
2000060a:	197b      	adds	r3, r7, r5
2000060c:	781b      	ldrb	r3, [r3, #0]
2000060e:	0019      	movs	r1, r3
20000610:	0010      	movs	r0, r2
20000612:	f7ff fea3 	bl	2000035c <graphic_write_command>
	data_holder = graphic_read_data(controller);
20000616:	230b      	movs	r3, #11
20000618:	18fc      	adds	r4, r7, r3
2000061a:	197b      	adds	r3, r7, r5
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	0018      	movs	r0, r3
20000620:	f7ff fedf 	bl	200003e2 <graphic_read_data>
20000624:	0003      	movs	r3, r0
20000626:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_real, controller);
20000628:	19bb      	adds	r3, r7, r6
2000062a:	781b      	ldrb	r3, [r3, #0]
2000062c:	2240      	movs	r2, #64	; 0x40
2000062e:	4313      	orrs	r3, r2
20000630:	b2da      	uxtb	r2, r3
20000632:	197b      	adds	r3, r7, r5
20000634:	781b      	ldrb	r3, [r3, #0]
20000636:	0019      	movs	r1, r3
20000638:	0010      	movs	r0, r2
2000063a:	f7ff fe8f 	bl	2000035c <graphic_write_command>
	if(set==1){
2000063e:	1d7b      	adds	r3, r7, #5
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	2b01      	cmp	r3, #1
20000644:	d109      	bne.n	2000065a <pixel+0x190>
		mask |= data_holder;
20000646:	210f      	movs	r1, #15
20000648:	187b      	adds	r3, r7, r1
2000064a:	1879      	adds	r1, r7, r1
2000064c:	220b      	movs	r2, #11
2000064e:	18ba      	adds	r2, r7, r2
20000650:	7809      	ldrb	r1, [r1, #0]
20000652:	7812      	ldrb	r2, [r2, #0]
20000654:	430a      	orrs	r2, r1
20000656:	701a      	strb	r2, [r3, #0]
20000658:	e008      	b.n	2000066c <pixel+0x1a2>
	}else{
		mask &= data_holder;
2000065a:	220f      	movs	r2, #15
2000065c:	18bb      	adds	r3, r7, r2
2000065e:	18ba      	adds	r2, r7, r2
20000660:	210b      	movs	r1, #11
20000662:	1879      	adds	r1, r7, r1
20000664:	7812      	ldrb	r2, [r2, #0]
20000666:	7809      	ldrb	r1, [r1, #0]
20000668:	400a      	ands	r2, r1
2000066a:	701a      	strb	r2, [r3, #0]
	}
	graphic_write_data(mask, controller);
2000066c:	230e      	movs	r3, #14
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781a      	ldrb	r2, [r3, #0]
20000672:	230f      	movs	r3, #15
20000674:	18fb      	adds	r3, r7, r3
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	0011      	movs	r1, r2
2000067a:	0018      	movs	r0, r3
2000067c:	f7ff fe8e 	bl	2000039c <graphic_write_data>
20000680:	e000      	b.n	20000684 <pixel+0x1ba>
	if((x > 128)||(y > 64)||(x < 1)||(y < 1)){return;}
20000682:	46c0      	nop			; (mov r8, r8)
}
20000684:	46bd      	mov	sp, r7
20000686:	b005      	add	sp, #20
20000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	80000007 	andhi	r0, r0, r7
20000690:	2000125c 	andcs	r1, r0, ip, asr r2

20000694 <draw_object>:

void draw_object(POBJECT o){
20000694:	b580      	push	{r7, lr}
20000696:	b084      	sub	sp, #16
20000698:	af00      	add	r7, sp, #0
2000069a:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
2000069c:	2300      	movs	r3, #0
2000069e:	60fb      	str	r3, [r7, #12]
200006a0:	e020      	b.n	200006e4 <draw_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	681a      	ldr	r2, [r3, #0]
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	3304      	adds	r3, #4
200006aa:	005b      	lsls	r3, r3, #1
200006ac:	18d3      	adds	r3, r2, r3
200006ae:	3304      	adds	r3, #4
200006b0:	781a      	ldrb	r2, [r3, #0]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	68db      	ldr	r3, [r3, #12]
200006b6:	b2db      	uxtb	r3, r3
200006b8:	18d3      	adds	r3, r2, r3
200006ba:	b2d8      	uxtb	r0, r3
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	681a      	ldr	r2, [r3, #0]
200006c0:	68fb      	ldr	r3, [r7, #12]
200006c2:	3304      	adds	r3, #4
200006c4:	005b      	lsls	r3, r3, #1
200006c6:	18d3      	adds	r3, r2, r3
200006c8:	3305      	adds	r3, #5
200006ca:	781a      	ldrb	r2, [r3, #0]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691b      	ldr	r3, [r3, #16]
200006d0:	b2db      	uxtb	r3, r3
200006d2:	18d3      	adds	r3, r2, r3
200006d4:	b2db      	uxtb	r3, r3
200006d6:	2201      	movs	r2, #1
200006d8:	0019      	movs	r1, r3
200006da:	f7ff fef6 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3301      	adds	r3, #1
200006e2:	60fb      	str	r3, [r7, #12]
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	681b      	ldr	r3, [r3, #0]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	68fa      	ldr	r2, [r7, #12]
200006ec:	429a      	cmp	r2, r3
200006ee:	dbd8      	blt.n	200006a2 <draw_object+0xe>
	}
}
200006f0:	46c0      	nop			; (mov r8, r8)
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	b004      	add	sp, #16
200006f8:	bd80      	pop	{r7, pc}

200006fa <clear_object>:

void clear_object(POBJECT o){
200006fa:	b580      	push	{r7, lr}
200006fc:	b084      	sub	sp, #16
200006fe:	af00      	add	r7, sp, #0
20000700:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
20000702:	2300      	movs	r3, #0
20000704:	60fb      	str	r3, [r7, #12]
20000706:	e020      	b.n	2000074a <clear_object+0x50>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	681a      	ldr	r2, [r3, #0]
2000070c:	68fb      	ldr	r3, [r7, #12]
2000070e:	3304      	adds	r3, #4
20000710:	005b      	lsls	r3, r3, #1
20000712:	18d3      	adds	r3, r2, r3
20000714:	3304      	adds	r3, #4
20000716:	781a      	ldrb	r2, [r3, #0]
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	68db      	ldr	r3, [r3, #12]
2000071c:	b2db      	uxtb	r3, r3
2000071e:	18d3      	adds	r3, r2, r3
20000720:	b2d8      	uxtb	r0, r3
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	681a      	ldr	r2, [r3, #0]
20000726:	68fb      	ldr	r3, [r7, #12]
20000728:	3304      	adds	r3, #4
2000072a:	005b      	lsls	r3, r3, #1
2000072c:	18d3      	adds	r3, r2, r3
2000072e:	3305      	adds	r3, #5
20000730:	781a      	ldrb	r2, [r3, #0]
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691b      	ldr	r3, [r3, #16]
20000736:	b2db      	uxtb	r3, r3
20000738:	18d3      	adds	r3, r2, r3
2000073a:	b2db      	uxtb	r3, r3
2000073c:	2200      	movs	r2, #0
2000073e:	0019      	movs	r1, r3
20000740:	f7ff fec3 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	3301      	adds	r3, #1
20000748:	60fb      	str	r3, [r7, #12]
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	681b      	ldr	r3, [r3, #0]
2000074e:	681b      	ldr	r3, [r3, #0]
20000750:	68fa      	ldr	r2, [r7, #12]
20000752:	429a      	cmp	r2, r3
20000754:	dbd8      	blt.n	20000708 <clear_object+0xe>
	}
}
20000756:	46c0      	nop			; (mov r8, r8)
20000758:	46c0      	nop			; (mov r8, r8)
2000075a:	46bd      	mov	sp, r7
2000075c:	b004      	add	sp, #16
2000075e:	bd80      	pop	{r7, pc}

20000760 <activateRowHigh>:


void activateRowHigh(int row){
20000760:	b580      	push	{r7, lr}
20000762:	b082      	sub	sp, #8
20000764:	af00      	add	r7, sp, #0
20000766:	6078      	str	r0, [r7, #4]
	switch(row){
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	2b03      	cmp	r3, #3
2000076c:	d01b      	beq.n	200007a6 <activateRowHigh+0x46>
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	2b03      	cmp	r3, #3
20000772:	dc1c      	bgt.n	200007ae <activateRowHigh+0x4e>
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	2b02      	cmp	r3, #2
20000778:	d011      	beq.n	2000079e <activateRowHigh+0x3e>
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	2b02      	cmp	r3, #2
2000077e:	dc16      	bgt.n	200007ae <activateRowHigh+0x4e>
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	2b00      	cmp	r3, #0
20000784:	d003      	beq.n	2000078e <activateRowHigh+0x2e>
20000786:	687b      	ldr	r3, [r7, #4]
20000788:	2b01      	cmp	r3, #1
2000078a:	d004      	beq.n	20000796 <activateRowHigh+0x36>
2000078c:	e00f      	b.n	200007ae <activateRowHigh+0x4e>
		case 0: * GPIOD_ODR_HIGH = 0x10; break;
2000078e:	4b0c      	ldr	r3, [pc, #48]	; (200007c0 <activateRowHigh+0x60>)
20000790:	2210      	movs	r2, #16
20000792:	701a      	strb	r2, [r3, #0]
20000794:	e00f      	b.n	200007b6 <activateRowHigh+0x56>
		case 1: * GPIOD_ODR_HIGH = 0x20; break;
20000796:	4b0a      	ldr	r3, [pc, #40]	; (200007c0 <activateRowHigh+0x60>)
20000798:	2220      	movs	r2, #32
2000079a:	701a      	strb	r2, [r3, #0]
2000079c:	e00b      	b.n	200007b6 <activateRowHigh+0x56>
		case 2: * GPIOD_ODR_HIGH = 0x40; break;
2000079e:	4b08      	ldr	r3, [pc, #32]	; (200007c0 <activateRowHigh+0x60>)
200007a0:	2240      	movs	r2, #64	; 0x40
200007a2:	701a      	strb	r2, [r3, #0]
200007a4:	e007      	b.n	200007b6 <activateRowHigh+0x56>
		case 3: * GPIOD_ODR_HIGH = 0x80; break;
200007a6:	4b06      	ldr	r3, [pc, #24]	; (200007c0 <activateRowHigh+0x60>)
200007a8:	2280      	movs	r2, #128	; 0x80
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	e003      	b.n	200007b6 <activateRowHigh+0x56>
		default: * GPIOD_ODR_HIGH = 0x0;
200007ae:	4b04      	ldr	r3, [pc, #16]	; (200007c0 <activateRowHigh+0x60>)
200007b0:	2200      	movs	r2, #0
200007b2:	701a      	strb	r2, [r3, #0]
	}
}
200007b4:	46c0      	nop			; (mov r8, r8)
200007b6:	46c0      	nop			; (mov r8, r8)
200007b8:	46bd      	mov	sp, r7
200007ba:	b002      	add	sp, #8
200007bc:	bd80      	pop	{r7, pc}
200007be:	46c0      	nop			; (mov r8, r8)
200007c0:	40020c15 	andmi	r0, r2, r5, lsl ip

200007c4 <activateRowLow>:

void activateRowLow(int row){
200007c4:	b580      	push	{r7, lr}
200007c6:	b082      	sub	sp, #8
200007c8:	af00      	add	r7, sp, #0
200007ca:	6078      	str	r0, [r7, #4]
	switch(row){
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	2b03      	cmp	r3, #3
200007d0:	d01b      	beq.n	2000080a <activateRowLow+0x46>
200007d2:	687b      	ldr	r3, [r7, #4]
200007d4:	2b03      	cmp	r3, #3
200007d6:	dc1c      	bgt.n	20000812 <activateRowLow+0x4e>
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	2b02      	cmp	r3, #2
200007dc:	d011      	beq.n	20000802 <activateRowLow+0x3e>
200007de:	687b      	ldr	r3, [r7, #4]
200007e0:	2b02      	cmp	r3, #2
200007e2:	dc16      	bgt.n	20000812 <activateRowLow+0x4e>
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	2b00      	cmp	r3, #0
200007e8:	d003      	beq.n	200007f2 <activateRowLow+0x2e>
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	2b01      	cmp	r3, #1
200007ee:	d004      	beq.n	200007fa <activateRowLow+0x36>
200007f0:	e00f      	b.n	20000812 <activateRowLow+0x4e>
		case 0: * GPIOD_ODR_LOW = 0x10; break;
200007f2:	4b0c      	ldr	r3, [pc, #48]	; (20000824 <activateRowLow+0x60>)
200007f4:	2210      	movs	r2, #16
200007f6:	701a      	strb	r2, [r3, #0]
200007f8:	e00f      	b.n	2000081a <activateRowLow+0x56>
		case 1: * GPIOD_ODR_LOW = 0x20; break;
200007fa:	4b0a      	ldr	r3, [pc, #40]	; (20000824 <activateRowLow+0x60>)
200007fc:	2220      	movs	r2, #32
200007fe:	701a      	strb	r2, [r3, #0]
20000800:	e00b      	b.n	2000081a <activateRowLow+0x56>
		case 2: * GPIOD_ODR_LOW = 0x40; break;
20000802:	4b08      	ldr	r3, [pc, #32]	; (20000824 <activateRowLow+0x60>)
20000804:	2240      	movs	r2, #64	; 0x40
20000806:	701a      	strb	r2, [r3, #0]
20000808:	e007      	b.n	2000081a <activateRowLow+0x56>
		case 3: * GPIOD_ODR_LOW = 0x80; break;
2000080a:	4b06      	ldr	r3, [pc, #24]	; (20000824 <activateRowLow+0x60>)
2000080c:	2280      	movs	r2, #128	; 0x80
2000080e:	701a      	strb	r2, [r3, #0]
20000810:	e003      	b.n	2000081a <activateRowLow+0x56>
		default: * GPIOD_ODR_LOW = 0x0;
20000812:	4b04      	ldr	r3, [pc, #16]	; (20000824 <activateRowLow+0x60>)
20000814:	2200      	movs	r2, #0
20000816:	701a      	strb	r2, [r3, #0]
	}
}
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46c0      	nop			; (mov r8, r8)
2000081c:	46bd      	mov	sp, r7
2000081e:	b002      	add	sp, #8
20000820:	bd80      	pop	{r7, pc}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	40020c14 	andmi	r0, r2, r4, lsl ip

20000828 <readColumnHigh>:

int readColumnHigh(){
20000828:	b580      	push	{r7, lr}
2000082a:	b082      	sub	sp, #8
2000082c:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_HIGH;
2000082e:	4a12      	ldr	r2, [pc, #72]	; (20000878 <readColumnHigh+0x50>)
20000830:	1dfb      	adds	r3, r7, #7
20000832:	7812      	ldrb	r2, [r2, #0]
20000834:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
20000836:	1dfb      	adds	r3, r7, #7
20000838:	781b      	ldrb	r3, [r3, #0]
2000083a:	2208      	movs	r2, #8
2000083c:	4013      	ands	r3, r2
2000083e:	d001      	beq.n	20000844 <readColumnHigh+0x1c>
20000840:	2303      	movs	r3, #3
20000842:	e015      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x4){return 2;}
20000844:	1dfb      	adds	r3, r7, #7
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	2204      	movs	r2, #4
2000084a:	4013      	ands	r3, r2
2000084c:	d001      	beq.n	20000852 <readColumnHigh+0x2a>
2000084e:	2302      	movs	r3, #2
20000850:	e00e      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x2){return 1;}
20000852:	1dfb      	adds	r3, r7, #7
20000854:	781b      	ldrb	r3, [r3, #0]
20000856:	2202      	movs	r2, #2
20000858:	4013      	ands	r3, r2
2000085a:	d001      	beq.n	20000860 <readColumnHigh+0x38>
2000085c:	2301      	movs	r3, #1
2000085e:	e007      	b.n	20000870 <readColumnHigh+0x48>
	if(c & 0x1){return 0;}
20000860:	1dfb      	adds	r3, r7, #7
20000862:	781b      	ldrb	r3, [r3, #0]
20000864:	2201      	movs	r2, #1
20000866:	4013      	ands	r3, r2
20000868:	d001      	beq.n	2000086e <readColumnHigh+0x46>
2000086a:	2300      	movs	r3, #0
2000086c:	e000      	b.n	20000870 <readColumnHigh+0x48>
	return 4;
2000086e:	2304      	movs	r3, #4
}
20000870:	0018      	movs	r0, r3
20000872:	46bd      	mov	sp, r7
20000874:	b002      	add	sp, #8
20000876:	bd80      	pop	{r7, pc}
20000878:	40020c11 	andmi	r0, r2, r1, lsl ip

2000087c <readColumnLow>:

int readColumnLow(){
2000087c:	b580      	push	{r7, lr}
2000087e:	b082      	sub	sp, #8
20000880:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_LOW;
20000882:	4a12      	ldr	r2, [pc, #72]	; (200008cc <readColumnLow+0x50>)
20000884:	1dfb      	adds	r3, r7, #7
20000886:	7812      	ldrb	r2, [r2, #0]
20000888:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000088a:	1dfb      	adds	r3, r7, #7
2000088c:	781b      	ldrb	r3, [r3, #0]
2000088e:	2208      	movs	r2, #8
20000890:	4013      	ands	r3, r2
20000892:	d001      	beq.n	20000898 <readColumnLow+0x1c>
20000894:	2303      	movs	r3, #3
20000896:	e015      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x4){return 2;}
20000898:	1dfb      	adds	r3, r7, #7
2000089a:	781b      	ldrb	r3, [r3, #0]
2000089c:	2204      	movs	r2, #4
2000089e:	4013      	ands	r3, r2
200008a0:	d001      	beq.n	200008a6 <readColumnLow+0x2a>
200008a2:	2302      	movs	r3, #2
200008a4:	e00e      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x2){return 1;}
200008a6:	1dfb      	adds	r3, r7, #7
200008a8:	781b      	ldrb	r3, [r3, #0]
200008aa:	2202      	movs	r2, #2
200008ac:	4013      	ands	r3, r2
200008ae:	d001      	beq.n	200008b4 <readColumnLow+0x38>
200008b0:	2301      	movs	r3, #1
200008b2:	e007      	b.n	200008c4 <readColumnLow+0x48>
	if(c & 0x1){return 0;}
200008b4:	1dfb      	adds	r3, r7, #7
200008b6:	781b      	ldrb	r3, [r3, #0]
200008b8:	2201      	movs	r2, #1
200008ba:	4013      	ands	r3, r2
200008bc:	d001      	beq.n	200008c2 <readColumnLow+0x46>
200008be:	2300      	movs	r3, #0
200008c0:	e000      	b.n	200008c4 <readColumnLow+0x48>
	return 4;
200008c2:	2304      	movs	r3, #4
}
200008c4:	0018      	movs	r0, r3
200008c6:	46bd      	mov	sp, r7
200008c8:	b002      	add	sp, #8
200008ca:	bd80      	pop	{r7, pc}
200008cc:	40020c10 	andmi	r0, r2, r0, lsl ip

200008d0 <getKeyValue>:

int getKeyValue(int row, int column){
200008d0:	b5b0      	push	{r4, r5, r7, lr}
200008d2:	b086      	sub	sp, #24
200008d4:	af00      	add	r7, sp, #0
200008d6:	6078      	str	r0, [r7, #4]
200008d8:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
200008da:	2108      	movs	r1, #8
200008dc:	187b      	adds	r3, r7, r1
200008de:	4a08      	ldr	r2, [pc, #32]	; (20000900 <getKeyValue+0x30>)
200008e0:	ca31      	ldmia	r2!, {r0, r4, r5}
200008e2:	c331      	stmia	r3!, {r0, r4, r5}
200008e4:	6812      	ldr	r2, [r2, #0]
200008e6:	601a      	str	r2, [r3, #0]
	return keys[row][column];
200008e8:	187a      	adds	r2, r7, r1
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	009b      	lsls	r3, r3, #2
200008ee:	18d2      	adds	r2, r2, r3
200008f0:	683b      	ldr	r3, [r7, #0]
200008f2:	18d3      	adds	r3, r2, r3
200008f4:	781b      	ldrb	r3, [r3, #0]
}
200008f6:	0018      	movs	r0, r3
200008f8:	46bd      	mov	sp, r7
200008fa:	b006      	add	sp, #24
200008fc:	bdb0      	pop	{r4, r5, r7, pc}
200008fe:	46c0      	nop			; (mov r8, r8)
20000900:	2000127c 	andcs	r1, r0, ip, ror r2

20000904 <keybHigh>:


unsigned char keybHigh(){
20000904:	b580      	push	{r7, lr}
20000906:	b082      	sub	sp, #8
20000908:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
2000090a:	2300      	movs	r3, #0
2000090c:	607b      	str	r3, [r7, #4]
2000090e:	e01c      	b.n	2000094a <keybHigh+0x46>
		activateRowHigh(row);
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	0018      	movs	r0, r3
20000914:	f7ff ff24 	bl	20000760 <activateRowHigh>
		column = readColumnHigh();
20000918:	f7ff ff86 	bl	20000828 <readColumnHigh>
2000091c:	0002      	movs	r2, r0
2000091e:	1cfb      	adds	r3, r7, #3
20000920:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000922:	1cfb      	adds	r3, r7, #3
20000924:	781b      	ldrb	r3, [r3, #0]
20000926:	2b04      	cmp	r3, #4
20000928:	d00c      	beq.n	20000944 <keybHigh+0x40>
			key = getKeyValue(row, column);
2000092a:	1cfb      	adds	r3, r7, #3
2000092c:	781a      	ldrb	r2, [r3, #0]
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	0011      	movs	r1, r2
20000932:	0018      	movs	r0, r3
20000934:	f7ff ffcc 	bl	200008d0 <getKeyValue>
20000938:	0002      	movs	r2, r0
2000093a:	1cbb      	adds	r3, r7, #2
2000093c:	701a      	strb	r2, [r3, #0]
			return key;
2000093e:	1cbb      	adds	r3, r7, #2
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	e006      	b.n	20000952 <keybHigh+0x4e>
	for(int row = 0; row < 4; row++){
20000944:	687b      	ldr	r3, [r7, #4]
20000946:	3301      	adds	r3, #1
20000948:	607b      	str	r3, [r7, #4]
2000094a:	687b      	ldr	r3, [r7, #4]
2000094c:	2b03      	cmp	r3, #3
2000094e:	dddf      	ble.n	20000910 <keybHigh+0xc>
		}
	}
	return -1;
20000950:	23ff      	movs	r3, #255	; 0xff
}
20000952:	0018      	movs	r0, r3
20000954:	46bd      	mov	sp, r7
20000956:	b002      	add	sp, #8
20000958:	bd80      	pop	{r7, pc}

2000095a <keybLow>:

unsigned char keybLow(){
2000095a:	b580      	push	{r7, lr}
2000095c:	b082      	sub	sp, #8
2000095e:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000960:	2300      	movs	r3, #0
20000962:	607b      	str	r3, [r7, #4]
20000964:	e01c      	b.n	200009a0 <keybLow+0x46>
		activateRowLow(row);
20000966:	687b      	ldr	r3, [r7, #4]
20000968:	0018      	movs	r0, r3
2000096a:	f7ff ff2b 	bl	200007c4 <activateRowLow>
		column = readColumnLow();
2000096e:	f7ff ff85 	bl	2000087c <readColumnLow>
20000972:	0002      	movs	r2, r0
20000974:	1cfb      	adds	r3, r7, #3
20000976:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000978:	1cfb      	adds	r3, r7, #3
2000097a:	781b      	ldrb	r3, [r3, #0]
2000097c:	2b04      	cmp	r3, #4
2000097e:	d00c      	beq.n	2000099a <keybLow+0x40>
			key = getKeyValue(row, column);
20000980:	1cfb      	adds	r3, r7, #3
20000982:	781a      	ldrb	r2, [r3, #0]
20000984:	687b      	ldr	r3, [r7, #4]
20000986:	0011      	movs	r1, r2
20000988:	0018      	movs	r0, r3
2000098a:	f7ff ffa1 	bl	200008d0 <getKeyValue>
2000098e:	0002      	movs	r2, r0
20000990:	1cbb      	adds	r3, r7, #2
20000992:	701a      	strb	r2, [r3, #0]
			return key;
20000994:	1cbb      	adds	r3, r7, #2
20000996:	781b      	ldrb	r3, [r3, #0]
20000998:	e006      	b.n	200009a8 <keybLow+0x4e>
	for(int row = 0; row < 4; row++){
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	3301      	adds	r3, #1
2000099e:	607b      	str	r3, [r7, #4]
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	2b03      	cmp	r3, #3
200009a4:	dddf      	ble.n	20000966 <keybLow+0xc>
		}
	}
	return -1;
200009a6:	23ff      	movs	r3, #255	; 0xff
200009a8:	0018      	movs	r0, r3
200009aa:	46bd      	mov	sp, r7
200009ac:	b002      	add	sp, #8
200009ae:	bd80      	pop	{r7, pc}

200009b0 <set_object_speed>:
static uint8_t player_right_points = 0;
static uint8_t player_left_points = 0; 

void set_object_speed(POBJECT o, int speedx, int speedy){
200009b0:	b580      	push	{r7, lr}
200009b2:	b084      	sub	sp, #16
200009b4:	af00      	add	r7, sp, #0
200009b6:	60f8      	str	r0, [r7, #12]
200009b8:	60b9      	str	r1, [r7, #8]
200009ba:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
200009bc:	68fb      	ldr	r3, [r7, #12]
200009be:	68ba      	ldr	r2, [r7, #8]
200009c0:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
200009c2:	68fb      	ldr	r3, [r7, #12]
200009c4:	687a      	ldr	r2, [r7, #4]
200009c6:	609a      	str	r2, [r3, #8]
}
200009c8:	46c0      	nop			; (mov r8, r8)
200009ca:	46bd      	mov	sp, r7
200009cc:	b004      	add	sp, #16
200009ce:	bd80      	pop	{r7, pc}

200009d0 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
200009d0:	b580      	push	{r7, lr}
200009d2:	b084      	sub	sp, #16
200009d4:	af00      	add	r7, sp, #0
200009d6:	6078      	str	r0, [r7, #4]
200009d8:	6039      	str	r1, [r7, #0]
	clear_object(o);
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	0018      	movs	r0, r3
200009de:	f7ff fe8c 	bl	200006fa <clear_object>
	int newx = o->posx + o->dx;
200009e2:	687b      	ldr	r3, [r7, #4]
200009e4:	68da      	ldr	r2, [r3, #12]
200009e6:	687b      	ldr	r3, [r7, #4]
200009e8:	685b      	ldr	r3, [r3, #4]
200009ea:	18d3      	adds	r3, r2, r3
200009ec:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	691a      	ldr	r2, [r3, #16]
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	689b      	ldr	r3, [r3, #8]
200009f6:	18d3      	adds	r3, r2, r3
200009f8:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
200009fa:	68fb      	ldr	r3, [r7, #12]
200009fc:	2b00      	cmp	r3, #0
200009fe:	dc16      	bgt.n	20000a2e <move_ball+0x5e>
		o->posx = 64;
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	2240      	movs	r2, #64	; 0x40
20000a04:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	2220      	movs	r2, #32
20000a0a:	611a      	str	r2, [r3, #16]
		player_right_points++;
20000a0c:	4b2e      	ldr	r3, [pc, #184]	; (20000ac8 <move_ball+0xf8>)
20000a0e:	781b      	ldrb	r3, [r3, #0]
20000a10:	3301      	adds	r3, #1
20000a12:	b2da      	uxtb	r2, r3
20000a14:	4b2c      	ldr	r3, [pc, #176]	; (20000ac8 <move_ball+0xf8>)
20000a16:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(15,2);
20000a18:	2102      	movs	r1, #2
20000a1a:	200f      	movs	r0, #15
20000a1c:	f000 f9f9 	bl	20000e12 <ascii_gotoxy>
		ascii_write_char(player_right_points + 48);
20000a20:	4b29      	ldr	r3, [pc, #164]	; (20000ac8 <move_ball+0xf8>)
20000a22:	781b      	ldrb	r3, [r3, #0]
20000a24:	3330      	adds	r3, #48	; 0x30
20000a26:	0018      	movs	r0, r3
20000a28:	f000 fa1a 	bl	20000e60 <ascii_write_char>
20000a2c:	e044      	b.n	20000ab8 <move_ball+0xe8>
	}
	else if((newx + o->geo->sizex) > 128){
20000a2e:	687b      	ldr	r3, [r7, #4]
20000a30:	681b      	ldr	r3, [r3, #0]
20000a32:	685a      	ldr	r2, [r3, #4]
20000a34:	68fb      	ldr	r3, [r7, #12]
20000a36:	18d3      	adds	r3, r2, r3
20000a38:	2b80      	cmp	r3, #128	; 0x80
20000a3a:	dd16      	ble.n	20000a6a <move_ball+0x9a>
		o->posx = 64;
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	2240      	movs	r2, #64	; 0x40
20000a40:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	2220      	movs	r2, #32
20000a46:	611a      	str	r2, [r3, #16]
		player_left_points++;
20000a48:	4b20      	ldr	r3, [pc, #128]	; (20000acc <move_ball+0xfc>)
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	3301      	adds	r3, #1
20000a4e:	b2da      	uxtb	r2, r3
20000a50:	4b1e      	ldr	r3, [pc, #120]	; (20000acc <move_ball+0xfc>)
20000a52:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(14,1);
20000a54:	2101      	movs	r1, #1
20000a56:	200e      	movs	r0, #14
20000a58:	f000 f9db 	bl	20000e12 <ascii_gotoxy>
		ascii_write_char(player_left_points + 48);
20000a5c:	4b1b      	ldr	r3, [pc, #108]	; (20000acc <move_ball+0xfc>)
20000a5e:	781b      	ldrb	r3, [r3, #0]
20000a60:	3330      	adds	r3, #48	; 0x30
20000a62:	0018      	movs	r0, r3
20000a64:	f000 f9fc 	bl	20000e60 <ascii_write_char>
20000a68:	e026      	b.n	20000ab8 <move_ball+0xe8>
	}
	else if(newy < 1){
20000a6a:	68bb      	ldr	r3, [r7, #8]
20000a6c:	2b00      	cmp	r3, #0
20000a6e:	dc08      	bgt.n	20000a82 <move_ball+0xb2>
		o->dy = -o->dy;
20000a70:	687b      	ldr	r3, [r7, #4]
20000a72:	689b      	ldr	r3, [r3, #8]
20000a74:	425a      	negs	r2, r3
20000a76:	687b      	ldr	r3, [r7, #4]
20000a78:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000a7a:	687b      	ldr	r3, [r7, #4]
20000a7c:	2201      	movs	r2, #1
20000a7e:	611a      	str	r2, [r3, #16]
20000a80:	e01a      	b.n	20000ab8 <move_ball+0xe8>
	}
	else if(newy > 64 - o->geo->sizey){
20000a82:	687b      	ldr	r3, [r7, #4]
20000a84:	681b      	ldr	r3, [r3, #0]
20000a86:	689b      	ldr	r3, [r3, #8]
20000a88:	2240      	movs	r2, #64	; 0x40
20000a8a:	1ad3      	subs	r3, r2, r3
20000a8c:	68ba      	ldr	r2, [r7, #8]
20000a8e:	429a      	cmp	r2, r3
20000a90:	dd0c      	ble.n	20000aac <move_ball+0xdc>
		o->dy = -o->dy;
20000a92:	687b      	ldr	r3, [r7, #4]
20000a94:	689b      	ldr	r3, [r3, #8]
20000a96:	425a      	negs	r2, r3
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	689b      	ldr	r3, [r3, #8]
20000aa2:	2240      	movs	r2, #64	; 0x40
20000aa4:	1ad2      	subs	r2, r2, r3
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	611a      	str	r2, [r3, #16]
20000aaa:	e005      	b.n	20000ab8 <move_ball+0xe8>
	}else{
		o->posx = newx;
20000aac:	687b      	ldr	r3, [r7, #4]
20000aae:	68fa      	ldr	r2, [r7, #12]
20000ab0:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000ab2:	687b      	ldr	r3, [r7, #4]
20000ab4:	68ba      	ldr	r2, [r7, #8]
20000ab6:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	0018      	movs	r0, r3
20000abc:	f7ff fdea 	bl	20000694 <draw_object>
}
20000ac0:	46c0      	nop			; (mov r8, r8)
20000ac2:	46bd      	mov	sp, r7
20000ac4:	b004      	add	sp, #16
20000ac6:	bd80      	pop	{r7, pc}
20000ac8:	20001164 	andcs	r1, r0, r4, ror #2
20000acc:	20001165 	andcs	r1, r0, r5, ror #2

20000ad0 <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
20000ad0:	b580      	push	{r7, lr}
20000ad2:	b084      	sub	sp, #16
20000ad4:	af00      	add	r7, sp, #0
20000ad6:	60f8      	str	r0, [r7, #12]
20000ad8:	60b9      	str	r1, [r7, #8]
20000ada:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	68da      	ldr	r2, [r3, #12]
20000ae0:	687b      	ldr	r3, [r7, #4]
20000ae2:	681b      	ldr	r3, [r3, #0]
20000ae4:	685b      	ldr	r3, [r3, #4]
20000ae6:	18d2      	adds	r2, r2, r3
20000ae8:	68fb      	ldr	r3, [r7, #12]
20000aea:	68db      	ldr	r3, [r3, #12]
20000aec:	429a      	cmp	r2, r3
20000aee:	db21      	blt.n	20000b34 <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000af0:	687b      	ldr	r3, [r7, #4]
20000af2:	68da      	ldr	r2, [r3, #12]
20000af4:	68fb      	ldr	r3, [r7, #12]
20000af6:	68d9      	ldr	r1, [r3, #12]
20000af8:	68fb      	ldr	r3, [r7, #12]
20000afa:	681b      	ldr	r3, [r3, #0]
20000afc:	685b      	ldr	r3, [r3, #4]
20000afe:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000b00:	429a      	cmp	r2, r3
20000b02:	da17      	bge.n	20000b34 <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000b04:	687b      	ldr	r3, [r7, #4]
20000b06:	691a      	ldr	r2, [r3, #16]
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	681b      	ldr	r3, [r3, #0]
20000b0c:	689b      	ldr	r3, [r3, #8]
20000b0e:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000b10:	68ba      	ldr	r2, [r7, #8]
20000b12:	429a      	cmp	r2, r3
20000b14:	dc0e      	bgt.n	20000b34 <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000b16:	687b      	ldr	r3, [r7, #4]
20000b18:	691a      	ldr	r2, [r3, #16]
20000b1a:	68fb      	ldr	r3, [r7, #12]
20000b1c:	681b      	ldr	r3, [r3, #0]
20000b1e:	6899      	ldr	r1, [r3, #8]
20000b20:	68bb      	ldr	r3, [r7, #8]
20000b22:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000b24:	429a      	cmp	r2, r3
20000b26:	da05      	bge.n	20000b34 <collision_with_ball+0x64>
			clear_object(ball);
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	0018      	movs	r0, r3
20000b2c:	f7ff fde5 	bl	200006fa <clear_object>
			   return 1;
20000b30:	2301      	movs	r3, #1
20000b32:	e000      	b.n	20000b36 <collision_with_ball+0x66>
		   }
	return 0;
20000b34:	2300      	movs	r3, #0
}
20000b36:	0018      	movs	r0, r3
20000b38:	46bd      	mov	sp, r7
20000b3a:	b004      	add	sp, #16
20000b3c:	bd80      	pop	{r7, pc}

20000b3e <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000b3e:	b580      	push	{r7, lr}
20000b40:	b084      	sub	sp, #16
20000b42:	af00      	add	r7, sp, #0
20000b44:	6078      	str	r0, [r7, #4]
20000b46:	6039      	str	r1, [r7, #0]
	clear_object(o);
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	0018      	movs	r0, r3
20000b4c:	f7ff fdd5 	bl	200006fa <clear_object>
	
	int newy = o->posy + o->dy;
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	691a      	ldr	r2, [r3, #16]
20000b54:	687b      	ldr	r3, [r7, #4]
20000b56:	689b      	ldr	r3, [r3, #8]
20000b58:	18d3      	adds	r3, r2, r3
20000b5a:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000b5c:	683a      	ldr	r2, [r7, #0]
20000b5e:	68f9      	ldr	r1, [r7, #12]
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	0018      	movs	r0, r3
20000b64:	f7ff ffb4 	bl	20000ad0 <collision_with_ball>
20000b68:	1e03      	subs	r3, r0, #0
20000b6a:	d019      	beq.n	20000ba0 <move_paddle+0x62>
		if(o->posx < 64){
20000b6c:	687b      	ldr	r3, [r7, #4]
20000b6e:	68db      	ldr	r3, [r3, #12]
20000b70:	2b3f      	cmp	r3, #63	; 0x3f
20000b72:	dc08      	bgt.n	20000b86 <move_paddle+0x48>
			ball->dx = -(ball->dx);
20000b74:	683b      	ldr	r3, [r7, #0]
20000b76:	685b      	ldr	r3, [r3, #4]
20000b78:	425a      	negs	r2, r3
20000b7a:	683b      	ldr	r3, [r7, #0]
20000b7c:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000b7e:	683b      	ldr	r3, [r7, #0]
20000b80:	2234      	movs	r2, #52	; 0x34
20000b82:	60da      	str	r2, [r3, #12]
20000b84:	e007      	b.n	20000b96 <move_paddle+0x58>
		}else{
			ball->dx = (ball->dx)*(-1);
20000b86:	683b      	ldr	r3, [r7, #0]
20000b88:	685b      	ldr	r3, [r3, #4]
20000b8a:	425a      	negs	r2, r3
20000b8c:	683b      	ldr	r3, [r7, #0]
20000b8e:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000b90:	683b      	ldr	r3, [r7, #0]
20000b92:	224a      	movs	r2, #74	; 0x4a
20000b94:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000b96:	683b      	ldr	r3, [r7, #0]
20000b98:	0018      	movs	r0, r3
20000b9a:	f7ff fd7b 	bl	20000694 <draw_object>
20000b9e:	e023      	b.n	20000be8 <move_paddle+0xaa>
	}

	else if(newy < 1){
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	2b00      	cmp	r3, #0
20000ba4:	dc08      	bgt.n	20000bb8 <move_paddle+0x7a>
		o->dy = -o->dy;
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	689b      	ldr	r3, [r3, #8]
20000baa:	425a      	negs	r2, r3
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000bb0:	687b      	ldr	r3, [r7, #4]
20000bb2:	2201      	movs	r2, #1
20000bb4:	611a      	str	r2, [r3, #16]
20000bb6:	e017      	b.n	20000be8 <move_paddle+0xaa>
	}
	else if(newy > 64 - o->geo->sizey){
20000bb8:	687b      	ldr	r3, [r7, #4]
20000bba:	681b      	ldr	r3, [r3, #0]
20000bbc:	689b      	ldr	r3, [r3, #8]
20000bbe:	2240      	movs	r2, #64	; 0x40
20000bc0:	1ad3      	subs	r3, r2, r3
20000bc2:	68fa      	ldr	r2, [r7, #12]
20000bc4:	429a      	cmp	r2, r3
20000bc6:	dd0c      	ble.n	20000be2 <move_paddle+0xa4>
		o->dy = -o->dy;
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	689b      	ldr	r3, [r3, #8]
20000bcc:	425a      	negs	r2, r3
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000bd2:	687b      	ldr	r3, [r7, #4]
20000bd4:	681b      	ldr	r3, [r3, #0]
20000bd6:	689b      	ldr	r3, [r3, #8]
20000bd8:	2240      	movs	r2, #64	; 0x40
20000bda:	1ad2      	subs	r2, r2, r3
20000bdc:	687b      	ldr	r3, [r7, #4]
20000bde:	611a      	str	r2, [r3, #16]
20000be0:	e002      	b.n	20000be8 <move_paddle+0xaa>
	}else{
		o->posy = newy;
20000be2:	687b      	ldr	r3, [r7, #4]
20000be4:	68fa      	ldr	r2, [r7, #12]
20000be6:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	0018      	movs	r0, r3
20000bec:	f7ff fd52 	bl	20000694 <draw_object>
}
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b004      	add	sp, #16
20000bf6:	bd80      	pop	{r7, pc}

20000bf8 <ascii_ctrl_bit_set>:
#define B_CS1 8




void ascii_ctrl_bit_set(unsigned char x){
20000bf8:	b580      	push	{r7, lr}
20000bfa:	b082      	sub	sp, #8
20000bfc:	af00      	add	r7, sp, #0
20000bfe:	0002      	movs	r2, r0
20000c00:	1dfb      	adds	r3, r7, #7
20000c02:	701a      	strb	r2, [r3, #0]
	(* portOdrLow) |=x|B_SELECT;
20000c04:	4b07      	ldr	r3, [pc, #28]	; (20000c24 <ascii_ctrl_bit_set+0x2c>)
20000c06:	781b      	ldrb	r3, [r3, #0]
20000c08:	b2da      	uxtb	r2, r3
20000c0a:	1dfb      	adds	r3, r7, #7
20000c0c:	781b      	ldrb	r3, [r3, #0]
20000c0e:	4313      	orrs	r3, r2
20000c10:	b2db      	uxtb	r3, r3
20000c12:	4a04      	ldr	r2, [pc, #16]	; (20000c24 <ascii_ctrl_bit_set+0x2c>)
20000c14:	2104      	movs	r1, #4
20000c16:	430b      	orrs	r3, r1
20000c18:	b2db      	uxtb	r3, r3
20000c1a:	7013      	strb	r3, [r2, #0]
}
20000c1c:	46c0      	nop			; (mov r8, r8)
20000c1e:	46bd      	mov	sp, r7
20000c20:	b002      	add	sp, #8
20000c22:	bd80      	pop	{r7, pc}
20000c24:	40021014 	andmi	r1, r2, r4, lsl r0

20000c28 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000c28:	b580      	push	{r7, lr}
20000c2a:	b084      	sub	sp, #16
20000c2c:	af00      	add	r7, sp, #0
20000c2e:	0002      	movs	r2, r0
20000c30:	1dfb      	adds	r3, r7, #7
20000c32:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
20000c34:	200f      	movs	r0, #15
20000c36:	183b      	adds	r3, r7, r0
20000c38:	1dfa      	adds	r2, r7, #7
20000c3a:	7812      	ldrb	r2, [r2, #0]
20000c3c:	43d2      	mvns	r2, r2
20000c3e:	701a      	strb	r2, [r3, #0]
	* portOdrLow &=notX;
20000c40:	4b0a      	ldr	r3, [pc, #40]	; (20000c6c <ascii_ctrl_bit_clear+0x44>)
20000c42:	781b      	ldrb	r3, [r3, #0]
20000c44:	b2db      	uxtb	r3, r3
20000c46:	4909      	ldr	r1, [pc, #36]	; (20000c6c <ascii_ctrl_bit_clear+0x44>)
20000c48:	183a      	adds	r2, r7, r0
20000c4a:	7812      	ldrb	r2, [r2, #0]
20000c4c:	4013      	ands	r3, r2
20000c4e:	b2db      	uxtb	r3, r3
20000c50:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
20000c52:	4b06      	ldr	r3, [pc, #24]	; (20000c6c <ascii_ctrl_bit_clear+0x44>)
20000c54:	781b      	ldrb	r3, [r3, #0]
20000c56:	b2db      	uxtb	r3, r3
20000c58:	4a04      	ldr	r2, [pc, #16]	; (20000c6c <ascii_ctrl_bit_clear+0x44>)
20000c5a:	2104      	movs	r1, #4
20000c5c:	430b      	orrs	r3, r1
20000c5e:	b2db      	uxtb	r3, r3
20000c60:	7013      	strb	r3, [r2, #0]
}
20000c62:	46c0      	nop			; (mov r8, r8)
20000c64:	46bd      	mov	sp, r7
20000c66:	b004      	add	sp, #16
20000c68:	bd80      	pop	{r7, pc}
20000c6a:	46c0      	nop			; (mov r8, r8)
20000c6c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c70 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000c70:	b580      	push	{r7, lr}
20000c72:	b082      	sub	sp, #8
20000c74:	af00      	add	r7, sp, #0
20000c76:	0002      	movs	r2, r0
20000c78:	1dfb      	adds	r3, r7, #7
20000c7a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c7c:	2001      	movs	r0, #1
20000c7e:	f7ff ffd3 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c82:	2002      	movs	r0, #2
20000c84:	f7ff ffd0 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000c88:	1dfb      	adds	r3, r7, #7
20000c8a:	781b      	ldrb	r3, [r3, #0]
20000c8c:	0018      	movs	r0, r3
20000c8e:	f000 f819 	bl	20000cc4 <ascii_write_controller>
}
20000c92:	46c0      	nop			; (mov r8, r8)
20000c94:	46bd      	mov	sp, r7
20000c96:	b002      	add	sp, #8
20000c98:	bd80      	pop	{r7, pc}

20000c9a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000c9a:	b580      	push	{r7, lr}
20000c9c:	b082      	sub	sp, #8
20000c9e:	af00      	add	r7, sp, #0
20000ca0:	0002      	movs	r2, r0
20000ca2:	1dfb      	adds	r3, r7, #7
20000ca4:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000ca6:	2001      	movs	r0, #1
20000ca8:	f7ff ffa6 	bl	20000bf8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000cac:	2002      	movs	r0, #2
20000cae:	f7ff ffbb 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000cb2:	1dfb      	adds	r3, r7, #7
20000cb4:	781b      	ldrb	r3, [r3, #0]
20000cb6:	0018      	movs	r0, r3
20000cb8:	f000 f804 	bl	20000cc4 <ascii_write_controller>
}
20000cbc:	46c0      	nop			; (mov r8, r8)
20000cbe:	46bd      	mov	sp, r7
20000cc0:	b002      	add	sp, #8
20000cc2:	bd80      	pop	{r7, pc}

20000cc4 <ascii_write_controller>:

void ascii_write_controller(unsigned char command){
20000cc4:	b580      	push	{r7, lr}
20000cc6:	b082      	sub	sp, #8
20000cc8:	af00      	add	r7, sp, #0
20000cca:	0002      	movs	r2, r0
20000ccc:	1dfb      	adds	r3, r7, #7
20000cce:	701a      	strb	r2, [r3, #0]
		//	delay_250ns();
	ascii_ctrl_bit_set(B_E);
20000cd0:	2040      	movs	r0, #64	; 0x40
20000cd2:	f7ff ff91 	bl	20000bf8 <ascii_ctrl_bit_set>
	* portOdrHigh = command;
20000cd6:	4a06      	ldr	r2, [pc, #24]	; (20000cf0 <ascii_write_controller+0x2c>)
20000cd8:	1dfb      	adds	r3, r7, #7
20000cda:	781b      	ldrb	r3, [r3, #0]
20000cdc:	7013      	strb	r3, [r2, #0]
		//	delay_250ns();
	ascii_ctrl_bit_clear(B_E);
20000cde:	2040      	movs	r0, #64	; 0x40
20000ce0:	f7ff ffa2 	bl	20000c28 <ascii_ctrl_bit_clear>
	delay_250ns();
20000ce4:	f7ff f994 	bl	20000010 <delay_250ns>
}
20000ce8:	46c0      	nop			; (mov r8, r8)
20000cea:	46bd      	mov	sp, r7
20000cec:	b002      	add	sp, #8
20000cee:	bd80      	pop	{r7, pc}
20000cf0:	40021015 	andmi	r1, r2, r5, lsl r0

20000cf4 <ascii_read_controller>:

unsigned char ascii_read_controller(){
20000cf4:	b580      	push	{r7, lr}
20000cf6:	b082      	sub	sp, #8
20000cf8:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set(B_E);
20000cfa:	2040      	movs	r0, #64	; 0x40
20000cfc:	f7ff ff7c 	bl	20000bf8 <ascii_ctrl_bit_set>
	delay_250ns();
20000d00:	f7ff f986 	bl	20000010 <delay_250ns>
	delay_250ns();
20000d04:	f7ff f984 	bl	20000010 <delay_250ns>
	rv = * portIdrHigh;
20000d08:	4a06      	ldr	r2, [pc, #24]	; (20000d24 <ascii_read_controller+0x30>)
20000d0a:	1dfb      	adds	r3, r7, #7
20000d0c:	7812      	ldrb	r2, [r2, #0]
20000d0e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000d10:	2040      	movs	r0, #64	; 0x40
20000d12:	f7ff ff89 	bl	20000c28 <ascii_ctrl_bit_clear>
	return rv;
20000d16:	1dfb      	adds	r3, r7, #7
20000d18:	781b      	ldrb	r3, [r3, #0]
}
20000d1a:	0018      	movs	r0, r3
20000d1c:	46bd      	mov	sp, r7
20000d1e:	b002      	add	sp, #8
20000d20:	bd80      	pop	{r7, pc}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	40021011 	andmi	r1, r2, r1, lsl r0

20000d28 <ascii_read_data>:

unsigned char ascii_read_data(){
20000d28:	b580      	push	{r7, lr}
20000d2a:	b082      	sub	sp, #8
20000d2c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000d2e:	4b0a      	ldr	r3, [pc, #40]	; (20000d58 <ascii_read_data+0x30>)
20000d30:	4a0a      	ldr	r2, [pc, #40]	; (20000d5c <ascii_read_data+0x34>)
20000d32:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_set(B_RS);
20000d34:	2001      	movs	r0, #1
20000d36:	f7ff ff5f 	bl	20000bf8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000d3a:	2002      	movs	r0, #2
20000d3c:	f7ff ff5c 	bl	20000bf8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000d40:	4a07      	ldr	r2, [pc, #28]	; (20000d60 <ascii_read_data+0x38>)
20000d42:	1dfb      	adds	r3, r7, #7
20000d44:	701a      	strb	r2, [r3, #0]
	* portModer = 0x55555555;
20000d46:	4b04      	ldr	r3, [pc, #16]	; (20000d58 <ascii_read_data+0x30>)
20000d48:	4a06      	ldr	r2, [pc, #24]	; (20000d64 <ascii_read_data+0x3c>)
20000d4a:	601a      	str	r2, [r3, #0]
	return rv;
20000d4c:	1dfb      	adds	r3, r7, #7
20000d4e:	781b      	ldrb	r3, [r3, #0]
}
20000d50:	0018      	movs	r0, r3
20000d52:	46bd      	mov	sp, r7
20000d54:	b002      	add	sp, #8
20000d56:	bd80      	pop	{r7, pc}
20000d58:	40021000 	andmi	r1, r2, r0
20000d5c:	00005555 	andeq	r5, r0, r5, asr r5
20000d60:	20000cf5 	strdcs	r0, [r0], -r5
20000d64:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d68 <ascii_read_status>:

unsigned char ascii_read_status(){
20000d68:	b590      	push	{r4, r7, lr}
20000d6a:	b083      	sub	sp, #12
20000d6c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000d6e:	4b0b      	ldr	r3, [pc, #44]	; (20000d9c <ascii_read_status+0x34>)
20000d70:	4a0b      	ldr	r2, [pc, #44]	; (20000da0 <ascii_read_status+0x38>)
20000d72:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_clear(B_RS);
20000d74:	2001      	movs	r0, #1
20000d76:	f7ff ff57 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000d7a:	2002      	movs	r0, #2
20000d7c:	f7ff ff3c 	bl	20000bf8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000d80:	1dfc      	adds	r4, r7, #7
20000d82:	f7ff ffb7 	bl	20000cf4 <ascii_read_controller>
20000d86:	0003      	movs	r3, r0
20000d88:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000d8a:	4b04      	ldr	r3, [pc, #16]	; (20000d9c <ascii_read_status+0x34>)
20000d8c:	4a05      	ldr	r2, [pc, #20]	; (20000da4 <ascii_read_status+0x3c>)
20000d8e:	601a      	str	r2, [r3, #0]
	return rv;
20000d90:	1dfb      	adds	r3, r7, #7
20000d92:	781b      	ldrb	r3, [r3, #0]
} 
20000d94:	0018      	movs	r0, r3
20000d96:	46bd      	mov	sp, r7
20000d98:	b003      	add	sp, #12
20000d9a:	bd90      	pop	{r4, r7, pc}
20000d9c:	40021000 	andmi	r1, r2, r0
20000da0:	00005555 	andeq	r5, r0, r5, asr r5
20000da4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000da8 <ascii_command>:

void ascii_command(unsigned char command){
20000da8:	b580      	push	{r7, lr}
20000daa:	b082      	sub	sp, #8
20000dac:	af00      	add	r7, sp, #0
20000dae:	0002      	movs	r2, r0
20000db0:	1dfb      	adds	r3, r7, #7
20000db2:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000db4:	46c0      	nop			; (mov r8, r8)
20000db6:	f7ff ffd7 	bl	20000d68 <ascii_read_status>
20000dba:	0003      	movs	r3, r0
20000dbc:	001a      	movs	r2, r3
20000dbe:	2380      	movs	r3, #128	; 0x80
20000dc0:	4013      	ands	r3, r2
20000dc2:	2b80      	cmp	r3, #128	; 0x80
20000dc4:	d0f7      	beq.n	20000db6 <ascii_command+0xe>
	delay_mikro(8);
20000dc6:	2008      	movs	r0, #8
20000dc8:	f7ff f946 	bl	20000058 <delay_mikro>
	ascii_write_cmd(command);
20000dcc:	1dfb      	adds	r3, r7, #7
20000dce:	781b      	ldrb	r3, [r3, #0]
20000dd0:	0018      	movs	r0, r3
20000dd2:	f7ff ff4d 	bl	20000c70 <ascii_write_cmd>
	delay_milli(2);
20000dd6:	2002      	movs	r0, #2
20000dd8:	f7ff f95f 	bl	2000009a <delay_milli>
}
20000ddc:	46c0      	nop			; (mov r8, r8)
20000dde:	46bd      	mov	sp, r7
20000de0:	b002      	add	sp, #8
20000de2:	bd80      	pop	{r7, pc}

20000de4 <ascii_init>:

void ascii_init(){
20000de4:	b580      	push	{r7, lr}
20000de6:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS);
20000de8:	2001      	movs	r0, #1
20000dea:	f7ff ff1d 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000dee:	2002      	movs	r0, #2
20000df0:	f7ff ff1a 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_command(0x38);
20000df4:	2038      	movs	r0, #56	; 0x38
20000df6:	f7ff ffd7 	bl	20000da8 <ascii_command>
	ascii_command(0x0E);
20000dfa:	200e      	movs	r0, #14
20000dfc:	f7ff ffd4 	bl	20000da8 <ascii_command>
	ascii_command(0x01);
20000e00:	2001      	movs	r0, #1
20000e02:	f7ff ffd1 	bl	20000da8 <ascii_command>
	ascii_command(0x04);
20000e06:	2004      	movs	r0, #4
20000e08:	f7ff ffce 	bl	20000da8 <ascii_command>
}
20000e0c:	46c0      	nop			; (mov r8, r8)
20000e0e:	46bd      	mov	sp, r7
20000e10:	bd80      	pop	{r7, pc}

20000e12 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000e12:	b580      	push	{r7, lr}
20000e14:	b084      	sub	sp, #16
20000e16:	af00      	add	r7, sp, #0
20000e18:	6078      	str	r0, [r7, #4]
20000e1a:	6039      	str	r1, [r7, #0]
	ascii_ctrl_bit_clear(B_RS);
20000e1c:	2001      	movs	r0, #1
20000e1e:	f7ff ff03 	bl	20000c28 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000e22:	2002      	movs	r0, #2
20000e24:	f7ff ff00 	bl	20000c28 <ascii_ctrl_bit_clear>
	unsigned char adress = x - 1;
20000e28:	687b      	ldr	r3, [r7, #4]
20000e2a:	b2da      	uxtb	r2, r3
20000e2c:	210f      	movs	r1, #15
20000e2e:	187b      	adds	r3, r7, r1
20000e30:	3a01      	subs	r2, #1
20000e32:	701a      	strb	r2, [r3, #0]
	if(y == 2){
20000e34:	683b      	ldr	r3, [r7, #0]
20000e36:	2b02      	cmp	r3, #2
20000e38:	d104      	bne.n	20000e44 <ascii_gotoxy+0x32>
		adress += 0x40;
20000e3a:	187b      	adds	r3, r7, r1
20000e3c:	187a      	adds	r2, r7, r1
20000e3e:	7812      	ldrb	r2, [r2, #0]
20000e40:	3240      	adds	r2, #64	; 0x40
20000e42:	701a      	strb	r2, [r3, #0]
	}
	ascii_command(0x80 | adress);
20000e44:	230f      	movs	r3, #15
20000e46:	18fb      	adds	r3, r7, r3
20000e48:	781b      	ldrb	r3, [r3, #0]
20000e4a:	2280      	movs	r2, #128	; 0x80
20000e4c:	4252      	negs	r2, r2
20000e4e:	4313      	orrs	r3, r2
20000e50:	b2db      	uxtb	r3, r3
20000e52:	0018      	movs	r0, r3
20000e54:	f7ff ffa8 	bl	20000da8 <ascii_command>
}
20000e58:	46c0      	nop			; (mov r8, r8)
20000e5a:	46bd      	mov	sp, r7
20000e5c:	b004      	add	sp, #16
20000e5e:	bd80      	pop	{r7, pc}

20000e60 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000e60:	b580      	push	{r7, lr}
20000e62:	b082      	sub	sp, #8
20000e64:	af00      	add	r7, sp, #0
20000e66:	0002      	movs	r2, r0
20000e68:	1dfb      	adds	r3, r7, #7
20000e6a:	701a      	strb	r2, [r3, #0]
	while(ascii_read_status() & 0x80 == 0x80){}
20000e6c:	46c0      	nop			; (mov r8, r8)
20000e6e:	f7ff ff7b 	bl	20000d68 <ascii_read_status>
20000e72:	0003      	movs	r3, r0
20000e74:	001a      	movs	r2, r3
20000e76:	2301      	movs	r3, #1
20000e78:	4013      	ands	r3, r2
20000e7a:	d1f8      	bne.n	20000e6e <ascii_write_char+0xe>
	delay_mikro(8);
20000e7c:	2008      	movs	r0, #8
20000e7e:	f7ff f8eb 	bl	20000058 <delay_mikro>
	ascii_write_data(c);
20000e82:	1dfb      	adds	r3, r7, #7
20000e84:	781b      	ldrb	r3, [r3, #0]
20000e86:	0018      	movs	r0, r3
20000e88:	f7ff ff07 	bl	20000c9a <ascii_write_data>
	delay_mikro(50);
20000e8c:	2032      	movs	r0, #50	; 0x32
20000e8e:	f7ff f8e3 	bl	20000058 <delay_mikro>
}
20000e92:	46c0      	nop			; (mov r8, r8)
20000e94:	46bd      	mov	sp, r7
20000e96:	b002      	add	sp, #8
20000e98:	bd80      	pop	{r7, pc}

20000e9a <ascii_playerscore_init>:

void ascii_playerscore_init(void){
20000e9a:	b5b0      	push	{r4, r5, r7, lr}
20000e9c:	b08a      	sub	sp, #40	; 0x28
20000e9e:	af00      	add	r7, sp, #0
	char * s;
	char test1[] = "Player Left: 0";	//plats 14
20000ea0:	2414      	movs	r4, #20
20000ea2:	193b      	adds	r3, r7, r4
20000ea4:	4a1b      	ldr	r2, [pc, #108]	; (20000f14 <ascii_playerscore_init+0x7a>)
20000ea6:	ca23      	ldmia	r2!, {r0, r1, r5}
20000ea8:	c323      	stmia	r3!, {r0, r1, r5}
20000eaa:	8811      	ldrh	r1, [r2, #0]
20000eac:	8019      	strh	r1, [r3, #0]
20000eae:	7892      	ldrb	r2, [r2, #2]
20000eb0:	709a      	strb	r2, [r3, #2]
	char test2[] = "Player Right: 0";	//plats 15
20000eb2:	1d3b      	adds	r3, r7, #4
20000eb4:	4a18      	ldr	r2, [pc, #96]	; (20000f18 <ascii_playerscore_init+0x7e>)
20000eb6:	ca23      	ldmia	r2!, {r0, r1, r5}
20000eb8:	c323      	stmia	r3!, {r0, r1, r5}
20000eba:	6812      	ldr	r2, [r2, #0]
20000ebc:	601a      	str	r2, [r3, #0]
	
	ascii_init();
20000ebe:	f7ff ff91 	bl	20000de4 <ascii_init>
	ascii_gotoxy(1,1);
20000ec2:	2101      	movs	r1, #1
20000ec4:	2001      	movs	r0, #1
20000ec6:	f7ff ffa4 	bl	20000e12 <ascii_gotoxy>
	s = test1;
20000eca:	193b      	adds	r3, r7, r4
20000ecc:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000ece:	e006      	b.n	20000ede <ascii_playerscore_init+0x44>
		ascii_write_char(*s++);
20000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ed2:	1c5a      	adds	r2, r3, #1
20000ed4:	627a      	str	r2, [r7, #36]	; 0x24
20000ed6:	781b      	ldrb	r3, [r3, #0]
20000ed8:	0018      	movs	r0, r3
20000eda:	f7ff ffc1 	bl	20000e60 <ascii_write_char>
	while(*s){
20000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ee0:	781b      	ldrb	r3, [r3, #0]
20000ee2:	2b00      	cmp	r3, #0
20000ee4:	d1f4      	bne.n	20000ed0 <ascii_playerscore_init+0x36>
	}
	ascii_gotoxy(1,2);
20000ee6:	2102      	movs	r1, #2
20000ee8:	2001      	movs	r0, #1
20000eea:	f7ff ff92 	bl	20000e12 <ascii_gotoxy>
	s=test2;
20000eee:	1d3b      	adds	r3, r7, #4
20000ef0:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000ef2:	e006      	b.n	20000f02 <ascii_playerscore_init+0x68>
		ascii_write_char(*s++);
20000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ef6:	1c5a      	adds	r2, r3, #1
20000ef8:	627a      	str	r2, [r7, #36]	; 0x24
20000efa:	781b      	ldrb	r3, [r3, #0]
20000efc:	0018      	movs	r0, r3
20000efe:	f7ff ffaf 	bl	20000e60 <ascii_write_char>
	while(*s){
20000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f04:	781b      	ldrb	r3, [r3, #0]
20000f06:	2b00      	cmp	r3, #0
20000f08:	d1f4      	bne.n	20000ef4 <ascii_playerscore_init+0x5a>
	}
	return 0;
20000f0a:	46c0      	nop			; (mov r8, r8)
}
20000f0c:	46bd      	mov	sp, r7
20000f0e:	b00a      	add	sp, #40	; 0x28
20000f10:	bdb0      	pop	{r4, r5, r7, pc}
20000f12:	46c0      	nop			; (mov r8, r8)
20000f14:	2000128c 	andcs	r1, r0, ip, lsl #5
20000f18:	2000129c 	mulcs	r0, ip, r2

20000f1c <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000f1c:	b580      	push	{r7, lr}
20000f1e:	af00      	add	r7, sp, #0
	* ((unsigned long *) 0x40023830) = 0x18;
	__asm__ volatile(" LDR R0, =0x08000209\n");
	__asm__ volatile(" BLX R0 \n");
#endif
	
	* portModer = 0x55555555;
20000f20:	4b07      	ldr	r3, [pc, #28]	; (20000f40 <init_app+0x24>)
20000f22:	4a08      	ldr	r2, [pc, #32]	; (20000f44 <init_app+0x28>)
20000f24:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000f26:	4b08      	ldr	r3, [pc, #32]	; (20000f48 <init_app+0x2c>)
20000f28:	4a08      	ldr	r2, [pc, #32]	; (20000f4c <init_app+0x30>)
20000f2a:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000f2c:	4b08      	ldr	r3, [pc, #32]	; (20000f50 <init_app+0x34>)
20000f2e:	4a09      	ldr	r2, [pc, #36]	; (20000f54 <init_app+0x38>)
20000f30:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000f32:	4b09      	ldr	r3, [pc, #36]	; (20000f58 <init_app+0x3c>)
20000f34:	2200      	movs	r2, #0
20000f36:	801a      	strh	r2, [r3, #0]
}
20000f38:	46c0      	nop			; (mov r8, r8)
20000f3a:	46bd      	mov	sp, r7
20000f3c:	bd80      	pop	{r7, pc}
20000f3e:	46c0      	nop			; (mov r8, r8)
20000f40:	40021000 	andmi	r1, r2, r0
20000f44:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000f48:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f4c:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20000f50:	40020c30 	andmi	r0, r2, r0, lsr ip
20000f54:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20000f58:	40020c08 	andmi	r0, r2, r8, lsl #24

20000f5c <main>:

#ifndef TEST
void main(void){
20000f5c:	b590      	push	{r4, r7, lr}
20000f5e:	b087      	sub	sp, #28
20000f60:	af00      	add	r7, sp, #0
	POBJECT b = &ball;
20000f62:	4b37      	ldr	r3, [pc, #220]	; (20001040 <main+0xe4>)
20000f64:	617b      	str	r3, [r7, #20]
	POBJECT b2 = &ball;
20000f66:	4b36      	ldr	r3, [pc, #216]	; (20001040 <main+0xe4>)
20000f68:	613b      	str	r3, [r7, #16]
	POBJECT p_left = &paddle_left;
20000f6a:	4b36      	ldr	r3, [pc, #216]	; (20001044 <main+0xe8>)
20000f6c:	60fb      	str	r3, [r7, #12]
	POBJECT p_right = &paddle_right;
20000f6e:	4b36      	ldr	r3, [pc, #216]	; (20001048 <main+0xec>)
20000f70:	60bb      	str	r3, [r7, #8]
	init_app();
20000f72:	f7ff ffd3 	bl	20000f1c <init_app>
	ascii_playerscore_init();
20000f76:	f7ff ff90 	bl	20000e9a <ascii_playerscore_init>
	graphic_initialize();
20000f7a:	f7ff fa47 	bl	2000040c <graphic_initialize>
	b->dx = 15;
20000f7e:	697b      	ldr	r3, [r7, #20]
20000f80:	220f      	movs	r2, #15
20000f82:	605a      	str	r2, [r3, #4]
	b->dy = 15;
20000f84:	697b      	ldr	r3, [r7, #20]
20000f86:	220f      	movs	r2, #15
20000f88:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
#endif
	while(1){
		b->move(b, b);
20000f8a:	697b      	ldr	r3, [r7, #20]
20000f8c:	69db      	ldr	r3, [r3, #28]
20000f8e:	6979      	ldr	r1, [r7, #20]
20000f90:	697a      	ldr	r2, [r7, #20]
20000f92:	0010      	movs	r0, r2
20000f94:	4798      	blx	r3
		p_left->move(p_left, b);
20000f96:	68fb      	ldr	r3, [r7, #12]
20000f98:	69db      	ldr	r3, [r3, #28]
20000f9a:	6979      	ldr	r1, [r7, #20]
20000f9c:	68fa      	ldr	r2, [r7, #12]
20000f9e:	0010      	movs	r0, r2
20000fa0:	4798      	blx	r3
		p_right->move(p_right, b);
20000fa2:	68bb      	ldr	r3, [r7, #8]
20000fa4:	69db      	ldr	r3, [r3, #28]
20000fa6:	6979      	ldr	r1, [r7, #20]
20000fa8:	68ba      	ldr	r2, [r7, #8]
20000faa:	0010      	movs	r0, r2
20000fac:	4798      	blx	r3
		delay_milli(40);
20000fae:	2028      	movs	r0, #40	; 0x28
20000fb0:	f7ff f873 	bl	2000009a <delay_milli>
		char p_l_key = keybHigh();
20000fb4:	1dfc      	adds	r4, r7, #7
20000fb6:	f7ff fca5 	bl	20000904 <keybHigh>
20000fba:	0003      	movs	r3, r0
20000fbc:	7023      	strb	r3, [r4, #0]
		char p_r_key = keybLow();
20000fbe:	1dbc      	adds	r4, r7, #6
20000fc0:	f7ff fccb 	bl	2000095a <keybLow>
20000fc4:	0003      	movs	r3, r0
20000fc6:	7023      	strb	r3, [r4, #0]
    	switch(p_l_key){																				//PD8-15
20000fc8:	1dfb      	adds	r3, r7, #7
20000fca:	781b      	ldrb	r3, [r3, #0]
20000fcc:	2b02      	cmp	r3, #2
20000fce:	d002      	beq.n	20000fd6 <main+0x7a>
20000fd0:	2b05      	cmp	r3, #5
20000fd2:	d008      	beq.n	20000fe6 <main+0x8a>
20000fd4:	e00e      	b.n	20000ff4 <main+0x98>
			case 2: p_left->set_speed(p_left,0,-20);break;
20000fd6:	68fb      	ldr	r3, [r7, #12]
20000fd8:	6a1b      	ldr	r3, [r3, #32]
20000fda:	2214      	movs	r2, #20
20000fdc:	4252      	negs	r2, r2
20000fde:	68f8      	ldr	r0, [r7, #12]
20000fe0:	2100      	movs	r1, #0
20000fe2:	4798      	blx	r3
20000fe4:	e00d      	b.n	20001002 <main+0xa6>
			case 5: p_left->set_speed(p_left,0,20);break;
20000fe6:	68fb      	ldr	r3, [r7, #12]
20000fe8:	6a1b      	ldr	r3, [r3, #32]
20000fea:	68f8      	ldr	r0, [r7, #12]
20000fec:	2214      	movs	r2, #20
20000fee:	2100      	movs	r1, #0
20000ff0:	4798      	blx	r3
20000ff2:	e006      	b.n	20001002 <main+0xa6>
			default: p_left->set_speed(p_left,0,0);break;
20000ff4:	68fb      	ldr	r3, [r7, #12]
20000ff6:	6a1b      	ldr	r3, [r3, #32]
20000ff8:	68f8      	ldr	r0, [r7, #12]
20000ffa:	2200      	movs	r2, #0
20000ffc:	2100      	movs	r1, #0
20000ffe:	4798      	blx	r3
20001000:	46c0      	nop			; (mov r8, r8)
		}
		switch(p_r_key){																				//PD0-7
20001002:	1dbb      	adds	r3, r7, #6
20001004:	781b      	ldrb	r3, [r3, #0]
20001006:	2b02      	cmp	r3, #2
20001008:	d002      	beq.n	20001010 <main+0xb4>
2000100a:	2b05      	cmp	r3, #5
2000100c:	d008      	beq.n	20001020 <main+0xc4>
2000100e:	e00e      	b.n	2000102e <main+0xd2>
			case 2: p_right->set_speed(p_right,0,-20);break;
20001010:	68bb      	ldr	r3, [r7, #8]
20001012:	6a1b      	ldr	r3, [r3, #32]
20001014:	2214      	movs	r2, #20
20001016:	4252      	negs	r2, r2
20001018:	68b8      	ldr	r0, [r7, #8]
2000101a:	2100      	movs	r1, #0
2000101c:	4798      	blx	r3
2000101e:	e00d      	b.n	2000103c <main+0xe0>
			case 5: p_right->set_speed(p_right,0,20);break;
20001020:	68bb      	ldr	r3, [r7, #8]
20001022:	6a1b      	ldr	r3, [r3, #32]
20001024:	68b8      	ldr	r0, [r7, #8]
20001026:	2214      	movs	r2, #20
20001028:	2100      	movs	r1, #0
2000102a:	4798      	blx	r3
2000102c:	e006      	b.n	2000103c <main+0xe0>
			default: p_right->set_speed(p_right,0,0);break;
2000102e:	68bb      	ldr	r3, [r7, #8]
20001030:	6a1b      	ldr	r3, [r3, #32]
20001032:	68b8      	ldr	r0, [r7, #8]
20001034:	2200      	movs	r2, #0
20001036:	2100      	movs	r1, #0
20001038:	4798      	blx	r3
2000103a:	46c0      	nop			; (mov r8, r8)
	while(1){
2000103c:	e7a5      	b.n	20000f8a <main+0x2e>
2000103e:	46c0      	nop			; (mov r8, r8)
20001040:	20001238 	andcs	r1, r0, r8, lsr r2
20001044:	200011ac 	andcs	r1, r0, ip, lsr #3
20001048:	200011d0 	ldrdcs	r1, [r0], -r0

2000104c <__udivsi3>:
2000104c:	2200      	movs	r2, #0
2000104e:	0843      	lsrs	r3, r0, #1
20001050:	428b      	cmp	r3, r1
20001052:	d374      	bcc.n	2000113e <__udivsi3+0xf2>
20001054:	0903      	lsrs	r3, r0, #4
20001056:	428b      	cmp	r3, r1
20001058:	d35f      	bcc.n	2000111a <__udivsi3+0xce>
2000105a:	0a03      	lsrs	r3, r0, #8
2000105c:	428b      	cmp	r3, r1
2000105e:	d344      	bcc.n	200010ea <__udivsi3+0x9e>
20001060:	0b03      	lsrs	r3, r0, #12
20001062:	428b      	cmp	r3, r1
20001064:	d328      	bcc.n	200010b8 <__udivsi3+0x6c>
20001066:	0c03      	lsrs	r3, r0, #16
20001068:	428b      	cmp	r3, r1
2000106a:	d30d      	bcc.n	20001088 <__udivsi3+0x3c>
2000106c:	22ff      	movs	r2, #255	; 0xff
2000106e:	0209      	lsls	r1, r1, #8
20001070:	ba12      	rev	r2, r2
20001072:	0c03      	lsrs	r3, r0, #16
20001074:	428b      	cmp	r3, r1
20001076:	d302      	bcc.n	2000107e <__udivsi3+0x32>
20001078:	1212      	asrs	r2, r2, #8
2000107a:	0209      	lsls	r1, r1, #8
2000107c:	d065      	beq.n	2000114a <__udivsi3+0xfe>
2000107e:	0b03      	lsrs	r3, r0, #12
20001080:	428b      	cmp	r3, r1
20001082:	d319      	bcc.n	200010b8 <__udivsi3+0x6c>
20001084:	e000      	b.n	20001088 <__udivsi3+0x3c>
20001086:	0a09      	lsrs	r1, r1, #8
20001088:	0bc3      	lsrs	r3, r0, #15
2000108a:	428b      	cmp	r3, r1
2000108c:	d301      	bcc.n	20001092 <__udivsi3+0x46>
2000108e:	03cb      	lsls	r3, r1, #15
20001090:	1ac0      	subs	r0, r0, r3
20001092:	4152      	adcs	r2, r2
20001094:	0b83      	lsrs	r3, r0, #14
20001096:	428b      	cmp	r3, r1
20001098:	d301      	bcc.n	2000109e <__udivsi3+0x52>
2000109a:	038b      	lsls	r3, r1, #14
2000109c:	1ac0      	subs	r0, r0, r3
2000109e:	4152      	adcs	r2, r2
200010a0:	0b43      	lsrs	r3, r0, #13
200010a2:	428b      	cmp	r3, r1
200010a4:	d301      	bcc.n	200010aa <__udivsi3+0x5e>
200010a6:	034b      	lsls	r3, r1, #13
200010a8:	1ac0      	subs	r0, r0, r3
200010aa:	4152      	adcs	r2, r2
200010ac:	0b03      	lsrs	r3, r0, #12
200010ae:	428b      	cmp	r3, r1
200010b0:	d301      	bcc.n	200010b6 <__udivsi3+0x6a>
200010b2:	030b      	lsls	r3, r1, #12
200010b4:	1ac0      	subs	r0, r0, r3
200010b6:	4152      	adcs	r2, r2
200010b8:	0ac3      	lsrs	r3, r0, #11
200010ba:	428b      	cmp	r3, r1
200010bc:	d301      	bcc.n	200010c2 <__udivsi3+0x76>
200010be:	02cb      	lsls	r3, r1, #11
200010c0:	1ac0      	subs	r0, r0, r3
200010c2:	4152      	adcs	r2, r2
200010c4:	0a83      	lsrs	r3, r0, #10
200010c6:	428b      	cmp	r3, r1
200010c8:	d301      	bcc.n	200010ce <__udivsi3+0x82>
200010ca:	028b      	lsls	r3, r1, #10
200010cc:	1ac0      	subs	r0, r0, r3
200010ce:	4152      	adcs	r2, r2
200010d0:	0a43      	lsrs	r3, r0, #9
200010d2:	428b      	cmp	r3, r1
200010d4:	d301      	bcc.n	200010da <__udivsi3+0x8e>
200010d6:	024b      	lsls	r3, r1, #9
200010d8:	1ac0      	subs	r0, r0, r3
200010da:	4152      	adcs	r2, r2
200010dc:	0a03      	lsrs	r3, r0, #8
200010de:	428b      	cmp	r3, r1
200010e0:	d301      	bcc.n	200010e6 <__udivsi3+0x9a>
200010e2:	020b      	lsls	r3, r1, #8
200010e4:	1ac0      	subs	r0, r0, r3
200010e6:	4152      	adcs	r2, r2
200010e8:	d2cd      	bcs.n	20001086 <__udivsi3+0x3a>
200010ea:	09c3      	lsrs	r3, r0, #7
200010ec:	428b      	cmp	r3, r1
200010ee:	d301      	bcc.n	200010f4 <__udivsi3+0xa8>
200010f0:	01cb      	lsls	r3, r1, #7
200010f2:	1ac0      	subs	r0, r0, r3
200010f4:	4152      	adcs	r2, r2
200010f6:	0983      	lsrs	r3, r0, #6
200010f8:	428b      	cmp	r3, r1
200010fa:	d301      	bcc.n	20001100 <__udivsi3+0xb4>
200010fc:	018b      	lsls	r3, r1, #6
200010fe:	1ac0      	subs	r0, r0, r3
20001100:	4152      	adcs	r2, r2
20001102:	0943      	lsrs	r3, r0, #5
20001104:	428b      	cmp	r3, r1
20001106:	d301      	bcc.n	2000110c <__udivsi3+0xc0>
20001108:	014b      	lsls	r3, r1, #5
2000110a:	1ac0      	subs	r0, r0, r3
2000110c:	4152      	adcs	r2, r2
2000110e:	0903      	lsrs	r3, r0, #4
20001110:	428b      	cmp	r3, r1
20001112:	d301      	bcc.n	20001118 <__udivsi3+0xcc>
20001114:	010b      	lsls	r3, r1, #4
20001116:	1ac0      	subs	r0, r0, r3
20001118:	4152      	adcs	r2, r2
2000111a:	08c3      	lsrs	r3, r0, #3
2000111c:	428b      	cmp	r3, r1
2000111e:	d301      	bcc.n	20001124 <__udivsi3+0xd8>
20001120:	00cb      	lsls	r3, r1, #3
20001122:	1ac0      	subs	r0, r0, r3
20001124:	4152      	adcs	r2, r2
20001126:	0883      	lsrs	r3, r0, #2
20001128:	428b      	cmp	r3, r1
2000112a:	d301      	bcc.n	20001130 <__udivsi3+0xe4>
2000112c:	008b      	lsls	r3, r1, #2
2000112e:	1ac0      	subs	r0, r0, r3
20001130:	4152      	adcs	r2, r2
20001132:	0843      	lsrs	r3, r0, #1
20001134:	428b      	cmp	r3, r1
20001136:	d301      	bcc.n	2000113c <__udivsi3+0xf0>
20001138:	004b      	lsls	r3, r1, #1
2000113a:	1ac0      	subs	r0, r0, r3
2000113c:	4152      	adcs	r2, r2
2000113e:	1a41      	subs	r1, r0, r1
20001140:	d200      	bcs.n	20001144 <__udivsi3+0xf8>
20001142:	4601      	mov	r1, r0
20001144:	4152      	adcs	r2, r2
20001146:	4610      	mov	r0, r2
20001148:	4770      	bx	lr
2000114a:	e7ff      	b.n	2000114c <__udivsi3+0x100>
2000114c:	b501      	push	{r0, lr}
2000114e:	2000      	movs	r0, #0
20001150:	f000 f806 	bl	20001160 <__aeabi_idiv0>
20001154:	bd02      	pop	{r1, pc}
20001156:	46c0      	nop			; (mov r8, r8)

20001158 <__aeabi_uidivmod>:
20001158:	2900      	cmp	r1, #0
2000115a:	d0f7      	beq.n	2000114c <__udivsi3+0x100>
2000115c:	e776      	b.n	2000104c <__udivsi3>
2000115e:	4770      	bx	lr

20001160 <__aeabi_idiv0>:
20001160:	4770      	bx	lr
20001162:	46c0      	nop			; (mov r8, r8)

20001164 <player_right_points>:
	...

20001165 <player_left_points>:
20001165:	 	stcne	0, cr0, [r0], {-0}

20001168 <paddle_geometry>:
20001168:	0000001c 	andeq	r0, r0, ip, lsl r0
2000116c:	00000002 	andeq	r0, r0, r2
20001170:	0000000e 	andeq	r0, r0, lr
20001174:	01000000 	mrseq	r0, (UNDEF: 0)
20001178:	03000200 	movweq	r0, #512	; 0x200
2000117c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20001180:	07000600 	streq	r0, [r0, -r0, lsl #12]
20001184:	09000800 	stmdbeq	r0, {fp}
20001188:	0b000a00 	bleq	20003990 <ball+0x2758>
2000118c:	0d000c00 	stceq	12, cr0, [r0, #-0]
20001190:	01010001 	tsteq	r1, r1
20001194:	03010201 	movweq	r0, #4609	; 0x1201
20001198:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
2000119c:	07010601 	streq	r0, [r1, -r1, lsl #12]
200011a0:	09010801 	stmdbeq	r1, {r0, fp}
200011a4:	0b010a01 	bleq	200439b0 <ball+0x42778>
200011a8:	0d010c01 	stceq	12, cr0, [r1, #-4]

200011ac <paddle_left>:
200011ac:	20001168 	andcs	r1, r0, r8, ror #2
	...
200011b8:	00000032 	andeq	r0, r0, r2, lsr r0
200011bc:	00000019 	andeq	r0, r0, r9, lsl r0
200011c0:	20000695 	mulcs	r0, r5, r6
200011c4:	200006fb 	strdcs	r0, [r0], -fp
200011c8:	20000b3f 	andcs	r0, r0, pc, lsr fp
200011cc:	200009b1 			; <UNDEFINED> instruction: 0x200009b1

200011d0 <paddle_right>:
200011d0:	20001168 	andcs	r1, r0, r8, ror #2
	...
200011dc:	0000004e 	andeq	r0, r0, lr, asr #32
200011e0:	00000019 	andeq	r0, r0, r9, lsl r0
200011e4:	20000695 	mulcs	r0, r5, r6
200011e8:	200006fb 	strdcs	r0, [r0], -fp
200011ec:	20000b3f 	andcs	r0, r0, pc, lsr fp
200011f0:	200009b1 			; <UNDEFINED> instruction: 0x200009b1

200011f4 <ball_geometry>:
200011f4:	0000000c 	andeq	r0, r0, ip
200011f8:	00000004 	andeq	r0, r0, r4
200011fc:	00000004 	andeq	r0, r0, r4
20001200:	02000100 	andeq	r0, r0, #0, 2
20001204:	01010001 	tsteq	r1, r1
20001208:	03010201 	movweq	r0, #4609	; 0x1201
2000120c:	01020002 	tsteq	r2, r2
20001210:	03020202 	movweq	r0, #8706	; 0x2202
20001214:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001238 <ball>:
20001238:	200011f4 	strdcs	r1, [r0], -r4
	...
20001244:	00000040 	andeq	r0, r0, r0, asr #32
20001248:	00000020 	andeq	r0, r0, r0, lsr #32
2000124c:	20000695 	mulcs	r0, r5, r6
20001250:	200006fb 	strdcs	r0, [r0], -fp
20001254:	200009d1 	ldrdcs	r0, [r0], -r1
20001258:	200009b1 			; <UNDEFINED> instruction: 0x200009b1
2000125c:	2000054a 	andcs	r0, r0, sl, asr #10
20001260:	20000554 	andcs	r0, r0, r4, asr r5
20001264:	2000055e 	andcs	r0, r0, lr, asr r5
20001268:	20000568 	andcs	r0, r0, r8, ror #10
2000126c:	20000572 	andcs	r0, r0, r2, ror r5
20001270:	2000057c 	andcs	r0, r0, ip, ror r5
20001274:	20000586 	andcs	r0, r0, r6, lsl #11
20001278:	20000590 	mulcs	r0, r0, r5
2000127c:	0a030201 	beq	200c1a88 <ball+0xc0850>
20001280:	0b060504 	bleq	20182698 <ball+0x181460>
20001284:	0c090807 	stceq	8, cr0, [r9], {7}
20001288:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4
2000128c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001290:	4c207265 	sfmmi	f7, 4, [r0], #-404	; 0xfffffe6c
20001294:	3a746665 	bcc	21d1ac30 <ball+0x1d199f8>
20001298:	00003020 	andeq	r3, r0, r0, lsr #32
2000129c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
200012a0:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
200012a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
200012a8:	0030203a 	eorseq	r2, r0, sl, lsr r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000bf9 	strdeq	r0, [r0], -r9
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001f4 	strdeq	r0, [r0], -r4
  10:	0004090c 	andeq	r0, r4, ip, lsl #18
  14:	0004ce00 	andeq	ip, r4, r0, lsl #28
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	00ca0200 	sbceq	r0, sl, r0, lsl #4
  28:	3b080000 	blcc	200030 <startup-0x1fdfffd0>
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	000001e6 	andeq	r0, r0, r6, ror #3
  38:	00029c04 	andeq	r9, r2, r4, lsl #24
  3c:	01070200 	mrseq	r0, (UNDEF: 39)
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0207 	strcs	r0, [sl, #-519]	; 0xfffffdf9
  4c:	00000000 	andeq	r0, r0, r0
  50:	07007905 	streq	r7, [r0, -r5, lsl #18]
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	00011602 	andeq	r1, r1, r2, lsl #12
  60:	02040700 	andeq	r0, r4, #0, 14
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00004b04 	andeq	r4, r0, r4, lsl #22
  6c:	06074400 	streq	r4, [r7], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	01dc0600 	bicseq	r0, ip, r0, lsl #12
  78:	07070000 	streq	r0, [r7, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
  84:	07000001 	streq	r0, [r0, -r1]
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000194 	muleq	r0, r4, r1
  94:	a9060907 	stmdbge	r6, {r0, r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a07 	andlt	r0, r8, r7, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	c7070403 	strgt	r0, [r7, -r3, lsl #8]
  c4:	02000002 	andeq	r0, r0, #2
  c8:	000000a6 	andeq	r0, r0, r6, lsr #1
  cc:	68030b07 	stmdavs	r3, {r0, r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	000000a5 	andeq	r0, r0, r5, lsr #1
  d8:	df0e0b07 	svcle	0x000e0b07
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	033f0400 	teqeq	pc, #0, 8
  e8:	07240000 	streq	r0, [r4, -r0]!
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	07006f65 	streq	r6, [r0, -r5, ror #30]
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	07007864 	streq	r7, [r0, -r4, ror #16]
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	07007964 	streq	r7, [r0, -r4, ror #18]
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	0000001b 	andeq	r0, r0, fp, lsl r0
 11c:	a9061007 	stmdbge	r6, {r0, r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	00011c06 	andeq	r1, r1, r6, lsl #24
 128:	0b100700 	bleq	401d30 <startup-0x1fbfe2d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	03a30610 			; <UNDEFINED> instruction: 0x03a30610
 134:	11070000 	mrsne	r0, (UNDEF: 7)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	96061400 	strls	r1, [r6], -r0, lsl #8
 140:	07000002 	streq	r0, [r0, -r2]
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	00000526 	andeq	r0, r0, r6, lsr #10
 150:	8d0a1307 	stchi	3, cr1, [sl, #-28]	; 0xffffffe4
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	0003a806 	andeq	sl, r3, r6, lsl #16
 15c:	0a140700 	beq	501d64 <startup-0x1fafe29c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	b7020000 	strlt	r0, [r2, -r0]
 1b0:	07000004 	streq	r0, [r0, -r4]
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	b6020000 	strlt	r0, [r2], -r0
 1bc:	07000004 	streq	r0, [r0, -r4]
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	b20d0000 	andlt	r0, sp, #0
 1c8:	04000003 	streq	r0, [r0], #-3
 1cc:	00251001 	eoreq	r1, r5, r1
 1d0:	03050000 	movweq	r0, #20480	; 0x5000
 1d4:	20001164 	andcs	r1, r0, r4, ror #2
 1d8:	0000e30d 	andeq	lr, r0, sp, lsl #6
 1dc:	10020400 	andne	r0, r2, r0, lsl #8
 1e0:	00000025 	andeq	r0, r0, r5, lsr #32
 1e4:	11650305 	cmnne	r5, r5, lsl #6
 1e8:	830d2000 	movwhi	r2, #53248	; 0xd000
 1ec:	06000000 	streq	r0, [r0], -r0
 1f0:	00c71117 	sbceq	r1, r7, r7, lsl r1
 1f4:	03050000 	movweq	r0, #20480	; 0x5000
 1f8:	20001168 	andcs	r1, r0, r8, ror #2
 1fc:	0001b40d 	andeq	fp, r1, sp, lsl #8
 200:	0f180600 	svceq	0x00180600
 204:	000001ae 	andeq	r0, r0, lr, lsr #3
 208:	11ac0305 			; <UNDEFINED> instruction: 0x11ac0305
 20c:	f60d2000 			; <UNDEFINED> instruction: 0xf60d2000
 210:	06000000 	streq	r0, [r0], -r0
 214:	01ae0f19 			; <UNDEFINED> instruction: 0x01ae0f19
 218:	03050000 	movweq	r0, #20480	; 0x5000
 21c:	200011d0 	ldrdcs	r1, [r0], -r0
 220:	0003ef0d 	andeq	lr, r3, sp, lsl #30
 224:	111b0600 	tstne	fp, r0, lsl #12
 228:	000000c7 	andeq	r0, r0, r7, asr #1
 22c:	11f40305 	mvnsne	r0, r5, lsl #6
 230:	720d2000 	andvc	r2, sp, #0
 234:	06000004 	streq	r0, [r0], -r4
 238:	01ae0f1c 			; <UNDEFINED> instruction: 0x01ae0f1c
 23c:	03050000 	movweq	r0, #20480	; 0x5000
 240:	20001238 	andcs	r1, r0, r8, lsr r2
 244:	0000680e 	andeq	r6, r0, lr, lsl #16
 248:	062c0600 	strteq	r0, [ip], -r0, lsl #12
 24c:	20000f5c 	andcs	r0, r0, ip, asr pc
 250:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 254:	02bc9c01 	adcseq	r9, ip, #256	; 0x100
 258:	620f0000 	andvs	r0, pc, #0
 25c:	0a2d0600 	beq	b41a64 <startup-0x1f4be59c>
 260:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 264:	0f6c9102 	svceq	0x006c9102
 268:	06003262 	streq	r3, [r0], -r2, ror #4
 26c:	01ba0a2e 			; <UNDEFINED> instruction: 0x01ba0a2e
 270:	91020000 	mrsls	r0, (UNDEF: 2)
 274:	047d0d68 	ldrbteq	r0, [sp], #-3432	; 0xfffff298
 278:	2f060000 	svccs	0x00060000
 27c:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 280:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 284:	00030f0d 	andeq	r0, r3, sp, lsl #30
 288:	0a300600 	beq	c01a90 <startup-0x1f3fe570>
 28c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 290:	10609102 	rsbne	r9, r0, r2, lsl #2
 294:	20000f8a 	andcs	r0, r0, sl, lsl #31
 298:	000000b2 	strheq	r0, [r0], -r2
 29c:	0003440d 	andeq	r4, r3, sp, lsl #8
 2a0:	08420600 	stmdaeq	r2, {r9, sl}^
 2a4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2a8:	0d5f9102 	ldfeqp	f1, [pc, #-8]	; 2a8 <startup-0x1ffffd58>
 2ac:	000003da 	ldrdeq	r0, [r0], -sl
 2b0:	bc084306 	stclt	3, cr4, [r8], {6}
 2b4:	02000002 	andeq	r0, r0, #2
 2b8:	00005e91 	muleq	r0, r1, lr
 2bc:	ef080103 	svc	0x00080103
 2c0:	11000001 	tstne	r0, r1
 2c4:	0000031c 	andeq	r0, r0, ip, lsl r3
 2c8:	1c061e06 	stcne	14, cr1, [r6], {6}
 2cc:	4020000f 	eormi	r0, r0, pc
 2d0:	01000000 	mrseq	r0, (UNDEF: 0)
 2d4:	04ae119c 	strteq	r1, [lr], #412	; 0x19c
 2d8:	10060000 	andne	r0, r6, r0
 2dc:	00000006 	andeq	r0, r0, r6
 2e0:	00000c20 	andeq	r0, r0, r0, lsr #24
 2e4:	0e9c0100 	fmleqe	f0, f4, f0
 2e8:	00000126 	andeq	r0, r0, r6, lsr #2
 2ec:	9a068105 	bls	1a0708 <startup-0x1fe5f8f8>
 2f0:	8220000e 	eorhi	r0, r0, #14
 2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 2f8:	0003299c 	muleq	r3, ip, r9
 2fc:	00730f00 	rsbseq	r0, r3, r0, lsl #30
 300:	29098205 	stmdbcs	r9, {r0, r2, r9, pc}
 304:	02000003 	andeq	r0, r0, #3
 308:	770d6c91 			; <UNDEFINED> instruction: 0x770d6c91
 30c:	05000004 	streq	r0, [r0, #-4]
 310:	032f0783 			; <UNDEFINED> instruction: 0x032f0783
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	01030d5c 	tsteq	r3, ip, asr sp
 31c:	84050000 	strhi	r0, [r5], #-0
 320:	00033f07 	andeq	r3, r3, r7, lsl #30
 324:	4c910200 	lfmmi	f0, 4, [r1], {0}
 328:	bc040a00 			; <UNDEFINED> instruction: 0xbc040a00
 32c:	08000002 	stmdaeq	r0, {r1}
 330:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 334:	0000033f 	andeq	r0, r0, pc, lsr r3
 338:	0000c009 	andeq	ip, r0, r9
 33c:	08000e00 	stmdaeq	r0, {r9, sl, fp}
 340:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 344:	0000034f 	andeq	r0, r0, pc, asr #6
 348:	0000c009 	andeq	ip, r0, r9
 34c:	0e000f00 	cdpeq	15, 0, cr0, cr0, cr0, {0}
 350:	000000d2 	ldrdeq	r0, [r0], -r2
 354:	60067a05 	andvs	r7, r6, r5, lsl #20
 358:	3a20000e 	bcc	800398 <startup-0x1f7ffc68>
 35c:	01000000 	mrseq	r0, (UNDEF: 0)
 360:	0003739c 	muleq	r3, ip, r3
 364:	00631200 	rsbeq	r1, r3, r0, lsl #4
 368:	31257a05 			; <UNDEFINED> instruction: 0x31257a05
 36c:	02000000 	andeq	r0, r0, #0
 370:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 374:	00000302 	andeq	r0, r0, r2, lsl #6
 378:	12067005 	andne	r7, r6, #5
 37c:	4e20000e 	cdpmi	0, 2, cr0, cr0, cr14, {0}
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	0003b39c 	muleq	r3, ip, r3
 388:	00781200 	rsbseq	r1, r8, r0, lsl #4
 38c:	a9177005 	ldmdbge	r7, {r0, r2, ip, sp, lr}
 390:	02000000 	andeq	r0, r0, #0
 394:	79126c91 	ldmdbvc	r2, {r0, r4, r7, sl, fp, sp, lr}
 398:	1e700500 	cdpne	5, 7, cr0, cr0, cr0, {0}
 39c:	000000a9 	andeq	r0, r0, r9, lsr #1
 3a0:	0d689102 	stfeqp	f1, [r8, #-8]!
 3a4:	00000377 	andeq	r0, r0, r7, ror r3
 3a8:	31107305 	tstcc	r0, r5, lsl #6
 3ac:	02000000 	andeq	r0, r0, #0
 3b0:	13007791 	movwne	r7, #1937	; 0x791
 3b4:	0000053d 	andeq	r0, r0, sp, lsr r5
 3b8:	e4066705 	str	r6, [r6], #-1797	; 0xfffff8fb
 3bc:	2e20000d 	cdpcs	0, 2, cr0, cr0, cr13, {0}
 3c0:	01000000 	mrseq	r0, (UNDEF: 0)
 3c4:	019a0e9c 			; <UNDEFINED> instruction: 0x019a0e9c
 3c8:	60050000 	andvs	r0, r5, r0
 3cc:	000da806 	andeq	sl, sp, r6, lsl #16
 3d0:	00003c20 	andeq	r3, r0, r0, lsr #24
 3d4:	eb9c0100 	bl	fe7007dc <ball+0xde6ff5a4>
 3d8:	14000003 	strne	r0, [r0], #-3
 3dc:	0000007b 	andeq	r0, r0, fp, ror r0
 3e0:	31226005 			; <UNDEFINED> instruction: 0x31226005
 3e4:	02000000 	andeq	r0, r0, #0
 3e8:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
 3ec:	0000052b 	andeq	r0, r0, fp, lsr #10
 3f0:	310f5605 	tstcc	pc, r5, lsl #12
 3f4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
 3f8:	4020000d 	eormi	r0, r0, sp
 3fc:	01000000 	mrseq	r0, (UNDEF: 0)
 400:	0004149c 	muleq	r4, ip, r4
 404:	76720f00 	ldrbtvc	r0, [r2], -r0, lsl #30
 408:	10580500 	subsne	r0, r8, r0, lsl #10
 40c:	00000031 	andeq	r0, r0, r1, lsr r0
 410:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 414:	00049e15 	andeq	r9, r4, r5, lsl lr
 418:	0f4c0500 	svceq	0x004c0500
 41c:	00000031 	andeq	r0, r0, r1, lsr r0
 420:	20000d28 	andcs	r0, r0, r8, lsr #26
 424:	00000040 	andeq	r0, r0, r0, asr #32
 428:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xfffff3ff
 42c:	720f0000 	andvc	r0, pc, #0
 430:	4e050076 	mcrmi	0, 0, r0, cr5, cr6, {3}
 434:	00003110 	andeq	r3, r0, r0, lsl r1
 438:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 43c:	03611500 	cmneq	r1, #0, 10
 440:	42050000 	andmi	r0, r5, #0
 444:	0000310f 	andeq	r3, r0, pc, lsl #2
 448:	000cf400 	andeq	pc, ip, r0, lsl #8
 44c:	00003420 	andeq	r3, r0, r0, lsr #8
 450:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
 454:	0f000004 	svceq	0x00000004
 458:	05007672 	streq	r7, [r0, #-1650]	; 0xfffff98e
 45c:	00311043 	eorseq	r1, r1, r3, asr #32
 460:	91020000 	mrsls	r0, (UNDEF: 2)
 464:	5a0e0077 	bpl	380648 <startup-0x1fc7f9b8>
 468:	05000001 	streq	r0, [r0, #-1]
 46c:	0cc40639 	stcleq	6, cr0, [r4], {57}	; 0x39
 470:	00302000 	eorseq	r2, r0, r0
 474:	9c010000 	stcls	0, cr0, [r1], {-0}
 478:	0000048c 	andeq	r0, r0, ip, lsl #9
 47c:	00007b14 	andeq	r7, r0, r4, lsl fp
 480:	2b390500 	blcs	e41888 <startup-0x1f1be778>
 484:	00000031 	andeq	r0, r0, r1, lsr r0
 488:	00779102 	rsbseq	r9, r7, r2, lsl #2
 48c:	0003830e 	andeq	r8, r3, lr, lsl #6
 490:	06330500 	ldrteq	r0, [r3], -r0, lsl #10
 494:	20000c9a 	mulcs	r0, sl, ip
 498:	0000002a 	andeq	r0, r0, sl, lsr #32
 49c:	04c09c01 	strbeq	r9, [r0], #3073	; 0xc01
 4a0:	83140000 	tsthi	r4, #0
 4a4:	05000001 	streq	r0, [r0, #-1]
 4a8:	00312533 	eorseq	r2, r1, r3, lsr r5
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	015a1677 	cmpeq	sl, r7, ror r6
 4b4:	30050000 	andcc	r0, r5, r0
 4b8:	0000a902 	andeq	sl, r0, r2, lsl #18
 4bc:	00001700 	andeq	r1, r0, r0, lsl #14
 4c0:	0005480e 	andeq	r4, r5, lr, lsl #16
 4c4:	062d0500 	strteq	r0, [sp], -r0, lsl #10
 4c8:	20000c70 	andcs	r0, r0, r0, ror ip
 4cc:	0000002a 	andeq	r0, r0, sl, lsr #32
 4d0:	04f49c01 	ldrbteq	r9, [r4], #3073	; 0xc01
 4d4:	7b140000 	blvc	5004dc <startup-0x1faffb24>
 4d8:	05000000 	streq	r0, [r0, #-0]
 4dc:	0031242d 	eorseq	r2, r1, sp, lsr #8
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	015a1677 	cmpeq	sl, r7, ror r6
 4e8:	30050000 	andcc	r0, r5, r0
 4ec:	0000a902 	andeq	sl, r0, r2, lsl #18
 4f0:	00001700 	andeq	r1, r0, r0, lsl #14
 4f4:	0001c718 	andeq	ip, r1, r8, lsl r7
 4f8:	06270500 	strteq	r0, [r7], -r0, lsl #10
 4fc:	20000c28 	andcs	r0, r0, r8, lsr #24
 500:	00000048 	andeq	r0, r0, r8, asr #32
 504:	05279c01 	streq	r9, [r7, #-3073]!	; 0xfffff3ff
 508:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
 50c:	29270500 	stmdbcs	r7!, {r8, sl}
 510:	00000031 	andeq	r0, r0, r1, lsr r0
 514:	0d6f9102 	stfeqp	f1, [pc, #-8]!	; 514 <startup-0x1ffffaec>
 518:	00000325 	andeq	r0, r0, r5, lsr #6
 51c:	bc072805 	stclt	8, cr2, [r7], {5}
 520:	02000002 	andeq	r0, r0, #2
 524:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 528:	00000055 	andeq	r0, r0, r5, asr r0
 52c:	f8062305 			; <UNDEFINED> instruction: 0xf8062305
 530:	3020000b 	eorcc	r0, r0, fp
 534:	01000000 	mrseq	r0, (UNDEF: 0)
 538:	00054b9c 	muleq	r5, ip, fp
 53c:	00781200 	rsbseq	r1, r8, r0, lsl #4
 540:	31272305 			; <UNDEFINED> instruction: 0x31272305
 544:	02000000 	andeq	r0, r0, #0
 548:	0e007791 	mcreq	7, 0, r7, cr0, cr1, {4}
 54c:	0000000f 	andeq	r0, r0, pc
 550:	3e063604 	cfmadd32cc	mvax0, mvfx3, mvfx6, mvfx4
 554:	ba20000b 	blt	800588 <startup-0x1f7ffa78>
 558:	01000000 	mrseq	r0, (UNDEF: 0)
 55c:	00058d9c 	muleq	r5, ip, sp
 560:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 564:	ba1a3604 	blt	68dd7c <startup-0x1f972284>
 568:	02000001 	andeq	r0, r0, #1
 56c:	72146c91 	andsvc	r6, r4, #37120	; 0x9100
 570:	04000004 	streq	r0, [r0], #-4
 574:	01ba2536 			; <UNDEFINED> instruction: 0x01ba2536
 578:	91020000 	mrsls	r0, (UNDEF: 2)
 57c:	037e0d68 	cmneq	lr, #104, 26	; 0x1a00
 580:	39040000 	stmdbcc	r4, {}	; <UNPREDICTABLE>
 584:	0000a906 	andeq	sl, r0, r6, lsl #18
 588:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 58c:	03c61900 	biceq	r1, r6, #0, 18
 590:	2a040000 	bcs	100598 <startup-0x1feffa68>
 594:	00002509 	andeq	r2, r0, r9, lsl #10
 598:	000ad000 	andeq	sp, sl, r0
 59c:	00006e20 	andeq	r6, r0, r0, lsr #28
 5a0:	d39c0100 	orrsle	r0, ip, #0, 2
 5a4:	12000005 	andne	r0, r0, #5
 5a8:	2a04006f 	bcs	10076c <startup-0x1feff894>
 5ac:	0001ba25 	andeq	fp, r1, r5, lsr #20
 5b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5b4:	0002fd14 	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
 5b8:	2c2a0400 	cfstrscs	mvf0, [sl], #-0
 5bc:	000000a9 	andeq	r0, r0, r9, lsr #1
 5c0:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
 5c4:	00000472 	andeq	r0, r0, r2, ror r4
 5c8:	ba3a2a04 	blt	e8ade0 <startup-0x1f175220>
 5cc:	02000001 	andeq	r0, r0, #1
 5d0:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 5d4:	0000046d 	andeq	r0, r0, sp, ror #8
 5d8:	d0060904 	andle	r0, r6, r4, lsl #18
 5dc:	00200009 	eoreq	r0, r0, r9
 5e0:	01000001 	tsteq	r0, r1
 5e4:	00067c9c 	muleq	r6, ip, ip
 5e8:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 5ec:	ba180904 	blt	602a04 <startup-0x1f9fd5fc>
 5f0:	02000001 	andeq	r0, r0, #1
 5f4:	88146c91 	ldmdahi	r4, {r0, r4, r7, sl, fp, sp, lr}
 5f8:	04000001 	streq	r0, [r0], #-1
 5fc:	01ba2309 			; <UNDEFINED> instruction: 0x01ba2309
 600:	91020000 	mrsls	r0, (UNDEF: 2)
 604:	01210d68 			; <UNDEFINED> instruction: 0x01210d68
 608:	0b040000 	bleq	100610 <startup-0x1feff9f0>
 60c:	0000a906 	andeq	sl, r0, r6, lsl #18
 610:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 614:	00037e0d 	andeq	r7, r3, sp, lsl #28
 618:	060c0400 	streq	r0, [ip], -r0, lsl #8
 61c:	000000a9 	andeq	r0, r0, r9, lsr #1
 620:	1a709102 	bne	1c24a30 <startup-0x1e3db5d0>
 624:	20000a00 	andcs	r0, r0, r0, lsl #20
 628:	0000002c 	andeq	r0, r0, ip, lsr #32
 62c:	00000651 	andeq	r0, r0, r1, asr r6
 630:	0003021b 	andeq	r0, r3, fp, lsl r2
 634:	03120400 	tsteq	r2, #0, 8
 638:	000000a9 	andeq	r0, r0, r9, lsr #1
 63c:	00000642 	andeq	r0, r0, r2, asr #12
 640:	d2160017 	andsle	r0, r6, #23
 644:	04000000 	streq	r0, [r0], #-0
 648:	00a90313 	adceq	r0, r9, r3, lsl r3
 64c:	00170000 	andseq	r0, r7, r0
 650:	0a3c1000 	beq	f04658 <startup-0x1f0fb9a8>
 654:	002c2000 	eoreq	r2, ip, r0
 658:	021b0000 	andseq	r0, fp, #0
 65c:	04000003 	streq	r0, [r0], #-3
 660:	00a90312 	adceq	r0, r9, r2, lsl r3
 664:	066c0000 	strbteq	r0, [ip], -r0
 668:	00170000 	andseq	r0, r7, r0
 66c:	0000d216 	andeq	sp, r0, r6, lsl r2
 670:	03130400 	tsteq	r3, #0, 8
 674:	000000a9 	andeq	r0, r0, r9, lsr #1
 678:	00000017 	andeq	r0, r0, r7, lsl r0
 67c:	0002a318 	andeq	sl, r2, r8, lsl r3
 680:	06040400 	streq	r0, [r4], -r0, lsl #8
 684:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 688:	00000020 	andeq	r0, r0, r0, lsr #32
 68c:	06be9c01 	ldrteq	r9, [lr], r1, lsl #24
 690:	6f120000 	svcvs	0x00120000
 694:	1f040400 	svcne	0x00040400
 698:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 69c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 6a0:	000001c0 	andeq	r0, r0, r0, asr #3
 6a4:	a9260404 	stmdbge	r6!, {r2, sl}
 6a8:	02000000 	andeq	r0, r0, #0
 6ac:	00147091 	mulseq	r4, r1, r0
 6b0:	04000000 	streq	r0, [r0], #-0
 6b4:	00a93204 	adceq	r3, r9, r4, lsl #4
 6b8:	91020000 	mrsls	r0, (UNDEF: 2)
 6bc:	0715006c 	ldreq	r0, [r5, -ip, rrx]
 6c0:	03000000 	movweq	r0, #0
 6c4:	00310f3e 	eorseq	r0, r1, lr, lsr pc
 6c8:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
 6cc:	00562000 	subseq	r2, r6, r0
 6d0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6d4:	00000710 	andeq	r0, r0, r0, lsl r7
 6d8:	0004970d 	andeq	r9, r4, sp, lsl #14
 6dc:	073f0300 	ldreq	r0, [pc, -r0, lsl #6]!
 6e0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 6e4:	0f739102 	svceq	0x00739102
 6e8:	0079656b 	rsbseq	r6, r9, fp, ror #10
 6ec:	bc074003 	stclt	0, cr4, [r7], {3}
 6f0:	02000002 	andeq	r0, r0, #2
 6f4:	60107291 	mulsvs	r0, r1, r2
 6f8:	46200009 	strtmi	r0, [r0], -r9
 6fc:	0f000000 	svceq	0x00000000
 700:	00776f72 	rsbseq	r6, r7, r2, ror pc
 704:	a90a4103 	stmdbge	sl, {r0, r1, r8, lr}
 708:	02000000 	andeq	r0, r0, #0
 70c:	00007491 	muleq	r0, r1, r4
 710:	00035815 	andeq	r5, r3, r5, lsl r8
 714:	0f2f0300 	svceq	0x002f0300
 718:	00000031 	andeq	r0, r0, r1, lsr r0
 71c:	20000904 	andcs	r0, r0, r4, lsl #18
 720:	00000056 	andeq	r0, r0, r6, asr r0
 724:	07629c01 	strbeq	r9, [r2, -r1, lsl #24]!
 728:	970d0000 	strls	r0, [sp, -r0]
 72c:	03000004 	movweq	r0, #4
 730:	02bc0730 	adcseq	r0, ip, #48, 14	; 0xc00000
 734:	91020000 	mrsls	r0, (UNDEF: 2)
 738:	656b0f73 	strbvs	r0, [fp, #-3955]!	; 0xfffff08d
 73c:	31030079 	tstcc	r3, r9, ror r0
 740:	0002bc07 	andeq	fp, r2, r7, lsl #24
 744:	72910200 	addsvc	r0, r1, #0, 4
 748:	00090a10 	andeq	r0, r9, r0, lsl sl
 74c:	00004620 	andeq	r4, r0, r0, lsr #12
 750:	6f720f00 	svcvs	0x00720f00
 754:	32030077 	andcc	r0, r3, #119	; 0x77
 758:	0000a90a 	andeq	sl, r0, sl, lsl #18
 75c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 760:	4c1c0000 	ldcmi	0, cr0, [ip], {-0}
 764:	03000003 	movweq	r0, #3
 768:	00a90529 	adceq	r0, r9, r9, lsr #10
 76c:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
 770:	00342000 	eorseq	r2, r4, r0
 774:	9c010000 	stcls	0, cr0, [r1], {-0}
 778:	000007aa 	andeq	r0, r0, sl, lsr #15
 77c:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 780:	15290300 	strne	r0, [r9, #-768]!	; 0xfffffd00
 784:	000000a9 	andeq	r0, r0, r9, lsr #1
 788:	145c9102 	ldrbne	r9, [ip], #-258	; 0xfffffefe
 78c:	00000497 	muleq	r0, r7, r4
 790:	a91e2903 	ldmdbge	lr, {r0, r1, r8, fp, sp}
 794:	02000000 	andeq	r0, r0, #0
 798:	170d5891 			; <UNDEFINED> instruction: 0x170d5891
 79c:	03000003 	movweq	r0, #3
 7a0:	07aa102a 	streq	r1, [sl, sl, lsr #32]!
 7a4:	91020000 	mrsls	r0, (UNDEF: 2)
 7a8:	31080060 	tstcc	r8, r0, rrx
 7ac:	c0000000 	andgt	r0, r0, r0
 7b0:	09000007 	stmdbeq	r0, {r0, r1, r2}
 7b4:	000000c0 	andeq	r0, r0, r0, asr #1
 7b8:	00c00903 	sbceq	r0, r0, r3, lsl #18
 7bc:	00030000 	andeq	r0, r3, r0
 7c0:	00013d1d 	andeq	r3, r1, sp, lsl sp
 7c4:	05200300 	streq	r0, [r0, #-768]!	; 0xfffffd00
 7c8:	000000a9 	andeq	r0, r0, r9, lsr #1
 7cc:	2000087c 	andcs	r0, r0, ip, ror r8
 7d0:	00000054 	andeq	r0, r0, r4, asr r0
 7d4:	07e89c01 	strbeq	r9, [r8, r1, lsl #24]!
 7d8:	630f0000 	movwvs	r0, #61440	; 0xf000
 7dc:	10210300 	eorne	r0, r1, r0, lsl #6
 7e0:	00000031 	andeq	r0, r0, r1, lsr r0
 7e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7e8:	00014b1d 	andeq	r4, r1, sp, lsl fp
 7ec:	05170300 	ldreq	r0, [r7, #-768]	; 0xfffffd00
 7f0:	000000a9 	andeq	r0, r0, r9, lsr #1
 7f4:	20000828 	andcs	r0, r0, r8, lsr #16
 7f8:	00000054 	andeq	r0, r0, r4, asr r0
 7fc:	08109c01 	ldmdaeq	r0, {r0, sl, fp, ip, pc}
 800:	630f0000 	movwvs	r0, #61440	; 0xf000
 804:	10180300 	andsne	r0, r8, r0, lsl #6
 808:	00000031 	andeq	r0, r0, r1, lsr r0
 80c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 810:	00039418 	andeq	r9, r3, r8, lsl r4
 814:	060d0300 	streq	r0, [sp], -r0, lsl #6
 818:	200007c4 	andcs	r0, r0, r4, asr #15
 81c:	00000064 	andeq	r0, r0, r4, rrx
 820:	08369c01 	ldmdaeq	r6!, {r0, sl, fp, ip, pc}
 824:	72120000 	andsvc	r0, r2, #0
 828:	0300776f 	movweq	r7, #1903	; 0x76f
 82c:	00a9190d 	adceq	r1, r9, sp, lsl #18
 830:	91020000 	mrsls	r0, (UNDEF: 2)
 834:	be180074 	mrclt	0, 0, r0, cr8, cr4, {3}
 838:	03000004 	movweq	r0, #4
 83c:	07600603 	strbeq	r0, [r0, -r3, lsl #12]!
 840:	00642000 	rsbeq	r2, r4, r0
 844:	9c010000 	stcls	0, cr0, [r1], {-0}
 848:	0000085c 	andeq	r0, r0, ip, asr r8
 84c:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 850:	1a030300 	bne	c1458 <startup-0x1ff3eba8>
 854:	000000a9 	andeq	r0, r0, r9, lsr #1
 858:	00749102 	rsbseq	r9, r4, r2, lsl #2
 85c:	0003e20e 	andeq	lr, r3, lr, lsl #4
 860:	06af0200 	strteq	r0, [pc], r0, lsl #4
 864:	200006fa 	strdcs	r0, [r0], -sl
 868:	00000066 	andeq	r0, r0, r6, rrx
 86c:	08979c01 	ldmeq	r7, {r0, sl, fp, ip, pc}
 870:	6f120000 	svcvs	0x00120000
 874:	1baf0200 	blne	febc107c <ball+0xdebbfe44>
 878:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 87c:	106c9102 	rsbne	r9, ip, r2, lsl #2
 880:	20000702 	andcs	r0, r0, r2, lsl #14
 884:	00000054 	andeq	r0, r0, r4, asr r0
 888:	0200740f 	andeq	r7, r0, #251658240	; 0xf000000
 88c:	00a90ab0 	strhteq	r0, [r9], r0
 890:	91020000 	mrsls	r0, (UNDEF: 2)
 894:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
 898:	000002d4 	ldrdeq	r0, [r0], -r4
 89c:	9406a902 	strls	sl, [r6], #-2306	; 0xfffff6fe
 8a0:	66200006 	strtvs	r0, [r0], -r6
 8a4:	01000000 	mrseq	r0, (UNDEF: 0)
 8a8:	0008d29c 	muleq	r8, ip, r2
 8ac:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 8b0:	ba1aa902 	blt	6aacc0 <startup-0x1f955340>
 8b4:	02000001 	andeq	r0, r0, #1
 8b8:	9c106c91 	ldcls	12, cr6, [r0], {145}	; 0x91
 8bc:	54200006 	strtpl	r0, [r0], #-6
 8c0:	0f000000 	svceq	0x00000000
 8c4:	aa020074 	bge	80a9c <startup-0x1ff7f564>
 8c8:	0000a90a 	andeq	sl, r0, sl, lsl #18
 8cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8d0:	200e0000 	andcs	r0, lr, r0
 8d4:	02000000 	andeq	r0, r0, #0
 8d8:	04ca0682 	strbeq	r0, [sl], #1666	; 0x682
 8dc:	01ca2000 	biceq	r2, sl, r0
 8e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 8e4:	0000095d 	andeq	r0, r0, sp, asr r9
 8e8:	02007812 	andeq	r7, r0, #1179648	; 0x120000
 8ec:	00251482 	eoreq	r1, r5, r2, lsl #9
 8f0:	91020000 	mrsls	r0, (UNDEF: 2)
 8f4:	0079125f 	rsbseq	r1, r9, pc, asr r2
 8f8:	251f8202 	ldrcs	r8, [pc, #-514]	; 6fe <startup-0x1ffff902>
 8fc:	02000000 	andeq	r0, r0, #0
 900:	73125e91 	tstvc	r2, #2320	; 0x910
 904:	02007465 	andeq	r7, r0, #1694498816	; 0x65000000
 908:	00252a82 	eoreq	r2, r5, r2, lsl #21
 90c:	91020000 	mrsls	r0, (UNDEF: 2)
 910:	04680d5d 	strbteq	r0, [r8], #-3421	; 0xfffff2a3
 914:	84020000 	strhi	r0, [r2], #-0
 918:	0000250a 	andeq	r2, r0, sl, lsl #10
 91c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 920:	00036c0d 	andeq	r6, r3, sp, lsl #24
 924:	10840200 	addne	r0, r4, r0, lsl #4
 928:	00000025 	andeq	r0, r0, r5, lsr #32
 92c:	0d669102 	stfeqp	f1, [r6, #-8]!
 930:	00000270 	andeq	r0, r0, r0, ror r2
 934:	251c8402 	ldrcs	r8, [ip, #-1026]	; 0xfffffbfe
 938:	02000000 	andeq	r0, r0, #0
 93c:	260d6591 			; <UNDEFINED> instruction: 0x260d6591
 940:	02000000 	andeq	r0, r0, #0
 944:	00252484 	eoreq	r2, r5, r4, lsl #9
 948:	91020000 	mrsls	r0, (UNDEF: 2)
 94c:	00320d63 	eorseq	r0, r2, r3, ror #26
 950:	85020000 	strhi	r0, [r2, #-0]
 954:	0000250a 	andeq	r2, r0, sl, lsl #10
 958:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 95c:	00b51e00 	adcseq	r1, r5, r0, lsl #28
 960:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
 964:	00046206 	andeq	r6, r4, r6, lsl #4
 968:	00006820 	andeq	r6, r0, r0, lsr #16
 96c:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
 970:	10000009 	andne	r0, r0, r9
 974:	20000468 	andcs	r0, r0, r8, ror #8
 978:	00000058 	andeq	r0, r0, r8, asr r0
 97c:	0001710d 	andeq	r7, r1, sp, lsl #2
 980:	0f790200 	svceq	0x00790200
 984:	00000025 	andeq	r0, r0, r5, lsr #32
 988:	10779102 	rsbsne	r9, r7, r2, lsl #2
 98c:	2000048c 	andcs	r0, r0, ip, lsl #9
 990:	00000022 	andeq	r0, r0, r2, lsr #32
 994:	6464610f 	strbtvs	r6, [r4], #-271	; 0xfffffef1
 998:	0f7c0200 	svceq	0x007c0200
 99c:	00000025 	andeq	r0, r0, r5, lsr #32
 9a0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 9a4:	b4130000 	ldrlt	r0, [r3], #-0
 9a8:	02000002 	andeq	r0, r0, #2
 9ac:	040c066a 	streq	r0, [ip], #-1642	; 0xfffff996
 9b0:	00562000 	subseq	r2, r6, r0
 9b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9b8:	00017619 	andeq	r7, r1, r9, lsl r6
 9bc:	09650200 	stmdbeq	r5!, {r9}^
 9c0:	00000025 	andeq	r0, r0, r5, lsr #32
 9c4:	200003e2 	andcs	r0, r0, r2, ror #7
 9c8:	0000002a 	andeq	r0, r0, sl, lsr #32
 9cc:	09e29c01 	stmibeq	r2!, {r0, sl, fp, ip, pc}^
 9d0:	6c140000 	ldcvs	0, cr0, [r4], {-0}
 9d4:	02000003 	andeq	r0, r0, #3
 9d8:	00252365 	eoreq	r2, r5, r5, ror #6
 9dc:	91020000 	mrsls	r0, (UNDEF: 2)
 9e0:	380e0077 	stmdacc	lr, {r0, r1, r2, r4, r5, r6}
 9e4:	02000000 	andeq	r0, r0, #0
 9e8:	039c065d 	orrseq	r0, ip, #97517568	; 0x5d00000
 9ec:	00462000 	subeq	r2, r6, r0
 9f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 9f4:	00000a17 	andeq	r0, r0, r7, lsl sl
 9f8:	00018314 	andeq	r8, r1, r4, lsl r3
 9fc:	215d0200 	cmpcs	sp, r0, lsl #4
 a00:	00000025 	andeq	r0, r0, r5, lsr #32
 a04:	14779102 	ldrbtne	r9, [r7], #-258	; 0xfffffefe
 a08:	0000036c 	andeq	r0, r0, ip, ror #6
 a0c:	252f5d02 	strcs	r5, [pc, #-3330]!	; fffffd12 <ball+0xdfffeada>
 a10:	02000000 	andeq	r0, r0, #0
 a14:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 a18:	0000006d 	andeq	r0, r0, sp, rrx
 a1c:	5c065602 	stcpl	6, cr5, [r6], {2}
 a20:	40200003 	eormi	r0, r0, r3
 a24:	01000000 	mrseq	r0, (UNDEF: 0)
 a28:	000a4c9c 	muleq	sl, ip, ip
 a2c:	007b1400 	rsbseq	r1, fp, r0, lsl #8
 a30:	56020000 	strpl	r0, [r2], -r0
 a34:	00002524 	andeq	r2, r0, r4, lsr #10
 a38:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a3c:	00036c14 	andeq	r6, r3, r4, lsl ip
 a40:	35560200 	ldrbcc	r0, [r6, #-512]	; 0xfffffe00
 a44:	00000025 	andeq	r0, r0, r5, lsr #32
 a48:	00769102 	rsbseq	r9, r6, r2, lsl #2
 a4c:	0002770e 	andeq	r7, r2, lr, lsl #14
 a50:	06410200 	strbeq	r0, [r1], -r0, lsl #4
 a54:	200002dc 	ldrdcs	r0, [r0], -ip
 a58:	00000080 	andeq	r0, r0, r0, lsl #1
 a5c:	0a819c01 	beq	fe067a68 <ball+0xde066830>
 a60:	af140000 	svcge	0x00140000
 a64:	02000000 	andeq	r0, r0, #0
 a68:	00251c41 	eoreq	r1, r5, r1, asr #24
 a6c:	91020000 	mrsls	r0, (UNDEF: 2)
 a70:	036c1477 	cmneq	ip, #1996488704	; 0x77000000
 a74:	41020000 	mrsmi	r0, (UNDEF: 2)
 a78:	0000252b 	andeq	r2, r0, fp, lsr #10
 a7c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 a80:	01091900 	tsteq	r9, r0, lsl #18
 a84:	2b020000 	blcs	80a8c <startup-0x1ff7f574>
 a88:	00002509 	andeq	r2, r0, r9, lsl #10
 a8c:	00024c00 	andeq	r4, r2, r0, lsl #24
 a90:	00009020 	andeq	r9, r0, r0, lsr #32
 a94:	b99c0100 	ldmiblt	ip, {r8}
 a98:	1400000a 	strne	r0, [r0], #-10
 a9c:	0000036c 	andeq	r0, r0, ip, ror #6
 aa0:	251e2b02 	ldrcs	r2, [lr, #-2818]	; 0xfffff4fe
 aa4:	02000000 	andeq	r0, r0, #0
 aa8:	720f6f91 	andvc	r6, pc, #580	; 0x244
 aac:	33020076 	movwcc	r0, #8310	; 0x2076
 ab0:	0000250a 	andeq	r2, r0, sl, lsl #10
 ab4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ab8:	04840e00 	streq	r0, [r4], #3584	; 0xe00
 abc:	17020000 	strne	r0, [r2, -r0]
 ac0:	0001d606 	andeq	sp, r1, r6, lsl #12
 ac4:	00007620 	andeq	r7, r0, r0, lsr #12
 ac8:	e39c0100 	orrs	r0, ip, #0, 2
 acc:	1f00000a 	svcne	0x0000000a
 ad0:	00000000 	andeq	r0, r0, r0
 ad4:	0200630f 	andeq	r6, r0, #1006632960	; 0x3c000000
 ad8:	00250b20 	eoreq	r0, r5, r0, lsr #22
 adc:	91020000 	mrsls	r0, (UNDEF: 2)
 ae0:	0e000077 	mcreq	0, 0, r0, cr0, cr7, {3}
 ae4:	00000093 	muleq	r0, r3, r0
 ae8:	74060a02 	strvc	r0, [r6], #-2562	; 0xfffff5fe
 aec:	62200001 	eorvs	r0, r0, #1
 af0:	01000000 	mrseq	r0, (UNDEF: 0)
 af4:	000b189c 	muleq	fp, ip, r8
 af8:	036c1400 	cmneq	ip, #0, 8
 afc:	0a020000 	beq	80b04 <startup-0x1ff7f4fc>
 b00:	00002520 	andeq	r2, r0, r0, lsr #10
 b04:	6f910200 	svcvs	0x00910200
 b08:	0002f80d 	andeq	pc, r2, sp, lsl #16
 b0c:	0a0b0200 	beq	2c1314 <startup-0x1fd3ecec>
 b10:	00000025 	andeq	r0, r0, r5, lsr #32
 b14:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b18:	00028518 	andeq	r8, r2, r8, lsl r5
 b1c:	06060200 	streq	r0, [r6], -r0, lsl #4
 b20:	20000138 	andcs	r0, r0, r8, lsr r1
 b24:	0000003c 	andeq	r0, r0, ip, lsr r0
 b28:	0b3c9c01 	bleq	f27b34 <startup-0x1f0d84cc>
 b2c:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
 b30:	25060200 	strcs	r0, [r6, #-512]	; 0xfffffe00
 b34:	00000025 	andeq	r0, r0, r5, lsr #32
 b38:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b3c:	00032a18 	andeq	r2, r3, r8, lsl sl
 b40:	06010200 	streq	r0, [r1], -r0, lsl #4
 b44:	200000f2 	strdcs	r0, [r0], -r2
 b48:	00000046 	andeq	r0, r0, r6, asr #32
 b4c:	0b609c01 	bleq	1827b58 <startup-0x1e7d84a8>
 b50:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
 b54:	23010200 	movwcs	r0, #4608	; 0x1200
 b58:	00000025 	andeq	r0, r0, r5, lsr #32
 b5c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b60:	0002e013 	andeq	lr, r2, r3, lsl r0
 b64:	06210100 	strteq	r0, [r1], -r0, lsl #2
 b68:	200000e0 	andcs	r0, r0, r0, ror #1
 b6c:	00000012 	andeq	r0, r0, r2, lsl r0
 b70:	a80e9c01 	stmdage	lr, {r0, sl, fp, ip, pc}
 b74:	01000001 	tsteq	r0, r1
 b78:	009a0617 	addseq	r0, sl, r7, lsl r6
 b7c:	00462000 	subeq	r2, r6, r0
 b80:	9c010000 	stcls	0, cr0, [r1], {-0}
 b84:	00000bae 	andeq	r0, r0, lr, lsr #23
 b88:	00736d12 	rsbseq	r6, r3, r2, lsl sp
 b8c:	c01f1701 	andsgt	r1, pc, r1, lsl #14
 b90:	02000000 	andeq	r0, r0, #0
 b94:	b8106c91 	ldmdalt	r0, {r0, r4, r7, sl, fp, sp, lr}
 b98:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 b9c:	0f000000 	svceq	0x00000000
 ba0:	1c010069 	stcne	0, cr0, [r1], {105}	; 0x69
 ba4:	0000a90a 	andeq	sl, r0, sl, lsl #18
 ba8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 bac:	ec0e0000 	stc	0, cr0, [lr], {-0}
 bb0:	01000002 	tsteq	r0, r2
 bb4:	0058060d 	subseq	r0, r8, sp, lsl #12
 bb8:	00422000 	subeq	r2, r2, r0
 bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
 bc0:	00000bea 	andeq	r0, r0, sl, ror #23
 bc4:	00737512 	rsbseq	r7, r3, r2, lsl r5
 bc8:	c01f0d01 	andsgt	r0, pc, r1, lsl #26
 bcc:	02000000 	andeq	r0, r0, #0
 bd0:	76106c91 			; <UNDEFINED> instruction: 0x76106c91
 bd4:	1a200000 	bne	800bdc <startup-0x1f7ff424>
 bd8:	0f000000 	svceq	0x00000000
 bdc:	12010069 	andne	r0, r1, #105	; 0x69
 be0:	0000a90a 	andeq	sl, r0, sl, lsl #18
 be4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 be8:	fd110000 	ldc2	0, cr0, [r1, #-0]
 bec:	01000003 	tsteq	r0, r3
 bf0:	00100603 	andseq	r0, r0, r3, lsl #12
 bf4:	00482000 	subeq	r2, r8, r0
 bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	340d0000 	strcc	r0, [sp], #-0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  a4:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  ac:	0b3a0e03 	bleq	e838c0 <startup-0x1f17c740>
  b0:	0b390b3b 	bleq	e42da4 <startup-0x1f1bd25c>
  b4:	01111927 	tsteq	r1, r7, lsr #18
  b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c0:	0f000013 	svceq	0x00000013
  c4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  c8:	0b3b0b3a 	bleq	ec2db8 <startup-0x1f13d248>
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
  d4:	11010b10 	tstne	r1, r0, lsl fp
  d8:	00061201 	andeq	r1, r6, r1, lsl #4
  dc:	002e1100 	eoreq	r1, lr, r0, lsl #2
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	0b3b0b3a 	bleq	ec2dd4 <startup-0x1f13d22c>
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  f4:	12000019 	andne	r0, r0, #25
  f8:	08030005 	stmdaeq	r3, {r0, r2}
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	13490b39 	movtne	r0, #39737	; 0x9b39
 104:	00001802 	andeq	r1, r0, r2, lsl #16
 108:	3f002e13 	svccc	0x00002e13
 10c:	3a0e0319 	bcc	380d78 <startup-0x1fc7f288>
 110:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 118:	96184006 	ldrls	r4, [r8], -r6
 11c:	00001942 	andeq	r1, r0, r2, asr #18
 120:	03000514 	movweq	r0, #1300	; 0x514
 124:	3b0b3a0e 	blcc	2ce964 <startup-0x1fd3169c>
 128:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 12c:	00180213 	andseq	r0, r8, r3, lsl r2
 130:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 138:	0b3b0b3a 	bleq	ec2e28 <startup-0x1f13d1d8>
 13c:	13490b39 	movtne	r0, #39737	; 0x9b39
 140:	06120111 			; <UNDEFINED> instruction: 0x06120111
 144:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 148:	00130119 	andseq	r0, r3, r9, lsl r1
 14c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 150:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 154:	0b3b0b3a 	bleq	ec2e44 <startup-0x1f13d1bc>
 158:	13490b39 	movtne	r0, #39737	; 0x9b39
 15c:	0000193c 	andeq	r1, r0, ip, lsr r9
 160:	00001817 	andeq	r1, r0, r7, lsl r8
 164:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 168:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 16c:	0b3b0b3a 	bleq	ec2e5c <startup-0x1f13d1a4>
 170:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 174:	06120111 			; <UNDEFINED> instruction: 0x06120111
 178:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 17c:	00130119 	andseq	r0, r3, r9, lsl r1
 180:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 184:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 190:	01111349 	tsteq	r1, r9, asr #6
 194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 198:	01194296 			; <UNDEFINED> instruction: 0x01194296
 19c:	1a000013 	bne	1f0 <startup-0x1ffffe10>
 1a0:	0111010b 	tsteq	r1, fp, lsl #2
 1a4:	13010612 	movwne	r0, #5650	; 0x1612
 1a8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1ac:	03193f01 	tsteq	r9, #1, 30
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1b8:	01193c13 	tsteq	r9, r3, lsl ip
 1bc:	1c000013 	stcne	0, cr0, [r0], {19}
 1c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c4:	0b3a0e03 	bleq	e839d8 <startup-0x1f17c628>
 1c8:	0b390b3b 	bleq	e42ebc <startup-0x1f1bd144>
 1cc:	13491927 	movtne	r1, #39207	; 0x9927
 1d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d8:	00130119 	andseq	r0, r3, r9, lsl r1
 1dc:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 1e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e4:	0b3b0b3a 	bleq	ec2ed4 <startup-0x1f13d12c>
 1e8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00130119 	andseq	r0, r3, r9, lsl r1
 1f8:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 1fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 200:	0b3b0b3a 	bleq	ec2ef0 <startup-0x1f13d110>
 204:	01110b39 	tsteq	r1, r9, lsr fp
 208:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 20c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 210:	1f000013 	svcne	0x00000013
 214:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 218:	Address 0x00000218 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000103c 	andeq	r1, r0, ip, lsr r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001f8 	strdcs	r0, [r0], -r8
   4:	20000222 	andcs	r0, r0, r2, lsr #4
   8:	20000224 	andcs	r0, r0, r4, lsr #4
   c:	20000226 	andcs	r0, r0, r6, lsr #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	2000104c 	andcs	r1, r0, ip, asr #32
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   4:	00e80003 	rsceq	r0, r8, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	666f6c6f 	strbtvs	r6, [pc], -pc, ror #24
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	5f746967 	svcpl	0x00746967
  38:	6a6f7270 	bvs	1bdca00 <startup-0x1e423600>
  3c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
  40:	6863532f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
  44:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
  48:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  4c:	2f737463 	svccs	0x00737463
  50:	30544144 	subscc	r4, r4, r4, asr #2
  54:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; ffffff98 <ball+0xdfffed60>
  58:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  5c:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
  60:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
  64:	5f525044 	svcpl	0x00525044
  68:	50525452 	subspl	r5, r2, r2, asr r4
  6c:	6f502f41 	svcvs	0x00502f41
  70:	0000676e 	andeq	r6, r0, lr, ror #14
  74:	616c6544 	cmnvs	ip, r4, asr #10
  78:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
  7c:	00000100 	andeq	r0, r0, r0, lsl #2
  80:	70617247 	rsbvc	r7, r1, r7, asr #4
  84:	44636968 	strbtmi	r6, [r3], #-2408	; 0xfffff698
  88:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  8c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  90:	00000100 	andeq	r0, r0, r0, lsl #2
  94:	6279654b 	rsbsvs	r6, r9, #314572800	; 0x12c00000
  98:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  9c:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  a0:	00010068 	andeq	r0, r1, r8, rrx
  a4:	6d614700 	stclvs	7, cr4, [r1, #-0]
  a8:	676f4c65 	strbvs	r4, [pc, -r5, ror #24]!
  ac:	682e6369 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sp, lr}
  b0:	00000100 	andeq	r0, r0, r0, lsl #2
  b4:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
  b8:	69724469 	ldmdbvs	r2!, {r0, r3, r5, r6, sl, lr}^
  bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
  c0:	0100682e 	tsteq	r0, lr, lsr #16
  c4:	6f500000 	svcvs	0x00500000
  c8:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
  cc:	00000100 	andeq	r0, r0, r0, lsl #2
  d0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
  d4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
  d8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
  dc:	00000100 	andeq	r0, r0, r0, lsl #2
  e0:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
  e4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
  e8:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
  ec:	00010068 	andeq	r0, r1, r8, rrx
  f0:	17050000 	strne	r0, [r5, -r0]
  f4:	10020500 	andne	r0, r2, r0, lsl #10
  f8:	14200000 	strtne	r0, [r0], #-0
  fc:	052f0205 	streq	r0, [pc, #-517]!	; fffffeff <ball+0xdfffecc7>
 100:	0205200c 	andeq	r2, r5, #12
 104:	200c052f 	andcs	r0, ip, pc, lsr #10
 108:	052f0205 	streq	r0, [pc, #-517]!	; ffffff0b <ball+0xdfffecd3>
 10c:	0205200b 	andeq	r2, r5, #11
 110:	200c052f 	andcs	r0, ip, pc, lsr #10
 114:	052f0705 	streq	r0, [pc, #-1797]!	; fffffa17 <ball+0xdfffe7df>
 118:	0402000a 	streq	r0, [r2], #-10
 11c:	19052001 	stmdbne	r5, {r0, sp}
 120:	01040200 	mrseq	r0, R12_usr
 124:	0007053c 	andeq	r0, r7, ip, lsr r5
 128:	3c010402 	cfstrscc	mvf0, [r1], {2}
 12c:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 130:	0105200c 	tsteq	r5, ip
 134:	ae22052f 	cfsh64ge	mvdx0, mvdx2, #31
 138:	834c0505 	movthi	r0, #50437	; 0xc505
 13c:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 140:	03052e02 	movweq	r2, #24066	; 0x5e02
 144:	03040200 	movweq	r0, #16896	; 0x4200
 148:	001c0521 	andseq	r0, ip, r1, lsr #10
 14c:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 150:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 154:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 158:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 15c:	02052e01 	andeq	r2, r5, #1, 28
 160:	01040200 	mrseq	r0, R12_usr
 164:	31010520 	tstcc	r1, r0, lsr #10
 168:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 16c:	05834c06 	streq	r4, [r3, #3078]	; 0xc06
 170:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 174:	0003052e 	andeq	r0, r3, lr, lsr #10
 178:	21030402 	tstcs	r3, r2, lsl #8
 17c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 180:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 184:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 188:	02053c01 	andeq	r3, r5, #256	; 0x100
 18c:	01040200 	mrseq	r0, R12_usr
 190:	3f010520 	svccc	0x00010520
 194:	055a1305 	ldrbeq	r1, [sl, #-773]	; 0xfffffcfb
 198:	052f2f02 	streq	r2, [pc, #-3842]!	; fffff29e <ball+0xdfffe066>
 19c:	02042f01 	andeq	r2, r4, #1, 30
 1a0:	5d032505 	cfstr32pl	mvfx2, [r3, #-20]	; 0xffffffec
 1a4:	670f053c 	smladxvs	pc, ip, r5, r0	; <UNPREDICTABLE>
 1a8:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
 1ac:	0559660f 	ldrbeq	r6, [r9, #-1551]	; 0xfffff9f1
 1b0:	27058301 	strcs	r8, [r5, -r1, lsl #6]
 1b4:	670f0568 	strvs	r0, [pc, -r8, ror #10]
 1b8:	13080105 	movwne	r0, #33029	; 0x8105
 1bc:	05762b05 	ldrbeq	r2, [r6, #-2821]!	; 0xfffff4fb
 1c0:	0205670a 	andeq	r6, r5, #2621440	; 0x280000
 1c4:	c10c054b 	tstgt	ip, fp, asr #10
 1c8:	7a030b05 	bvc	c2de4 <startup-0x1ff3d21c>
 1cc:	3c030520 	cfstr32cc	mvfx0, [r3], {32}
 1d0:	05210f05 	streq	r0, [r1, #-3845]!	; 0xfffff0fb
 1d4:	0f053d06 	svceq	0x00053d06
 1d8:	3d06054b 	cfstr32cc	mvfx0, [r6, #-300]	; 0xfffffed4
 1dc:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
 1e0:	0c053c03 	stceq	12, cr3, [r5], {3}
 1e4:	22010521 	andcs	r0, r1, #138412032	; 0x8400000
 1e8:	053e1e05 	ldreq	r1, [lr, #-3589]!	; 0xfffff1fb
 1ec:	053d3d02 	ldreq	r3, [sp, #-3330]!	; 0xfffff2fe
 1f0:	0205200d 	andeq	r2, r5, #13
 1f4:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 1f8:	053d3003 	ldreq	r3, [sp, #-3]!
 1fc:	0b052f1d 	bleq	14be78 <startup-0x1feb4188>
 200:	4b03053c 	blmi	c16f8 <startup-0x1ff3e908>
 204:	2f05053d 	svccs	0x0005053d
 208:	7a030a05 	bvc	c2a24 <startup-0x1ff3d5dc>
 20c:	2704054a 	strcs	r0, [r4, -sl, asr #10]
 210:	3d230205 	sfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
 214:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 218:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
 21c:	670205ca 	strvs	r0, [r2, -sl, asr #11]
 220:	200d053d 	andcs	r0, sp, sp, lsr r5
 224:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 218 <startup-0x1ffffde8>
 228:	053d2f59 	ldreq	r2, [sp, #-3929]!	; 0xfffff0a7
 22c:	0a052f0f 	beq	14be70 <startup-0x1feb4190>
 230:	4b020520 	blmi	816b8 <startup-0x1ff7e948>
 234:	200e053d 	andcs	r0, lr, sp, lsr r5
 238:	052f0405 	streq	r0, [pc, #-1029]!	; fffffe3b <ball+0xdfffec03>
 23c:	053d4b03 	ldreq	r4, [sp, #-2819]!	; 0xfffff4fd
 240:	03053004 	movweq	r3, #20484	; 0x5004
 244:	09053d4b 	stmdbeq	r5, {r0, r1, r3, r6, r8, sl, fp, ip, sp}
 248:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 24c:	05ca3605 	strbeq	r3, [sl, #1541]	; 0x605
 250:	10059102 	andne	r9, r5, r2, lsl #2
 254:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 258:	2f3d2f59 	svccs	0x003d2f59
 25c:	053e1005 	ldreq	r1, [lr, #-5]!
 260:	03054a04 	movweq	r4, #23044	; 0x5a04
 264:	10053d21 	andne	r3, r5, r1, lsr #26
 268:	4a040530 	bmi	101730 <startup-0x1fefe8d0>
 26c:	3d210305 	stccc	3, cr0, [r1, #-20]!	; 0xffffffec
 270:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
 274:	0205200f 	andeq	r2, r5, #15
 278:	01053d2f 	tsteq	r5, pc, lsr #26
 27c:	7640053d 			; <UNDEFINED> instruction: 0x7640053d
 280:	3d910205 	lfmcc	f0, 4, [r1, #20]
 284:	01053d59 	tsteq	r5, r9, asr sp
 288:	4c3a0583 	cfldr32mi	mvfx0, [sl], #-524	; 0xfffffdf4
 28c:	3d910205 	lfmcc	f0, 4, [r1, #20]
 290:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 294:	2e058301 	cdpcs	3, 0, cr8, cr5, cr1, {0}
 298:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 29c:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 2a0:	1a056701 	bne	159eac <startup-0x1fea6154>
 2a4:	2f02054c 	svccs	0x0002054c
 2a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2ac:	4b4b4b3d 	blmi	12d2fa8 <startup-0x1ed2d058>
 2b0:	01054b4b 	tsteq	r5, fp, asr #22
 2b4:	3e1c053d 	mrccc	5, 0, r0, cr12, cr13, {1}
 2b8:	053d0f05 	ldreq	r0, [sp, #-3845]!	; 0xfffff0fb
 2bc:	03053c02 	movweq	r3, #23554	; 0x5c02
 2c0:	0f059f21 	svceq	0x00059f21
 2c4:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 2c8:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 2cc:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 2d0:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
 2d4:	03054903 	movweq	r4, #22787	; 0x5903
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	00270558 	eoreq	r0, r7, r8, asr r5
 2e0:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 2e4:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 2e8:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 2ec:	2e055101 	adfcss	f5, f5, f1
 2f0:	e504055a 	str	r0, [r4, #-1370]	; 0xfffffaa6
 2f4:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
 2f8:	05580204 	ldrbeq	r0, [r8, #-516]	; 0xfffffdfc
 2fc:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 300:	21055804 	tstcs	r5, r4, lsl #16
 304:	06040200 	streq	r0, [r4], -r0, lsl #4
 308:	5a140558 	bpl	501870 <startup-0x1fafe790>
 30c:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
 310:	0b05580a 	bleq	156340 <startup-0x1fea9cc0>
 314:	3c0f053e 	cfstr32cc	mvfx0, [pc], {62}	; 0x3e
 318:	05e51005 	strbeq	r1, [r5, #5]!
 31c:	10054a03 	andne	r4, r5, r3, lsl #20
 320:	4a030521 	bmi	c17ac <startup-0x1ff3e854>
 324:	05211005 	streq	r1, [r1, #-5]!
 328:	10054a03 	andne	r4, r5, r3, lsl #20
 32c:	4a030521 	bmi	c17b8 <startup-0x1ff3e848>
 330:	05211005 	streq	r1, [r1, #-5]!
 334:	10054a03 	andne	r4, r5, r3, lsl #20
 338:	4a030521 	bmi	c17c4 <startup-0x1ff3e83c>
 33c:	05211005 	streq	r1, [r1, #-5]!
 340:	10054a03 	andne	r4, r5, r3, lsl #20
 344:	4a030521 	bmi	c17d0 <startup-0x1ff3e830>
 348:	22040521 	andcs	r0, r4, #138412032	; 0x8400000
 34c:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
 350:	0e056904 	vmlaeq.f16	s12, s10, s8	; <UNPREDICTABLE>
 354:	4b0a054b 	blmi	281888 <startup-0x1fd7e778>
 358:	05760e05 	ldrbeq	r0, [r6, #-3589]!	; 0xfffff1fb
 35c:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 360:	1005c968 	andne	ip, r5, r8, ror #18
 364:	910205c9 	smlabtls	r2, r9, r5, r0
 368:	05ad0405 	streq	r0, [sp, #1029]!	; 0x405
 36c:	05a04b08 	streq	r4, [r0, #2824]!	; 0xb08
 370:	2c059202 	sfmcs	f1, 1, [r5], {2}
 374:	05ac5d03 	streq	r5, [ip, #3331]!	; 0xd03
 378:	20240301 	eorcs	r0, r4, r1, lsl #6
 37c:	05841c05 	streq	r1, [r4, #3077]	; 0xc05
 380:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 384:	000a052e 	andeq	r0, sl, lr, lsr #10
 388:	21030402 	tstcs	r3, r2, lsl #8
 38c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 390:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 394:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 398:	03056603 	movweq	r6, #22019	; 0x5603
 39c:	03040200 	movweq	r0, #16896	; 0x4200
 3a0:	0025052e 	eoreq	r0, r5, lr, lsr #10
 3a4:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3a8:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 3ac:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3b0:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 3b4:	03056603 	movweq	r6, #22019	; 0x5603
 3b8:	03040200 	movweq	r0, #16896	; 0x4200
 3bc:	002c052e 	eoreq	r0, ip, lr, lsr #10
 3c0:	73030402 	movwvc	r0, #13314	; 0x3402
 3c4:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3c8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3cc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 3d0:	02052e01 	andeq	r2, r5, #1, 28
 3d4:	01040200 	mrseq	r0, R12_usr
 3d8:	3f010520 	svccc	0x00010520
 3dc:	055a1d05 	ldrbeq	r1, [sl, #-3333]	; 0xfffff2fb
 3e0:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 3e4:	000a052e 	andeq	r0, sl, lr, lsr #10
 3e8:	21030402 	tstcs	r3, r2, lsl #8
 3ec:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3f0:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3f4:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 3f8:	03056603 	movweq	r6, #22019	; 0x5603
 3fc:	03040200 	movweq	r0, #16896	; 0x4200
 400:	0025052e 	eoreq	r0, r5, lr, lsr #10
 404:	3c030402 	cfstrscc	mvf0, [r3], {2}
 408:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 40c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 410:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 414:	03056603 	movweq	r6, #22019	; 0x5603
 418:	03040200 	movweq	r0, #16896	; 0x4200
 41c:	0029052e 	eoreq	r0, r9, lr, lsr #10
 420:	73030402 	movwvc	r0, #13314	; 0x3402
 424:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 428:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 42c:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 430:	02052e01 	andeq	r2, r5, #1, 28
 434:	01040200 	mrseq	r0, R12_usr
 438:	3f010520 	svccc	0x00010520
 43c:	1e050304 	cdpne	3, 0, cr0, cr5, cr4, {0}
 440:	587ed003 	ldmdapl	lr!, {r0, r1, ip, lr, pc}^
 444:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 448:	052f080b 	streq	r0, [pc, #-2059]!	; fffffc45 <ball+0xdfffea0d>
 44c:	0305201c 	movweq	r2, #20508	; 0x501c
 450:	210b052e 	tstcs	fp, lr, lsr #10
 454:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 458:	0b052e03 	bleq	14bc6c <startup-0x1feb4394>
 45c:	201c0521 	andscs	r0, ip, r1, lsr #10
 460:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 464:	1c05210b 	stfnes	f2, [r5], {11}
 468:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 46c:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 470:	0105201d 	tsteq	r5, sp, lsl r0
 474:	841d0530 	ldrhi	r0, [sp], #-1328	; 0xfffffad0
 478:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 47c:	052f080b 	streq	r0, [pc, #-2059]!	; fffffc79 <ball+0xdfffea41>
 480:	0305201b 	movweq	r2, #20507	; 0x501b
 484:	210b052e 	tstcs	fp, lr, lsr #10
 488:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 48c:	0b052e03 	bleq	14bca0 <startup-0x1feb4360>
 490:	201b0521 	andscs	r0, fp, r1, lsr #10
 494:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 498:	1b05210b 	blne	1488cc <startup-0x1feb7734>
 49c:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 4a0:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 4a4:	0105201c 	tsteq	r5, ip, lsl r0
 4a8:	84150530 	ldrhi	r0, [r5], #-1328	; 0xfffffad0
 4ac:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
 4b0:	07052010 	smladeq	r5, r0, r0, r2
 4b4:	4a04053d 	bmi	1019b0 <startup-0x1fefe650>
 4b8:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 4bc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 4c0:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 4c4:	0015054a 	andseq	r0, r5, sl, asr #10
 4c8:	20010402 	andcs	r0, r1, r2, lsl #8
 4cc:	052f0705 	streq	r0, [pc, #-1797]!	; fffffdcf <ball+0xdfffeb97>
 4d0:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	2f070520 	svccs	0x00070520
 4dc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 4e0:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 4e4:	09052001 	stmdbeq	r5, {r0, sp}
 4e8:	2101052f 	tstcs	r1, pc, lsr #10
 4ec:	3d681405 	cfstrdcc	mvd1, [r8, #-20]!	; 0xffffffec
 4f0:	05201005 	streq	r1, [r0, #-5]!
 4f4:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 4f8:	0015054a 	andseq	r0, r5, sl, asr #10
 4fc:	20010402 	andcs	r0, r1, r2, lsl #8
 500:	052f0705 	streq	r0, [pc, #-1797]!	; fffffe03 <ball+0xdfffebcb>
 504:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 508:	01040200 	mrseq	r0, R12_usr
 50c:	2f070520 	svccs	0x00070520
 510:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 514:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 518:	07052001 	streq	r2, [r5, -r1]
 51c:	4a04052f 	bmi	1019e0 <startup-0x1fefe620>
 520:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 524:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 528:	01052f09 	tsteq	r5, r9, lsl #30
 52c:	68250521 	stmdavs	r5!, {r0, r5, r8, sl}
 530:	05591005 	ldrbeq	r1, [r9, #-5]
 534:	01057512 	tsteq	r5, r2, lsl r5
 538:	77190575 			; <UNDEFINED> instruction: 0x77190575
 53c:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffffb3f <ball+0xdfffe907>
 540:	03052e02 	movweq	r2, #24066	; 0x5e02
 544:	4b0c0521 	blmi	3019d0 <startup-0x1fcfe630>
 548:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 54c:	0a053006 	beq	14c56c <startup-0x1feb3a94>
 550:	8208054b 	andhi	r0, r8, #314572800	; 0x12c00000
 554:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffa57 <ball+0xdfffe81f>
 558:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 55c:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
 560:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 564:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 568:	3c090309 	stccc	3, cr0, [r9], {9}
 56c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 570:	0a054c18 	beq	1535d8 <startup-0x1feaca28>
 574:	2e02053f 	mcrcs	5, 0, r0, cr2, cr15, {1}
 578:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 57c:	0a054b0c 	beq	1531b4 <startup-0x1feace4c>
 580:	3006053c 	andcc	r0, r6, ip, lsr r5
 584:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 588:	0b058208 	bleq	160db0 <startup-0x1fe9f250>
 58c:	001f052f 	andseq	r0, pc, pc, lsr #10
 590:	03020402 	movweq	r0, #9218	; 0x2402
 594:	02053c7a 	andeq	r3, r5, #31232	; 0x7a00
 598:	01040200 	mrseq	r0, R12_usr
 59c:	0309053c 	movweq	r0, #38204	; 0x953c
 5a0:	01053c09 	tsteq	r5, r9, lsl #24
 5a4:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
 5a8:	7fb90339 	svcvc	0x00b90339
 5ac:	6708054a 	strvs	r0, [r8, -sl, asr #10]
 5b0:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 5b4:	054c2905 	strbeq	r2, [ip, #-2309]	; 0xfffff6fb
 5b8:	0e055902 	vmlaeq.f16	s10, s10, s4	; <UNPREDICTABLE>
 5bc:	2e18054b 	cfmac32cs	mvfx0, mvfx8, mvfx11
 5c0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 5c4:	18052f0e 	stmdane	r5, {r1, r2, r3, r8, r9, sl, fp, sp}
 5c8:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 5cc:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
 5d0:	053d3d0b 	ldreq	r3, [sp, #-3339]!	; 0xfffff2f5
 5d4:	03053d16 	movweq	r3, #23830	; 0x5d16
 5d8:	13054b67 	movwne	r4, #23399	; 0x5b67
 5dc:	2e180576 	mrccs	5, 0, r0, cr8, cr6, {3}
 5e0:	05201005 	streq	r1, [r0, #-5]!
 5e4:	0b052e09 	bleq	14be10 <startup-0x1feb41f0>
 5e8:	15053d2f 	strne	r3, [r5, #-3375]	; 0xfffff2d1
 5ec:	6703053d 	smladxvs	r3, sp, r5, r0
 5f0:	7609054b 	strvc	r0, [r9], -fp, asr #10
 5f4:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 5f8:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
 5fc:	2f0b0520 	svccs	0x000b0520
 600:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
 604:	14052e1c 	strne	r2, [r5], #-3612	; 0xfffff1e4
 608:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 60c:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 610:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
 614:	2f130520 	svccs	0x00130520
 618:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 61c:	0b052010 	bleq	148664 <startup-0x1feb799c>
 620:	053d3e2e 	ldreq	r3, [sp, #-3630]!	; 0xfffff1d2
 624:	01053e02 	tsteq	r5, r2, lsl #28
 628:	843f054b 	ldrthi	r0, [pc], #-1355	; 630 <startup-0x1ffff9d0>
 62c:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
 630:	20052e1b 	andcs	r2, r5, fp, lsl lr
 634:	2015052e 	andscs	r0, r5, lr, lsr #10
 638:	05202d05 	streq	r2, [r0, #-3333]!	; 0xfffff2fb
 63c:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 640:	01040200 	mrseq	r0, R12_usr
 644:	0014052f 	andseq	r0, r4, pc, lsr #10
 648:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 64c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 650:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 654:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 658:	1b052e01 	blne	14be64 <startup-0x1feb419c>
 65c:	01040200 	mrseq	r0, R12_usr
 660:	00340520 	eorseq	r0, r4, r0, lsr #10
 664:	1f010402 	svcne	0x00010402
 668:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 66c:	1d052e18 	stcne	14, cr2, [r5, #-96]	; 0xffffffa0
 670:	2012052e 	andscs	r0, r2, lr, lsr #10
 674:	051f2d05 	ldreq	r2, [pc, #-3333]	; fffff977 <ball+0xdfffe73f>
 678:	1c053e0a 	stcne	14, cr3, [r5], {10}
 67c:	2e21052e 	cfsh64cs	mvdx0, mvdx1, #30
 680:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
 684:	04052d2e 	streq	r2, [r5], #-3374	; 0xfffff2d2
 688:	4b0e0530 	blmi	381b50 <startup-0x1fc7e4b0>
 68c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 690:	2a052101 	bcs	148a9c <startup-0x1feb7564>
 694:	5902054c 	stmdbpl	r2, {r2, r3, r6, r8, sl}
 698:	054c0e05 	strbeq	r0, [ip, #-3589]	; 0xfffff1fb
 69c:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 6a0:	3005052e 	andcc	r0, r5, lr, lsr #10
 6a4:	05740405 	ldrbeq	r0, [r4, #-1029]!	; 0xfffffbfb
 6a8:	05052107 	streq	r2, [r5, #-263]	; 0xfffffef9
 6ac:	2f15052e 	svccs	0x0015052e
 6b0:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 6b4:	0f05200d 	svceq	0x0005200d
 6b8:	4c14052f 	cfldr32mi	mvfx0, [r4], {47}	; 0x2f
 6bc:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
 6c0:	0f05200d 	svceq	0x0005200d
 6c4:	3e03052f 	cfsh32cc	mvfx0, mvfx3, #31
 6c8:	055b0905 	ldrbeq	r0, [fp, #-2309]	; 0xfffff6fb
 6cc:	0b053d0d 	bleq	14fb08 <startup-0x1feb04f8>
 6d0:	2009052e 	andcs	r0, r9, lr, lsr #10
 6d4:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffbd7 <ball+0xdfffe99f>
 6d8:	1c054c17 	stcne	12, cr4, [r5], {23}
 6dc:	2014052e 	andscs	r0, r4, lr, lsr #10
 6e0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 6e4:	0b053d0d 	bleq	14fb20 <startup-0x1feb04e0>
 6e8:	2009052e 	andcs	r0, r9, lr, lsr #10
 6ec:	052f1305 	streq	r1, [pc, #-773]!	; 3ef <startup-0x1ffffc11>
 6f0:	10052e18 	andne	r2, r5, r8, lsl lr
 6f4:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
 6f8:	3e02053e 	mcrcc	5, 0, r0, cr2, cr14, {1}
 6fc:	044b0105 	strbeq	r0, [fp], #-261	; 0xfffffefb
 700:	03290505 			; <UNDEFINED> instruction: 0x03290505
 704:	11054a52 	tstne	r5, r2, asr sl
 708:	bb010567 	bllt	41cac <startup-0x1ffbe354>
 70c:	05682b05 	strbeq	r2, [r8, #-2821]!	; 0xfffff4fb
 710:	0f056707 	svceq	0x00056707
 714:	01059167 	tsteq	r5, r7, ror #2
 718:	762c0583 	strtvc	r0, [ip], -r3, lsl #11
 71c:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 720:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 724:	054c2a05 	strbeq	r2, [ip, #-2565]	; 0xfffff5fb
 728:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 72c:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 730:	02054c33 	andeq	r4, r5, #13056	; 0x3300
 734:	10053d68 	andne	r3, r5, r8, ror #26
 738:	3e020520 	cfsh32cc	mvfx0, mvfx2, #16
 73c:	2f01053d 	svccs	0x0001053d
 740:	05682605 	strbeq	r2, [r8, #-1541]!	; 0xfffff9fb
 744:	2f3d3e02 	svccs	0x003d3e02
 748:	052f0705 	streq	r0, [pc, #-1797]!	; 4b <startup-0x1fffffb5>
 74c:	02052005 	andeq	r2, r5, #5
 750:	3d09053d 	cfstr32cc	mvfx0, [r9, #-244]	; 0xffffff0c
 754:	052f0105 	streq	r0, [pc, #-261]!	; 657 <startup-0x1ffff9a9>
 758:	02057620 	andeq	r7, r5, #32, 12	; 0x2000000
 75c:	200e053d 	andcs	r0, lr, sp, lsr r5
 760:	3d300205 	lfmcc	f0, 4, [r0, #-20]!	; 0xffffffec
 764:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 768:	0e053d02 	cdpeq	13, 0, cr3, cr5, cr2, {0}
 76c:	2f090520 	svccs	0x00090520
 770:	052f0105 	streq	r0, [pc, #-261]!	; 673 <startup-0x1ffff98d>
 774:	0205bc22 	andeq	fp, r5, #8704	; 0x2200
 778:	200e053d 	andcs	r0, lr, sp, lsr r5
 77c:	3d300205 	lfmcc	f0, 4, [r0, #-20]!	; 0xffffffec
 780:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
 784:	0e055902 	vmlaeq.f16	s10, s10, s4	; <UNPREDICTABLE>
 788:	2f090520 	svccs	0x00090520
 78c:	052f0105 	streq	r0, [pc, #-261]!	; 68f <startup-0x1ffff971>
 790:	0705a02a 	streq	sl, [r5, -sl, lsr #32]
 794:	00090567 	andeq	r0, r9, r7, ror #10
 798:	20010402 	andcs	r0, r1, r2, lsl #8
 79c:	02001d05 	andeq	r1, r0, #320	; 0x140
 7a0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 7a4:	04020007 	streq	r0, [r2], #-7
 7a8:	02053c01 	andeq	r3, r5, #256	; 0x100
 7ac:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 7b0:	12053d01 	andne	r3, r5, #1, 26	; 0x40
 7b4:	2f02054c 	svccs	0x0002054c
 7b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 7bc:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 7c0:	053e2005 	ldreq	r2, [lr, #-5]!
 7c4:	053d5902 	ldreq	r5, [sp, #-2306]!	; 0xfffff6fe
 7c8:	10053d1b 	andne	r3, r5, fp, lsl sp
 7cc:	4b04052e 	blmi	101c8c <startup-0x1fefe374>
 7d0:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
 7d4:	01055a02 	tsteq	r5, r2, lsl #20
 7d8:	4c27059f 	cfstr32mi	mvfx0, [r7], #-636	; 0xfffffd84
 7dc:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 7e0:	04020008 	streq	r0, [r2], #-8
 7e4:	1c052001 	stcne	0, cr2, [r5], {1}
 7e8:	01040200 	mrseq	r0, R12_usr
 7ec:	0007053c 	andeq	r0, r7, ip, lsr r5
 7f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 7f4:	3d210205 	sfmcc	f0, 4, [r1, #-20]!	; 0xffffffec
 7f8:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 7fc:	054c2205 	strbeq	r2, [ip, #-517]	; 0xfffffdfb
 800:	05913e07 	ldreq	r3, [r1, #3591]	; 0xe07
 804:	052f6802 	streq	r6, [pc, #-2050]!	; a <startup-0x1ffffff6>
 808:	07054b04 	streq	r4, [r5, -r4, lsl #22]
 80c:	2116052f 	tstcs	r6, pc, lsr #10
 810:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 814:	07054908 	streq	r4, [r5, -r8, lsl #18]
 818:	3102052e 	tstcc	r2, lr, lsr #10
 81c:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
 820:	16052f07 	strne	r2, [r5], -r7, lsl #30
 824:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 828:	05490805 	strbeq	r0, [r9, #-2053]	; 0xfffff7fb
 82c:	09052e07 	stmdbeq	r5, {r0, r1, r2, r9, sl, fp, sp}
 830:	21010531 	tstcs	r1, r1, lsr r5
 834:	14050604 	strne	r0, [r5], #-1540	; 0xfffff9fc
 838:	827f8c03 	rsbshi	r8, pc, #768	; 0x300
 83c:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
 840:	0205200e 	andeq	r2, r5, #14
 844:	2010052f 	andscs	r0, r0, pc, lsr #10
 848:	052f0205 	streq	r0, [pc, #-517]!	; 64b <startup-0x1ffff9b5>
 84c:	02052010 	andeq	r2, r5, #16
 850:	2011052f 	andscs	r0, r1, pc, lsr #10
 854:	052f0105 	streq	r0, [pc, #-261]!	; 757 <startup-0x1ffff8a9>
 858:	05230810 	streq	r0, [r3, #-2064]!	; 0xfffff7f0
 85c:	2f2f3d0a 	svccs	0x002f3d0a
 860:	2f02052f 	svccs	0x0002052f
 864:	08052f2f 	stmdaeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 868:	04053d2f 	streq	r3, [r5], #-3375	; 0xfffff2d1
 86c:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
 870:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 874:	2e03054b 	cfsh32cs	mvfx0, mvfx3, #43
 878:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 87c:	054b2e03 	strbeq	r2, [fp, #-3587]	; 0xfffff1fd
 880:	05593d12 	ldrbeq	r3, [r9, #-3346]	; 0xfffff2ee
 884:	12055906 	andne	r5, r5, #98304	; 0x18000
 888:	2e0c0575 	cfrshl64cs	mvdx12, mvdx5, r0
 88c:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 890:	0c052112 	stfeqs	f2, [r5], {18}
 894:	4a04052e 	bmi	101d54 <startup-0x1fefe2ac>
 898:	05211305 	streq	r1, [r1, #-773]!	; 0xfffffcfb
 89c:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
 8a0:	2203054a 	andcs	r0, r3, #310378496	; 0x12800000
 8a4:	05751305 	ldrbeq	r1, [r5, #-773]!	; 0xfffffcfb
 8a8:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 8ac:	21130558 	tstcs	r3, r8, asr r5
 8b0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 8b4:	14054a04 	strne	r4, [r5], #-2564	; 0xfffff5fc
 8b8:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 8bc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 8c0:	2071030a 	rsbscs	r0, r1, sl, lsl #6
 8c4:	01000802 	tsteq	r0, r2, lsl #16
 8c8:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
 8cc:	02050016 	andeq	r0, r5, #22
 8d0:	20000000 	andcs	r0, r0, r0
 8d4:	05010f03 	streq	r0, [r1, #-3843]	; 0xfffff0fd
 8d8:	21211301 			; <UNDEFINED> instruction: 0x21211301
 8dc:	0302212f 	movweq	r2, #8495	; 0x212f
 8e0:	Address 0x000008e0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	6b007964 	blvs	1e59c <startup-0x1ffe1a64>
   8:	4c627965 			; <UNDEFINED> instruction: 0x4c627965
   c:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
  10:	5f65766f 	svcpl	0x0065766f
  14:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  18:	7000656c 	andvc	r6, r0, ip, ror #10
  1c:	0078736f 	rsbseq	r7, r8, pc, ror #6
  20:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  24:	6164006c 	cmnvs	r4, ip, rrx
  28:	685f6174 	ldmdavs	pc, {r2, r4, r5, r6, r8, sp, lr}^	; <UNPREDICTABLE>
  2c:	65646c6f 	strbvs	r6, [r4, #-3183]!	; 0xfffff391
  30:	6e690072 	mcrvs	0, 3, r0, cr9, cr2, {3}
  34:	00786564 	rsbseq	r6, r8, r4, ror #10
  38:	70617267 	rsbvc	r7, r1, r7, ror #4
  3c:	5f636968 	svcpl	0x00636968
  40:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  44:	61645f65 	cmnvs	r4, r5, ror #30
  48:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
  4c:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; ffffff38 <ball+0xdfffed00>
  50:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  54:	63736100 	cmnvs	r3, #0, 2
  58:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
  5c:	5f6c7274 	svcpl	0x006c7274
  60:	5f746962 	svcpl	0x00746962
  64:	00746573 	rsbseq	r6, r4, r3, ror r5
  68:	6e69616d 	powvsez	f6, f1, #5.0
  6c:	61726700 	cmnvs	r2, r0, lsl #14
  70:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  74:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  78:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  7c:	616d6d6f 	cmnvs	sp, pc, ror #26
  80:	7000646e 	andvc	r6, r0, lr, ror #8
  84:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
  88:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
  8c:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  90:	73007972 	movwvc	r7, #2418	; 0x972
  94:	63656c65 	cmnvs	r5, #25856	; 0x6500
  98:	6f635f74 	svcvs	0x00635f74
  9c:	6f72746e 	svcvs	0x0072746e
  a0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  a4:	45475000 	strbmi	r5, [r7, #-0]
  a8:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  ac:	76005952 			; <UNDEFINED> instruction: 0x76005952
  b0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  b4:	61726700 	cmnvs	r2, r0, lsl #14
  b8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  bc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  c0:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  c4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  c8:	6975006e 	ldmdbvs	r5!, {r1, r2, r3, r5, r6}^
  cc:	5f38746e 	svcpl	0x0038746e
  d0:	73610074 	cmnvc	r1, #116	; 0x74
  d4:	5f696963 	svcpl	0x00696963
  d8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  dc:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  e0:	70007261 	andvc	r7, r0, r1, ror #4
  e4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
  e8:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
  ec:	705f7466 	subsvc	r7, pc, r6, ror #8
  f0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  f4:	61700073 	cmnvs	r0, r3, ror r0
  f8:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
  fc:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 100:	74007468 	strvc	r7, [r0], #-1128	; 0xfffffb98
 104:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
 108:	61726700 	cmnvs	r2, r0, lsl #14
 10c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 110:	6165725f 	cmnvs	r5, pc, asr r2
 114:	4f500064 	svcmi	0x00500064
 118:	00544e49 	subseq	r4, r4, r9, asr #28
 11c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 120:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 124:	73610078 	cmnvc	r1, #120	; 0x78
 128:	5f696963 	svcpl	0x00696963
 12c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 130:	63737265 	cmnvs	r3, #1342177286	; 0x50000006
 134:	5f65726f 	svcpl	0x0065726f
 138:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 13c:	61657200 	cmnvs	r5, r0, lsl #4
 140:	6c6f4364 	stclvs	3, cr4, [pc], #-400	; ffffffb8 <ball+0xdfffed80>
 144:	4c6e6d75 	stclmi	13, cr6, [lr], #-468	; 0xfffffe2c
 148:	7200776f 	andvc	r7, r0, #29097984	; 0x1bc0000
 14c:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 150:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 154:	6769486e 	strbvs	r4, [r9, -lr, ror #16]!
 158:	73610068 	cmnvc	r1, #104	; 0x68
 15c:	5f696963 	svcpl	0x00696963
 160:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 164:	6f635f65 	svcvs	0x00635f65
 168:	6f72746e 	svcvs	0x0072746e
 16c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 170:	67617000 	strbvs	r7, [r1, -r0]!
 174:	72670065 	rsbvc	r0, r7, #101	; 0x65
 178:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 17c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 180:	645f6461 	ldrbvs	r6, [pc], #-1121	; 188 <startup-0x1ffffe78>
 184:	00617461 	rsbeq	r7, r1, r1, ror #8
 188:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
 18c:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
 190:	0078657a 	rsbseq	r6, r8, sl, ror r5
 194:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 198:	73610079 	cmnvc	r1, #121	; 0x79
 19c:	5f696963 	svcpl	0x00696963
 1a0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a4:	00646e61 	rsbeq	r6, r4, r1, ror #28
 1a8:	616c6564 	cmnvs	ip, r4, ror #10
 1ac:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b0:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 1b4:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
 1b8:	6c5f656c 	cfldr64vs	mvdx6, [pc], {108}	; 0x6c
 1bc:	00746665 	rsbseq	r6, r4, r5, ror #12
 1c0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1c4:	61007864 	tstvs	r0, r4, ror #16
 1c8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1cc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1d0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 1d8:	00726165 	rsbseq	r6, r2, r5, ror #2
 1dc:	706d756e 	rsbvc	r7, sp, lr, ror #10
 1e0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1e4:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
 1e8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1ec:	63206465 			; <UNDEFINED> instruction: 0x63206465
 1f0:	00726168 	rsbseq	r6, r2, r8, ror #2
 1f4:	20554e47 	subscs	r4, r5, r7, asr #28
 1f8:	20393943 	eorscs	r3, r9, r3, asr #18
 1fc:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
 200:	30322031 	eorscc	r2, r2, r1, lsr r0
 204:	30313931 	eorscc	r3, r1, r1, lsr r9
 208:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
 20c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 210:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 214:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 218:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
 21c:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
 220:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
 224:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
 228:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 22c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 230:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 234:	205d3939 	subscs	r3, sp, r9, lsr r9
 238:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 23c:	20626d75 	rsbcs	r6, r2, r5, ror sp
 240:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 244:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 248:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 24c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 250:	616d2d20 	cmnvs	sp, r0, lsr #26
 254:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 258:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 25c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 260:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 264:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 268:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 26c:	00393963 	eorseq	r3, r9, r3, ror #18
 270:	65725f78 	ldrbvs	r5, [r2, #-3960]!	; 0xfffff088
 274:	67006c61 	strvs	r6, [r0, -r1, ror #24]
 278:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 27c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 280:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 284:	61726700 	cmnvs	r2, r0, lsl #14
 288:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 28c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 290:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 294:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 298:	00726165 	rsbseq	r6, r2, r5, ror #2
 29c:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 2a0:	7300746e 	movwvc	r7, #1134	; 0x46e
 2a4:	6f5f7465 	svcvs	0x005f7465
 2a8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2ac:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 2b0:	00646565 	rsbeq	r6, r4, r5, ror #10
 2b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2b8:	5f636968 	svcpl	0x00636968
 2bc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2c0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 2c4:	7500657a 	strvc	r6, [r0, #-1402]	; 0xfffffa86
 2c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2d4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2d8:	6a626f5f 	bvs	189c05c <startup-0x1e763fa4>
 2dc:	00746365 	rsbseq	r6, r4, r5, ror #6
 2e0:	616c6564 	cmnvs	ip, r4, ror #10
 2e4:	30355f79 	eorscc	r5, r5, r9, ror pc
 2e8:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 2ec:	616c6564 	cmnvs	ip, r4, ror #10
 2f0:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2f4:	006f726b 	rsbeq	r7, pc, fp, ror #4
 2f8:	68746f62 	ldmdavs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 2fc:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 300:	73610059 	cmnvc	r1, #89	; 0x59
 304:	5f696963 	svcpl	0x00696963
 308:	6f746f67 	svcvs	0x00746f67
 30c:	70007978 	andvc	r7, r0, r8, ror r9
 310:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 314:	6b007468 	blvs	1d4bc <startup-0x1ffe2b44>
 318:	00737965 	rsbseq	r7, r3, r5, ror #18
 31c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 320:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 324:	746f6e00 	strbtvc	r6, [pc], #-3584	; 32c <startup-0x1ffffcd4>
 328:	72670058 	rsbvc	r0, r7, #88	; 0x58
 32c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 330:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 334:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 338:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 33c:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 340:	006a624f 	rsbeq	r6, sl, pc, asr #4
 344:	5f6c5f70 	svcpl	0x006c5f70
 348:	0079656b 	rsbseq	r6, r9, fp, ror #10
 34c:	4b746567 	blmi	1d198f0 <startup-0x1e2e6710>
 350:	61567965 	cmpvs	r6, r5, ror #18
 354:	0065756c 	rsbeq	r7, r5, ip, ror #10
 358:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 35c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 360:	63736100 	cmnvs	r3, #0, 2
 364:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 368:	5f646165 	svcpl	0x00646165
 36c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 370:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 374:	61007265 	tstvs	r0, r5, ror #4
 378:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 37c:	656e0073 	strbvs	r0, [lr, #-115]!	; 0xffffff8d
 380:	61007977 	tstvs	r0, r7, ror r9
 384:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 388:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 38c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 394 <startup-0x1ffffc6c>
 390:	00617461 	rsbeq	r7, r1, r1, ror #8
 394:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 398:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 39c:	4c776f52 	ldclmi	15, cr6, [r7], #-328	; 0xfffffeb8
 3a0:	6400776f 	strvs	r7, [r0], #-1903	; 0xfffff891
 3a4:	00776172 	rsbseq	r6, r7, r2, ror r1
 3a8:	5f746573 	svcpl	0x00746573
 3ac:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3b0:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
 3b4:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 3b8:	6769725f 			; <UNDEFINED> instruction: 0x6769725f
 3bc:	705f7468 	subsvc	r7, pc, r8, ror #8
 3c0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 3c4:	6f630073 	svcvs	0x00630073
 3c8:	73696c6c 	cmnvc	r9, #108, 24	; 0x6c00
 3cc:	5f6e6f69 	svcpl	0x006e6f69
 3d0:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 3d4:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 3d8:	5f70006c 	svcpl	0x0070006c
 3dc:	656b5f72 	strbvs	r5, [fp, #-3954]!	; 0xfffff08e
 3e0:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 3e4:	5f726165 	svcpl	0x00726165
 3e8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3ec:	62007463 	andvs	r7, r0, #1660944384	; 0x63000000
 3f0:	5f6c6c61 	svcpl	0x006c6c61
 3f4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 260 <startup-0x1ffffda0>
 3f8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 3fc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 400:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 404:	736e3035 	cmnvc	lr, #53	; 0x35
 408:	2f3a4300 	svccs	0x003a4300
 40c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 410:	6c6f2f73 	stclvs	15, cr2, [pc], #-460	; 24c <startup-0x1ffffdb4>
 414:	2f73666f 	svccs	0x0073666f
 418:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 41c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 420:	69672f73 	stmdbvs	r7!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 424:	72705f74 	rsbsvc	r5, r0, #116, 30	; 0x1d0
 428:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 42c:	532f7374 			; <UNDEFINED> instruction: 0x532f7374
 430:	6f6f6863 	svcvs	0x006f6863
 434:	6f72506c 	svcvs	0x0072506c
 438:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 43c:	41442f73 	hvcmi	17139	; 0x42f3
 440:	37313054 			; <UNDEFINED> instruction: 0x37313054
 444:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 448:	45573562 	ldrbmi	r3, [r7, #-1378]	; 0xfffffa9e
 44c:	4544495f 	strbmi	r4, [r4, #-2399]	; 0xfffff6a1
 450:	5044475f 	subpl	r4, r4, pc, asr r7
 454:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 458:	2f415052 	svccs	0x00415052
 45c:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
 460:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 464:	00632e67 	rsbeq	r2, r3, r7, ror #28
 468:	6b73616d 	blvs	1cd8a24 <startup-0x1e3275dc>
 46c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 470:	61625f65 	cmnvs	r2, r5, ror #30
 474:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
 478:	31747365 	cmncc	r4, r5, ror #6
 47c:	6c5f7000 	mravs	r7, pc, acc0
 480:	00746665 	rsbseq	r6, r4, r5, ror #12
 484:	70617267 	rsbvc	r7, r1, r7, ror #4
 488:	5f636968 	svcpl	0x00636968
 48c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 490:	6165725f 	cmnvs	r5, pc, asr r2
 494:	63007964 	movwvs	r7, #2404	; 0x964
 498:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 49c:	7361006e 	cmnvc	r1, #110	; 0x6e
 4a0:	5f696963 	svcpl	0x00696963
 4a4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 4ac:	74730061 	ldrbtvc	r0, [r3], #-97	; 0xffffff9f
 4b0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 4b4:	4f500070 	svcmi	0x00500070
 4b8:	43454a42 	movtmi	r4, #23106	; 0x5a42
 4bc:	63610054 	cmnvs	r1, #84	; 0x54
 4c0:	61766974 	cmnvs	r6, r4, ror r9
 4c4:	6f526574 	svcvs	0x00526574
 4c8:	67694877 			; <UNDEFINED> instruction: 0x67694877
 4cc:	3a430068 	bcc	10c0674 <startup-0x1ef3f98c>
 4d0:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 4d4:	6f5c7372 	svcvs	0x005c7372
 4d8:	73666f6c 	cmnvc	r6, #108, 30	; 0x1b0
 4dc:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 4e0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 4e4:	675c7374 			; <UNDEFINED> instruction: 0x675c7374
 4e8:	705f7469 	subsvc	r7, pc, r9, ror #8
 4ec:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 4f0:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 4f4:	6f686353 	svcvs	0x00686353
 4f8:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 4fc:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 500:	445c7374 	ldrbmi	r7, [ip], #-884	; 0xfffffc8c
 504:	31305441 	teqcc	r0, r1, asr #8
 508:	614c5c37 	cmpvs	ip, r7, lsr ip
 50c:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
 510:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
 514:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
 518:	525f5250 	subspl	r5, pc, #80, 4
 51c:	41505254 	cmpmi	r0, r4, asr r2
 520:	6e6f505c 	mcrvs	0, 3, r5, cr15, cr12, {2}
 524:	6f6d0067 	svcvs	0x006d0067
 528:	61006576 	tstvs	r0, r6, ror r5
 52c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 530:	6165725f 	cmnvs	r5, pc, asr r2
 534:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 538:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 53c:	63736100 	cmnvs	r3, #0, 2
 540:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 544:	0074696e 	rsbseq	r6, r4, lr, ror #18
 548:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 54c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 550:	5f657469 	svcpl	0x00657469
 554:	00646d63 	rsbeq	r6, r4, r3, ror #26

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	00000042 	andeq	r0, r0, r2, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000009a 	mulcs	r0, sl, r0
  58:	00000046 	andeq	r0, r0, r6, asr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000f2 	strdcs	r0, [r0], -r2
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000138 	andcs	r0, r0, r8, lsr r1
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000174 	andcs	r0, r0, r4, ror r1
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001d6 	ldrdcs	r0, [r0], -r6
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000024c 	andcs	r0, r0, ip, asr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002dc 	ldrdcs	r0, [r0], -ip
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000035c 	andcs	r0, r0, ip, asr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000039c 	mulcs	r0, ip, r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003e2 	andcs	r0, r0, r2, ror #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	2000040c 	andcs	r0, r0, ip, lsl #8
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000462 	andcs	r0, r0, r2, ror #8
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004ca 	andcs	r0, r0, sl, asr #9
 1f0:	000001ca 	andeq	r0, r0, sl, asr #3
 1f4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 1f8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 1fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 200:	280e4101 	stmdacs	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	20000694 	mulcs	r0, r4, r6
 214:	00000066 	andeq	r0, r0, r6, rrx
 218:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 21c:	41018e02 	tstmi	r1, r2, lsl #28
 220:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 224:	00000007 	andeq	r0, r0, r7
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	200006fa 	strdcs	r0, [r0], -sl
 234:	00000066 	andeq	r0, r0, r6, rrx
 238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 23c:	41018e02 	tstmi	r1, r2, lsl #28
 240:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 244:	00000007 	andeq	r0, r0, r7
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	20000760 	andcs	r0, r0, r0, ror #14
 254:	00000064 	andeq	r0, r0, r4, rrx
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 264:	00000007 	andeq	r0, r0, r7
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	200007c4 	andcs	r0, r0, r4, asr #15
 274:	00000064 	andeq	r0, r0, r4, rrx
 278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 27c:	41018e02 	tstmi	r1, r2, lsl #28
 280:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 284:	00000007 	andeq	r0, r0, r7
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	20000828 	andcs	r0, r0, r8, lsr #16
 294:	00000054 	andeq	r0, r0, r4, asr r0
 298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	00000000 	andeq	r0, r0, r0
 2b0:	2000087c 	andcs	r0, r0, ip, ror r8
 2b4:	00000054 	andeq	r0, r0, r4, asr r0
 2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2bc:	41018e02 	tstmi	r1, r2, lsl #28
 2c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2c4:	00000007 	andeq	r0, r0, r7
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2d4:	00000034 	andeq	r0, r0, r4, lsr r0
 2d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 2dc:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 2e0:	41018e02 	tstmi	r1, r2, lsl #28
 2e4:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2e8:	00000007 	andeq	r0, r0, r7
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000904 	andcs	r0, r0, r4, lsl #18
 2f8:	00000056 	andeq	r0, r0, r6, asr r0
 2fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 300:	41018e02 	tstmi	r1, r2, lsl #28
 304:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 308:	00000007 	andeq	r0, r0, r7
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	2000095a 	andcs	r0, r0, sl, asr r9
 318:	00000056 	andeq	r0, r0, r6, asr r0
 31c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 320:	41018e02 	tstmi	r1, r2, lsl #28
 324:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 328:	00000007 	andeq	r0, r0, r7
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 338:	00000020 	andeq	r0, r0, r0, lsr #32
 33c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 340:	41018e02 	tstmi	r1, r2, lsl #28
 344:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 348:	00000007 	andeq	r0, r0, r7
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 358:	00000100 	andeq	r0, r0, r0, lsl #2
 35c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 360:	41018e02 	tstmi	r1, r2, lsl #28
 364:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 368:	00000007 	andeq	r0, r0, r7
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	20000ad0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 378:	0000006e 	andeq	r0, r0, lr, rrx
 37c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 380:	41018e02 	tstmi	r1, r2, lsl #28
 384:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 388:	00000007 	andeq	r0, r0, r7
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	20000b3e 	andcs	r0, r0, lr, lsr fp
 398:	000000ba 	strheq	r0, [r0], -sl
 39c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a0:	41018e02 	tstmi	r1, r2, lsl #28
 3a4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3a8:	00000007 	andeq	r0, r0, r7
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	20000bf8 	strdcs	r0, [r0], -r8
 3b8:	00000030 	andeq	r0, r0, r0, lsr r0
 3bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c0:	41018e02 	tstmi	r1, r2, lsl #28
 3c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3c8:	00000007 	andeq	r0, r0, r7
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000c28 	andcs	r0, r0, r8, lsr #24
 3d8:	00000048 	andeq	r0, r0, r8, asr #32
 3dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e0:	41018e02 	tstmi	r1, r2, lsl #28
 3e4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e8:	00000007 	andeq	r0, r0, r7
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	20000c70 	andcs	r0, r0, r0, ror ip
 3f8:	0000002a 	andeq	r0, r0, sl, lsr #32
 3fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 400:	41018e02 	tstmi	r1, r2, lsl #28
 404:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 408:	00000007 	andeq	r0, r0, r7
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	20000c9a 	mulcs	r0, sl, ip
 418:	0000002a 	andeq	r0, r0, sl, lsr #32
 41c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 420:	41018e02 	tstmi	r1, r2, lsl #28
 424:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 428:	00000007 	andeq	r0, r0, r7
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	20000cc4 	andcs	r0, r0, r4, asr #25
 438:	00000030 	andeq	r0, r0, r0, lsr r0
 43c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 440:	41018e02 	tstmi	r1, r2, lsl #28
 444:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 448:	00000007 	andeq	r0, r0, r7
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000cf4 	strdcs	r0, [r0], -r4
 458:	00000034 	andeq	r0, r0, r4, lsr r0
 45c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 460:	41018e02 	tstmi	r1, r2, lsl #28
 464:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 468:	00000007 	andeq	r0, r0, r7
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000d28 	andcs	r0, r0, r8, lsr #26
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 480:	41018e02 	tstmi	r1, r2, lsl #28
 484:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 488:	00000007 	andeq	r0, r0, r7
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	20000d68 	andcs	r0, r0, r8, ror #26
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 4a0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	20000da8 	andcs	r0, r0, r8, lsr #27
 4b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 4bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4c0:	41018e02 	tstmi	r1, r2, lsl #28
 4c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c8:	00000007 	andeq	r0, r0, r7
 4cc:	00000018 	andeq	r0, r0, r8, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000de4 	andcs	r0, r0, r4, ror #27
 4d8:	0000002e 	andeq	r0, r0, lr, lsr #32
 4dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4e0:	41018e02 	tstmi	r1, r2, lsl #28
 4e4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	20000e12 	andcs	r0, r0, r2, lsl lr
 4f4:	0000004e 	andeq	r0, r0, lr, asr #32
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 504:	00000007 	andeq	r0, r0, r7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000000 	andeq	r0, r0, r0
 510:	20000e60 	andcs	r0, r0, r0, ror #28
 514:	0000003a 	andeq	r0, r0, sl, lsr r0
 518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 51c:	41018e02 	tstmi	r1, r2, lsl #28
 520:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 524:	00000007 	andeq	r0, r0, r7
 528:	00000020 	andeq	r0, r0, r0, lsr #32
 52c:	00000000 	andeq	r0, r0, r0
 530:	20000e9a 	mulcs	r0, sl, lr
 534:	00000082 	andeq	r0, r0, r2, lsl #1
 538:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 53c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 540:	41018e02 	tstmi	r1, r2, lsl #28
 544:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 548:	00000007 	andeq	r0, r0, r7
 54c:	0000000c 	andeq	r0, r0, ip
 550:	00000000 	andeq	r0, r0, r0
 554:	20000000 	andcs	r0, r0, r0
 558:	0000000c 	andeq	r0, r0, ip
 55c:	00000018 	andeq	r0, r0, r8, lsl r0
 560:	00000000 	andeq	r0, r0, r0
 564:	20000f1c 	andcs	r0, r0, ip, lsl pc
 568:	00000040 	andeq	r0, r0, r0, asr #32
 56c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 570:	41018e02 	tstmi	r1, r2, lsl #28
 574:	0000070d 	andeq	r0, r0, sp, lsl #14
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	00000000 	andeq	r0, r0, r0
 580:	20000f5c 	andcs	r0, r0, ip, asr pc
 584:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 588:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 58c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 590:	280e4101 	stmdacs	lr, {r0, r8, lr}
 594:	00070d41 	andeq	r0, r7, r1, asr #26
 598:	0000000c 	andeq	r0, r0, ip
 59c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5a0:	7c010001 	stcvc	0, cr0, [r1], {1}
 5a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5a8:	0000000c 	andeq	r0, r0, ip
 5ac:	00000598 	muleq	r0, r8, r5
 5b0:	2000104d 	andcs	r1, r0, sp, asr #32
 5b4:	0000010a 	andeq	r0, r0, sl, lsl #2
