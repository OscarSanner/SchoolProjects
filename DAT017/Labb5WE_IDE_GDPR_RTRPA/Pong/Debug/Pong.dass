
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "Startmenu.xbm"


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ){
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f001 f8fa 	bl	200011fc <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}	
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	701a      	strb	r2, [r3, #0]
	*STK_LOAD = 168/4 -1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	701a      	strb	r2, [r3, #0]
	while( (*STK_COUNTFLAG & 0x01) != 0){
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b09      	ldr	r3, [pc, #36]	; (20000054 <delay_250ns+0x44>)
20000030:	781b      	ldrb	r3, [r3, #0]
20000032:	b2db      	uxtb	r3, r3
20000034:	001a      	movs	r2, r3
20000036:	2301      	movs	r3, #1
20000038:	4013      	ands	r3, r2
2000003a:	d1f8      	bne.n	2000002e <delay_250ns+0x1e>
	}
	*STK_CTRL = 0;
2000003c:	4b02      	ldr	r3, [pc, #8]	; (20000048 <delay_250ns+0x38>)
2000003e:	2200      	movs	r2, #0
20000040:	701a      	strb	r2, [r3, #0]
}
20000042:	46c0      	nop			; (mov r8, r8)
20000044:	46bd      	mov	sp, r7
20000046:	bd80      	pop	{r7, pc}
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0
20000054:	e000e012 	and	lr, r0, r2, lsl r0

20000058 <delay_mikro>:

void delay_mikro(unsigned int us){	
20000058:	b580      	push	{r7, lr}
2000005a:	b084      	sub	sp, #16
2000005c:	af00      	add	r7, sp, #0
2000005e:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR 
	us = us/1000;
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	22fa      	movs	r2, #250	; 0xfa
20000064:	0091      	lsls	r1, r2, #2
20000066:	0018      	movs	r0, r3
20000068:	f001 f960 	bl	2000132c <__udivsi3>
2000006c:	0003      	movs	r3, r0
2000006e:	607b      	str	r3, [r7, #4]
	us ++;
20000070:	687b      	ldr	r3, [r7, #4]
20000072:	3301      	adds	r3, #1
20000074:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < 4*us; i++){
20000076:	2300      	movs	r3, #0
20000078:	60fb      	str	r3, [r7, #12]
2000007a:	e004      	b.n	20000086 <delay_mikro+0x2e>
		delay_250ns();
2000007c:	f7ff ffc8 	bl	20000010 <delay_250ns>
	for(int i = 0; i < 4*us; i++){
20000080:	68fb      	ldr	r3, [r7, #12]
20000082:	3301      	adds	r3, #1
20000084:	60fb      	str	r3, [r7, #12]
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	009a      	lsls	r2, r3, #2
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	429a      	cmp	r2, r3
2000008e:	d8f5      	bhi.n	2000007c <delay_mikro+0x24>
	}
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46c0      	nop			; (mov r8, r8)
20000094:	46bd      	mov	sp, r7
20000096:	b004      	add	sp, #16
20000098:	bd80      	pop	{r7, pc}

2000009a <delay_milli>:

void delay_milli(unsigned int ms){
2000009a:	b580      	push	{r7, lr}
2000009c:	b084      	sub	sp, #16
2000009e:	af00      	add	r7, sp, #0
200000a0:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms/1000;
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	22fa      	movs	r2, #250	; 0xfa
200000a6:	0091      	lsls	r1, r2, #2
200000a8:	0018      	movs	r0, r3
200000aa:	f001 f93f 	bl	2000132c <__udivsi3>
200000ae:	0003      	movs	r3, r0
200000b0:	607b      	str	r3, [r7, #4]
		ms ++;
200000b2:	687b      	ldr	r3, [r7, #4]
200000b4:	3301      	adds	r3, #1
200000b6:	607b      	str	r3, [r7, #4]
	#endif
	for(int i = 0; i < ms; i++){
200000b8:	2300      	movs	r3, #0
200000ba:	60fb      	str	r3, [r7, #12]
200000bc:	e007      	b.n	200000ce <delay_milli+0x34>
		delay_mikro(1000);
200000be:	23fa      	movs	r3, #250	; 0xfa
200000c0:	009b      	lsls	r3, r3, #2
200000c2:	0018      	movs	r0, r3
200000c4:	f7ff ffc8 	bl	20000058 <delay_mikro>
	for(int i = 0; i < ms; i++){
200000c8:	68fb      	ldr	r3, [r7, #12]
200000ca:	3301      	adds	r3, #1
200000cc:	60fb      	str	r3, [r7, #12]
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	687a      	ldr	r2, [r7, #4]
200000d2:	429a      	cmp	r2, r3
200000d4:	d8f3      	bhi.n	200000be <delay_milli+0x24>
	}
}
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b004      	add	sp, #16
200000de:	bd80      	pop	{r7, pc}

200000e0 <delay_500ns>:

void delay_500ns(){
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	delay_250ns();
200000e4:	f7ff ff94 	bl	20000010 <delay_250ns>
	delay_250ns();
200000e8:	f7ff ff92 	bl	20000010 <delay_250ns>
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	bd80      	pop	{r7, pc}

200000f2 <graphic_ctrl_bit_set>:
static uint8_t backBuffer[1024]; // 128 * 64 / 8


void graphic_ctrl_bit_set(uint8_t x){
200000f2:	b580      	push	{r7, lr}
200000f4:	b082      	sub	sp, #8
200000f6:	af00      	add	r7, sp, #0
200000f8:	0002      	movs	r2, r0
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	701a      	strb	r2, [r3, #0]
	* portOdrLow |= (x & ~B_SELECT);
200000fe:	4b0d      	ldr	r3, [pc, #52]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000100:	781b      	ldrb	r3, [r3, #0]
20000102:	b2db      	uxtb	r3, r3
20000104:	b25a      	sxtb	r2, r3
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	2104      	movs	r1, #4
2000010e:	438b      	bics	r3, r1
20000110:	b25b      	sxtb	r3, r3
20000112:	4313      	orrs	r3, r2
20000114:	b25a      	sxtb	r2, r3
20000116:	4b07      	ldr	r3, [pc, #28]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000118:	b2d2      	uxtb	r2, r2
2000011a:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~B_SELECT;
2000011c:	4b05      	ldr	r3, [pc, #20]	; (20000134 <graphic_ctrl_bit_set+0x42>)
2000011e:	781b      	ldrb	r3, [r3, #0]
20000120:	b2db      	uxtb	r3, r3
20000122:	4a04      	ldr	r2, [pc, #16]	; (20000134 <graphic_ctrl_bit_set+0x42>)
20000124:	2104      	movs	r1, #4
20000126:	438b      	bics	r3, r1
20000128:	b2db      	uxtb	r3, r3
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	* portOdrLow &= ~(x | B_SELECT);
20000144:	4b0a      	ldr	r3, [pc, #40]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	1dfa      	adds	r2, r7, #7
2000014e:	7812      	ldrb	r2, [r2, #0]
20000150:	2104      	movs	r1, #4
20000152:	430a      	orrs	r2, r1
20000154:	b2d2      	uxtb	r2, r2
20000156:	b252      	sxtb	r2, r2
20000158:	43d2      	mvns	r2, r2
2000015a:	b252      	sxtb	r2, r2
2000015c:	4013      	ands	r3, r2
2000015e:	b25a      	sxtb	r2, r3
20000160:	4b03      	ldr	r3, [pc, #12]	; (20000170 <graphic_ctrl_bit_clear+0x38>)
20000162:	b2d2      	uxtb	r2, r2
20000164:	701a      	strb	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b002      	add	sp, #8
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021014 	andmi	r1, r2, r4, lsl r0

20000174 <select_controller>:

void select_controller(uint8_t controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t both = (int)(B_CS1 & B_CS2);
20000180:	230f      	movs	r3, #15
20000182:	18fb      	adds	r3, r7, r3
20000184:	2200      	movs	r2, #0
20000186:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000188:	1dfb      	adds	r3, r7, #7
2000018a:	781b      	ldrb	r3, [r3, #0]
2000018c:	2b18      	cmp	r3, #24
2000018e:	d01a      	beq.n	200001c6 <select_controller+0x52>
20000190:	dc1d      	bgt.n	200001ce <select_controller+0x5a>
20000192:	2b10      	cmp	r3, #16
20000194:	d010      	beq.n	200001b8 <select_controller+0x44>
20000196:	dc1a      	bgt.n	200001ce <select_controller+0x5a>
20000198:	2b00      	cmp	r3, #0
2000019a:	d002      	beq.n	200001a2 <select_controller+0x2e>
2000019c:	2b08      	cmp	r3, #8
2000019e:	d004      	beq.n	200001aa <select_controller+0x36>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
					graphic_ctrl_bit_set(B_CS1); break;
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
					graphic_ctrl_bit_set(B_CS2); break;
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
		default: return;
200001a0:	e015      	b.n	200001ce <select_controller+0x5a>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200001a2:	2018      	movs	r0, #24
200001a4:	f7ff ffc8 	bl	20000138 <graphic_ctrl_bit_clear>
200001a8:	e012      	b.n	200001d0 <select_controller+0x5c>
		case B_CS1: graphic_ctrl_bit_clear(B_CS2); 
200001aa:	2010      	movs	r0, #16
200001ac:	f7ff ffc4 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS1); break;
200001b0:	2008      	movs	r0, #8
200001b2:	f7ff ff9e 	bl	200000f2 <graphic_ctrl_bit_set>
200001b6:	e00b      	b.n	200001d0 <select_controller+0x5c>
		case B_CS2: graphic_ctrl_bit_clear(B_CS1); 
200001b8:	2008      	movs	r0, #8
200001ba:	f7ff ffbd 	bl	20000138 <graphic_ctrl_bit_clear>
					graphic_ctrl_bit_set(B_CS2); break;
200001be:	2010      	movs	r0, #16
200001c0:	f7ff ff97 	bl	200000f2 <graphic_ctrl_bit_set>
200001c4:	e004      	b.n	200001d0 <select_controller+0x5c>
		case (B_CS1_AND_B_CS2): graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200001c6:	2018      	movs	r0, #24
200001c8:	f7ff ff93 	bl	200000f2 <graphic_ctrl_bit_set>
200001cc:	e000      	b.n	200001d0 <select_controller+0x5c>
		default: return;
200001ce:	46c0      	nop			; (mov r8, r8)
	}
}
200001d0:	46bd      	mov	sp, r7
200001d2:	b004      	add	sp, #16
200001d4:	bd80      	pop	{r7, pc}

200001d6 <graphic_wait_ready>:

void graphic_wait_ready(void){
200001d6:	b580      	push	{r7, lr}
200001d8:	b082      	sub	sp, #8
200001da:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ffab 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
200001e2:	4b16      	ldr	r3, [pc, #88]	; (2000023c <graphic_wait_ready+0x66>)
200001e4:	4a16      	ldr	r2, [pc, #88]	; (20000240 <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RW);
200001e8:	2002      	movs	r0, #2
200001ea:	f7ff ff82 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RS);
200001ee:	2001      	movs	r0, #1
200001f0:	f7ff ffa2 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_500ns();
200001f4:	f7ff ff74 	bl	200000e0 <delay_500ns>
	while(1){
		graphic_ctrl_bit_set(B_E);
200001f8:	2040      	movs	r0, #64	; 0x40
200001fa:	f7ff ff7a 	bl	200000f2 <graphic_ctrl_bit_set>
		delay_500ns();
200001fe:	f7ff ff6f 	bl	200000e0 <delay_500ns>
		uint8_t c = * portIdrHigh & LCD_BUSY;
20000202:	4b10      	ldr	r3, [pc, #64]	; (20000244 <graphic_wait_ready+0x6e>)
20000204:	781b      	ldrb	r3, [r3, #0]
20000206:	b2da      	uxtb	r2, r3
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	217f      	movs	r1, #127	; 0x7f
2000020c:	438a      	bics	r2, r1
2000020e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff91 	bl	20000138 <graphic_ctrl_bit_clear>
		delay_500ns();
20000216:	f7ff ff63 	bl	200000e0 <delay_500ns>
		if(c == 0){
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	2b00      	cmp	r3, #0
20000220:	d000      	beq.n	20000224 <graphic_wait_ready+0x4e>
	while(1){
20000222:	e7e9      	b.n	200001f8 <graphic_wait_ready+0x22>
			break;
20000224:	46c0      	nop			; (mov r8, r8)
		}
	}
	graphic_ctrl_bit_set(B_E);
20000226:	2040      	movs	r0, #64	; 0x40
20000228:	f7ff ff63 	bl	200000f2 <graphic_ctrl_bit_set>
	* portModer = 0x55555555;
2000022c:	4b03      	ldr	r3, [pc, #12]	; (2000023c <graphic_wait_ready+0x66>)
2000022e:	4a06      	ldr	r2, [pc, #24]	; (20000248 <graphic_wait_ready+0x72>)
20000230:	601a      	str	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}
2000023a:	46c0      	nop			; (mov r8, r8)
2000023c:	40021000 	andmi	r1, r2, r0
20000240:	00005555 	andeq	r5, r0, r5, asr r5
20000244:	40021011 	andmi	r1, r2, r1, lsl r0
20000248:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000024c <graphic_read>:

uint8_t graphic_read(uint8_t controller){
2000024c:	b580      	push	{r7, lr}
2000024e:	b084      	sub	sp, #16
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff6d 	bl	20000138 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;
2000025e:	4b1b      	ldr	r3, [pc, #108]	; (200002cc <graphic_read+0x80>)
20000260:	4a1b      	ldr	r2, [pc, #108]	; (200002d0 <graphic_read+0x84>)
20000262:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000264:	2003      	movs	r0, #3
20000266:	f7ff ff44 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(controller);
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	0018      	movs	r0, r3
20000270:	f7ff ff80 	bl	20000174 <select_controller>
	delay_500ns();
20000274:	f7ff ff34 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000278:	2040      	movs	r0, #64	; 0x40
2000027a:	f7ff ff3a 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000027e:	f7ff ff2f 	bl	200000e0 <delay_500ns>
	uint8_t rv = * portIdrHigh;
20000282:	4a14      	ldr	r2, [pc, #80]	; (200002d4 <graphic_read+0x88>)
20000284:	230f      	movs	r3, #15
20000286:	18fb      	adds	r3, r7, r3
20000288:	7812      	ldrb	r2, [r2, #0]
2000028a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000028c:	2040      	movs	r0, #64	; 0x40
2000028e:	f7ff ff53 	bl	20000138 <graphic_ctrl_bit_clear>
	* portModer = 0x55555555;				//VARFÖR ÄR DETTA VIKTIGT???
20000292:	4b0e      	ldr	r3, [pc, #56]	; (200002cc <graphic_read+0x80>)
20000294:	4a10      	ldr	r2, [pc, #64]	; (200002d8 <graphic_read+0x8c>)
20000296:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000298:	1dfb      	adds	r3, r7, #7
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	2b08      	cmp	r3, #8
2000029e:	d104      	bne.n	200002aa <graphic_read+0x5e>
		select_controller(B_CS1);
200002a0:	2008      	movs	r0, #8
200002a2:	f7ff ff67 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002a6:	f7ff ff96 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller == B_CS2){
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	2b10      	cmp	r3, #16
200002b0:	d104      	bne.n	200002bc <graphic_read+0x70>
		select_controller(B_CS2);
200002b2:	2010      	movs	r0, #16
200002b4:	f7ff ff5e 	bl	20000174 <select_controller>
		graphic_wait_ready();
200002b8:	f7ff ff8d 	bl	200001d6 <graphic_wait_ready>
	}
	return rv;
200002bc:	230f      	movs	r3, #15
200002be:	18fb      	adds	r3, r7, r3
200002c0:	781b      	ldrb	r3, [r3, #0]
}
200002c2:	0018      	movs	r0, r3
200002c4:	46bd      	mov	sp, r7
200002c6:	b004      	add	sp, #16
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	40021000 	andmi	r1, r2, r0
200002d0:	00005555 	andeq	r5, r0, r5, asr r5
200002d4:	40021011 	andmi	r1, r2, r1, lsl r0
200002d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002dc <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200002dc:	b580      	push	{r7, lr}
200002de:	b082      	sub	sp, #8
200002e0:	af00      	add	r7, sp, #0
200002e2:	0002      	movs	r2, r0
200002e4:	1dfb      	adds	r3, r7, #7
200002e6:	701a      	strb	r2, [r3, #0]
200002e8:	1dbb      	adds	r3, r7, #6
200002ea:	1c0a      	adds	r2, r1, #0
200002ec:	701a      	strb	r2, [r3, #0]
	* portOdrHigh = value;
200002ee:	4a1a      	ldr	r2, [pc, #104]	; (20000358 <graphic_write+0x7c>)
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	0018      	movs	r0, r3
200002fc:	f7ff ff3a 	bl	20000174 <select_controller>
	delay_500ns();
20000300:	f7ff feee 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000304:	2040      	movs	r0, #64	; 0x40
20000306:	f7ff fef4 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_500ns();
2000030a:	f7ff fee9 	bl	200000e0 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
2000030e:	2040      	movs	r0, #64	; 0x40
20000310:	f7ff ff12 	bl	20000138 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1){
20000314:	1dbb      	adds	r3, r7, #6
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2208      	movs	r2, #8
2000031a:	4013      	ands	r3, r2
2000031c:	d004      	beq.n	20000328 <graphic_write+0x4c>
		select_controller(B_CS1);
2000031e:	2008      	movs	r0, #8
20000320:	f7ff ff28 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000324:	f7ff ff57 	bl	200001d6 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000328:	1dbb      	adds	r3, r7, #6
2000032a:	781b      	ldrb	r3, [r3, #0]
2000032c:	2210      	movs	r2, #16
2000032e:	4013      	ands	r3, r2
20000330:	d004      	beq.n	2000033c <graphic_write+0x60>
		select_controller(B_CS2);
20000332:	2010      	movs	r0, #16
20000334:	f7ff ff1e 	bl	20000174 <select_controller>
		graphic_wait_ready();
20000338:	f7ff ff4d 	bl	200001d6 <graphic_wait_ready>
	}
	*portOdrHigh = 0;
2000033c:	4b06      	ldr	r3, [pc, #24]	; (20000358 <graphic_write+0x7c>)
2000033e:	2200      	movs	r2, #0
20000340:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
20000342:	2040      	movs	r0, #64	; 0x40
20000344:	f7ff fed5 	bl	200000f2 <graphic_ctrl_bit_set>
	select_controller(0);
20000348:	2000      	movs	r0, #0
2000034a:	f7ff ff13 	bl	20000174 <select_controller>
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fee2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fefb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000037e:	2003      	movs	r0, #3
20000380:	f7ff feda 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781a      	ldrb	r2, [r3, #0]
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	0011      	movs	r1, r2
2000038e:	0018      	movs	r0, r3
20000390:	f7ff ffa4 	bl	200002dc <graphic_write>
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	b002      	add	sp, #8
2000039a:	bd80      	pop	{r7, pc}

2000039c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000039c:	b580      	push	{r7, lr}
2000039e:	b082      	sub	sp, #8
200003a0:	af00      	add	r7, sp, #0
200003a2:	0002      	movs	r2, r0
200003a4:	1dfb      	adds	r3, r7, #7
200003a6:	701a      	strb	r2, [r3, #0]
200003a8:	1dbb      	adds	r3, r7, #6
200003aa:	1c0a      	adds	r2, r1, #0
200003ac:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200003ae:	2040      	movs	r0, #64	; 0x40
200003b0:	f7ff fec2 	bl	20000138 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003b4:	1dbb      	adds	r3, r7, #6
200003b6:	781b      	ldrb	r3, [r3, #0]
200003b8:	0018      	movs	r0, r3
200003ba:	f7ff fedb 	bl	20000174 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003be:	2001      	movs	r0, #1
200003c0:	f7ff fe97 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003c4:	2002      	movs	r0, #2
200003c6:	f7ff feb7 	bl	20000138 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dfb      	adds	r3, r7, #7
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0011      	movs	r1, r2
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff ff81 	bl	200002dc <graphic_write>
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_read_data>:

uint8_t graphic_read_data(uint8_t controller){
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
200003e8:	0002      	movs	r2, r0
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003ee:	1dfb      	adds	r3, r7, #7
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	0018      	movs	r0, r3
200003f4:	f7ff ff2a 	bl	2000024c <graphic_read>
	return graphic_read(controller);
200003f8:	1dfb      	adds	r3, r7, #7
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	0018      	movs	r0, r3
200003fe:	f7ff ff25 	bl	2000024c <graphic_read>
20000402:	0003      	movs	r3, r0
}
20000404:	0018      	movs	r0, r3
20000406:	46bd      	mov	sp, r7
20000408:	b002      	add	sp, #8
2000040a:	bd80      	pop	{r7, pc}

2000040c <graphic_initialize>:

void graphic_initialize(){
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe6e 	bl	200000f2 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000416:	200a      	movs	r0, #10
20000418:	f7ff fe1e 	bl	20000058 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000041c:	2078      	movs	r0, #120	; 0x78
2000041e:	f7ff fe8b 	bl	20000138 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000422:	201e      	movs	r0, #30
20000424:	f7ff fe39 	bl	2000009a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000428:	2020      	movs	r0, #32
2000042a:	f7ff fe62 	bl	200000f2 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000042e:	2118      	movs	r1, #24
20000430:	203e      	movs	r0, #62	; 0x3e
20000432:	f7ff ff93 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000436:	2118      	movs	r1, #24
20000438:	203f      	movs	r0, #63	; 0x3f
2000043a:	f7ff ff8f 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
2000043e:	2118      	movs	r1, #24
20000440:	20c0      	movs	r0, #192	; 0xc0
20000442:	f7ff ff8b 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000446:	2118      	movs	r1, #24
20000448:	2040      	movs	r0, #64	; 0x40
2000044a:	f7ff ff87 	bl	2000035c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000044e:	2118      	movs	r1, #24
20000450:	20b8      	movs	r0, #184	; 0xb8
20000452:	f7ff ff83 	bl	2000035c <graphic_write_command>
	select_controller(0);
20000456:	2000      	movs	r0, #0
20000458:	f7ff fe8c 	bl	20000174 <select_controller>
}
2000045c:	46c0      	nop			; (mov r8, r8)
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}

20000462 <graphic_clear_screen>:

void graphic_clear_screen(){
20000462:	b580      	push	{r7, lr}
20000464:	b082      	sub	sp, #8
20000466:	af00      	add	r7, sp, #0
	for (uint8_t page = 0; page < 8; page++){
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	2200      	movs	r2, #0
2000046c:	701a      	strb	r2, [r3, #0]
2000046e:	e023      	b.n	200004b8 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000470:	1dfb      	adds	r3, r7, #7
20000472:	781b      	ldrb	r3, [r3, #0]
20000474:	2248      	movs	r2, #72	; 0x48
20000476:	4252      	negs	r2, r2
20000478:	4313      	orrs	r3, r2
2000047a:	b2db      	uxtb	r3, r3
2000047c:	2118      	movs	r1, #24
2000047e:	0018      	movs	r0, r3
20000480:	f7ff ff6c 	bl	2000035c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000484:	2118      	movs	r1, #24
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff ff68 	bl	2000035c <graphic_write_command>
		for(uint8_t add = 0; add < 64; add++){
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	2200      	movs	r2, #0
20000490:	701a      	strb	r2, [r3, #0]
20000492:	e008      	b.n	200004a6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1 | B_CS2);
20000494:	2118      	movs	r1, #24
20000496:	2000      	movs	r0, #0
20000498:	f7ff ff80 	bl	2000039c <graphic_write_data>
		for(uint8_t add = 0; add < 64; add++){
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dbb      	adds	r3, r7, #6
200004a2:	3201      	adds	r2, #1
200004a4:	701a      	strb	r2, [r3, #0]
200004a6:	1dbb      	adds	r3, r7, #6
200004a8:	781b      	ldrb	r3, [r3, #0]
200004aa:	2b3f      	cmp	r3, #63	; 0x3f
200004ac:	d9f2      	bls.n	20000494 <graphic_clear_screen+0x32>
	for (uint8_t page = 0; page < 8; page++){
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781a      	ldrb	r2, [r3, #0]
200004b2:	1dfb      	adds	r3, r7, #7
200004b4:	3201      	adds	r2, #1
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	1dfb      	adds	r3, r7, #7
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	2b07      	cmp	r3, #7
200004be:	d9d7      	bls.n	20000470 <graphic_clear_screen+0xe>
		}
	}
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46c0      	nop			; (mov r8, r8)
200004c4:	46bd      	mov	sp, r7
200004c6:	b002      	add	sp, #8
200004c8:	bd80      	pop	{r7, pc}

200004ca <pixel>:
	graphic_write_data(mask, controller);
}
#endif

#ifndef OLD_PIXEL
void pixel(int x, int y, int set) {
200004ca:	b580      	push	{r7, lr}
200004cc:	b086      	sub	sp, #24
200004ce:	af00      	add	r7, sp, #0
200004d0:	60f8      	str	r0, [r7, #12]
200004d2:	60b9      	str	r1, [r7, #8]
200004d4:	607a      	str	r2, [r7, #4]
	uint8_t mask;
	int index = 0;
200004d6:	2300      	movs	r3, #0
200004d8:	617b      	str	r3, [r7, #20]
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
200004da:	68fb      	ldr	r3, [r7, #12]
200004dc:	2b80      	cmp	r3, #128	; 0x80
200004de:	dc3d      	bgt.n	2000055c <pixel+0x92>
200004e0:	68fb      	ldr	r3, [r7, #12]
200004e2:	2b00      	cmp	r3, #0
200004e4:	dd3a      	ble.n	2000055c <pixel+0x92>
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	2b40      	cmp	r3, #64	; 0x40
200004ea:	dc37      	bgt.n	2000055c <pixel+0x92>
200004ec:	68bb      	ldr	r3, [r7, #8]
200004ee:	2b00      	cmp	r3, #0
200004f0:	dd34      	ble.n	2000055c <pixel+0x92>
		mask = 1 << ((y-1)%8);
200004f2:	68bb      	ldr	r3, [r7, #8]
200004f4:	3b01      	subs	r3, #1
200004f6:	4a1b      	ldr	r2, [pc, #108]	; (20000564 <pixel+0x9a>)
200004f8:	4013      	ands	r3, r2
200004fa:	d504      	bpl.n	20000506 <pixel+0x3c>
200004fc:	3b01      	subs	r3, #1
200004fe:	2208      	movs	r2, #8
20000500:	4252      	negs	r2, r2
20000502:	4313      	orrs	r3, r2
20000504:	3301      	adds	r3, #1
20000506:	001a      	movs	r2, r3
20000508:	2301      	movs	r3, #1
2000050a:	4093      	lsls	r3, r2
2000050c:	001a      	movs	r2, r3
2000050e:	2313      	movs	r3, #19
20000510:	18fb      	adds	r3, r7, r3
20000512:	701a      	strb	r2, [r3, #0]
	if(x > 64) {
20000514:	68fb      	ldr	r3, [r7, #12]
20000516:	2b40      	cmp	r3, #64	; 0x40
20000518:	dd05      	ble.n	20000526 <pixel+0x5c>
		x -= 65;
2000051a:	68fb      	ldr	r3, [r7, #12]
2000051c:	3b41      	subs	r3, #65	; 0x41
2000051e:	60fb      	str	r3, [r7, #12]
		index = 512;
20000520:	2380      	movs	r3, #128	; 0x80
20000522:	009b      	lsls	r3, r3, #2
20000524:	617b      	str	r3, [r7, #20]
	}
	index += x + ((y-1)/8)*64;
20000526:	68bb      	ldr	r3, [r7, #8]
20000528:	3b01      	subs	r3, #1
2000052a:	2b00      	cmp	r3, #0
2000052c:	da00      	bge.n	20000530 <pixel+0x66>
2000052e:	3307      	adds	r3, #7
20000530:	10db      	asrs	r3, r3, #3
20000532:	019a      	lsls	r2, r3, #6
20000534:	68fb      	ldr	r3, [r7, #12]
20000536:	18d3      	adds	r3, r2, r3
20000538:	697a      	ldr	r2, [r7, #20]
2000053a:	18d3      	adds	r3, r2, r3
2000053c:	617b      	str	r3, [r7, #20]
	backBuffer[index] |= mask;
2000053e:	4a0a      	ldr	r2, [pc, #40]	; (20000568 <pixel+0x9e>)
20000540:	697b      	ldr	r3, [r7, #20]
20000542:	18d3      	adds	r3, r2, r3
20000544:	781a      	ldrb	r2, [r3, #0]
20000546:	2313      	movs	r3, #19
20000548:	18fb      	adds	r3, r7, r3
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	4313      	orrs	r3, r2
2000054e:	b2d9      	uxtb	r1, r3
20000550:	4a05      	ldr	r2, [pc, #20]	; (20000568 <pixel+0x9e>)
20000552:	697b      	ldr	r3, [r7, #20]
20000554:	18d3      	adds	r3, r2, r3
20000556:	1c0a      	adds	r2, r1, #0
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	e000      	b.n	2000055e <pixel+0x94>
	if( (x > 128 ) || (x < 1) || (y > 64) || (y < 1) ) return;
2000055c:	46c0      	nop			; (mov r8, r8)
}
2000055e:	46bd      	mov	sp, r7
20000560:	b006      	add	sp, #24
20000562:	bd80      	pop	{r7, pc}
20000564:	80000007 	andhi	r0, r0, r7
20000568:	20001444 	andcs	r1, r0, r4, asr #8

2000056c <graphic_draw_screen>:

void graphic_draw_screen(void) {
2000056c:	b580      	push	{r7, lr}
2000056e:	b084      	sub	sp, #16
20000570:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000572:	2300      	movs	r3, #0
20000574:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
20000576:	230d      	movs	r3, #13
20000578:	18fb      	adds	r3, r7, r3
2000057a:	2200      	movs	r2, #0
2000057c:	701a      	strb	r2, [r3, #0]
2000057e:	e04f      	b.n	20000620 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000580:	230d      	movs	r3, #13
20000582:	18fb      	adds	r3, r7, r3
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	2b00      	cmp	r3, #0
20000588:	d101      	bne.n	2000058e <graphic_draw_screen+0x22>
2000058a:	2208      	movs	r2, #8
2000058c:	e000      	b.n	20000590 <graphic_draw_screen+0x24>
2000058e:	2210      	movs	r2, #16
20000590:	1dfb      	adds	r3, r7, #7
20000592:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000594:	230e      	movs	r3, #14
20000596:	18fb      	adds	r3, r7, r3
20000598:	2200      	movs	r2, #0
2000059a:	701a      	strb	r2, [r3, #0]
2000059c:	e035      	b.n	2000060a <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
2000059e:	230e      	movs	r3, #14
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	2248      	movs	r2, #72	; 0x48
200005a6:	4252      	negs	r2, r2
200005a8:	4313      	orrs	r3, r2
200005aa:	b2da      	uxtb	r2, r3
200005ac:	1dfb      	adds	r3, r7, #7
200005ae:	781b      	ldrb	r3, [r3, #0]
200005b0:	0019      	movs	r1, r3
200005b2:	0010      	movs	r0, r2
200005b4:	f7ff fed2 	bl	2000035c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	0019      	movs	r1, r3
200005be:	2040      	movs	r0, #64	; 0x40
200005c0:	f7ff fecc 	bl	2000035c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
200005c4:	230f      	movs	r3, #15
200005c6:	18fb      	adds	r3, r7, r3
200005c8:	2200      	movs	r2, #0
200005ca:	701a      	strb	r2, [r3, #0]
200005cc:	e012      	b.n	200005f4 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
200005ce:	4a19      	ldr	r2, [pc, #100]	; (20000634 <graphic_draw_screen+0xc8>)
200005d0:	68bb      	ldr	r3, [r7, #8]
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	781a      	ldrb	r2, [r3, #0]
200005d6:	1dfb      	adds	r3, r7, #7
200005d8:	781b      	ldrb	r3, [r3, #0]
200005da:	0019      	movs	r1, r3
200005dc:	0010      	movs	r0, r2
200005de:	f7ff fedd 	bl	2000039c <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
200005e2:	210f      	movs	r1, #15
200005e4:	187b      	adds	r3, r7, r1
200005e6:	781a      	ldrb	r2, [r3, #0]
200005e8:	187b      	adds	r3, r7, r1
200005ea:	3201      	adds	r2, #1
200005ec:	701a      	strb	r2, [r3, #0]
200005ee:	68bb      	ldr	r3, [r7, #8]
200005f0:	3301      	adds	r3, #1
200005f2:	60bb      	str	r3, [r7, #8]
200005f4:	230f      	movs	r3, #15
200005f6:	18fb      	adds	r3, r7, r3
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2b3f      	cmp	r3, #63	; 0x3f
200005fc:	d9e7      	bls.n	200005ce <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
200005fe:	210e      	movs	r1, #14
20000600:	187b      	adds	r3, r7, r1
20000602:	781a      	ldrb	r2, [r3, #0]
20000604:	187b      	adds	r3, r7, r1
20000606:	3201      	adds	r2, #1
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	230e      	movs	r3, #14
2000060c:	18fb      	adds	r3, r7, r3
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	2b07      	cmp	r3, #7
20000612:	d9c4      	bls.n	2000059e <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
20000614:	210d      	movs	r1, #13
20000616:	187b      	adds	r3, r7, r1
20000618:	781a      	ldrb	r2, [r3, #0]
2000061a:	187b      	adds	r3, r7, r1
2000061c:	3201      	adds	r2, #1
2000061e:	701a      	strb	r2, [r3, #0]
20000620:	230d      	movs	r3, #13
20000622:	18fb      	adds	r3, r7, r3
20000624:	781b      	ldrb	r3, [r3, #0]
20000626:	2b01      	cmp	r3, #1
20000628:	d9aa      	bls.n	20000580 <graphic_draw_screen+0x14>
			}
		}
	}
}
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46c0      	nop			; (mov r8, r8)
2000062e:	46bd      	mov	sp, r7
20000630:	b004      	add	sp, #16
20000632:	bd80      	pop	{r7, pc}
20000634:	20001444 	andcs	r1, r0, r4, asr #8

20000638 <draw_object>:

#endif


void draw_object(POBJECT o){
20000638:	b580      	push	{r7, lr}
2000063a:	b084      	sub	sp, #16
2000063c:	af00      	add	r7, sp, #0
2000063e:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints +0; t++){
20000640:	2300      	movs	r3, #0
20000642:	60fb      	str	r3, [r7, #12]
20000644:	e01e      	b.n	20000684 <draw_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 1);
20000646:	687b      	ldr	r3, [r7, #4]
20000648:	681a      	ldr	r2, [r3, #0]
2000064a:	68fb      	ldr	r3, [r7, #12]
2000064c:	3304      	adds	r3, #4
2000064e:	005b      	lsls	r3, r3, #1
20000650:	18d3      	adds	r3, r2, r3
20000652:	3304      	adds	r3, #4
20000654:	781b      	ldrb	r3, [r3, #0]
20000656:	001a      	movs	r2, r3
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	68db      	ldr	r3, [r3, #12]
2000065c:	18d0      	adds	r0, r2, r3
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	681a      	ldr	r2, [r3, #0]
20000662:	68fb      	ldr	r3, [r7, #12]
20000664:	3304      	adds	r3, #4
20000666:	005b      	lsls	r3, r3, #1
20000668:	18d3      	adds	r3, r2, r3
2000066a:	3305      	adds	r3, #5
2000066c:	781b      	ldrb	r3, [r3, #0]
2000066e:	001a      	movs	r2, r3
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	691b      	ldr	r3, [r3, #16]
20000674:	18d3      	adds	r3, r2, r3
20000676:	2201      	movs	r2, #1
20000678:	0019      	movs	r1, r3
2000067a:	f7ff ff26 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints +0; t++){
2000067e:	68fb      	ldr	r3, [r7, #12]
20000680:	3301      	adds	r3, #1
20000682:	60fb      	str	r3, [r7, #12]
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	681b      	ldr	r3, [r3, #0]
20000688:	681b      	ldr	r3, [r3, #0]
2000068a:	68fa      	ldr	r2, [r7, #12]
2000068c:	429a      	cmp	r2, r3
2000068e:	dbda      	blt.n	20000646 <draw_object+0xe>
	}
}
20000690:	46c0      	nop			; (mov r8, r8)
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b004      	add	sp, #16
20000698:	bd80      	pop	{r7, pc}

2000069a <clear_object>:

void clear_object(POBJECT o){
2000069a:	b580      	push	{r7, lr}
2000069c:	b084      	sub	sp, #16
2000069e:	af00      	add	r7, sp, #0
200006a0:	6078      	str	r0, [r7, #4]
	for(int t = 0; t < o->geo->numpoints; t++){
200006a2:	2300      	movs	r3, #0
200006a4:	60fb      	str	r3, [r7, #12]
200006a6:	e01e      	b.n	200006e6 <clear_object+0x4c>
		pixel(o->geo->px[t].x + o->posx, o->geo->px[t].y + o->posy, 0);
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	681a      	ldr	r2, [r3, #0]
200006ac:	68fb      	ldr	r3, [r7, #12]
200006ae:	3304      	adds	r3, #4
200006b0:	005b      	lsls	r3, r3, #1
200006b2:	18d3      	adds	r3, r2, r3
200006b4:	3304      	adds	r3, #4
200006b6:	781b      	ldrb	r3, [r3, #0]
200006b8:	001a      	movs	r2, r3
200006ba:	687b      	ldr	r3, [r7, #4]
200006bc:	68db      	ldr	r3, [r3, #12]
200006be:	18d0      	adds	r0, r2, r3
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	681a      	ldr	r2, [r3, #0]
200006c4:	68fb      	ldr	r3, [r7, #12]
200006c6:	3304      	adds	r3, #4
200006c8:	005b      	lsls	r3, r3, #1
200006ca:	18d3      	adds	r3, r2, r3
200006cc:	3305      	adds	r3, #5
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	001a      	movs	r2, r3
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	691b      	ldr	r3, [r3, #16]
200006d6:	18d3      	adds	r3, r2, r3
200006d8:	2200      	movs	r2, #0
200006da:	0019      	movs	r1, r3
200006dc:	f7ff fef5 	bl	200004ca <pixel>
	for(int t = 0; t < o->geo->numpoints; t++){
200006e0:	68fb      	ldr	r3, [r7, #12]
200006e2:	3301      	adds	r3, #1
200006e4:	60fb      	str	r3, [r7, #12]
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	681b      	ldr	r3, [r3, #0]
200006ec:	68fa      	ldr	r2, [r7, #12]
200006ee:	429a      	cmp	r2, r3
200006f0:	dbda      	blt.n	200006a8 <clear_object+0xe>
	}
	

}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	46bd      	mov	sp, r7
200006f8:	b004      	add	sp, #16
200006fa:	bd80      	pop	{r7, pc}

200006fc <clear_backBuffer>:

void clear_backBuffer() {
200006fc:	b580      	push	{r7, lr}
200006fe:	b082      	sub	sp, #8
20000700:	af00      	add	r7, sp, #0
int i;
for (i = 0; i < 1024; i++)
20000702:	2300      	movs	r3, #0
20000704:	607b      	str	r3, [r7, #4]
20000706:	e007      	b.n	20000718 <clear_backBuffer+0x1c>
backBuffer[i] = 0;
20000708:	4a08      	ldr	r2, [pc, #32]	; (2000072c <clear_backBuffer+0x30>)
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	18d3      	adds	r3, r2, r3
2000070e:	2200      	movs	r2, #0
20000710:	701a      	strb	r2, [r3, #0]
for (i = 0; i < 1024; i++)
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	3301      	adds	r3, #1
20000716:	607b      	str	r3, [r7, #4]
20000718:	687a      	ldr	r2, [r7, #4]
2000071a:	2380      	movs	r3, #128	; 0x80
2000071c:	00db      	lsls	r3, r3, #3
2000071e:	429a      	cmp	r2, r3
20000720:	dbf2      	blt.n	20000708 <clear_backBuffer+0xc>
}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	46c0      	nop			; (mov r8, r8)
20000726:	46bd      	mov	sp, r7
20000728:	b002      	add	sp, #8
2000072a:	bd80      	pop	{r7, pc}
2000072c:	20001444 	andcs	r1, r0, r4, asr #8

20000730 <load_sprite>:
	unsigned char width;
	unsigned char height;
	unsigned char* data;
} sprite;

static void load_sprite(sprite* s, unsigned char* data, int width, int height){
20000730:	b580      	push	{r7, lr}
20000732:	b084      	sub	sp, #16
20000734:	af00      	add	r7, sp, #0
20000736:	60f8      	str	r0, [r7, #12]
20000738:	60b9      	str	r1, [r7, #8]
2000073a:	607a      	str	r2, [r7, #4]
2000073c:	603b      	str	r3, [r7, #0]
	s->width = width;
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	b2da      	uxtb	r2, r3
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	701a      	strb	r2, [r3, #0]
	s->height = height;
20000746:	683b      	ldr	r3, [r7, #0]
20000748:	b2da      	uxtb	r2, r3
2000074a:	68fb      	ldr	r3, [r7, #12]
2000074c:	705a      	strb	r2, [r3, #1]
	s->data = data;
2000074e:	68fb      	ldr	r3, [r7, #12]
20000750:	68ba      	ldr	r2, [r7, #8]
20000752:	605a      	str	r2, [r3, #4]
}
20000754:	46c0      	nop			; (mov r8, r8)
20000756:	46bd      	mov	sp, r7
20000758:	b004      	add	sp, #16
2000075a:	bd80      	pop	{r7, pc}

2000075c <draw_sprite>:

void draw_sprite(sprite* s, int x, int y, int set) {
2000075c:	b580      	push	{r7, lr}
2000075e:	b08a      	sub	sp, #40	; 0x28
20000760:	af00      	add	r7, sp, #0
20000762:	60f8      	str	r0, [r7, #12]
20000764:	60b9      	str	r1, [r7, #8]
20000766:	607a      	str	r2, [r7, #4]
20000768:	603b      	str	r3, [r7, #0]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
2000076a:	68fb      	ldr	r3, [r7, #12]
2000076c:	781b      	ldrb	r3, [r3, #0]
2000076e:	2207      	movs	r2, #7
20000770:	4013      	ands	r3, r2
20000772:	b2db      	uxtb	r3, r3
20000774:	2b00      	cmp	r3, #0
20000776:	d105      	bne.n	20000784 <draw_sprite+0x28>
		width_in_bytes = s->width / 8;
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	781b      	ldrb	r3, [r3, #0]
2000077c:	08db      	lsrs	r3, r3, #3
2000077e:	b2db      	uxtb	r3, r3
20000780:	61bb      	str	r3, [r7, #24]
20000782:	e005      	b.n	20000790 <draw_sprite+0x34>
	else
		width_in_bytes = s->width / 8 + 1;
20000784:	68fb      	ldr	r3, [r7, #12]
20000786:	781b      	ldrb	r3, [r3, #0]
20000788:	08db      	lsrs	r3, r3, #3
2000078a:	b2db      	uxtb	r3, r3
2000078c:	3301      	adds	r3, #1
2000078e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++){
20000790:	2300      	movs	r3, #0
20000792:	627b      	str	r3, [r7, #36]	; 0x24
20000794:	e039      	b.n	2000080a <draw_sprite+0xae>
		for (j = 0; j < width_in_bytes; j++) {
20000796:	2300      	movs	r3, #0
20000798:	623b      	str	r3, [r7, #32]
2000079a:	e02f      	b.n	200007fc <draw_sprite+0xa0>
			unsigned char byte = s->data[i * width_in_bytes + j];
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	685b      	ldr	r3, [r3, #4]
200007a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007a2:	69b9      	ldr	r1, [r7, #24]
200007a4:	4351      	muls	r1, r2
200007a6:	6a3a      	ldr	r2, [r7, #32]
200007a8:	188a      	adds	r2, r1, r2
200007aa:	189a      	adds	r2, r3, r2
200007ac:	2317      	movs	r3, #23
200007ae:	18fb      	adds	r3, r7, r3
200007b0:	7812      	ldrb	r2, [r2, #0]
200007b2:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
200007b4:	2300      	movs	r3, #0
200007b6:	61fb      	str	r3, [r7, #28]
200007b8:	e01a      	b.n	200007f0 <draw_sprite+0x94>
				if (byte & (1 << k))
200007ba:	2317      	movs	r3, #23
200007bc:	18fb      	adds	r3, r7, r3
200007be:	781a      	ldrb	r2, [r3, #0]
200007c0:	69fb      	ldr	r3, [r7, #28]
200007c2:	411a      	asrs	r2, r3
200007c4:	0013      	movs	r3, r2
200007c6:	2201      	movs	r2, #1
200007c8:	4013      	ands	r3, r2
200007ca:	d00e      	beq.n	200007ea <draw_sprite+0x8e>
					pixel(8 * j + k + x + 1, i + y + 1, set);
200007cc:	6a3b      	ldr	r3, [r7, #32]
200007ce:	00da      	lsls	r2, r3, #3
200007d0:	69fb      	ldr	r3, [r7, #28]
200007d2:	18d2      	adds	r2, r2, r3
200007d4:	68bb      	ldr	r3, [r7, #8]
200007d6:	18d3      	adds	r3, r2, r3
200007d8:	1c58      	adds	r0, r3, #1
200007da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	18d3      	adds	r3, r2, r3
200007e0:	3301      	adds	r3, #1
200007e2:	683a      	ldr	r2, [r7, #0]
200007e4:	0019      	movs	r1, r3
200007e6:	f7ff fe70 	bl	200004ca <pixel>
			for (k =0; k < 8; k++) {
200007ea:	69fb      	ldr	r3, [r7, #28]
200007ec:	3301      	adds	r3, #1
200007ee:	61fb      	str	r3, [r7, #28]
200007f0:	69fb      	ldr	r3, [r7, #28]
200007f2:	2b07      	cmp	r3, #7
200007f4:	dde1      	ble.n	200007ba <draw_sprite+0x5e>
		for (j = 0; j < width_in_bytes; j++) {
200007f6:	6a3b      	ldr	r3, [r7, #32]
200007f8:	3301      	adds	r3, #1
200007fa:	623b      	str	r3, [r7, #32]
200007fc:	6a3a      	ldr	r2, [r7, #32]
200007fe:	69bb      	ldr	r3, [r7, #24]
20000800:	429a      	cmp	r2, r3
20000802:	dbcb      	blt.n	2000079c <draw_sprite+0x40>
	for (i = 0; i < s->height; i++){
20000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000806:	3301      	adds	r3, #1
20000808:	627b      	str	r3, [r7, #36]	; 0x24
2000080a:	68fb      	ldr	r3, [r7, #12]
2000080c:	785b      	ldrb	r3, [r3, #1]
2000080e:	001a      	movs	r2, r3
20000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000812:	4293      	cmp	r3, r2
20000814:	dbbf      	blt.n	20000796 <draw_sprite+0x3a>
			}
		}
	}
20000816:	46c0      	nop			; (mov r8, r8)
20000818:	46c0      	nop			; (mov r8, r8)
2000081a:	46bd      	mov	sp, r7
2000081c:	b00a      	add	sp, #40	; 0x28
2000081e:	bd80      	pop	{r7, pc}

20000820 <activateRowHigh>:


void activateRowHigh(int row){
20000820:	b580      	push	{r7, lr}
20000822:	b082      	sub	sp, #8
20000824:	af00      	add	r7, sp, #0
20000826:	6078      	str	r0, [r7, #4]
	switch(row){
20000828:	687b      	ldr	r3, [r7, #4]
2000082a:	2b03      	cmp	r3, #3
2000082c:	d01b      	beq.n	20000866 <activateRowHigh+0x46>
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	2b03      	cmp	r3, #3
20000832:	dc1c      	bgt.n	2000086e <activateRowHigh+0x4e>
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	2b02      	cmp	r3, #2
20000838:	d011      	beq.n	2000085e <activateRowHigh+0x3e>
2000083a:	687b      	ldr	r3, [r7, #4]
2000083c:	2b02      	cmp	r3, #2
2000083e:	dc16      	bgt.n	2000086e <activateRowHigh+0x4e>
20000840:	687b      	ldr	r3, [r7, #4]
20000842:	2b00      	cmp	r3, #0
20000844:	d003      	beq.n	2000084e <activateRowHigh+0x2e>
20000846:	687b      	ldr	r3, [r7, #4]
20000848:	2b01      	cmp	r3, #1
2000084a:	d004      	beq.n	20000856 <activateRowHigh+0x36>
2000084c:	e00f      	b.n	2000086e <activateRowHigh+0x4e>
		case 0: * GPIOD_ODR_HIGH = 0x10; break;
2000084e:	4b0c      	ldr	r3, [pc, #48]	; (20000880 <activateRowHigh+0x60>)
20000850:	2210      	movs	r2, #16
20000852:	701a      	strb	r2, [r3, #0]
20000854:	e00f      	b.n	20000876 <activateRowHigh+0x56>
		case 1: * GPIOD_ODR_HIGH = 0x20; break;
20000856:	4b0a      	ldr	r3, [pc, #40]	; (20000880 <activateRowHigh+0x60>)
20000858:	2220      	movs	r2, #32
2000085a:	701a      	strb	r2, [r3, #0]
2000085c:	e00b      	b.n	20000876 <activateRowHigh+0x56>
		case 2: * GPIOD_ODR_HIGH = 0x40; break;
2000085e:	4b08      	ldr	r3, [pc, #32]	; (20000880 <activateRowHigh+0x60>)
20000860:	2240      	movs	r2, #64	; 0x40
20000862:	701a      	strb	r2, [r3, #0]
20000864:	e007      	b.n	20000876 <activateRowHigh+0x56>
		case 3: * GPIOD_ODR_HIGH = 0x80; break;
20000866:	4b06      	ldr	r3, [pc, #24]	; (20000880 <activateRowHigh+0x60>)
20000868:	2280      	movs	r2, #128	; 0x80
2000086a:	701a      	strb	r2, [r3, #0]
2000086c:	e003      	b.n	20000876 <activateRowHigh+0x56>
		default: * GPIOD_ODR_HIGH = 0x0;
2000086e:	4b04      	ldr	r3, [pc, #16]	; (20000880 <activateRowHigh+0x60>)
20000870:	2200      	movs	r2, #0
20000872:	701a      	strb	r2, [r3, #0]
	}
}
20000874:	46c0      	nop			; (mov r8, r8)
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	46bd      	mov	sp, r7
2000087a:	b002      	add	sp, #8
2000087c:	bd80      	pop	{r7, pc}
2000087e:	46c0      	nop			; (mov r8, r8)
20000880:	40020c15 	andmi	r0, r2, r5, lsl ip

20000884 <activateRowLow>:

void activateRowLow(int row){
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
2000088a:	6078      	str	r0, [r7, #4]
	switch(row){
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	2b03      	cmp	r3, #3
20000890:	d01b      	beq.n	200008ca <activateRowLow+0x46>
20000892:	687b      	ldr	r3, [r7, #4]
20000894:	2b03      	cmp	r3, #3
20000896:	dc1c      	bgt.n	200008d2 <activateRowLow+0x4e>
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	2b02      	cmp	r3, #2
2000089c:	d011      	beq.n	200008c2 <activateRowLow+0x3e>
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	2b02      	cmp	r3, #2
200008a2:	dc16      	bgt.n	200008d2 <activateRowLow+0x4e>
200008a4:	687b      	ldr	r3, [r7, #4]
200008a6:	2b00      	cmp	r3, #0
200008a8:	d003      	beq.n	200008b2 <activateRowLow+0x2e>
200008aa:	687b      	ldr	r3, [r7, #4]
200008ac:	2b01      	cmp	r3, #1
200008ae:	d004      	beq.n	200008ba <activateRowLow+0x36>
200008b0:	e00f      	b.n	200008d2 <activateRowLow+0x4e>
		case 0: * GPIOD_ODR_LOW = 0x10; break;
200008b2:	4b0c      	ldr	r3, [pc, #48]	; (200008e4 <activateRowLow+0x60>)
200008b4:	2210      	movs	r2, #16
200008b6:	701a      	strb	r2, [r3, #0]
200008b8:	e00f      	b.n	200008da <activateRowLow+0x56>
		case 1: * GPIOD_ODR_LOW = 0x20; break;
200008ba:	4b0a      	ldr	r3, [pc, #40]	; (200008e4 <activateRowLow+0x60>)
200008bc:	2220      	movs	r2, #32
200008be:	701a      	strb	r2, [r3, #0]
200008c0:	e00b      	b.n	200008da <activateRowLow+0x56>
		case 2: * GPIOD_ODR_LOW = 0x40; break;
200008c2:	4b08      	ldr	r3, [pc, #32]	; (200008e4 <activateRowLow+0x60>)
200008c4:	2240      	movs	r2, #64	; 0x40
200008c6:	701a      	strb	r2, [r3, #0]
200008c8:	e007      	b.n	200008da <activateRowLow+0x56>
		case 3: * GPIOD_ODR_LOW = 0x80; break;
200008ca:	4b06      	ldr	r3, [pc, #24]	; (200008e4 <activateRowLow+0x60>)
200008cc:	2280      	movs	r2, #128	; 0x80
200008ce:	701a      	strb	r2, [r3, #0]
200008d0:	e003      	b.n	200008da <activateRowLow+0x56>
		default: * GPIOD_ODR_LOW = 0x0;
200008d2:	4b04      	ldr	r3, [pc, #16]	; (200008e4 <activateRowLow+0x60>)
200008d4:	2200      	movs	r2, #0
200008d6:	701a      	strb	r2, [r3, #0]
	}
}
200008d8:	46c0      	nop			; (mov r8, r8)
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	46bd      	mov	sp, r7
200008de:	b002      	add	sp, #8
200008e0:	bd80      	pop	{r7, pc}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	40020c14 	andmi	r0, r2, r4, lsl ip

200008e8 <readColumnHigh>:

int readColumnHigh(){
200008e8:	b580      	push	{r7, lr}
200008ea:	b082      	sub	sp, #8
200008ec:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_HIGH;
200008ee:	4a12      	ldr	r2, [pc, #72]	; (20000938 <readColumnHigh+0x50>)
200008f0:	1dfb      	adds	r3, r7, #7
200008f2:	7812      	ldrb	r2, [r2, #0]
200008f4:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
200008f6:	1dfb      	adds	r3, r7, #7
200008f8:	781b      	ldrb	r3, [r3, #0]
200008fa:	2208      	movs	r2, #8
200008fc:	4013      	ands	r3, r2
200008fe:	d001      	beq.n	20000904 <readColumnHigh+0x1c>
20000900:	2303      	movs	r3, #3
20000902:	e015      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x4){return 2;}
20000904:	1dfb      	adds	r3, r7, #7
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	2204      	movs	r2, #4
2000090a:	4013      	ands	r3, r2
2000090c:	d001      	beq.n	20000912 <readColumnHigh+0x2a>
2000090e:	2302      	movs	r3, #2
20000910:	e00e      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x2){return 1;}
20000912:	1dfb      	adds	r3, r7, #7
20000914:	781b      	ldrb	r3, [r3, #0]
20000916:	2202      	movs	r2, #2
20000918:	4013      	ands	r3, r2
2000091a:	d001      	beq.n	20000920 <readColumnHigh+0x38>
2000091c:	2301      	movs	r3, #1
2000091e:	e007      	b.n	20000930 <readColumnHigh+0x48>
	if(c & 0x1){return 0;}
20000920:	1dfb      	adds	r3, r7, #7
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	2201      	movs	r2, #1
20000926:	4013      	ands	r3, r2
20000928:	d001      	beq.n	2000092e <readColumnHigh+0x46>
2000092a:	2300      	movs	r3, #0
2000092c:	e000      	b.n	20000930 <readColumnHigh+0x48>
	return 4;
2000092e:	2304      	movs	r3, #4
}
20000930:	0018      	movs	r0, r3
20000932:	46bd      	mov	sp, r7
20000934:	b002      	add	sp, #8
20000936:	bd80      	pop	{r7, pc}
20000938:	40020c11 	andmi	r0, r2, r1, lsl ip

2000093c <readColumnLow>:

int readColumnLow(){
2000093c:	b580      	push	{r7, lr}
2000093e:	b082      	sub	sp, #8
20000940:	af00      	add	r7, sp, #0
	unsigned char c = * GPIOD_IDR_LOW;
20000942:	4a12      	ldr	r2, [pc, #72]	; (2000098c <readColumnLow+0x50>)
20000944:	1dfb      	adds	r3, r7, #7
20000946:	7812      	ldrb	r2, [r2, #0]
20000948:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000094a:	1dfb      	adds	r3, r7, #7
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	2208      	movs	r2, #8
20000950:	4013      	ands	r3, r2
20000952:	d001      	beq.n	20000958 <readColumnLow+0x1c>
20000954:	2303      	movs	r3, #3
20000956:	e015      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x4){return 2;}
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	2204      	movs	r2, #4
2000095e:	4013      	ands	r3, r2
20000960:	d001      	beq.n	20000966 <readColumnLow+0x2a>
20000962:	2302      	movs	r3, #2
20000964:	e00e      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x2){return 1;}
20000966:	1dfb      	adds	r3, r7, #7
20000968:	781b      	ldrb	r3, [r3, #0]
2000096a:	2202      	movs	r2, #2
2000096c:	4013      	ands	r3, r2
2000096e:	d001      	beq.n	20000974 <readColumnLow+0x38>
20000970:	2301      	movs	r3, #1
20000972:	e007      	b.n	20000984 <readColumnLow+0x48>
	if(c & 0x1){return 0;}
20000974:	1dfb      	adds	r3, r7, #7
20000976:	781b      	ldrb	r3, [r3, #0]
20000978:	2201      	movs	r2, #1
2000097a:	4013      	ands	r3, r2
2000097c:	d001      	beq.n	20000982 <readColumnLow+0x46>
2000097e:	2300      	movs	r3, #0
20000980:	e000      	b.n	20000984 <readColumnLow+0x48>
	return 4;
20000982:	2304      	movs	r3, #4
}
20000984:	0018      	movs	r0, r3
20000986:	46bd      	mov	sp, r7
20000988:	b002      	add	sp, #8
2000098a:	bd80      	pop	{r7, pc}
2000098c:	40020c10 	andmi	r0, r2, r0, lsl ip

20000990 <getKeyValue>:

int getKeyValue(int row, int column){
20000990:	b5b0      	push	{r4, r5, r7, lr}
20000992:	b086      	sub	sp, #24
20000994:	af00      	add	r7, sp, #0
20000996:	6078      	str	r0, [r7, #4]
20000998:	6039      	str	r1, [r7, #0]
	unsigned char keys[4][4] = { {1, 2, 3, 0xA}, {4, 5, 6, 0xB}, {7, 8, 9, 0xC}, {0xF, 0, 0xE, 0xD} };
2000099a:	2108      	movs	r1, #8
2000099c:	187b      	adds	r3, r7, r1
2000099e:	4a08      	ldr	r2, [pc, #32]	; (200009c0 <getKeyValue+0x30>)
200009a0:	ca31      	ldmia	r2!, {r0, r4, r5}
200009a2:	c331      	stmia	r3!, {r0, r4, r5}
200009a4:	6812      	ldr	r2, [r2, #0]
200009a6:	601a      	str	r2, [r3, #0]
	return keys[row][column];
200009a8:	187a      	adds	r2, r7, r1
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	009b      	lsls	r3, r3, #2
200009ae:	18d2      	adds	r2, r2, r3
200009b0:	683b      	ldr	r3, [r7, #0]
200009b2:	18d3      	adds	r3, r2, r3
200009b4:	781b      	ldrb	r3, [r3, #0]
}
200009b6:	0018      	movs	r0, r3
200009b8:	46bd      	mov	sp, r7
200009ba:	b006      	add	sp, #24
200009bc:	bdb0      	pop	{r4, r5, r7, pc}
200009be:	46c0      	nop			; (mov r8, r8)
200009c0:	2000313c 	andcs	r3, r0, ip, lsr r1

200009c4 <keybHigh>:


unsigned char keybHigh(){
200009c4:	b580      	push	{r7, lr}
200009c6:	b082      	sub	sp, #8
200009c8:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
200009ca:	2300      	movs	r3, #0
200009cc:	607b      	str	r3, [r7, #4]
200009ce:	e01c      	b.n	20000a0a <keybHigh+0x46>
		activateRowHigh(row);
200009d0:	687b      	ldr	r3, [r7, #4]
200009d2:	0018      	movs	r0, r3
200009d4:	f7ff ff24 	bl	20000820 <activateRowHigh>
		column = readColumnHigh();
200009d8:	f7ff ff86 	bl	200008e8 <readColumnHigh>
200009dc:	0002      	movs	r2, r0
200009de:	1cfb      	adds	r3, r7, #3
200009e0:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
200009e2:	1cfb      	adds	r3, r7, #3
200009e4:	781b      	ldrb	r3, [r3, #0]
200009e6:	2b04      	cmp	r3, #4
200009e8:	d00c      	beq.n	20000a04 <keybHigh+0x40>
			key = getKeyValue(row, column);
200009ea:	1cfb      	adds	r3, r7, #3
200009ec:	781a      	ldrb	r2, [r3, #0]
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	0011      	movs	r1, r2
200009f2:	0018      	movs	r0, r3
200009f4:	f7ff ffcc 	bl	20000990 <getKeyValue>
200009f8:	0002      	movs	r2, r0
200009fa:	1cbb      	adds	r3, r7, #2
200009fc:	701a      	strb	r2, [r3, #0]
			return key;
200009fe:	1cbb      	adds	r3, r7, #2
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	e006      	b.n	20000a12 <keybHigh+0x4e>
	for(int row = 0; row < 4; row++){
20000a04:	687b      	ldr	r3, [r7, #4]
20000a06:	3301      	adds	r3, #1
20000a08:	607b      	str	r3, [r7, #4]
20000a0a:	687b      	ldr	r3, [r7, #4]
20000a0c:	2b03      	cmp	r3, #3
20000a0e:	dddf      	ble.n	200009d0 <keybHigh+0xc>
		}
	}
	return -1;
20000a10:	23ff      	movs	r3, #255	; 0xff
}
20000a12:	0018      	movs	r0, r3
20000a14:	46bd      	mov	sp, r7
20000a16:	b002      	add	sp, #8
20000a18:	bd80      	pop	{r7, pc}

20000a1a <keybLow>:

unsigned char keybLow(){
20000a1a:	b580      	push	{r7, lr}
20000a1c:	b082      	sub	sp, #8
20000a1e:	af00      	add	r7, sp, #0
	char column;
	char key;
	for(int row = 0; row < 4; row++){
20000a20:	2300      	movs	r3, #0
20000a22:	607b      	str	r3, [r7, #4]
20000a24:	e01c      	b.n	20000a60 <keybLow+0x46>
		activateRowLow(row);
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	0018      	movs	r0, r3
20000a2a:	f7ff ff2b 	bl	20000884 <activateRowLow>
		column = readColumnLow();
20000a2e:	f7ff ff85 	bl	2000093c <readColumnLow>
20000a32:	0002      	movs	r2, r0
20000a34:	1cfb      	adds	r3, r7, #3
20000a36:	701a      	strb	r2, [r3, #0]
		
		if (column != 4){
20000a38:	1cfb      	adds	r3, r7, #3
20000a3a:	781b      	ldrb	r3, [r3, #0]
20000a3c:	2b04      	cmp	r3, #4
20000a3e:	d00c      	beq.n	20000a5a <keybLow+0x40>
			key = getKeyValue(row, column);
20000a40:	1cfb      	adds	r3, r7, #3
20000a42:	781a      	ldrb	r2, [r3, #0]
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	0011      	movs	r1, r2
20000a48:	0018      	movs	r0, r3
20000a4a:	f7ff ffa1 	bl	20000990 <getKeyValue>
20000a4e:	0002      	movs	r2, r0
20000a50:	1cbb      	adds	r3, r7, #2
20000a52:	701a      	strb	r2, [r3, #0]
			return key;
20000a54:	1cbb      	adds	r3, r7, #2
20000a56:	781b      	ldrb	r3, [r3, #0]
20000a58:	e006      	b.n	20000a68 <keybLow+0x4e>
	for(int row = 0; row < 4; row++){
20000a5a:	687b      	ldr	r3, [r7, #4]
20000a5c:	3301      	adds	r3, #1
20000a5e:	607b      	str	r3, [r7, #4]
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	2b03      	cmp	r3, #3
20000a64:	dddf      	ble.n	20000a26 <keybLow+0xc>
		}
	}
	return -1;
20000a66:	23ff      	movs	r3, #255	; 0xff
20000a68:	0018      	movs	r0, r3
20000a6a:	46bd      	mov	sp, r7
20000a6c:	b002      	add	sp, #8
20000a6e:	bd80      	pop	{r7, pc}

20000a70 <set_object_speed>:
static uint8_t player_right_points = 4;
static uint8_t player_left_points = 5; 

void set_object_speed(POBJECT o, int speedx, int speedy){
20000a70:	b580      	push	{r7, lr}
20000a72:	b084      	sub	sp, #16
20000a74:	af00      	add	r7, sp, #0
20000a76:	60f8      	str	r0, [r7, #12]
20000a78:	60b9      	str	r1, [r7, #8]
20000a7a:	607a      	str	r2, [r7, #4]
	o->dx = speedx;
20000a7c:	68fb      	ldr	r3, [r7, #12]
20000a7e:	68ba      	ldr	r2, [r7, #8]
20000a80:	605a      	str	r2, [r3, #4]
	o->dy = speedy;
20000a82:	68fb      	ldr	r3, [r7, #12]
20000a84:	687a      	ldr	r2, [r7, #4]
20000a86:	609a      	str	r2, [r3, #8]
}
20000a88:	46c0      	nop			; (mov r8, r8)
20000a8a:	46bd      	mov	sp, r7
20000a8c:	b004      	add	sp, #16
20000a8e:	bd80      	pop	{r7, pc}

20000a90 <move_ball>:

void move_ball(POBJECT o, POBJECT dummy){
20000a90:	b580      	push	{r7, lr}
20000a92:	b084      	sub	sp, #16
20000a94:	af00      	add	r7, sp, #0
20000a96:	6078      	str	r0, [r7, #4]
20000a98:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	int newx = o->posx + o->dx;
20000a9a:	687b      	ldr	r3, [r7, #4]
20000a9c:	68da      	ldr	r2, [r3, #12]
20000a9e:	687b      	ldr	r3, [r7, #4]
20000aa0:	685b      	ldr	r3, [r3, #4]
20000aa2:	18d3      	adds	r3, r2, r3
20000aa4:	60fb      	str	r3, [r7, #12]
	int newy = o->posy + o->dy;
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	691a      	ldr	r2, [r3, #16]
20000aaa:	687b      	ldr	r3, [r7, #4]
20000aac:	689b      	ldr	r3, [r3, #8]
20000aae:	18d3      	adds	r3, r2, r3
20000ab0:	60bb      	str	r3, [r7, #8]
	
	if(newx < 1){
20000ab2:	68fb      	ldr	r3, [r7, #12]
20000ab4:	2b00      	cmp	r3, #0
20000ab6:	dc16      	bgt.n	20000ae6 <move_ball+0x56>
		o->posx = 64;
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	2240      	movs	r2, #64	; 0x40
20000abc:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000abe:	687b      	ldr	r3, [r7, #4]
20000ac0:	2220      	movs	r2, #32
20000ac2:	611a      	str	r2, [r3, #16]
		player_right_points++;
20000ac4:	4b2e      	ldr	r3, [pc, #184]	; (20000b80 <move_ball+0xf0>)
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	3301      	adds	r3, #1
20000aca:	b2da      	uxtb	r2, r3
20000acc:	4b2c      	ldr	r3, [pc, #176]	; (20000b80 <move_ball+0xf0>)
20000ace:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(15,2);
20000ad0:	2102      	movs	r1, #2
20000ad2:	200f      	movs	r0, #15
20000ad4:	f000 f9f5 	bl	20000ec2 <ascii_gotoxy>
		ascii_write_char(player_right_points + 48);
20000ad8:	4b29      	ldr	r3, [pc, #164]	; (20000b80 <move_ball+0xf0>)
20000ada:	781b      	ldrb	r3, [r3, #0]
20000adc:	3330      	adds	r3, #48	; 0x30
20000ade:	0018      	movs	r0, r3
20000ae0:	f000 fa16 	bl	20000f10 <ascii_write_char>
20000ae4:	e044      	b.n	20000b70 <move_ball+0xe0>
	}
	else if((newx + o->geo->sizex) > 128){
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	681b      	ldr	r3, [r3, #0]
20000aea:	685a      	ldr	r2, [r3, #4]
20000aec:	68fb      	ldr	r3, [r7, #12]
20000aee:	18d3      	adds	r3, r2, r3
20000af0:	2b80      	cmp	r3, #128	; 0x80
20000af2:	dd16      	ble.n	20000b22 <move_ball+0x92>
		o->posx = 64;
20000af4:	687b      	ldr	r3, [r7, #4]
20000af6:	2240      	movs	r2, #64	; 0x40
20000af8:	60da      	str	r2, [r3, #12]
		o->posy = 32;
20000afa:	687b      	ldr	r3, [r7, #4]
20000afc:	2220      	movs	r2, #32
20000afe:	611a      	str	r2, [r3, #16]
		player_left_points++;
20000b00:	4b20      	ldr	r3, [pc, #128]	; (20000b84 <move_ball+0xf4>)
20000b02:	781b      	ldrb	r3, [r3, #0]
20000b04:	3301      	adds	r3, #1
20000b06:	b2da      	uxtb	r2, r3
20000b08:	4b1e      	ldr	r3, [pc, #120]	; (20000b84 <move_ball+0xf4>)
20000b0a:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(14,1);
20000b0c:	2101      	movs	r1, #1
20000b0e:	200e      	movs	r0, #14
20000b10:	f000 f9d7 	bl	20000ec2 <ascii_gotoxy>
		ascii_write_char(player_left_points + 48);
20000b14:	4b1b      	ldr	r3, [pc, #108]	; (20000b84 <move_ball+0xf4>)
20000b16:	781b      	ldrb	r3, [r3, #0]
20000b18:	3330      	adds	r3, #48	; 0x30
20000b1a:	0018      	movs	r0, r3
20000b1c:	f000 f9f8 	bl	20000f10 <ascii_write_char>
20000b20:	e026      	b.n	20000b70 <move_ball+0xe0>
	}
	else if(newy < 1){
20000b22:	68bb      	ldr	r3, [r7, #8]
20000b24:	2b00      	cmp	r3, #0
20000b26:	dc08      	bgt.n	20000b3a <move_ball+0xaa>
		o->dy = -o->dy;
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	689b      	ldr	r3, [r3, #8]
20000b2c:	425a      	negs	r2, r3
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	2201      	movs	r2, #1
20000b36:	611a      	str	r2, [r3, #16]
20000b38:	e01a      	b.n	20000b70 <move_ball+0xe0>
	}
	else if(newy > 64 - o->geo->sizey){
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	681b      	ldr	r3, [r3, #0]
20000b3e:	689b      	ldr	r3, [r3, #8]
20000b40:	2240      	movs	r2, #64	; 0x40
20000b42:	1ad3      	subs	r3, r2, r3
20000b44:	68ba      	ldr	r2, [r7, #8]
20000b46:	429a      	cmp	r2, r3
20000b48:	dd0c      	ble.n	20000b64 <move_ball+0xd4>
		o->dy = -o->dy;
20000b4a:	687b      	ldr	r3, [r7, #4]
20000b4c:	689b      	ldr	r3, [r3, #8]
20000b4e:	425a      	negs	r2, r3
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000b54:	687b      	ldr	r3, [r7, #4]
20000b56:	681b      	ldr	r3, [r3, #0]
20000b58:	689b      	ldr	r3, [r3, #8]
20000b5a:	2240      	movs	r2, #64	; 0x40
20000b5c:	1ad2      	subs	r2, r2, r3
20000b5e:	687b      	ldr	r3, [r7, #4]
20000b60:	611a      	str	r2, [r3, #16]
20000b62:	e005      	b.n	20000b70 <move_ball+0xe0>
	}else{
		o->posx = newx;
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	68fa      	ldr	r2, [r7, #12]
20000b68:	60da      	str	r2, [r3, #12]
		o->posy = newy;
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	68ba      	ldr	r2, [r7, #8]
20000b6e:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	0018      	movs	r0, r3
20000b74:	f7ff fd60 	bl	20000638 <draw_object>
}
20000b78:	46c0      	nop			; (mov r8, r8)
20000b7a:	46bd      	mov	sp, r7
20000b7c:	b004      	add	sp, #16
20000b7e:	bd80      	pop	{r7, pc}
20000b80:	20001844 	andcs	r1, r0, r4, asr #16
20000b84:	20001845 	andcs	r1, r0, r5, asr #16

20000b88 <collision_with_ball>:

uint8_t collision_with_ball(POBJECT o, int newY, POBJECT ball){
20000b88:	b580      	push	{r7, lr}
20000b8a:	b084      	sub	sp, #16
20000b8c:	af00      	add	r7, sp, #0
20000b8e:	60f8      	str	r0, [r7, #12]
20000b90:	60b9      	str	r1, [r7, #8]
20000b92:	607a      	str	r2, [r7, #4]
	
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	68da      	ldr	r2, [r3, #12]
20000b98:	687b      	ldr	r3, [r7, #4]
20000b9a:	681b      	ldr	r3, [r3, #0]
20000b9c:	685b      	ldr	r3, [r3, #4]
20000b9e:	18d2      	adds	r2, r2, r3
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	68db      	ldr	r3, [r3, #12]
20000ba4:	429a      	cmp	r2, r3
20000ba6:	db21      	blt.n	20000bec <collision_with_ball+0x64>
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	68da      	ldr	r2, [r3, #12]
20000bac:	68fb      	ldr	r3, [r7, #12]
20000bae:	68d9      	ldr	r1, [r3, #12]
20000bb0:	68fb      	ldr	r3, [r7, #12]
20000bb2:	681b      	ldr	r3, [r3, #0]
20000bb4:	685b      	ldr	r3, [r3, #4]
20000bb6:	18cb      	adds	r3, r1, r3
	if (  ((ball->posx + ball->geo->sizex) >= o->posx &&
20000bb8:	429a      	cmp	r2, r3
20000bba:	da17      	bge.n	20000bec <collision_with_ball+0x64>
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	691a      	ldr	r2, [r3, #16]
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	681b      	ldr	r3, [r3, #0]
20000bc4:	689b      	ldr	r3, [r3, #8]
20000bc6:	18d3      	adds	r3, r2, r3
		  ball->posx < (o->posx + o->geo->sizex)) && 
20000bc8:	68ba      	ldr	r2, [r7, #8]
20000bca:	429a      	cmp	r2, r3
20000bcc:	dc0e      	bgt.n	20000bec <collision_with_ball+0x64>
		   ball->posy < (newY + o->geo->sizey))   ) {
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	691a      	ldr	r2, [r3, #16]
20000bd2:	68fb      	ldr	r3, [r7, #12]
20000bd4:	681b      	ldr	r3, [r3, #0]
20000bd6:	6899      	ldr	r1, [r3, #8]
20000bd8:	68bb      	ldr	r3, [r7, #8]
20000bda:	18cb      	adds	r3, r1, r3
		  ((ball->posy + ball->geo->sizey) >= newY &&
20000bdc:	429a      	cmp	r2, r3
20000bde:	da05      	bge.n	20000bec <collision_with_ball+0x64>
			clear_object(ball);
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	0018      	movs	r0, r3
20000be4:	f7ff fd59 	bl	2000069a <clear_object>
			   return 1;
20000be8:	2301      	movs	r3, #1
20000bea:	e000      	b.n	20000bee <collision_with_ball+0x66>
		   }
	return 0;
20000bec:	2300      	movs	r3, #0
}
20000bee:	0018      	movs	r0, r3
20000bf0:	46bd      	mov	sp, r7
20000bf2:	b004      	add	sp, #16
20000bf4:	bd80      	pop	{r7, pc}

20000bf6 <move_paddle>:

void move_paddle(POBJECT o, POBJECT ball){
20000bf6:	b580      	push	{r7, lr}
20000bf8:	b084      	sub	sp, #16
20000bfa:	af00      	add	r7, sp, #0
20000bfc:	6078      	str	r0, [r7, #4]
20000bfe:	6039      	str	r1, [r7, #0]
#ifdef OLD_PIXEL
	clear_object(o);
#endif
	
	int newy = o->posy + o->dy;
20000c00:	687b      	ldr	r3, [r7, #4]
20000c02:	691a      	ldr	r2, [r3, #16]
20000c04:	687b      	ldr	r3, [r7, #4]
20000c06:	689b      	ldr	r3, [r3, #8]
20000c08:	18d3      	adds	r3, r2, r3
20000c0a:	60fb      	str	r3, [r7, #12]
	
	if(collision_with_ball(o, newy, ball)){
20000c0c:	683a      	ldr	r2, [r7, #0]
20000c0e:	68f9      	ldr	r1, [r7, #12]
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	0018      	movs	r0, r3
20000c14:	f7ff ffb8 	bl	20000b88 <collision_with_ball>
20000c18:	1e03      	subs	r3, r0, #0
20000c1a:	d019      	beq.n	20000c50 <move_paddle+0x5a>
		if(o->posx < 64){
20000c1c:	687b      	ldr	r3, [r7, #4]
20000c1e:	68db      	ldr	r3, [r3, #12]
20000c20:	2b3f      	cmp	r3, #63	; 0x3f
20000c22:	dc08      	bgt.n	20000c36 <move_paddle+0x40>
			ball->dx = -(ball->dx);
20000c24:	683b      	ldr	r3, [r7, #0]
20000c26:	685b      	ldr	r3, [r3, #4]
20000c28:	425a      	negs	r2, r3
20000c2a:	683b      	ldr	r3, [r7, #0]
20000c2c:	605a      	str	r2, [r3, #4]
			ball->posx = PADDLE_DISTANCE_FROM_GOAL + 2;
20000c2e:	683b      	ldr	r3, [r7, #0]
20000c30:	2234      	movs	r2, #52	; 0x34
20000c32:	60da      	str	r2, [r3, #12]
20000c34:	e007      	b.n	20000c46 <move_paddle+0x50>
		}else{
			ball->dx = (ball->dx)*(-1);
20000c36:	683b      	ldr	r3, [r7, #0]
20000c38:	685b      	ldr	r3, [r3, #4]
20000c3a:	425a      	negs	r2, r3
20000c3c:	683b      	ldr	r3, [r7, #0]
20000c3e:	605a      	str	r2, [r3, #4]
			ball->posx = 128 - (PADDLE_DISTANCE_FROM_GOAL + 4);
20000c40:	683b      	ldr	r3, [r7, #0]
20000c42:	224a      	movs	r2, #74	; 0x4a
20000c44:	60da      	str	r2, [r3, #12]
		}	
		draw_object(ball);
20000c46:	683b      	ldr	r3, [r7, #0]
20000c48:	0018      	movs	r0, r3
20000c4a:	f7ff fcf5 	bl	20000638 <draw_object>
20000c4e:	e023      	b.n	20000c98 <move_paddle+0xa2>
	}

	else if(newy < 1){
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	2b00      	cmp	r3, #0
20000c54:	dc08      	bgt.n	20000c68 <move_paddle+0x72>
		o->dy = -o->dy;
20000c56:	687b      	ldr	r3, [r7, #4]
20000c58:	689b      	ldr	r3, [r3, #8]
20000c5a:	425a      	negs	r2, r3
20000c5c:	687b      	ldr	r3, [r7, #4]
20000c5e:	609a      	str	r2, [r3, #8]
		o->posy = 1;
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	2201      	movs	r2, #1
20000c64:	611a      	str	r2, [r3, #16]
20000c66:	e017      	b.n	20000c98 <move_paddle+0xa2>
	}
	else if(newy > 64 - o->geo->sizey){
20000c68:	687b      	ldr	r3, [r7, #4]
20000c6a:	681b      	ldr	r3, [r3, #0]
20000c6c:	689b      	ldr	r3, [r3, #8]
20000c6e:	2240      	movs	r2, #64	; 0x40
20000c70:	1ad3      	subs	r3, r2, r3
20000c72:	68fa      	ldr	r2, [r7, #12]
20000c74:	429a      	cmp	r2, r3
20000c76:	dd0c      	ble.n	20000c92 <move_paddle+0x9c>
		o->dy = -o->dy;
20000c78:	687b      	ldr	r3, [r7, #4]
20000c7a:	689b      	ldr	r3, [r3, #8]
20000c7c:	425a      	negs	r2, r3
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	609a      	str	r2, [r3, #8]
		o->posy = 64 - o->geo->sizey;
20000c82:	687b      	ldr	r3, [r7, #4]
20000c84:	681b      	ldr	r3, [r3, #0]
20000c86:	689b      	ldr	r3, [r3, #8]
20000c88:	2240      	movs	r2, #64	; 0x40
20000c8a:	1ad2      	subs	r2, r2, r3
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	611a      	str	r2, [r3, #16]
20000c90:	e002      	b.n	20000c98 <move_paddle+0xa2>
	}else{
		o->posy = newy;
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	68fa      	ldr	r2, [r7, #12]
20000c96:	611a      	str	r2, [r3, #16]
	}
	draw_object(o);
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	0018      	movs	r0, r3
20000c9c:	f7ff fccc 	bl	20000638 <draw_object>
}
20000ca0:	46c0      	nop			; (mov r8, r8)
20000ca2:	46bd      	mov	sp, r7
20000ca4:	b004      	add	sp, #16
20000ca6:	bd80      	pop	{r7, pc}

20000ca8 <ascii_ctrl_bit_set>:
#define B_CS1 8




void ascii_ctrl_bit_set(unsigned char x){
20000ca8:	b580      	push	{r7, lr}
20000caa:	b082      	sub	sp, #8
20000cac:	af00      	add	r7, sp, #0
20000cae:	0002      	movs	r2, r0
20000cb0:	1dfb      	adds	r3, r7, #7
20000cb2:	701a      	strb	r2, [r3, #0]
	(* portOdrLow) |=x|B_SELECT;
20000cb4:	4b07      	ldr	r3, [pc, #28]	; (20000cd4 <ascii_ctrl_bit_set+0x2c>)
20000cb6:	781b      	ldrb	r3, [r3, #0]
20000cb8:	b2da      	uxtb	r2, r3
20000cba:	1dfb      	adds	r3, r7, #7
20000cbc:	781b      	ldrb	r3, [r3, #0]
20000cbe:	4313      	orrs	r3, r2
20000cc0:	b2db      	uxtb	r3, r3
20000cc2:	4a04      	ldr	r2, [pc, #16]	; (20000cd4 <ascii_ctrl_bit_set+0x2c>)
20000cc4:	2104      	movs	r1, #4
20000cc6:	430b      	orrs	r3, r1
20000cc8:	b2db      	uxtb	r3, r3
20000cca:	7013      	strb	r3, [r2, #0]
}
20000ccc:	46c0      	nop			; (mov r8, r8)
20000cce:	46bd      	mov	sp, r7
20000cd0:	b002      	add	sp, #8
20000cd2:	bd80      	pop	{r7, pc}
20000cd4:	40021014 	andmi	r1, r2, r4, lsl r0

20000cd8 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000cd8:	b580      	push	{r7, lr}
20000cda:	b084      	sub	sp, #16
20000cdc:	af00      	add	r7, sp, #0
20000cde:	0002      	movs	r2, r0
20000ce0:	1dfb      	adds	r3, r7, #7
20000ce2:	701a      	strb	r2, [r3, #0]
	char notX = ~x;
20000ce4:	200f      	movs	r0, #15
20000ce6:	183b      	adds	r3, r7, r0
20000ce8:	1dfa      	adds	r2, r7, #7
20000cea:	7812      	ldrb	r2, [r2, #0]
20000cec:	43d2      	mvns	r2, r2
20000cee:	701a      	strb	r2, [r3, #0]
	* portOdrLow &=notX;
20000cf0:	4b0a      	ldr	r3, [pc, #40]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000cf2:	781b      	ldrb	r3, [r3, #0]
20000cf4:	b2db      	uxtb	r3, r3
20000cf6:	4909      	ldr	r1, [pc, #36]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000cf8:	183a      	adds	r2, r7, r0
20000cfa:	7812      	ldrb	r2, [r2, #0]
20000cfc:	4013      	ands	r3, r2
20000cfe:	b2db      	uxtb	r3, r3
20000d00:	700b      	strb	r3, [r1, #0]
	* portOdrLow |= B_SELECT;
20000d02:	4b06      	ldr	r3, [pc, #24]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000d04:	781b      	ldrb	r3, [r3, #0]
20000d06:	b2db      	uxtb	r3, r3
20000d08:	4a04      	ldr	r2, [pc, #16]	; (20000d1c <ascii_ctrl_bit_clear+0x44>)
20000d0a:	2104      	movs	r1, #4
20000d0c:	430b      	orrs	r3, r1
20000d0e:	b2db      	uxtb	r3, r3
20000d10:	7013      	strb	r3, [r2, #0]
}
20000d12:	46c0      	nop			; (mov r8, r8)
20000d14:	46bd      	mov	sp, r7
20000d16:	b004      	add	sp, #16
20000d18:	bd80      	pop	{r7, pc}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	40021014 	andmi	r1, r2, r4, lsl r0

20000d20 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000d20:	b580      	push	{r7, lr}
20000d22:	b082      	sub	sp, #8
20000d24:	af00      	add	r7, sp, #0
20000d26:	0002      	movs	r2, r0
20000d28:	1dfb      	adds	r3, r7, #7
20000d2a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000d2c:	2001      	movs	r0, #1
20000d2e:	f7ff ffd3 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000d32:	2002      	movs	r0, #2
20000d34:	f7ff ffd0 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000d38:	1dfb      	adds	r3, r7, #7
20000d3a:	781b      	ldrb	r3, [r3, #0]
20000d3c:	0018      	movs	r0, r3
20000d3e:	f000 f819 	bl	20000d74 <ascii_write_controller>
}
20000d42:	46c0      	nop			; (mov r8, r8)
20000d44:	46bd      	mov	sp, r7
20000d46:	b002      	add	sp, #8
20000d48:	bd80      	pop	{r7, pc}

20000d4a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000d4a:	b580      	push	{r7, lr}
20000d4c:	b082      	sub	sp, #8
20000d4e:	af00      	add	r7, sp, #0
20000d50:	0002      	movs	r2, r0
20000d52:	1dfb      	adds	r3, r7, #7
20000d54:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d56:	2001      	movs	r0, #1
20000d58:	f7ff ffa6 	bl	20000ca8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000d5c:	2002      	movs	r0, #2
20000d5e:	f7ff ffbb 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000d62:	1dfb      	adds	r3, r7, #7
20000d64:	781b      	ldrb	r3, [r3, #0]
20000d66:	0018      	movs	r0, r3
20000d68:	f000 f804 	bl	20000d74 <ascii_write_controller>
}
20000d6c:	46c0      	nop			; (mov r8, r8)
20000d6e:	46bd      	mov	sp, r7
20000d70:	b002      	add	sp, #8
20000d72:	bd80      	pop	{r7, pc}

20000d74 <ascii_write_controller>:

void ascii_write_controller(unsigned char command){
20000d74:	b580      	push	{r7, lr}
20000d76:	b082      	sub	sp, #8
20000d78:	af00      	add	r7, sp, #0
20000d7a:	0002      	movs	r2, r0
20000d7c:	1dfb      	adds	r3, r7, #7
20000d7e:	701a      	strb	r2, [r3, #0]
		//	delay_250ns();
	ascii_ctrl_bit_set(B_E);
20000d80:	2040      	movs	r0, #64	; 0x40
20000d82:	f7ff ff91 	bl	20000ca8 <ascii_ctrl_bit_set>
	* portOdrHigh = command;
20000d86:	4a06      	ldr	r2, [pc, #24]	; (20000da0 <ascii_write_controller+0x2c>)
20000d88:	1dfb      	adds	r3, r7, #7
20000d8a:	781b      	ldrb	r3, [r3, #0]
20000d8c:	7013      	strb	r3, [r2, #0]
		//	delay_250ns();
	ascii_ctrl_bit_clear(B_E);
20000d8e:	2040      	movs	r0, #64	; 0x40
20000d90:	f7ff ffa2 	bl	20000cd8 <ascii_ctrl_bit_clear>
	delay_250ns();
20000d94:	f7ff f93c 	bl	20000010 <delay_250ns>
}
20000d98:	46c0      	nop			; (mov r8, r8)
20000d9a:	46bd      	mov	sp, r7
20000d9c:	b002      	add	sp, #8
20000d9e:	bd80      	pop	{r7, pc}
20000da0:	40021015 	andmi	r1, r2, r5, lsl r0

20000da4 <ascii_read_controller>:

unsigned char ascii_read_controller(){
20000da4:	b580      	push	{r7, lr}
20000da6:	b082      	sub	sp, #8
20000da8:	af00      	add	r7, sp, #0
	unsigned char rv;
	ascii_ctrl_bit_set(B_E);
20000daa:	2040      	movs	r0, #64	; 0x40
20000dac:	f7ff ff7c 	bl	20000ca8 <ascii_ctrl_bit_set>
	delay_250ns();
20000db0:	f7ff f92e 	bl	20000010 <delay_250ns>
	delay_250ns();
20000db4:	f7ff f92c 	bl	20000010 <delay_250ns>
	rv = * portIdrHigh;
20000db8:	4a06      	ldr	r2, [pc, #24]	; (20000dd4 <ascii_read_controller+0x30>)
20000dba:	1dfb      	adds	r3, r7, #7
20000dbc:	7812      	ldrb	r2, [r2, #0]
20000dbe:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000dc0:	2040      	movs	r0, #64	; 0x40
20000dc2:	f7ff ff89 	bl	20000cd8 <ascii_ctrl_bit_clear>
	return rv;
20000dc6:	1dfb      	adds	r3, r7, #7
20000dc8:	781b      	ldrb	r3, [r3, #0]
}
20000dca:	0018      	movs	r0, r3
20000dcc:	46bd      	mov	sp, r7
20000dce:	b002      	add	sp, #8
20000dd0:	bd80      	pop	{r7, pc}
20000dd2:	46c0      	nop			; (mov r8, r8)
20000dd4:	40021011 	andmi	r1, r2, r1, lsl r0

20000dd8 <ascii_read_data>:

unsigned char ascii_read_data(){
20000dd8:	b580      	push	{r7, lr}
20000dda:	b082      	sub	sp, #8
20000ddc:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000dde:	4b0a      	ldr	r3, [pc, #40]	; (20000e08 <ascii_read_data+0x30>)
20000de0:	4a0a      	ldr	r2, [pc, #40]	; (20000e0c <ascii_read_data+0x34>)
20000de2:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_set(B_RS);
20000de4:	2001      	movs	r0, #1
20000de6:	f7ff ff5f 	bl	20000ca8 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000dea:	2002      	movs	r0, #2
20000dec:	f7ff ff5c 	bl	20000ca8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000df0:	4a07      	ldr	r2, [pc, #28]	; (20000e10 <ascii_read_data+0x38>)
20000df2:	1dfb      	adds	r3, r7, #7
20000df4:	701a      	strb	r2, [r3, #0]
	* portModer = 0x55555555;
20000df6:	4b04      	ldr	r3, [pc, #16]	; (20000e08 <ascii_read_data+0x30>)
20000df8:	4a06      	ldr	r2, [pc, #24]	; (20000e14 <ascii_read_data+0x3c>)
20000dfa:	601a      	str	r2, [r3, #0]
	return rv;
20000dfc:	1dfb      	adds	r3, r7, #7
20000dfe:	781b      	ldrb	r3, [r3, #0]
}
20000e00:	0018      	movs	r0, r3
20000e02:	46bd      	mov	sp, r7
20000e04:	b002      	add	sp, #8
20000e06:	bd80      	pop	{r7, pc}
20000e08:	40021000 	andmi	r1, r2, r0
20000e0c:	00005555 	andeq	r5, r0, r5, asr r5
20000e10:	20000da5 	andcs	r0, r0, r5, lsr #27
20000e14:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e18 <ascii_read_status>:

unsigned char ascii_read_status(){
20000e18:	b590      	push	{r4, r7, lr}
20000e1a:	b083      	sub	sp, #12
20000e1c:	af00      	add	r7, sp, #0
	* portModer = 0x00005555;
20000e1e:	4b0b      	ldr	r3, [pc, #44]	; (20000e4c <ascii_read_status+0x34>)
20000e20:	4a0b      	ldr	r2, [pc, #44]	; (20000e50 <ascii_read_status+0x38>)
20000e22:	601a      	str	r2, [r3, #0]
	unsigned char rv;
	ascii_ctrl_bit_clear(B_RS);
20000e24:	2001      	movs	r0, #1
20000e26:	f7ff ff57 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000e2a:	2002      	movs	r0, #2
20000e2c:	f7ff ff3c 	bl	20000ca8 <ascii_ctrl_bit_set>
	rv = ascii_read_controller();
20000e30:	1dfc      	adds	r4, r7, #7
20000e32:	f7ff ffb7 	bl	20000da4 <ascii_read_controller>
20000e36:	0003      	movs	r3, r0
20000e38:	7023      	strb	r3, [r4, #0]
	* portModer = 0x55555555;
20000e3a:	4b04      	ldr	r3, [pc, #16]	; (20000e4c <ascii_read_status+0x34>)
20000e3c:	4a05      	ldr	r2, [pc, #20]	; (20000e54 <ascii_read_status+0x3c>)
20000e3e:	601a      	str	r2, [r3, #0]
	return rv;
20000e40:	1dfb      	adds	r3, r7, #7
20000e42:	781b      	ldrb	r3, [r3, #0]
} 
20000e44:	0018      	movs	r0, r3
20000e46:	46bd      	mov	sp, r7
20000e48:	b003      	add	sp, #12
20000e4a:	bd90      	pop	{r4, r7, pc}
20000e4c:	40021000 	andmi	r1, r2, r0
20000e50:	00005555 	andeq	r5, r0, r5, asr r5
20000e54:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000e58 <ascii_command>:

void ascii_command(unsigned char command){
20000e58:	b580      	push	{r7, lr}
20000e5a:	b082      	sub	sp, #8
20000e5c:	af00      	add	r7, sp, #0
20000e5e:	0002      	movs	r2, r0
20000e60:	1dfb      	adds	r3, r7, #7
20000e62:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000e64:	46c0      	nop			; (mov r8, r8)
20000e66:	f7ff ffd7 	bl	20000e18 <ascii_read_status>
20000e6a:	0003      	movs	r3, r0
20000e6c:	001a      	movs	r2, r3
20000e6e:	2380      	movs	r3, #128	; 0x80
20000e70:	4013      	ands	r3, r2
20000e72:	2b80      	cmp	r3, #128	; 0x80
20000e74:	d0f7      	beq.n	20000e66 <ascii_command+0xe>
	delay_mikro(8);
20000e76:	2008      	movs	r0, #8
20000e78:	f7ff f8ee 	bl	20000058 <delay_mikro>
	ascii_write_cmd(command);
20000e7c:	1dfb      	adds	r3, r7, #7
20000e7e:	781b      	ldrb	r3, [r3, #0]
20000e80:	0018      	movs	r0, r3
20000e82:	f7ff ff4d 	bl	20000d20 <ascii_write_cmd>
	delay_milli(2);
20000e86:	2002      	movs	r0, #2
20000e88:	f7ff f907 	bl	2000009a <delay_milli>
}
20000e8c:	46c0      	nop			; (mov r8, r8)
20000e8e:	46bd      	mov	sp, r7
20000e90:	b002      	add	sp, #8
20000e92:	bd80      	pop	{r7, pc}

20000e94 <ascii_init>:

void ascii_init(){
20000e94:	b580      	push	{r7, lr}
20000e96:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS);
20000e98:	2001      	movs	r0, #1
20000e9a:	f7ff ff1d 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000e9e:	2002      	movs	r0, #2
20000ea0:	f7ff ff1a 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_command(0x38);
20000ea4:	2038      	movs	r0, #56	; 0x38
20000ea6:	f7ff ffd7 	bl	20000e58 <ascii_command>
	ascii_command(0x0E);
20000eaa:	200e      	movs	r0, #14
20000eac:	f7ff ffd4 	bl	20000e58 <ascii_command>
	ascii_command(0x01);
20000eb0:	2001      	movs	r0, #1
20000eb2:	f7ff ffd1 	bl	20000e58 <ascii_command>
	ascii_command(0x04);
20000eb6:	2004      	movs	r0, #4
20000eb8:	f7ff ffce 	bl	20000e58 <ascii_command>
}
20000ebc:	46c0      	nop			; (mov r8, r8)
20000ebe:	46bd      	mov	sp, r7
20000ec0:	bd80      	pop	{r7, pc}

20000ec2 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){
20000ec2:	b580      	push	{r7, lr}
20000ec4:	b084      	sub	sp, #16
20000ec6:	af00      	add	r7, sp, #0
20000ec8:	6078      	str	r0, [r7, #4]
20000eca:	6039      	str	r1, [r7, #0]
	ascii_ctrl_bit_clear(B_RS);
20000ecc:	2001      	movs	r0, #1
20000ece:	f7ff ff03 	bl	20000cd8 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000ed2:	2002      	movs	r0, #2
20000ed4:	f7ff ff00 	bl	20000cd8 <ascii_ctrl_bit_clear>
	unsigned char adress = x - 1;
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	b2da      	uxtb	r2, r3
20000edc:	210f      	movs	r1, #15
20000ede:	187b      	adds	r3, r7, r1
20000ee0:	3a01      	subs	r2, #1
20000ee2:	701a      	strb	r2, [r3, #0]
	if(y == 2){
20000ee4:	683b      	ldr	r3, [r7, #0]
20000ee6:	2b02      	cmp	r3, #2
20000ee8:	d104      	bne.n	20000ef4 <ascii_gotoxy+0x32>
		adress += 0x40;
20000eea:	187b      	adds	r3, r7, r1
20000eec:	187a      	adds	r2, r7, r1
20000eee:	7812      	ldrb	r2, [r2, #0]
20000ef0:	3240      	adds	r2, #64	; 0x40
20000ef2:	701a      	strb	r2, [r3, #0]
	}
	ascii_command(0x80 | adress);
20000ef4:	230f      	movs	r3, #15
20000ef6:	18fb      	adds	r3, r7, r3
20000ef8:	781b      	ldrb	r3, [r3, #0]
20000efa:	2280      	movs	r2, #128	; 0x80
20000efc:	4252      	negs	r2, r2
20000efe:	4313      	orrs	r3, r2
20000f00:	b2db      	uxtb	r3, r3
20000f02:	0018      	movs	r0, r3
20000f04:	f7ff ffa8 	bl	20000e58 <ascii_command>
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46bd      	mov	sp, r7
20000f0c:	b004      	add	sp, #16
20000f0e:	bd80      	pop	{r7, pc}

20000f10 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000f10:	b580      	push	{r7, lr}
20000f12:	b082      	sub	sp, #8
20000f14:	af00      	add	r7, sp, #0
20000f16:	0002      	movs	r2, r0
20000f18:	1dfb      	adds	r3, r7, #7
20000f1a:	701a      	strb	r2, [r3, #0]
	while(ascii_read_status() & 0x80 == 0x80){}
20000f1c:	46c0      	nop			; (mov r8, r8)
20000f1e:	f7ff ff7b 	bl	20000e18 <ascii_read_status>
20000f22:	0003      	movs	r3, r0
20000f24:	001a      	movs	r2, r3
20000f26:	2301      	movs	r3, #1
20000f28:	4013      	ands	r3, r2
20000f2a:	d1f8      	bne.n	20000f1e <ascii_write_char+0xe>
	delay_mikro(8);
20000f2c:	2008      	movs	r0, #8
20000f2e:	f7ff f893 	bl	20000058 <delay_mikro>
	ascii_write_data(c);
20000f32:	1dfb      	adds	r3, r7, #7
20000f34:	781b      	ldrb	r3, [r3, #0]
20000f36:	0018      	movs	r0, r3
20000f38:	f7ff ff07 	bl	20000d4a <ascii_write_data>
	delay_mikro(50);
20000f3c:	2032      	movs	r0, #50	; 0x32
20000f3e:	f7ff f88b 	bl	20000058 <delay_mikro>
}
20000f42:	46c0      	nop			; (mov r8, r8)
20000f44:	46bd      	mov	sp, r7
20000f46:	b002      	add	sp, #8
20000f48:	bd80      	pop	{r7, pc}

20000f4a <ascii_playerscore_init>:

void ascii_playerscore_init(void){
20000f4a:	b5b0      	push	{r4, r5, r7, lr}
20000f4c:	b08a      	sub	sp, #40	; 0x28
20000f4e:	af00      	add	r7, sp, #0
	char * s;
	char test1[] = "Player Left: 0";	//plats 14
20000f50:	2414      	movs	r4, #20
20000f52:	193b      	adds	r3, r7, r4
20000f54:	4a1b      	ldr	r2, [pc, #108]	; (20000fc4 <ascii_playerscore_init+0x7a>)
20000f56:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f58:	c323      	stmia	r3!, {r0, r1, r5}
20000f5a:	8811      	ldrh	r1, [r2, #0]
20000f5c:	8019      	strh	r1, [r3, #0]
20000f5e:	7892      	ldrb	r2, [r2, #2]
20000f60:	709a      	strb	r2, [r3, #2]
	char test2[] = "Player Right: 0";	//plats 15
20000f62:	1d3b      	adds	r3, r7, #4
20000f64:	4a18      	ldr	r2, [pc, #96]	; (20000fc8 <ascii_playerscore_init+0x7e>)
20000f66:	ca23      	ldmia	r2!, {r0, r1, r5}
20000f68:	c323      	stmia	r3!, {r0, r1, r5}
20000f6a:	6812      	ldr	r2, [r2, #0]
20000f6c:	601a      	str	r2, [r3, #0]
	
	ascii_init();
20000f6e:	f7ff ff91 	bl	20000e94 <ascii_init>
	ascii_gotoxy(1,1);
20000f72:	2101      	movs	r1, #1
20000f74:	2001      	movs	r0, #1
20000f76:	f7ff ffa4 	bl	20000ec2 <ascii_gotoxy>
	s = test1;
20000f7a:	193b      	adds	r3, r7, r4
20000f7c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000f7e:	e006      	b.n	20000f8e <ascii_playerscore_init+0x44>
		ascii_write_char(*s++);
20000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f82:	1c5a      	adds	r2, r3, #1
20000f84:	627a      	str	r2, [r7, #36]	; 0x24
20000f86:	781b      	ldrb	r3, [r3, #0]
20000f88:	0018      	movs	r0, r3
20000f8a:	f7ff ffc1 	bl	20000f10 <ascii_write_char>
	while(*s){
20000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000f90:	781b      	ldrb	r3, [r3, #0]
20000f92:	2b00      	cmp	r3, #0
20000f94:	d1f4      	bne.n	20000f80 <ascii_playerscore_init+0x36>
	}
	ascii_gotoxy(1,2);
20000f96:	2102      	movs	r1, #2
20000f98:	2001      	movs	r0, #1
20000f9a:	f7ff ff92 	bl	20000ec2 <ascii_gotoxy>
	s=test2;
20000f9e:	1d3b      	adds	r3, r7, #4
20000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	while(*s){
20000fa2:	e006      	b.n	20000fb2 <ascii_playerscore_init+0x68>
		ascii_write_char(*s++);
20000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000fa6:	1c5a      	adds	r2, r3, #1
20000fa8:	627a      	str	r2, [r7, #36]	; 0x24
20000faa:	781b      	ldrb	r3, [r3, #0]
20000fac:	0018      	movs	r0, r3
20000fae:	f7ff ffaf 	bl	20000f10 <ascii_write_char>
	while(*s){
20000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000fb4:	781b      	ldrb	r3, [r3, #0]
20000fb6:	2b00      	cmp	r3, #0
20000fb8:	d1f4      	bne.n	20000fa4 <ascii_playerscore_init+0x5a>
	}
	return 0;
20000fba:	46c0      	nop			; (mov r8, r8)
}
20000fbc:	46bd      	mov	sp, r7
20000fbe:	b00a      	add	sp, #40	; 0x28
20000fc0:	bdb0      	pop	{r4, r5, r7, pc}
20000fc2:	46c0      	nop			; (mov r8, r8)
20000fc4:	2000314c 	andcs	r3, r0, ip, asr #2
20000fc8:	2000315c 	andcs	r3, r0, ip, asr r1

20000fcc <init_app>:
static OBJECT paddle_right = {&paddle_geometry, 0, 0, (128 - PADDLE_DISTANCE_FROM_GOAL), (32-7), draw_object, clear_object, move_paddle, set_object_speed};

static GEOMETRY ball_geometry = { 12,4,4,{{0,1},{0,2},{1,0},{1,1},{1,2},{1,3},{2,0},{2,1},{2,2},{2,3},{3,1},{3,2}} };
static OBJECT ball = { &ball_geometry, 0, 0, 64, 32, draw_object, clear_object, move_ball, set_object_speed};

void init_app(void){
20000fcc:	b580      	push	{r7, lr}
20000fce:	af00      	add	r7, sp, #0
	* ((unsigned long *) 0x40023830) = 0x18;
	__asm__ volatile(" LDR R0, =0x08000209\n");
	__asm__ volatile(" BLX R0 \n");
#endif
	
	* portModer = 0x55555555;
20000fd0:	4b07      	ldr	r3, [pc, #28]	; (20000ff0 <init_app+0x24>)
20000fd2:	4a08      	ldr	r2, [pc, #32]	; (20000ff4 <init_app+0x28>)
20000fd4:	601a      	str	r2, [r3, #0]
	* GPIOD_MODER = 0x55005500;
20000fd6:	4b08      	ldr	r3, [pc, #32]	; (20000ff8 <init_app+0x2c>)
20000fd8:	4a08      	ldr	r2, [pc, #32]	; (20000ffc <init_app+0x30>)
20000fda:	601a      	str	r2, [r3, #0]
	* GPIOD_PUPDR = 0x00AA00AA;
20000fdc:	4b08      	ldr	r3, [pc, #32]	; (20001000 <init_app+0x34>)
20000fde:	4a09      	ldr	r2, [pc, #36]	; (20001004 <init_app+0x38>)
20000fe0:	601a      	str	r2, [r3, #0]
	* GPIOD_OTYPER = 0x0;
20000fe2:	4b09      	ldr	r3, [pc, #36]	; (20001008 <init_app+0x3c>)
20000fe4:	2200      	movs	r2, #0
20000fe6:	801a      	strh	r2, [r3, #0]
}
20000fe8:	46c0      	nop			; (mov r8, r8)
20000fea:	46bd      	mov	sp, r7
20000fec:	bd80      	pop	{r7, pc}
20000fee:	46c0      	nop			; (mov r8, r8)
20000ff0:	40021000 	andmi	r1, r2, r0
20000ff4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000ff8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000ffc:	55005500 	strpl	r5, [r0, #-1280]	; 0xfffffb00
20001000:	40020c30 	andmi	r0, r2, r0, lsr ip
20001004:	00aa00aa 	adceq	r0, sl, sl, lsr #1
20001008:	40020c08 	andmi	r0, r2, r8, lsl #24

2000100c <intro_state>:
		} else {continue;}
	}
}
*/

void intro_state(){
2000100c:	b580      	push	{r7, lr}
2000100e:	b086      	sub	sp, #24
20001010:	af00      	add	r7, sp, #0
	sprite noText;
	sprite text;
	
	load_sprite(&noText, Startmenu_bits, Startmenu_width, Startmenu_height);
20001012:	4924      	ldr	r1, [pc, #144]	; (200010a4 <intro_state+0x98>)
20001014:	2308      	movs	r3, #8
20001016:	18f8      	adds	r0, r7, r3
20001018:	2340      	movs	r3, #64	; 0x40
2000101a:	2280      	movs	r2, #128	; 0x80
2000101c:	f7ff fb88 	bl	20000730 <load_sprite>
	load_sprite(&text, StartmenuWithText_bits, StartmenuWithText_width, StartmenuWithText_height);
20001020:	4921      	ldr	r1, [pc, #132]	; (200010a8 <intro_state+0x9c>)
20001022:	0038      	movs	r0, r7
20001024:	2340      	movs	r3, #64	; 0x40
20001026:	2280      	movs	r2, #128	; 0x80
20001028:	f7ff fb82 	bl	20000730 <load_sprite>
	
	int keyboardHighInput;
	int keyboardLowInput;
	
	while(1){
		clear_backBuffer();
2000102c:	f7ff fb66 	bl	200006fc <clear_backBuffer>
		
		draw_sprite(&noText, 0, 0, 1);
20001030:	2308      	movs	r3, #8
20001032:	18f8      	adds	r0, r7, r3
20001034:	2301      	movs	r3, #1
20001036:	2200      	movs	r2, #0
20001038:	2100      	movs	r1, #0
2000103a:	f7ff fb8f 	bl	2000075c <draw_sprite>
		graphic_draw_screen();
2000103e:	f7ff fa95 	bl	2000056c <graphic_draw_screen>
		clear_backBuffer();
20001042:	f7ff fb5b 	bl	200006fc <clear_backBuffer>
		delay_milli(50);
20001046:	2032      	movs	r0, #50	; 0x32
20001048:	f7ff f827 	bl	2000009a <delay_milli>
			
		keyboardHighInput = keybHigh();
2000104c:	f7ff fcba 	bl	200009c4 <keybHigh>
20001050:	0003      	movs	r3, r0
20001052:	617b      	str	r3, [r7, #20]
		keyboardLowInput = keybLow();
20001054:	f7ff fce1 	bl	20000a1a <keybLow>
20001058:	0003      	movs	r3, r0
2000105a:	613b      	str	r3, [r7, #16]
		
		if((keyboardHighInput != 255) || (keyboardLowInput != 255)){
2000105c:	697b      	ldr	r3, [r7, #20]
2000105e:	2bff      	cmp	r3, #255	; 0xff
20001060:	d11c      	bne.n	2000109c <intro_state+0x90>
20001062:	693b      	ldr	r3, [r7, #16]
20001064:	2bff      	cmp	r3, #255	; 0xff
20001066:	d119      	bne.n	2000109c <intro_state+0x90>
			break;
		}
						
		draw_sprite(&text, 0, 0, 1);
20001068:	0038      	movs	r0, r7
2000106a:	2301      	movs	r3, #1
2000106c:	2200      	movs	r2, #0
2000106e:	2100      	movs	r1, #0
20001070:	f7ff fb74 	bl	2000075c <draw_sprite>
		graphic_draw_screen();
20001074:	f7ff fa7a 	bl	2000056c <graphic_draw_screen>
		delay_milli(50);
20001078:	2032      	movs	r0, #50	; 0x32
2000107a:	f7ff f80e 	bl	2000009a <delay_milli>
		
		keyboardHighInput = keybHigh();
2000107e:	f7ff fca1 	bl	200009c4 <keybHigh>
20001082:	0003      	movs	r3, r0
20001084:	617b      	str	r3, [r7, #20]
		keyboardLowInput = keybLow();
20001086:	f7ff fcc8 	bl	20000a1a <keybLow>
2000108a:	0003      	movs	r3, r0
2000108c:	613b      	str	r3, [r7, #16]
		
		if((keyboardHighInput != 255) || (keyboardLowInput != 255)){
2000108e:	697b      	ldr	r3, [r7, #20]
20001090:	2bff      	cmp	r3, #255	; 0xff
20001092:	d103      	bne.n	2000109c <intro_state+0x90>
20001094:	693b      	ldr	r3, [r7, #16]
20001096:	2bff      	cmp	r3, #255	; 0xff
20001098:	d100      	bne.n	2000109c <intro_state+0x90>
		clear_backBuffer();
2000109a:	e7c7      	b.n	2000102c <intro_state+0x20>
			break;
		}
	}
}
2000109c:	46c0      	nop			; (mov r8, r8)
2000109e:	46bd      	mov	sp, r7
200010a0:	b006      	add	sp, #24
200010a2:	bd80      	pop	{r7, pc}
200010a4:	20002c48 	andcs	r2, r0, r8, asr #24
200010a8:	20002848 	andcs	r2, r0, r8, asr #16

200010ac <win_state>:

void win_state(){
200010ac:	b580      	push	{r7, lr}
200010ae:	b08a      	sub	sp, #40	; 0x28
200010b0:	af00      	add	r7, sp, #0
	sprite pRightWin;
	sprite pRightWinText;
	sprite pLeftWin;
	sprite pLeftWinText;
	
	load_sprite(&pRightWin, PlayerRightWins_bits, PlayerRightWins_width, PlayerRightWins_height);
200010b2:	4943      	ldr	r1, [pc, #268]	; (200011c0 <win_state+0x114>)
200010b4:	2318      	movs	r3, #24
200010b6:	18f8      	adds	r0, r7, r3
200010b8:	2340      	movs	r3, #64	; 0x40
200010ba:	2280      	movs	r2, #128	; 0x80
200010bc:	f7ff fb38 	bl	20000730 <load_sprite>
	load_sprite(&pRightWinText, PlayerRightWinsWithText_bits, PlayerRightWinsWithText_width, PlayerRightWinsWithText_height);
200010c0:	4940      	ldr	r1, [pc, #256]	; (200011c4 <win_state+0x118>)
200010c2:	2310      	movs	r3, #16
200010c4:	18f8      	adds	r0, r7, r3
200010c6:	2340      	movs	r3, #64	; 0x40
200010c8:	2280      	movs	r2, #128	; 0x80
200010ca:	f7ff fb31 	bl	20000730 <load_sprite>
	load_sprite(&pLeftWin, PlayerLeftWins_bits, PlayerLeftWins_width, PlayerLeftWins_height);
200010ce:	493e      	ldr	r1, [pc, #248]	; (200011c8 <win_state+0x11c>)
200010d0:	2308      	movs	r3, #8
200010d2:	18f8      	adds	r0, r7, r3
200010d4:	2340      	movs	r3, #64	; 0x40
200010d6:	2280      	movs	r2, #128	; 0x80
200010d8:	f7ff fb2a 	bl	20000730 <load_sprite>
	load_sprite(&pLeftWinText, PlayerLeftWinsWithText_bits, PlayerLeftWinsWithText_width, PlayerLeftWinsWithText_height);
200010dc:	493b      	ldr	r1, [pc, #236]	; (200011cc <win_state+0x120>)
200010de:	0038      	movs	r0, r7
200010e0:	2340      	movs	r3, #64	; 0x40
200010e2:	2280      	movs	r2, #128	; 0x80
200010e4:	f7ff fb24 	bl	20000730 <load_sprite>
	
	int keyboardHighInput;
	int keyboardLowInput;
		
	while(1){
		clear_backBuffer();
200010e8:	f7ff fb08 	bl	200006fc <clear_backBuffer>

		if(player_left_points == 5){
200010ec:	4b38      	ldr	r3, [pc, #224]	; (200011d0 <win_state+0x124>)
200010ee:	781b      	ldrb	r3, [r3, #0]
200010f0:	2b05      	cmp	r3, #5
200010f2:	d126      	bne.n	20001142 <win_state+0x96>
			draw_sprite(&pLeftWin, 0, 0, 1);
200010f4:	2308      	movs	r3, #8
200010f6:	18f8      	adds	r0, r7, r3
200010f8:	2301      	movs	r3, #1
200010fa:	2200      	movs	r2, #0
200010fc:	2100      	movs	r1, #0
200010fe:	f7ff fb2d 	bl	2000075c <draw_sprite>
			graphic_draw_screen();
20001102:	f7ff fa33 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
20001106:	f7ff faf9 	bl	200006fc <clear_backBuffer>
			delay_milli(50);
2000110a:	2032      	movs	r0, #50	; 0x32
2000110c:	f7fe ffc5 	bl	2000009a <delay_milli>
			
			keyboardHighInput = keybHigh();
20001110:	f7ff fc58 	bl	200009c4 <keybHigh>
20001114:	0003      	movs	r3, r0
20001116:	627b      	str	r3, [r7, #36]	; 0x24
			keyboardLowInput = keybLow();
20001118:	f7ff fc7f 	bl	20000a1a <keybLow>
2000111c:	0003      	movs	r3, r0
2000111e:	623b      	str	r3, [r7, #32]
		
			if((keyboardHighInput != 255) || (keyboardLowInput != 255)){
20001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001122:	2bff      	cmp	r3, #255	; 0xff
20001124:	d148      	bne.n	200011b8 <win_state+0x10c>
20001126:	6a3b      	ldr	r3, [r7, #32]
20001128:	2bff      	cmp	r3, #255	; 0xff
2000112a:	d145      	bne.n	200011b8 <win_state+0x10c>
				break;
			}
			
			draw_sprite(&pLeftWinText, 0, 0, 1);
2000112c:	0038      	movs	r0, r7
2000112e:	2301      	movs	r3, #1
20001130:	2200      	movs	r2, #0
20001132:	2100      	movs	r1, #0
20001134:	f7ff fb12 	bl	2000075c <draw_sprite>
			graphic_draw_screen();
20001138:	f7ff fa18 	bl	2000056c <graphic_draw_screen>
			delay_milli(50);
2000113c:	2032      	movs	r0, #50	; 0x32
2000113e:	f7fe ffac 	bl	2000009a <delay_milli>
		}
	
		if(player_right_points == 5){
20001142:	4b24      	ldr	r3, [pc, #144]	; (200011d4 <win_state+0x128>)
20001144:	781b      	ldrb	r3, [r3, #0]
20001146:	2b05      	cmp	r3, #5
20001148:	d127      	bne.n	2000119a <win_state+0xee>
			draw_sprite(&pRightWin, 0, 0, 1);
2000114a:	2318      	movs	r3, #24
2000114c:	18f8      	adds	r0, r7, r3
2000114e:	2301      	movs	r3, #1
20001150:	2200      	movs	r2, #0
20001152:	2100      	movs	r1, #0
20001154:	f7ff fb02 	bl	2000075c <draw_sprite>
			graphic_draw_screen();
20001158:	f7ff fa08 	bl	2000056c <graphic_draw_screen>
			clear_backBuffer();
2000115c:	f7ff face 	bl	200006fc <clear_backBuffer>
			delay_milli(50);
20001160:	2032      	movs	r0, #50	; 0x32
20001162:	f7fe ff9a 	bl	2000009a <delay_milli>
			
			keyboardHighInput = keybHigh();
20001166:	f7ff fc2d 	bl	200009c4 <keybHigh>
2000116a:	0003      	movs	r3, r0
2000116c:	627b      	str	r3, [r7, #36]	; 0x24
			keyboardLowInput = keybLow();
2000116e:	f7ff fc54 	bl	20000a1a <keybLow>
20001172:	0003      	movs	r3, r0
20001174:	623b      	str	r3, [r7, #32]
		
			if((keyboardHighInput != 255) || (keyboardLowInput != 255)){
20001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001178:	2bff      	cmp	r3, #255	; 0xff
2000117a:	d11d      	bne.n	200011b8 <win_state+0x10c>
2000117c:	6a3b      	ldr	r3, [r7, #32]
2000117e:	2bff      	cmp	r3, #255	; 0xff
20001180:	d11a      	bne.n	200011b8 <win_state+0x10c>
				break;
			}
			
			draw_sprite(&pRightWinText, 0, 0, 1);
20001182:	2310      	movs	r3, #16
20001184:	18f8      	adds	r0, r7, r3
20001186:	2301      	movs	r3, #1
20001188:	2200      	movs	r2, #0
2000118a:	2100      	movs	r1, #0
2000118c:	f7ff fae6 	bl	2000075c <draw_sprite>
			graphic_draw_screen();
20001190:	f7ff f9ec 	bl	2000056c <graphic_draw_screen>
			delay_milli(50);
20001194:	2032      	movs	r0, #50	; 0x32
20001196:	f7fe ff80 	bl	2000009a <delay_milli>
		}
		
		keyboardHighInput = keybHigh();
2000119a:	f7ff fc13 	bl	200009c4 <keybHigh>
2000119e:	0003      	movs	r3, r0
200011a0:	627b      	str	r3, [r7, #36]	; 0x24
		keyboardLowInput = keybLow();
200011a2:	f7ff fc3a 	bl	20000a1a <keybLow>
200011a6:	0003      	movs	r3, r0
200011a8:	623b      	str	r3, [r7, #32]
		
		if((keyboardHighInput != -1) || (keyboardLowInput != -1)){
200011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200011ac:	3301      	adds	r3, #1
200011ae:	d103      	bne.n	200011b8 <win_state+0x10c>
200011b0:	6a3b      	ldr	r3, [r7, #32]
200011b2:	3301      	adds	r3, #1
200011b4:	d100      	bne.n	200011b8 <win_state+0x10c>
		clear_backBuffer();
200011b6:	e797      	b.n	200010e8 <win_state+0x3c>
			break;
		}
	}
}
200011b8:	46c0      	nop			; (mov r8, r8)
200011ba:	46bd      	mov	sp, r7
200011bc:	b00a      	add	sp, #40	; 0x28
200011be:	bd80      	pop	{r7, pc}
200011c0:	20002048 	andcs	r2, r0, r8, asr #32
200011c4:	20002448 	andcs	r2, r0, r8, asr #8
200011c8:	20001848 	andcs	r1, r0, r8, asr #16
200011cc:	20001c48 	andcs	r1, r0, r8, asr #24
200011d0:	20001845 	andcs	r1, r0, r5, asr #16
200011d4:	20001844 	andcs	r1, r0, r4, asr #16

200011d8 <boolean_input>:

int boolean_input(){
200011d8:	b590      	push	{r4, r7, lr}
200011da:	b083      	sub	sp, #12
200011dc:	af00      	add	r7, sp, #0
	uint8_t keyboardHighInput = keybHigh();
200011de:	1dfc      	adds	r4, r7, #7
200011e0:	f7ff fbf0 	bl	200009c4 <keybHigh>
200011e4:	0003      	movs	r3, r0
200011e6:	7023      	strb	r3, [r4, #0]
	uint8_t keyboardLowInput = keybLow();
200011e8:	1dbc      	adds	r4, r7, #6
200011ea:	f7ff fc16 	bl	20000a1a <keybLow>
200011ee:	0003      	movs	r3, r0
200011f0:	7023      	strb	r3, [r4, #0]
		
	if((keyboardHighInput != -1) || (keyboardLowInput != -1)){
		return 1;
200011f2:	2301      	movs	r3, #1
	}
	return 0;
}
200011f4:	0018      	movs	r0, r3
200011f6:	46bd      	mov	sp, r7
200011f8:	b003      	add	sp, #12
200011fa:	bd90      	pop	{r4, r7, pc}

200011fc <main>:
}

#endif

#ifndef OLD_PIXEL
void main(void){
200011fc:	b590      	push	{r4, r7, lr}
200011fe:	b085      	sub	sp, #20
20001200:	af00      	add	r7, sp, #0
	
	POBJECT b = &ball;
20001202:	4b45      	ldr	r3, [pc, #276]	; (20001318 <main+0x11c>)
20001204:	60fb      	str	r3, [r7, #12]
	POBJECT p_left = &paddle_left;
20001206:	4b45      	ldr	r3, [pc, #276]	; (2000131c <main+0x120>)
20001208:	60bb      	str	r3, [r7, #8]
	POBJECT p_right = &paddle_right;
2000120a:	4b45      	ldr	r3, [pc, #276]	; (20001320 <main+0x124>)
2000120c:	607b      	str	r3, [r7, #4]

	init_app();
2000120e:	f7ff fedd 	bl	20000fcc <init_app>
	ascii_playerscore_init();
20001212:	f7ff fe9a 	bl	20000f4a <ascii_playerscore_init>
	graphic_initialize();
20001216:	f7ff f8f9 	bl	2000040c <graphic_initialize>

	b->dx = 15;
2000121a:	68fb      	ldr	r3, [r7, #12]
2000121c:	220f      	movs	r2, #15
2000121e:	605a      	str	r2, [r3, #4]
	b->dy = 15;
20001220:	68fb      	ldr	r3, [r7, #12]
20001222:	220f      	movs	r2, #15
20001224:	609a      	str	r2, [r3, #8]

#ifndef SIMULATOR
	graphic_clear_screen();
#endif

	intro_state();
20001226:	f7ff fef1 	bl	2000100c <intro_state>
	
	while(1){
		
		clear_backBuffer();
2000122a:	f7ff fa67 	bl	200006fc <clear_backBuffer>
		
		b->move(b, b);
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	69db      	ldr	r3, [r3, #28]
20001232:	68f9      	ldr	r1, [r7, #12]
20001234:	68fa      	ldr	r2, [r7, #12]
20001236:	0010      	movs	r0, r2
20001238:	4798      	blx	r3
		p_left->move(p_left, b);
2000123a:	68bb      	ldr	r3, [r7, #8]
2000123c:	69db      	ldr	r3, [r3, #28]
2000123e:	68f9      	ldr	r1, [r7, #12]
20001240:	68ba      	ldr	r2, [r7, #8]
20001242:	0010      	movs	r0, r2
20001244:	4798      	blx	r3
		p_right->move(p_right, b);
20001246:	687b      	ldr	r3, [r7, #4]
20001248:	69db      	ldr	r3, [r3, #28]
2000124a:	68f9      	ldr	r1, [r7, #12]
2000124c:	687a      	ldr	r2, [r7, #4]
2000124e:	0010      	movs	r0, r2
20001250:	4798      	blx	r3
		
		char p_l_key = keybHigh();
20001252:	1cfc      	adds	r4, r7, #3
20001254:	f7ff fbb6 	bl	200009c4 <keybHigh>
20001258:	0003      	movs	r3, r0
2000125a:	7023      	strb	r3, [r4, #0]
		char p_r_key = keybLow();
2000125c:	1cbc      	adds	r4, r7, #2
2000125e:	f7ff fbdc 	bl	20000a1a <keybLow>
20001262:	0003      	movs	r3, r0
20001264:	7023      	strb	r3, [r4, #0]
		
    	switch(p_l_key){																				//PD8-15
20001266:	1cfb      	adds	r3, r7, #3
20001268:	781b      	ldrb	r3, [r3, #0]
2000126a:	2b02      	cmp	r3, #2
2000126c:	d002      	beq.n	20001274 <main+0x78>
2000126e:	2b05      	cmp	r3, #5
20001270:	d008      	beq.n	20001284 <main+0x88>
20001272:	e00e      	b.n	20001292 <main+0x96>
			case 2: p_left->set_speed(p_left,0,-20);break;
20001274:	68bb      	ldr	r3, [r7, #8]
20001276:	6a1b      	ldr	r3, [r3, #32]
20001278:	2214      	movs	r2, #20
2000127a:	4252      	negs	r2, r2
2000127c:	68b8      	ldr	r0, [r7, #8]
2000127e:	2100      	movs	r1, #0
20001280:	4798      	blx	r3
20001282:	e00d      	b.n	200012a0 <main+0xa4>
			case 5: p_left->set_speed(p_left,0,20);break;
20001284:	68bb      	ldr	r3, [r7, #8]
20001286:	6a1b      	ldr	r3, [r3, #32]
20001288:	68b8      	ldr	r0, [r7, #8]
2000128a:	2214      	movs	r2, #20
2000128c:	2100      	movs	r1, #0
2000128e:	4798      	blx	r3
20001290:	e006      	b.n	200012a0 <main+0xa4>
			default: p_left->set_speed(p_left,0,0);break;
20001292:	68bb      	ldr	r3, [r7, #8]
20001294:	6a1b      	ldr	r3, [r3, #32]
20001296:	68b8      	ldr	r0, [r7, #8]
20001298:	2200      	movs	r2, #0
2000129a:	2100      	movs	r1, #0
2000129c:	4798      	blx	r3
2000129e:	46c0      	nop			; (mov r8, r8)
		}
		
		switch(p_r_key){																				//PD0-7
200012a0:	1cbb      	adds	r3, r7, #2
200012a2:	781b      	ldrb	r3, [r3, #0]
200012a4:	2b02      	cmp	r3, #2
200012a6:	d002      	beq.n	200012ae <main+0xb2>
200012a8:	2b05      	cmp	r3, #5
200012aa:	d008      	beq.n	200012be <main+0xc2>
200012ac:	e00e      	b.n	200012cc <main+0xd0>
			case 2: p_right->set_speed(p_right,0,-20);break;
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	6a1b      	ldr	r3, [r3, #32]
200012b2:	2214      	movs	r2, #20
200012b4:	4252      	negs	r2, r2
200012b6:	6878      	ldr	r0, [r7, #4]
200012b8:	2100      	movs	r1, #0
200012ba:	4798      	blx	r3
200012bc:	e00d      	b.n	200012da <main+0xde>
			case 5: p_right->set_speed(p_right,0,20);break;
200012be:	687b      	ldr	r3, [r7, #4]
200012c0:	6a1b      	ldr	r3, [r3, #32]
200012c2:	6878      	ldr	r0, [r7, #4]
200012c4:	2214      	movs	r2, #20
200012c6:	2100      	movs	r1, #0
200012c8:	4798      	blx	r3
200012ca:	e006      	b.n	200012da <main+0xde>
			default: p_right->set_speed(p_right,0,0);break;
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	6a1b      	ldr	r3, [r3, #32]
200012d0:	6878      	ldr	r0, [r7, #4]
200012d2:	2200      	movs	r2, #0
200012d4:	2100      	movs	r1, #0
200012d6:	4798      	blx	r3
200012d8:	46c0      	nop			; (mov r8, r8)
		}
		
		graphic_draw_screen();
200012da:	f7ff f947 	bl	2000056c <graphic_draw_screen>
		delay_milli(40);
200012de:	2028      	movs	r0, #40	; 0x28
200012e0:	f7fe fedb 	bl	2000009a <delay_milli>
		
		uint8_t leftPoints = player_left_points;
200012e4:	1c7b      	adds	r3, r7, #1
200012e6:	4a0f      	ldr	r2, [pc, #60]	; (20001324 <main+0x128>)
200012e8:	7812      	ldrb	r2, [r2, #0]
200012ea:	701a      	strb	r2, [r3, #0]
		uint8_t rightPoints = player_right_points;
200012ec:	003b      	movs	r3, r7
200012ee:	4a0e      	ldr	r2, [pc, #56]	; (20001328 <main+0x12c>)
200012f0:	7812      	ldrb	r2, [r2, #0]
200012f2:	701a      	strb	r2, [r3, #0]
		
		if(leftPoints == 5 || rightPoints == 5){
200012f4:	1c7b      	adds	r3, r7, #1
200012f6:	781b      	ldrb	r3, [r3, #0]
200012f8:	2b05      	cmp	r3, #5
200012fa:	d003      	beq.n	20001304 <main+0x108>
200012fc:	003b      	movs	r3, r7
200012fe:	781b      	ldrb	r3, [r3, #0]
20001300:	2b05      	cmp	r3, #5
20001302:	d192      	bne.n	2000122a <main+0x2e>
			win_state();
20001304:	f7ff fed2 	bl	200010ac <win_state>
			player_left_points = 0;
20001308:	4b06      	ldr	r3, [pc, #24]	; (20001324 <main+0x128>)
2000130a:	2200      	movs	r2, #0
2000130c:	701a      	strb	r2, [r3, #0]
			player_right_points = 0;
2000130e:	4b06      	ldr	r3, [pc, #24]	; (20001328 <main+0x12c>)
20001310:	2200      	movs	r2, #0
20001312:	701a      	strb	r2, [r3, #0]
	while(1){
20001314:	e789      	b.n	2000122a <main+0x2e>
20001316:	46c0      	nop			; (mov r8, r8)
20001318:	20003118 	andcs	r3, r0, r8, lsl r1
2000131c:	2000308c 	andcs	r3, r0, ip, lsl #1
20001320:	200030b0 	strhcs	r3, [r0], -r0
20001324:	20001845 	andcs	r1, r0, r5, asr #16
20001328:	20001844 	andcs	r1, r0, r4, asr #16

2000132c <__udivsi3>:
2000132c:	2200      	movs	r2, #0
2000132e:	0843      	lsrs	r3, r0, #1
20001330:	428b      	cmp	r3, r1
20001332:	d374      	bcc.n	2000141e <__udivsi3+0xf2>
20001334:	0903      	lsrs	r3, r0, #4
20001336:	428b      	cmp	r3, r1
20001338:	d35f      	bcc.n	200013fa <__udivsi3+0xce>
2000133a:	0a03      	lsrs	r3, r0, #8
2000133c:	428b      	cmp	r3, r1
2000133e:	d344      	bcc.n	200013ca <__udivsi3+0x9e>
20001340:	0b03      	lsrs	r3, r0, #12
20001342:	428b      	cmp	r3, r1
20001344:	d328      	bcc.n	20001398 <__udivsi3+0x6c>
20001346:	0c03      	lsrs	r3, r0, #16
20001348:	428b      	cmp	r3, r1
2000134a:	d30d      	bcc.n	20001368 <__udivsi3+0x3c>
2000134c:	22ff      	movs	r2, #255	; 0xff
2000134e:	0209      	lsls	r1, r1, #8
20001350:	ba12      	rev	r2, r2
20001352:	0c03      	lsrs	r3, r0, #16
20001354:	428b      	cmp	r3, r1
20001356:	d302      	bcc.n	2000135e <__udivsi3+0x32>
20001358:	1212      	asrs	r2, r2, #8
2000135a:	0209      	lsls	r1, r1, #8
2000135c:	d065      	beq.n	2000142a <__udivsi3+0xfe>
2000135e:	0b03      	lsrs	r3, r0, #12
20001360:	428b      	cmp	r3, r1
20001362:	d319      	bcc.n	20001398 <__udivsi3+0x6c>
20001364:	e000      	b.n	20001368 <__udivsi3+0x3c>
20001366:	0a09      	lsrs	r1, r1, #8
20001368:	0bc3      	lsrs	r3, r0, #15
2000136a:	428b      	cmp	r3, r1
2000136c:	d301      	bcc.n	20001372 <__udivsi3+0x46>
2000136e:	03cb      	lsls	r3, r1, #15
20001370:	1ac0      	subs	r0, r0, r3
20001372:	4152      	adcs	r2, r2
20001374:	0b83      	lsrs	r3, r0, #14
20001376:	428b      	cmp	r3, r1
20001378:	d301      	bcc.n	2000137e <__udivsi3+0x52>
2000137a:	038b      	lsls	r3, r1, #14
2000137c:	1ac0      	subs	r0, r0, r3
2000137e:	4152      	adcs	r2, r2
20001380:	0b43      	lsrs	r3, r0, #13
20001382:	428b      	cmp	r3, r1
20001384:	d301      	bcc.n	2000138a <__udivsi3+0x5e>
20001386:	034b      	lsls	r3, r1, #13
20001388:	1ac0      	subs	r0, r0, r3
2000138a:	4152      	adcs	r2, r2
2000138c:	0b03      	lsrs	r3, r0, #12
2000138e:	428b      	cmp	r3, r1
20001390:	d301      	bcc.n	20001396 <__udivsi3+0x6a>
20001392:	030b      	lsls	r3, r1, #12
20001394:	1ac0      	subs	r0, r0, r3
20001396:	4152      	adcs	r2, r2
20001398:	0ac3      	lsrs	r3, r0, #11
2000139a:	428b      	cmp	r3, r1
2000139c:	d301      	bcc.n	200013a2 <__udivsi3+0x76>
2000139e:	02cb      	lsls	r3, r1, #11
200013a0:	1ac0      	subs	r0, r0, r3
200013a2:	4152      	adcs	r2, r2
200013a4:	0a83      	lsrs	r3, r0, #10
200013a6:	428b      	cmp	r3, r1
200013a8:	d301      	bcc.n	200013ae <__udivsi3+0x82>
200013aa:	028b      	lsls	r3, r1, #10
200013ac:	1ac0      	subs	r0, r0, r3
200013ae:	4152      	adcs	r2, r2
200013b0:	0a43      	lsrs	r3, r0, #9
200013b2:	428b      	cmp	r3, r1
200013b4:	d301      	bcc.n	200013ba <__udivsi3+0x8e>
200013b6:	024b      	lsls	r3, r1, #9
200013b8:	1ac0      	subs	r0, r0, r3
200013ba:	4152      	adcs	r2, r2
200013bc:	0a03      	lsrs	r3, r0, #8
200013be:	428b      	cmp	r3, r1
200013c0:	d301      	bcc.n	200013c6 <__udivsi3+0x9a>
200013c2:	020b      	lsls	r3, r1, #8
200013c4:	1ac0      	subs	r0, r0, r3
200013c6:	4152      	adcs	r2, r2
200013c8:	d2cd      	bcs.n	20001366 <__udivsi3+0x3a>
200013ca:	09c3      	lsrs	r3, r0, #7
200013cc:	428b      	cmp	r3, r1
200013ce:	d301      	bcc.n	200013d4 <__udivsi3+0xa8>
200013d0:	01cb      	lsls	r3, r1, #7
200013d2:	1ac0      	subs	r0, r0, r3
200013d4:	4152      	adcs	r2, r2
200013d6:	0983      	lsrs	r3, r0, #6
200013d8:	428b      	cmp	r3, r1
200013da:	d301      	bcc.n	200013e0 <__udivsi3+0xb4>
200013dc:	018b      	lsls	r3, r1, #6
200013de:	1ac0      	subs	r0, r0, r3
200013e0:	4152      	adcs	r2, r2
200013e2:	0943      	lsrs	r3, r0, #5
200013e4:	428b      	cmp	r3, r1
200013e6:	d301      	bcc.n	200013ec <__udivsi3+0xc0>
200013e8:	014b      	lsls	r3, r1, #5
200013ea:	1ac0      	subs	r0, r0, r3
200013ec:	4152      	adcs	r2, r2
200013ee:	0903      	lsrs	r3, r0, #4
200013f0:	428b      	cmp	r3, r1
200013f2:	d301      	bcc.n	200013f8 <__udivsi3+0xcc>
200013f4:	010b      	lsls	r3, r1, #4
200013f6:	1ac0      	subs	r0, r0, r3
200013f8:	4152      	adcs	r2, r2
200013fa:	08c3      	lsrs	r3, r0, #3
200013fc:	428b      	cmp	r3, r1
200013fe:	d301      	bcc.n	20001404 <__udivsi3+0xd8>
20001400:	00cb      	lsls	r3, r1, #3
20001402:	1ac0      	subs	r0, r0, r3
20001404:	4152      	adcs	r2, r2
20001406:	0883      	lsrs	r3, r0, #2
20001408:	428b      	cmp	r3, r1
2000140a:	d301      	bcc.n	20001410 <__udivsi3+0xe4>
2000140c:	008b      	lsls	r3, r1, #2
2000140e:	1ac0      	subs	r0, r0, r3
20001410:	4152      	adcs	r2, r2
20001412:	0843      	lsrs	r3, r0, #1
20001414:	428b      	cmp	r3, r1
20001416:	d301      	bcc.n	2000141c <__udivsi3+0xf0>
20001418:	004b      	lsls	r3, r1, #1
2000141a:	1ac0      	subs	r0, r0, r3
2000141c:	4152      	adcs	r2, r2
2000141e:	1a41      	subs	r1, r0, r1
20001420:	d200      	bcs.n	20001424 <__udivsi3+0xf8>
20001422:	4601      	mov	r1, r0
20001424:	4152      	adcs	r2, r2
20001426:	4610      	mov	r0, r2
20001428:	4770      	bx	lr
2000142a:	e7ff      	b.n	2000142c <__udivsi3+0x100>
2000142c:	b501      	push	{r0, lr}
2000142e:	2000      	movs	r0, #0
20001430:	f000 f806 	bl	20001440 <__aeabi_idiv0>
20001434:	bd02      	pop	{r1, pc}
20001436:	46c0      	nop			; (mov r8, r8)

20001438 <__aeabi_uidivmod>:
20001438:	2900      	cmp	r1, #0
2000143a:	d0f7      	beq.n	2000142c <__udivsi3+0x100>
2000143c:	e776      	b.n	2000132c <__udivsi3>
2000143e:	4770      	bx	lr

20001440 <__aeabi_idiv0>:
20001440:	4770      	bx	lr
20001442:	46c0      	nop			; (mov r8, r8)

20001444 <backBuffer>:
	...

20001844 <player_right_points>:
20001844:	 	andeq	r0, r0, r4, lsl #10

20001845 <player_left_points>:
20001845:	 	andeq	r0, r0, r5

20001848 <PlayerLeftWins_bits>:
	...
20001878:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001888:	00007ff0 	strdeq	r7, [r0], -r0
	...
20001894:	001fc000 	andseq	ip, pc, r0
20001898:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000189c:	00000000 	andeq	r0, r0, r0
200018a0:	00000700 	andeq	r0, r0, r0, lsl #14
200018a4:	001fe000 	andseq	lr, pc, r0
200018a8:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
200018ac:	00000000 	andeq	r0, r0, r0
200018b0:	00000700 	andeq	r0, r0, r0, lsl #14
200018b4:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
200018b8:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
200018bc:	00000000 	andeq	r0, r0, r0
200018c0:	00000700 	andeq	r0, r0, r0, lsl #14
200018c4:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
200018c8:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
200018cc:	00000000 	andeq	r0, r0, r0
200018d0:	00000f00 	andeq	r0, r0, r0, lsl #30
200018d4:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
200018d8:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
200018dc:	00000000 	andeq	r0, r0, r0
200018e0:	00000f00 	andeq	r0, r0, r0, lsl #30
200018e4:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
200018e8:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
200018ec:	00000000 	andeq	r0, r0, r0
200018f0:	00000e00 	andeq	r0, r0, r0, lsl #28
200018f4:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
200018f8:	000e7870 	andeq	r7, lr, r0, ror r8
200018fc:	00000000 	andeq	r0, r0, r0
20001900:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001904:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
20001908:	000e7ff0 	strdeq	r7, [lr], -r0
2000190c:	000fc000 	andeq	ip, pc, r0
20001910:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001914:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
20001918:	000e7ff0 	strdeq	r7, [lr], -r0
2000191c:	001fe000 	andseq	lr, pc, r0
20001920:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001924:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
20001928:	000e3ff0 	strdeq	r3, [lr], -r0
2000192c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001930:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001934:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
20001938:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000193c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20001940:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
20001944:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
20001948:	3f0f00e0 	svccc	0x000f00e0
2000194c:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20001950:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001954:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001958:	3f8700e0 	svccc	0x008700e0
2000195c:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20001960:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001964:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001968:	3f8700e0 	svccc	0x008700e0
2000196c:	3f8ffbce 	svccc	0x008ffbce
20001970:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
20001974:	0fe01c0f 	svceq	0x00e01c0f
20001978:	7bc701e0 	blvc	1f1c2100 <startup-0xe3df00>
2000197c:	1f0ffbde 	svcne	0x000ffbde
20001980:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001984:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
20001988:	7bc701e0 	blvc	1f1c2110 <startup-0xe3def0>
2000198c:	0f0fbbfe 	svceq	0x000fbbfe
20001990:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
20001994:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001998:	7bc701c0 	blvc	1f1c20a0 <startup-0xe3df60>
2000199c:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200019a0:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
200019a4:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
200019a8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200019ac:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200019b0:	3c003c00 	stccc	12, cr3, [r0], {-0}
200019b4:	0f007838 	svceq	0x00007838
200019b8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200019bc:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200019c0:	fc003c00 	stc2	12, cr3, [r0], {-0}
200019c4:	0f00783e 	svceq	0x0000783e
200019c8:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200019cc:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200019d0:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
200019d4:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
200019d8:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
200019dc:	0701f701 	streq	pc, [r1, -r1, lsl #14]
200019e0:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
200019e4:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
200019e8:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
200019ec:	070fe703 	streq	lr, [pc, -r3, lsl #14]
200019f0:	e0fffc00 	rscs	pc, pc, r0, lsl #24
200019f4:	07807007 	streq	r7, [r0, r7]
200019f8:	df800070 	svcle	0x00800070
200019fc:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001a00:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001a04:	03807000 	orreq	r7, r0, #0
20001a08:	c0000000 	andgt	r0, r0, r0
20001a0c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001a10:	00f00000 	rscseq	r0, r0, r0
20001a14:	03800000 	orreq	r0, r0, #0
20001a18:	00000000 	andeq	r0, r0, r0
20001a1c:	000007c0 	andeq	r0, r0, r0, asr #15
	...
20001a2c:	000003e7 	andeq	r0, r0, r7, ror #7
	...
20001a3c:	000003ef 	andeq	r0, r0, pc, ror #7
	...
20001a4c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20001a5c:	e38000ff 	orr	r0, r0, #255	; 0xff
20001a60:	00000038 	andeq	r0, r0, r8, lsr r0
	...
20001a6c:	e38e007e 	orr	r0, lr, #126	; 0x7e
20001a70:	00000078 	andeq	r0, r0, r8, ror r0
	...
20001a7c:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20001a80:	00001cf8 	strdeq	r1, [r0], -r8
	...
20001a8c:	e38ee700 	orr	lr, lr, #0, 14
20001a90:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
20001a9c:	e38ee700 	orr	lr, lr, #0, 14
20001aa0:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
20001aac:	e3cfef00 	bic	lr, pc, #0, 30
20001ab0:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
20001abc:	e3cfef00 	bic	lr, pc, #0, 30
20001ac0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001acc:	e3cfde00 	bic	sp, pc, #0, 28
20001ad0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001adc:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001ae0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001aec:	e1ffbe00 	mvns	fp, r0, lsl #28
20001af0:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001afc:	e1fffc00 	mvns	pc, r0, lsl #24
20001b00:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001b0c:	e1fff800 	mvns	pc, r0, lsl #16
20001b10:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001b1c:	e1fbf800 	mvns	pc, r0, lsl #16
20001b20:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001b2c:	e0f1f000 	rscs	pc, r1, r0
20001b30:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001b3c:	e0f0f000 	rscs	pc, r0, r0
20001b40:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001b4c:	0000e000 	andeq	lr, r0, r0
20001b50:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001b60:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

20001c48 <PlayerLeftWinsWithText_bits>:
	...
20001c78:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20001c88:	00007ff0 	strdeq	r7, [r0], -r0
	...
20001c94:	001fc000 	andseq	ip, pc, r0
20001c98:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
20001c9c:	00000000 	andeq	r0, r0, r0
20001ca0:	00000700 	andeq	r0, r0, r0, lsl #14
20001ca4:	001fe000 	andseq	lr, pc, r0
20001ca8:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
20001cac:	00000000 	andeq	r0, r0, r0
20001cb0:	00000700 	andeq	r0, r0, r0, lsl #14
20001cb4:	0e1ff000 	cdpeq	0, 1, cr15, cr15, cr0, {0}
20001cb8:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
20001cbc:	00000000 	andeq	r0, r0, r0
20001cc0:	00000700 	andeq	r0, r0, r0, lsl #14
20001cc4:	0e01f000 	cdpeq	0, 0, cr15, cr1, cr0, {0}
20001cc8:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
20001ccc:	00000000 	andeq	r0, r0, r0
20001cd0:	00000f00 	andeq	r0, r0, r0, lsl #30
20001cd4:	0e00f800 	cdpeq	8, 0, cr15, cr0, cr0, {0}
20001cd8:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
20001cdc:	00000000 	andeq	r0, r0, r0
20001ce0:	00000f00 	andeq	r0, r0, r0, lsl #30
20001ce4:	0e007800 	cdpeq	8, 0, cr7, cr0, cr0, {0}
20001ce8:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
20001cec:	00000000 	andeq	r0, r0, r0
20001cf0:	00000e00 	andeq	r0, r0, r0, lsl #28
20001cf4:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001cf8:	000e7870 	andeq	r7, lr, r0, ror r8
20001cfc:	00000000 	andeq	r0, r0, r0
20001d00:	f0000e00 			; <UNDEFINED> instruction: 0xf0000e00
20001d04:	0e003c1f 	mcreq	12, 0, r3, cr0, cr15, {0}
20001d08:	000e7ff0 	strdeq	r7, [lr], -r0
20001d0c:	000fc000 	andeq	ip, pc, r0
20001d10:	f8001e00 			; <UNDEFINED> instruction: 0xf8001e00
20001d14:	0e07fc1f 	mcreq	12, 0, pc, cr7, cr15, {0}	; <UNPREDICTABLE>
20001d18:	000e7ff0 	strdeq	r7, [lr], -r0
20001d1c:	001fe000 	andseq	lr, pc, r0
20001d20:	fc001e00 	stc2	14, cr1, [r0], {-0}
20001d24:	0e07ff9f 	mcreq	15, 0, pc, cr7, cr15, {4}	; <UNPREDICTABLE>
20001d28:	000e3ff0 	strdeq	r3, [lr], -r0
20001d2c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20001d30:	7e001c00 	cdpvc	12, 0, cr1, cr0, cr0, {0}
20001d34:	7e07ff9c 	mcrvc	15, 0, pc, cr7, cr12, {4}	; <UNPREDICTABLE>
20001d38:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
20001d3c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20001d40:	3e001c03 	cdpcc	12, 0, cr1, cr0, cr3, {0}
20001d44:	ffc01f9c 			; <UNDEFINED> instruction: 0xffc01f9c
20001d48:	3f0f00e0 	svccc	0x000f00e0
20001d4c:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20001d50:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001d54:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001d58:	3f8700e0 	svccc	0x008700e0
20001d5c:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20001d60:	fe003c03 	cdp2	12, 0, cr3, cr0, cr3, {0}
20001d64:	ffe01c1f 			; <UNDEFINED> instruction: 0xffe01c1f
20001d68:	3f8700e0 	svccc	0x008700e0
20001d6c:	3f8ffbce 	svccc	0x008ffbce
20001d70:	fe003800 	vcmla.f16	d3, d0, d0[0], #0
20001d74:	0fe01c0f 	svceq	0x00e01c0f
20001d78:	7bc701e0 	blvc	1f1c2500 <startup-0xe3db00>
20001d7c:	1f0ffbde 	svcne	0x000ffbde
20001d80:	0e003800 	cdpeq	8, 0, cr3, cr0, cr0, {0}
20001d84:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
20001d88:	7bc701e0 	blvc	1f1c2510 <startup-0xe3daf0>
20001d8c:	0f0fbbfe 	svceq	0x000fbbfe
20001d90:	1e003800 	cdpne	8, 0, cr3, cr0, cr0, {0}
20001d94:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001d98:	7bc701c0 	blvc	1f1c24a0 <startup-0xe3db60>
20001d9c:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
20001da0:	1e003c00 	cdpne	12, 0, cr3, cr0, cr0, {0}
20001da4:	0e003c00 	cdpeq	12, 0, cr3, cr0, cr0, {0}
20001da8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001dac:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
20001db0:	3c003c00 	stccc	12, cr3, [r0], {-0}
20001db4:	0f007838 	svceq	0x00007838
20001db8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
20001dbc:	0700f380 	streq	pc, [r0, -r0, lsl #7]
20001dc0:	fc003c00 	stc2	12, cr3, [r0], {-0}
20001dc4:	0f00783e 	svceq	0x0000783e
20001dc8:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
20001dcc:	0700f780 	streq	pc, [r0, -r0, lsl #15]
20001dd0:	fc1ffc00 	ldc2	12, cr15, [pc], {-0}
20001dd4:	0780783f 			; <UNDEFINED> instruction: 0x0780783f
20001dd8:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
20001ddc:	0701f701 	streq	pc, [r1, -r1, lsl #14]
20001de0:	f07ffc00 			; <UNDEFINED> instruction: 0xf07ffc00
20001de4:	0780703f 			; <UNDEFINED> instruction: 0x0780703f
20001de8:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
20001dec:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001df0:	e0fffc00 	rscs	pc, pc, r0, lsl #24
20001df4:	07807007 	streq	r7, [r0, r7]
20001df8:	df800070 	svcle	0x00800070
20001dfc:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20001e00:	00fc1c00 	rscseq	r1, ip, r0, lsl #24
20001e04:	03807000 	orreq	r7, r0, #0
20001e08:	c0000000 	andgt	r0, r0, r0
20001e0c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20001e10:	00f00000 	rscseq	r0, r0, r0
20001e14:	03800000 	orreq	r0, r0, #0
20001e18:	00000000 	andeq	r0, r0, r0
20001e1c:	000007c0 	andeq	r0, r0, r0, asr #15
	...
20001e2c:	000003e7 	andeq	r0, r0, r7, ror #7
	...
20001e3c:	000003ef 	andeq	r0, r0, pc, ror #7
	...
20001e4c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
20001e5c:	e38000ff 	orr	r0, r0, #255	; 0xff
20001e60:	00000038 	andeq	r0, r0, r8, lsr r0
	...
20001e6c:	e38e007e 	orr	r0, lr, #126	; 0x7e
20001e70:	00000078 	andeq	r0, r0, r8, ror r0
	...
20001e7c:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20001e80:	00001cf8 	strdeq	r1, [r0], -r8
	...
20001e8c:	e38ee700 	orr	lr, lr, #0, 14
20001e90:	003e1cf8 	ldrshteq	r1, [lr], -r8
	...
20001e9c:	e38ee700 	orr	lr, lr, #0, 14
20001ea0:	003f1df8 	ldrshteq	r1, [pc], -r8
	...
20001eac:	e3cfef00 	bic	lr, pc, #0, 30
20001eb0:	003f9df8 	ldrshteq	r9, [pc], -r8
	...
20001ebc:	e3cfef00 	bic	lr, pc, #0, 30
20001ec0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001ecc:	e3cfde00 	bic	sp, pc, #0, 28
20001ed0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001edc:	e1dffe00 	bics	pc, pc, r0, lsl #28
20001ee0:	00079ff8 	strdeq	r9, [r7], -r8
	...
20001eec:	e1ffbe00 	mvns	fp, r0, lsl #28
20001ef0:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
20001efc:	e1fffc00 	mvns	pc, r0, lsl #24
20001f00:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
20001f0c:	e1fff800 	mvns	pc, r0, lsl #16
20001f10:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
20001f1c:	e1fbf800 	mvns	pc, r0, lsl #16
20001f20:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
20001f2c:	e0f1f000 	rscs	pc, r1, r0
20001f30:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
20001f3c:	e0f0f000 	rscs	pc, r0, r0
20001f40:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
20001f4c:	0000e000 	andeq	lr, r0, r0
20001f50:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20001f60:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
20001f80:	00080000 	andeq	r0, r8, r0
20001f84:	00000000 	andeq	r0, r0, r0
20001f88:	c0000000 	andgt	r0, r0, r0
20001f8c:	00000003 	andeq	r0, r0, r3
20001f90:	00080000 	andeq	r0, r8, r0
20001f94:	00000000 	andeq	r0, r0, r0
20001f98:	40000000 	andmi	r0, r0, r0
20001f9c:	00000004 	andeq	r0, r0, r4
20001fa0:	00080000 	andeq	r0, r8, r0
20001fa4:	00000000 	andeq	r0, r0, r0
20001fa8:	40000000 	andmi	r0, r0, r0
20001fac:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20001fb0:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20001fb4:	00000004 	andeq	r0, r0, r4
20001fb8:	40000000 	andmi	r0, r0, r0
20001fbc:	00209264 	eoreq	r9, r0, r4, ror #4
20001fc0:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20001fc4:	00000004 	andeq	r0, r0, r4
20001fc8:	c0000000 	andgt	r0, r0, r0
20001fcc:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20001fd0:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20001fd4:	00000004 	andeq	r0, r0, r4
20001fd8:	40000000 	andmi	r0, r0, r0
20001fdc:	41040220 	tstmi	r4, r0, lsr #4
20001fe0:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20001fe4:	00000003 	andeq	r0, r0, r3
20001fe8:	40000000 	andmi	r0, r0, r0
20001fec:	80e39c20 	rschi	r9, r3, r0, lsr #24
20001ff0:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20001ff4:	00000002 	andeq	r0, r0, r2
	...
20002000:	00000800 	andeq	r0, r0, r0, lsl #16
20002004:	00000001 	andeq	r0, r0, r1
	...
20002010:	00000800 	andeq	r0, r0, r0, lsl #16
20002014:	00000001 	andeq	r0, r0, r1
	...

20002048 <PlayerRightWins_bits>:
	...
20002078:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20002088:	00007ff0 	strdeq	r7, [r0], -r0
2000208c:	00000000 	andeq	r0, r0, r0
20002090:	0007fc00 	andeq	pc, r7, r0, lsl #24
20002094:	00000000 	andeq	r0, r0, r0
20002098:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000209c:	00000000 	andeq	r0, r0, r0
200020a0:	001fff80 	andseq	pc, pc, r0, lsl #31
200020a4:	00000000 	andeq	r0, r0, r0
200020a8:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
200020ac:	00000000 	andeq	r0, r0, r0
200020b0:	003fff80 	eorseq	pc, pc, r0, lsl #31
200020b4:	00000000 	andeq	r0, r0, r0
200020b8:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
200020bc:	00000000 	andeq	r0, r0, r0
200020c0:	003e0f80 	eorseq	r0, lr, r0, lsl #31
200020c4:	000000e0 	andeq	r0, r0, r0, ror #1
200020c8:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
200020cc:	00000000 	andeq	r0, r0, r0
200020d0:	003c0780 	eorseq	r0, ip, r0, lsl #15
200020d4:	007000e0 	rsbseq	r0, r0, r0, ror #1
200020d8:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
200020dc:	00000000 	andeq	r0, r0, r0
200020e0:	00380700 	eorseq	r0, r8, r0, lsl #14
200020e4:	007000e0 	rsbseq	r0, r0, r0, ror #1
200020e8:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
200020ec:	00000000 	andeq	r0, r0, r0
200020f0:	00380f00 	eorseq	r0, r8, r0, lsl #30
200020f4:	007001e0 	rsbseq	r0, r0, r0, ror #3
200020f8:	000e7870 	andeq	r7, lr, r0, ror r8
200020fc:	00000000 	andeq	r0, r0, r0
20002100:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002104:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
20002108:	000e7ff0 	strdeq	r7, [lr], -r0
2000210c:	000fc000 	andeq	ip, pc, r0
20002110:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002114:	3ff001c0 	svccc	0x00f001c0
20002118:	000e7ff0 	strdeq	r7, [lr], -r0
2000211c:	001fe000 	andseq	lr, pc, r0
20002120:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002124:	3ffc01c0 	svccc	0x00fc01c0
20002128:	000e3ff0 	strdeq	r3, [lr], -r0
2000212c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002130:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002134:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
20002138:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000213c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20002140:	000ffe03 	andeq	pc, pc, r3, lsl #28
20002144:	00fc03c0 	rscseq	r0, ip, r0, asr #7
20002148:	3f0f00e0 	svccc	0x000f00e0
2000214c:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20002150:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
20002154:	00e00780 	rsceq	r0, r0, r0, lsl #15
20002158:	3f8700e0 	svccc	0x008700e0
2000215c:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20002160:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
20002164:	00e0078f 	rsceq	r0, r0, pc, lsl #15
20002168:	3f8700e0 	svccc	0x008700e0
2000216c:	3f8ffbce 	svccc	0x008ffbce
20002170:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002174:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
20002178:	7bc701e0 	blvc	1f1c2900 <startup-0xe3d700>
2000217c:	1f0ffbde 	svcne	0x000ffbde
20002180:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002184:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
20002188:	7bc701e0 	blvc	1f1c2910 <startup-0xe3d6f0>
2000218c:	0f0fbbfe 	svceq	0x000fbbfe
20002190:	e783cf00 	str	ip, [r3, r0, lsl #30]
20002194:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
20002198:	7bc701c0 	blvc	1f1c28a0 <startup-0xe3d760>
2000219c:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200021a0:	e7838f00 	str	r8, [r3, r0, lsl #30]
200021a4:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
200021a8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200021ac:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200021b0:	e7838f00 	str	r8, [r3, r0, lsl #30]
200021b4:	01e39e3c 	mvneq	r9, ip, lsr lr
200021b8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200021bc:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200021c0:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200021c4:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200021c8:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200021cc:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200021d0:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200021d4:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200021d8:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
200021dc:	0701f701 	streq	pc, [r1, -r1, lsl #14]
200021e0:	e3838380 	orr	r8, r3, #128, 6
200021e4:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
200021e8:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
200021ec:	070fe703 	streq	lr, [pc, -r3, lsl #14]
200021f0:	e3838380 	orr	r8, r3, #128, 6
200021f4:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
200021f8:	df800070 	svcle	0x00800070
200021fc:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002200:	e3838380 	orr	r8, r3, #128, 6
20002204:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
20002208:	c0000000 	andgt	r0, r0, r0
2000220c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002210:	c3838380 	orrgt	r8, r3, #128, 6
20002214:	0383803f 	orreq	r8, r3, #63	; 0x3f
20002218:	00000000 	andeq	r0, r0, r0
2000221c:	000007c0 	andeq	r0, r0, r0, asr #15
20002220:	c3838380 	orrgt	r8, r3, #128, 6
20002224:	0380003f 	orreq	r0, r0, #63	; 0x3f
20002228:	00000000 	andeq	r0, r0, r0
2000222c:	000003e7 	andeq	r0, r0, r7, ror #7
20002230:	03838000 	orreq	r8, r3, #0
20002234:	0000003c 	andeq	r0, r0, ip, lsr r0
20002238:	00000000 	andeq	r0, r0, r0
2000223c:	000003ef 	andeq	r0, r0, pc, ror #7
20002240:	00000000 	andeq	r0, r0, r0
20002244:	0000003c 	andeq	r0, r0, ip, lsr r0
20002248:	00000000 	andeq	r0, r0, r0
2000224c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002250:	70000000 	andvc	r0, r0, r0
20002254:	0000001c 	andeq	r0, r0, ip, lsl r0
20002258:	00000000 	andeq	r0, r0, r0
2000225c:	e38000ff 	orr	r0, r0, #255	; 0xff
20002260:	70000038 	andvc	r0, r0, r8, lsr r0
20002264:	0000001e 	andeq	r0, r0, lr, lsl r0
20002268:	00000000 	andeq	r0, r0, r0
2000226c:	e38e007e 	orr	r0, lr, #126	; 0x7e
20002270:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
20002274:	0000001e 	andeq	r0, r0, lr, lsl r0
20002278:	00000000 	andeq	r0, r0, r0
2000227c:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20002280:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
20002284:	0000001f 	andeq	r0, r0, pc, lsl r0
20002288:	00000000 	andeq	r0, r0, r0
2000228c:	e38ee700 	orr	lr, lr, #0, 14
20002290:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
20002294:	0000000f 	andeq	r0, r0, pc
20002298:	00000000 	andeq	r0, r0, r0
2000229c:	e38ee700 	orr	lr, lr, #0, 14
200022a0:	e03f1df8 	ldrsht	r1, [pc], -r8
200022a4:	0000000f 	andeq	r0, r0, pc
200022a8:	00000000 	andeq	r0, r0, r0
200022ac:	e3cfef00 	bic	lr, pc, #0, 30
200022b0:	c03f9df8 	ldrshtgt	r9, [pc], -r8
200022b4:	00000007 	andeq	r0, r0, r7
200022b8:	00000000 	andeq	r0, r0, r0
200022bc:	e3cfef00 	bic	lr, pc, #0, 30
200022c0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200022cc:	e3cfde00 	bic	sp, pc, #0, 28
200022d0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200022dc:	e1dffe00 	bics	pc, pc, r0, lsl #28
200022e0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200022ec:	e1ffbe00 	mvns	fp, r0, lsl #28
200022f0:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
200022fc:	e1fffc00 	mvns	pc, r0, lsl #24
20002300:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
2000230c:	e1fff800 	mvns	pc, r0, lsl #16
20002310:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
2000231c:	e1fbf800 	mvns	pc, r0, lsl #16
20002320:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
2000232c:	e0f1f000 	rscs	pc, r1, r0
20002330:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
2000233c:	e0f0f000 	rscs	pc, r0, r0
20002340:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
2000234c:	0000e000 	andeq	lr, r0, r0
20002350:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20002360:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...

20002448 <PlayerRightWinsWithText_bits>:
	...
20002478:	00001fe0 	andeq	r1, r0, r0, ror #31
	...
20002488:	00007ff0 	strdeq	r7, [r0], -r0
2000248c:	00000000 	andeq	r0, r0, r0
20002490:	0007fc00 	andeq	pc, r7, r0, lsl #24
20002494:	00000000 	andeq	r0, r0, r0
20002498:	001e7ff8 			; <UNDEFINED> instruction: 0x001e7ff8
2000249c:	00000000 	andeq	r0, r0, r0
200024a0:	001fff80 	andseq	pc, pc, r0, lsl #31
200024a4:	00000000 	andeq	r0, r0, r0
200024a8:	001ef87e 	andseq	pc, lr, lr, ror r8	; <UNPREDICTABLE>
200024ac:	00000000 	andeq	r0, r0, r0
200024b0:	003fff80 	eorseq	pc, pc, r0, lsl #31
200024b4:	00000000 	andeq	r0, r0, r0
200024b8:	001ef03e 	andseq	pc, lr, lr, lsr r0	; <UNPREDICTABLE>
200024bc:	00000000 	andeq	r0, r0, r0
200024c0:	003e0f80 	eorseq	r0, lr, r0, lsl #31
200024c4:	000000e0 	andeq	r0, r0, r0, ror #1
200024c8:	000ef07e 	andeq	pc, lr, lr, ror r0	; <UNPREDICTABLE>
200024cc:	00000000 	andeq	r0, r0, r0
200024d0:	003c0780 	eorseq	r0, ip, r0, lsl #15
200024d4:	007000e0 	rsbseq	r0, r0, r0, ror #1
200024d8:	000ef07c 	andeq	pc, lr, ip, ror r0	; <UNPREDICTABLE>
200024dc:	00000000 	andeq	r0, r0, r0
200024e0:	00380700 	eorseq	r0, r8, r0, lsl #14
200024e4:	007000e0 	rsbseq	r0, r0, r0, ror #1
200024e8:	000ef078 	andeq	pc, lr, r8, ror r0	; <UNPREDICTABLE>
200024ec:	00000000 	andeq	r0, r0, r0
200024f0:	00380f00 	eorseq	r0, r8, r0, lsl #30
200024f4:	007001e0 	rsbseq	r0, r0, r0, ror #3
200024f8:	000e7870 	andeq	r7, lr, r0, ror r8
200024fc:	00000000 	andeq	r0, r0, r0
20002500:	0e380f00 	cdpeq	15, 3, cr0, cr8, cr0, {0}
20002504:	3ef001e0 	cdpcc	1, 15, cr0, cr0, cr0, {7}
20002508:	000e7ff0 	strdeq	r7, [lr], -r0
2000250c:	000fc000 	andeq	ip, pc, r0
20002510:	0e3c0e00 	cdpeq	14, 3, cr0, cr12, cr0, {0}
20002514:	3ff001c0 	svccc	0x00f001c0
20002518:	000e7ff0 	strdeq	r7, [lr], -r0
2000251c:	001fe000 	andseq	lr, pc, r0
20002520:	0e3ffe00 	cdpeq	14, 3, cr15, cr15, cr0, {0}
20002524:	3ffc01c0 	svccc	0x00fc01c0
20002528:	000e3ff0 	strdeq	r3, [lr], -r0
2000252c:	01dff800 	bicseq	pc, pc, r0, lsl #16
20002530:	003ffe00 	eorseq	pc, pc, r0, lsl #28
20002534:	07fc03c0 	ldrbeq	r0, [ip, r0, asr #7]!
20002538:	3e0f00f0 	mcrcc	0, 0, r0, cr15, cr0, {7}
2000253c:	f3def9c7 	vmul.f16	<illegal reg q15.5>, q15, d7[0]
20002540:	000ffe03 	andeq	pc, pc, r3, lsl #28
20002544:	00fc03c0 	rscseq	r0, ip, r0, asr #7
20002548:	3f0f00e0 	svccc	0x000f00e0
2000254c:	ffdc39cf 			; <UNDEFINED> instruction: 0xffdc39cf
20002550:	0701fe03 	streq	pc, [r1, -r3, lsl #28]
20002554:	00e00780 	rsceq	r0, r0, r0, lsl #15
20002558:	3f8700e0 	svccc	0x008700e0
2000255c:	ffde79cf 			; <UNDEFINED> instruction: 0xffde79cf
20002560:	8701ee03 	strhi	lr, [r1, -r3, lsl #28]
20002564:	00e0078f 	rsceq	r0, r0, pc, lsl #15
20002568:	3f8700e0 	svccc	0x008700e0
2000256c:	3f8ffbce 	svccc	0x008ffbce
20002570:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002574:	00e1ff9f 	smlaleq	pc, r1, pc, pc	; <UNPREDICTABLE>
20002578:	7bc701e0 	blvc	1f1c2d00 <startup-0xe3d300>
2000257c:	1f0ffbde 	svcne	0x000ffbde
20002580:	c703ce00 	strgt	ip, [r3, -r0, lsl #28]
20002584:	00e3ff1f 	rsceq	pc, r3, pc, lsl pc	; <UNPREDICTABLE>
20002588:	7bc701e0 	blvc	1f1c2d10 <startup-0xe3d2f0>
2000258c:	0f0fbbfe 	svceq	0x000fbbfe
20002590:	e783cf00 	str	ip, [r3, r0, lsl #30]
20002594:	00e3ff1d 	rsceq	pc, r3, sp, lsl pc	; <UNPREDICTABLE>
20002598:	7bc701c0 	blvc	1f1c2ca0 <startup-0xe3d360>
2000259c:	070f7bfe 			; <UNDEFINED> instruction: 0x070f7bfe
200025a0:	e7838f00 	str	r8, [r3, r0, lsl #30]
200025a4:	01e3ff1d 	mvneq	pc, sp, lsl pc	; <UNPREDICTABLE>
200025a8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200025ac:	070073fc 			; <UNDEFINED> instruction: 0x070073fc
200025b0:	e7838f00 	str	r8, [r3, r0, lsl #30]
200025b4:	01e39e3c 	mvneq	r9, ip, lsr lr
200025b8:	f9c701e0 			; <UNDEFINED> instruction: 0xf9c701e0
200025bc:	0700f380 	streq	pc, [r0, -r0, lsl #7]
200025c0:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200025c4:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200025c8:	ffc701f0 			; <UNDEFINED> instruction: 0xffc701f0
200025cc:	0700f780 	streq	pc, [r0, -r0, lsl #15]
200025d0:	e3838780 	orr	r8, r3, #128, 14	; 0x2000000
200025d4:	01c39e3c 	biceq	r9, r3, ip, lsr lr
200025d8:	ffc700f0 			; <UNDEFINED> instruction: 0xffc700f0
200025dc:	0701f701 	streq	pc, [r1, -r1, lsl #14]
200025e0:	e3838380 	orr	r8, r3, #128, 6
200025e4:	03c39c3c 	biceq	r9, r3, #60, 24	; 0x3c00
200025e8:	ff8000f0 			; <UNDEFINED> instruction: 0xff8000f0
200025ec:	070fe703 	streq	lr, [pc, -r3, lsl #14]
200025f0:	e3838380 	orr	r8, r3, #128, 6
200025f4:	03c39c3d 	biceq	r9, r3, #15616	; 0x3d00
200025f8:	df800070 	svcle	0x00800070
200025fc:	070fe703 	streq	lr, [pc, -r3, lsl #14]
20002600:	e3838380 	orr	r8, r3, #128, 6
20002604:	03839c3f 	orreq	r9, r3, #16128	; 0x3f00
20002608:	c0000000 	andgt	r0, r0, r0
2000260c:	0707c783 	streq	ip, [r7, -r3, lsl #15]
20002610:	c3838380 	orrgt	r8, r3, #128, 6
20002614:	0383803f 	orreq	r8, r3, #63	; 0x3f
20002618:	00000000 	andeq	r0, r0, r0
2000261c:	000007c0 	andeq	r0, r0, r0, asr #15
20002620:	c3838380 	orrgt	r8, r3, #128, 6
20002624:	0380003f 	orreq	r0, r0, #63	; 0x3f
20002628:	00000000 	andeq	r0, r0, r0
2000262c:	000003e7 	andeq	r0, r0, r7, ror #7
20002630:	03838000 	orreq	r8, r3, #0
20002634:	0000003c 	andeq	r0, r0, ip, lsr r0
20002638:	00000000 	andeq	r0, r0, r0
2000263c:	000003ef 	andeq	r0, r0, pc, ror #7
20002640:	00000000 	andeq	r0, r0, r0
20002644:	0000003c 	andeq	r0, r0, ip, lsr r0
20002648:	00000000 	andeq	r0, r0, r0
2000264c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002650:	70000000 	andvc	r0, r0, r0
20002654:	0000001c 	andeq	r0, r0, ip, lsl r0
20002658:	00000000 	andeq	r0, r0, r0
2000265c:	e38000ff 	orr	r0, r0, #255	; 0xff
20002660:	70000038 	andvc	r0, r0, r8, lsr r0
20002664:	0000001e 	andeq	r0, r0, lr, lsl r0
20002668:	00000000 	andeq	r0, r0, r0
2000266c:	e38e007e 	orr	r0, lr, #126	; 0x7e
20002670:	f0000078 			; <UNDEFINED> instruction: 0xf0000078
20002674:	0000001e 	andeq	r0, r0, lr, lsl r0
20002678:	00000000 	andeq	r0, r0, r0
2000267c:	e38ee73e 	orr	lr, lr, #16252928	; 0xf80000
20002680:	f0001cf8 			; <UNDEFINED> instruction: 0xf0001cf8
20002684:	0000001f 	andeq	r0, r0, pc, lsl r0
20002688:	00000000 	andeq	r0, r0, r0
2000268c:	e38ee700 	orr	lr, lr, #0, 14
20002690:	f03e1cf8 			; <UNDEFINED> instruction: 0xf03e1cf8
20002694:	0000000f 	andeq	r0, r0, pc
20002698:	00000000 	andeq	r0, r0, r0
2000269c:	e38ee700 	orr	lr, lr, #0, 14
200026a0:	e03f1df8 	ldrsht	r1, [pc], -r8
200026a4:	0000000f 	andeq	r0, r0, pc
200026a8:	00000000 	andeq	r0, r0, r0
200026ac:	e3cfef00 	bic	lr, pc, #0, 30
200026b0:	c03f9df8 	ldrshtgt	r9, [pc], -r8
200026b4:	00000007 	andeq	r0, r0, r7
200026b8:	00000000 	andeq	r0, r0, r0
200026bc:	e3cfef00 	bic	lr, pc, #0, 30
200026c0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200026cc:	e3cfde00 	bic	sp, pc, #0, 28
200026d0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200026dc:	e1dffe00 	bics	pc, pc, r0, lsl #28
200026e0:	00079ff8 	strdeq	r9, [r7], -r8
	...
200026ec:	e1ffbe00 	mvns	fp, r0, lsl #28
200026f0:	003f8ff8 	ldrshteq	r8, [pc], -r8
	...
200026fc:	e1fffc00 	mvns	pc, r0, lsl #24
20002700:	007f8fb8 	ldrhteq	r8, [pc], #-248
	...
2000270c:	e1fff800 	mvns	pc, r0, lsl #16
20002710:	007f0fb8 	ldrhteq	r0, [pc], #-248
	...
2000271c:	e1fbf800 	mvns	pc, r0, lsl #16
20002720:	00700fb8 	ldrhteq	r0, [r0], #-248	; 0xffffff08
	...
2000272c:	e0f1f000 	rscs	pc, r1, r0
20002730:	007c0fb8 	ldrhteq	r0, [ip], #-248	; 0xffffff08
	...
2000273c:	e0f0f000 	rscs	pc, r0, r0
20002740:	007f8f38 	rsbseq	r8, pc, r8, lsr pc	; <UNPREDICTABLE>
	...
2000274c:	0000e000 	andeq	lr, r0, r0
20002750:	007f8f00 	rsbseq	r8, pc, r0, lsl #30
	...
20002760:	001f8f00 	andseq	r8, pc, r0, lsl #30
	...
20002780:	00080000 	andeq	r0, r8, r0
20002784:	00000000 	andeq	r0, r0, r0
20002788:	c0000000 	andgt	r0, r0, r0
2000278c:	00000003 	andeq	r0, r0, r3
20002790:	00080000 	andeq	r0, r8, r0
20002794:	00000000 	andeq	r0, r0, r0
20002798:	40000000 	andmi	r0, r0, r0
2000279c:	00000004 	andeq	r0, r0, r4
200027a0:	00080000 	andeq	r0, r8, r0
200027a4:	00000000 	andeq	r0, r0, r0
200027a8:	40000000 	andmi	r0, r0, r0
200027ac:	81c70ca4 	bichi	r0, r7, r4, lsr #25
200027b0:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
200027b4:	00000004 	andeq	r0, r0, r4
200027b8:	40000000 	andmi	r0, r0, r0
200027bc:	00209264 	eoreq	r9, r0, r4, ror #4
200027c0:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
200027c4:	00000004 	andeq	r0, r0, r4
200027c8:	c0000000 	andgt	r0, r0, r0
200027cc:	80c31e23 	sbchi	r1, r3, r3, lsr #28
200027d0:	9e182493 	cfcmpsls	r2, mvf8, mvf3
200027d4:	00000004 	andeq	r0, r0, r4
200027d8:	40000000 	andmi	r0, r0, r0
200027dc:	41040220 	tstmi	r4, r0, lsr #4
200027e0:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
200027e4:	00000003 	andeq	r0, r0, r3
200027e8:	40000000 	andmi	r0, r0, r0
200027ec:	80e39c20 	rschi	r9, r3, r0, lsr #24
200027f0:	1c481093 	mcrrne	0, 9, r1, r8, cr3
200027f4:	00000002 	andeq	r0, r0, r2
	...
20002800:	00000800 	andeq	r0, r0, r0, lsl #16
20002804:	00000001 	andeq	r0, r0, r1
	...
20002810:	00000800 	andeq	r0, r0, r0, lsl #16
20002814:	00000001 	andeq	r0, r0, r1
	...

20002848 <StartmenuWithText_bits>:
	...
20002884:	00fff000 	rscseq	pc, pc, r0
	...
20002894:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
200028a4:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
200028b4:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
200028c4:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
200028d4:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
200028e4:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
200028f4:	0700003c 	smladxeq	r0, ip, r0, r0
200028f8:	003fc000 	eorseq	ip, pc, r0
	...
20002904:	0700001e 	smladeq	r0, lr, r0, r0
20002908:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002914:	0780001e 	usada8eq	r0, lr, r0, r0
20002918:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002924:	0780000f 	streq	r0, [r0, pc]
20002928:	01f9ffc0 	mvnseq	pc, r0, asr #31
2000292c:	0000007f 	andeq	r0, r0, pc, ror r0
20002930:	00000000 	andeq	r0, r0, r0
20002934:	03c0000f 	biceq	r0, r0, #15
20002938:	01f007c0 	mvnseq	r0, r0, asr #15
2000293c:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
20002940:	00000038 	andeq	r0, r0, r8, lsr r0
20002944:	03c00007 	biceq	r0, r0, #7
20002948:	81e00f80 	mvnhi	r0, r0, lsl #31
2000294c:	003e01ff 	ldrshteq	r0, [lr], -pc
20002950:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
20002954:	03e00007 	mvneq	r0, #7
20002958:	81c00f00 	bichi	r0, r0, r0, lsl #30
2000295c:	003e03e7 	eorseq	r0, lr, r7, ror #7
20002960:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
20002964:	01e00007 	mvneq	r0, r7
20002968:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
2000296c:	007c03e3 	rsbseq	r0, ip, r3, ror #7
20002970:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
20002974:	01f00003 	mvnseq	r0, r3
20002978:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
2000297c:	007c07c3 	rsbseq	r0, ip, r3, asr #15
20002980:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
20002984:	00f80003 	rscseq	r0, r8, r3
20002988:	e1c01e00 	bic	r1, r0, r0, lsl #28
2000298c:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002990:	0001fc0f 	andeq	pc, r1, pc, lsl #24
20002994:	007c0000 	rsbseq	r0, ip, r0
20002998:	e1c01c00 	bic	r1, r0, r0, lsl #24
2000299c:	00f80781 	rscseq	r0, r8, r1, lsl #15
200029a0:	00007e0f 	andeq	r7, r0, pc, lsl #28
200029a4:	003e0000 	eorseq	r0, lr, r0
200029a8:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
200029ac:	81f00f00 	mvnshi	r0, r0, lsl #30
200029b0:	00003e07 	andeq	r3, r0, r7, lsl #28
200029b4:	001f8000 	andseq	r8, pc, r0
200029b8:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
200029bc:	81f00f00 	mvnshi	r0, r0, lsl #30
200029c0:	00001f07 	andeq	r1, r0, r7, lsl #30
200029c4:	000fe000 	andeq	lr, pc, r0
200029c8:	70fff800 	rscsvc	pc, pc, r0, lsl #16
200029cc:	83e00f00 	mvnhi	r0, #0, 30
200029d0:	00000f07 	andeq	r0, r0, r7, lsl #30
200029d4:	0007f000 	andeq	pc, r7, r0
200029d8:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
200029dc:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
200029e0:	00000783 	andeq	r0, r0, r3, lsl #15
200029e4:	0001f800 	andeq	pc, r1, r0, lsl #16
200029e8:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
200029ec:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
200029f0:	00ff0783 	rscseq	r0, pc, r3, lsl #15
200029f4:	0000fc00 	andeq	pc, r0, r0, lsl #24
200029f8:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
200029fc:	8fe03c00 	svchi	0x00e03c00
20002a00:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002a04:	00003e00 	andeq	r3, r0, r0, lsl #28
20002a08:	38007000 	stmdacc	r0, {ip, sp, lr}
20002a0c:	9fe03c00 	svcls	0x00e03c00
20002a10:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002a14:	00001f00 	andeq	r1, r0, r0, lsl #30
20002a18:	38007000 	stmdacc	r0, {ip, sp, lr}
20002a1c:	9fe03c00 	svcls	0x00e03c00
20002a20:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002a24:	00001f00 	andeq	r1, r0, r0, lsl #30
20002a28:	38007000 	stmdacc	r0, {ip, sp, lr}
20002a2c:	bdc03c00 	stcllt	12, cr3, [r0]
20002a30:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002a34:	00000f80 	andeq	r0, r0, r0, lsl #31
20002a38:	38007000 	stmdacc	r0, {ip, sp, lr}
20002a3c:	fdc01c00 	stc2l	12, cr1, [r0]
20002a40:	01e079c3 	mvneq	r7, r3, asr #19
20002a44:	00000780 	andeq	r0, r0, r0, lsl #15
20002a48:	78007000 	stmdavc	r0, {ip, sp, lr}
20002a4c:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002a50:	01e039c3 	mvneq	r3, r3, asr #19
20002a54:	000003c0 	andeq	r0, r0, r0, asr #7
20002a58:	78007000 	stmdavc	r0, {ip, sp, lr}
20002a5c:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002a60:	01c001c3 	biceq	r0, r0, r3, asr #3
20002a64:	000003e0 	andeq	r0, r0, r0, ror #7
20002a68:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002a6c:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
20002a70:	01c001c3 	biceq	r0, r0, r3, asr #3
20002a74:	000001e0 	andeq	r0, r0, r0, ror #3
20002a78:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002a7c:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
20002a80:	01c001c3 	biceq	r0, r0, r3, asr #3
20002a84:	000000e0 	andeq	r0, r0, r0, ror #1
20002a88:	e0007000 	and	r7, r0, r0
20002a8c:	e1c00f01 	bic	r0, r0, r1, lsl #30
20002a90:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002a94:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002a98:	e0007000 	and	r7, r0, r0
20002a9c:	e1c00781 	bic	r0, r0, r1, lsl #15
20002aa0:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002aa4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002aa8:	e0007800 	and	r7, r0, r0, lsl #16
20002aac:	c1c007c7 	bicgt	r0, r0, r7, asr #15
20002ab0:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
20002ab4:	00000070 	andeq	r0, r0, r0, ror r0
20002ab8:	c0007800 	andgt	r7, r0, r0, lsl #16
20002abc:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
20002ac0:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
20002ac4:	00000078 	andeq	r0, r0, r8, ror r0
20002ac8:	80003c00 	andhi	r3, r0, r0, lsl #24
20002acc:	81c001ff 	strdhi	r0, [r0, #31]
20002ad0:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
20002ad4:	1ff00078 	svcne	0x00f00078
20002ad8:	00003e00 	andeq	r3, r0, r0, lsl #28
20002adc:	81c001fe 	strdhi	r0, [r0, #30]
20002ae0:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002ae4:	1fff0078 	svcne	0x00ff0078
20002ae8:	00001e00 	andeq	r1, r0, r0, lsl #28
20002aec:	81e000f8 	strdhi	r0, [r0, #8]!
20002af0:	039fff03 	orrseq	pc, pc, #3, 30
20002af4:	1fffe078 	svcne	0x00ffe078
20002af8:	00001e00 	andeq	r1, r0, r0, lsl #28
20002afc:	81e00000 	mvnhi	r0, r0
20002b00:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002b04:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002b08:	00000000 	andeq	r0, r0, r0
20002b0c:	80e00000 	rschi	r0, r0, r0
20002b10:	0381f003 	orreq	pc, r1, #3
20002b14:	0003fff8 	strdeq	pc, [r3], -r8
20002b18:	00000000 	andeq	r0, r0, r0
20002b1c:	00e00000 	rsceq	r0, r0, r0
20002b20:	03800000 	orreq	r0, r0, #0
20002b24:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002b30:	07800000 	streq	r0, [r0, r0]
	...
20002b40:	07800000 	streq	r0, [r0, r0]
	...
20002b50:	07000000 	streq	r0, [r0, -r0]
	...
20002b60:	07000000 	streq	r0, [r0, -r0]
	...
20002b70:	07000000 	streq	r0, [r0, -r0]
	...
20002b80:	07080000 	streq	r0, [r8, -r0]
20002b84:	00000000 	andeq	r0, r0, r0
20002b88:	c0000000 	andgt	r0, r0, r0
20002b8c:	00000003 	andeq	r0, r0, r3
20002b90:	00080000 	andeq	r0, r8, r0
20002b94:	00000000 	andeq	r0, r0, r0
20002b98:	40000000 	andmi	r0, r0, r0
20002b9c:	00000004 	andeq	r0, r0, r4
20002ba0:	00080000 	andeq	r0, r8, r0
20002ba4:	00000000 	andeq	r0, r0, r0
20002ba8:	40000000 	andmi	r0, r0, r0
20002bac:	81c70ca4 	bichi	r0, r7, r4, lsr #25
20002bb0:	8c482471 	cfstrdhi	mvd2, [r8], {113}	; 0x71
20002bb4:	00000004 	andeq	r0, r0, r4
20002bb8:	40000000 	andmi	r0, r0, r0
20002bbc:	00209264 	eoreq	r9, r0, r4, ror #4
20002bc0:	92282492 	eorls	r2, r8, #-1845493760	; 0x92000000
20002bc4:	00000004 	andeq	r0, r0, r4
20002bc8:	c0000000 	andgt	r0, r0, r0
20002bcc:	80c31e23 	sbchi	r1, r3, r3, lsr #28
20002bd0:	9e182493 	cfcmpsls	r2, mvf8, mvf3
20002bd4:	00000004 	andeq	r0, r0, r4
20002bd8:	40000000 	andmi	r0, r0, r0
20002bdc:	41040220 	tstmi	r4, r0, lsr #4
20002be0:	02281892 	eoreq	r1, r8, #9568256	; 0x920000
20002be4:	00000003 	andeq	r0, r0, r3
20002be8:	40000000 	andmi	r0, r0, r0
20002bec:	80e39c20 	rschi	r9, r3, r0, lsr #24
20002bf0:	1c481093 	mcrrne	0, 9, r1, r8, cr3
20002bf4:	00000002 	andeq	r0, r0, r2
	...
20002c00:	00000800 	andeq	r0, r0, r0, lsl #16
20002c04:	00000001 	andeq	r0, r0, r1
	...
20002c10:	00000800 	andeq	r0, r0, r0, lsl #16
20002c14:	00000001 	andeq	r0, r0, r1
	...

20002c48 <Startmenu_bits>:
	...
20002c84:	00fff000 	rscseq	pc, pc, r0
	...
20002c94:	01fffc00 	mvnseq	pc, r0, lsl #24
	...
20002ca4:	07ffff00 	ldrbeq	pc, [pc, r0, lsl #30]!	; <UNPREDICTABLE>
	...
20002cb4:	07e03fe0 	strbeq	r3, [r0, r0, ror #31]!
	...
20002cc4:	07800ff8 			; <UNDEFINED> instruction: 0x07800ff8
	...
20002cd4:	070003f8 			; <UNDEFINED> instruction: 0x070003f8
	...
20002ce4:	0700007c 	smlsdxeq	r0, ip, r0, r0
	...
20002cf4:	0700003c 	smladxeq	r0, ip, r0, r0
20002cf8:	003fc000 	eorseq	ip, pc, r0
	...
20002d04:	0700001e 	smladeq	r0, lr, r0, r0
20002d08:	007ffe00 	rsbseq	pc, pc, r0, lsl #28
	...
20002d14:	0780001e 	usada8eq	r0, lr, r0, r0
20002d18:	00ffffc0 	rscseq	pc, pc, r0, asr #31
	...
20002d24:	0780000f 	streq	r0, [r0, pc]
20002d28:	01f9ffc0 	mvnseq	pc, r0, asr #31
20002d2c:	0000007f 	andeq	r0, r0, pc, ror r0
20002d30:	00000000 	andeq	r0, r0, r0
20002d34:	03c0000f 	biceq	r0, r0, #15
20002d38:	01f007c0 	mvnseq	r0, r0, asr #15
20002d3c:	000e00ff 	strdeq	r0, [lr], -pc	; <UNPREDICTABLE>
20002d40:	00000038 	andeq	r0, r0, r8, lsr r0
20002d44:	03c00007 	biceq	r0, r0, #7
20002d48:	81e00f80 	mvnhi	r0, r0, lsl #31
20002d4c:	003e01ff 	ldrshteq	r0, [lr], -pc
20002d50:	801f0038 	andshi	r0, pc, r8, lsr r0	; <UNPREDICTABLE>
20002d54:	03e00007 	mvneq	r0, #7
20002d58:	81c00f00 	bichi	r0, r0, r0, lsl #30
20002d5c:	003e03e7 	eorseq	r0, lr, r7, ror #7
20002d60:	801fc03c 	andshi	ip, pc, ip, lsr r0	; <UNPREDICTABLE>
20002d64:	01e00007 	mvneq	r0, r7
20002d68:	c1c00e00 	bicgt	r0, r0, r0, lsl #28
20002d6c:	007c03e3 	rsbseq	r0, ip, r3, ror #7
20002d70:	801fe03e 	andshi	lr, pc, lr, lsr r0	; <UNPREDICTABLE>
20002d74:	01f00003 	mvnseq	r0, r3
20002d78:	c1c01e00 	bicgt	r1, r0, r0, lsl #28
20002d7c:	007c07c3 	rsbseq	r0, ip, r3, asr #15
20002d80:	801ff81e 	andshi	pc, pc, lr, lsl r8	; <UNPREDICTABLE>
20002d84:	00f80003 	rscseq	r0, r8, r3
20002d88:	e1c01e00 	bic	r1, r0, r0, lsl #28
20002d8c:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002d90:	0001fc0f 	andeq	pc, r1, pc, lsl #24
20002d94:	007c0000 	rsbseq	r0, ip, r0
20002d98:	e1c01c00 	bic	r1, r0, r0, lsl #24
20002d9c:	00f80781 	rscseq	r0, r8, r1, lsl #15
20002da0:	00007e0f 	andeq	r7, r0, pc, lsl #28
20002da4:	003e0000 	eorseq	r0, lr, r0
20002da8:	f1e03c00 			; <UNDEFINED> instruction: 0xf1e03c00
20002dac:	81f00f00 	mvnshi	r0, r0, lsl #30
20002db0:	00003e07 	andeq	r3, r0, r7, lsl #28
20002db4:	001f8000 	andseq	r8, pc, r0
20002db8:	f1e07c00 			; <UNDEFINED> instruction: 0xf1e07c00
20002dbc:	81f00f00 	mvnshi	r0, r0, lsl #30
20002dc0:	00001f07 	andeq	r1, r0, r7, lsl #30
20002dc4:	000fe000 	andeq	lr, pc, r0
20002dc8:	70fff800 	rscsvc	pc, pc, r0, lsl #16
20002dcc:	83e00f00 	mvnhi	r0, #0, 30
20002dd0:	00000f07 	andeq	r0, r0, r7, lsl #30
20002dd4:	0007f000 	andeq	pc, r7, r0
20002dd8:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002ddc:	87e01e00 	strbhi	r1, [r0, r0, lsl #28]!
20002de0:	00000783 	andeq	r0, r0, r3, lsl #15
20002de4:	0001f800 	andeq	pc, r1, r0, lsl #16
20002de8:	78fff800 	ldmvc	pc!, {fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
20002dec:	87e03e00 	strbhi	r3, [r0, r0, lsl #28]!
20002df0:	00ff0783 	rscseq	r0, pc, r3, lsl #15
20002df4:	0000fc00 	andeq	pc, r0, r0, lsl #24
20002df8:	78007800 	stmdavc	r0, {fp, ip, sp, lr}
20002dfc:	8fe03c00 	svchi	0x00e03c00
20002e00:	00ffc3c3 	rscseq	ip, pc, r3, asr #7
20002e04:	00003e00 	andeq	r3, r0, r0, lsl #28
20002e08:	38007000 	stmdacc	r0, {ip, sp, lr}
20002e0c:	9fe03c00 	svcls	0x00e03c00
20002e10:	00ffe3c3 	rscseq	lr, pc, r3, asr #7
20002e14:	00001f00 	andeq	r1, r0, r0, lsl #30
20002e18:	38007000 	stmdacc	r0, {ip, sp, lr}
20002e1c:	9fe03c00 	svcls	0x00e03c00
20002e20:	00e7f9c3 	rsceq	pc, r7, r3, asr #19
20002e24:	00001f00 	andeq	r1, r0, r0, lsl #30
20002e28:	38007000 	stmdacc	r0, {ip, sp, lr}
20002e2c:	bdc03c00 	stcllt	12, cr3, [r0]
20002e30:	00e1f9c3 	rsceq	pc, r1, r3, asr #19
20002e34:	00000f80 	andeq	r0, r0, r0, lsl #31
20002e38:	38007000 	stmdacc	r0, {ip, sp, lr}
20002e3c:	fdc01c00 	stc2l	12, cr1, [r0]
20002e40:	01e079c3 	mvneq	r7, r3, asr #19
20002e44:	00000780 	andeq	r0, r0, r0, lsl #15
20002e48:	78007000 	stmdavc	r0, {ip, sp, lr}
20002e4c:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002e50:	01e039c3 	mvneq	r3, r3, asr #19
20002e54:	000003c0 	andeq	r0, r0, r0, asr #7
20002e58:	78007000 	stmdavc	r0, {ip, sp, lr}
20002e5c:	f9c01e00 			; <UNDEFINED> instruction: 0xf9c01e00
20002e60:	01c001c3 	biceq	r0, r0, r3, asr #3
20002e64:	000003e0 	andeq	r0, r0, r0, ror #7
20002e68:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002e6c:	f1c00e00 			; <UNDEFINED> instruction: 0xf1c00e00
20002e70:	01c001c3 	biceq	r0, r0, r3, asr #3
20002e74:	000001e0 	andeq	r0, r0, r0, ror #3
20002e78:	f0007000 			; <UNDEFINED> instruction: 0xf0007000
20002e7c:	f1c00f00 			; <UNDEFINED> instruction: 0xf1c00f00
20002e80:	01c001c3 	biceq	r0, r0, r3, asr #3
20002e84:	000000e0 	andeq	r0, r0, r0, ror #1
20002e88:	e0007000 	and	r7, r0, r0
20002e8c:	e1c00f01 	bic	r0, r0, r1, lsl #30
20002e90:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002e94:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002e98:	e0007000 	and	r7, r0, r0
20002e9c:	e1c00781 	bic	r0, r0, r1, lsl #15
20002ea0:	03c003c3 	biceq	r0, r0, #201326595	; 0xc000003
20002ea4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
20002ea8:	e0007800 	and	r7, r0, r0, lsl #16
20002eac:	c1c007c7 	bicgt	r0, r0, r7, asr #15
20002eb0:	03c00383 	biceq	r0, r0, #201326594	; 0xc000002
20002eb4:	00000070 	andeq	r0, r0, r0, ror r0
20002eb8:	c0007800 	andgt	r7, r0, r0, lsl #16
20002ebc:	c1c003ff 	strdgt	r0, [r0, #63]	; 0x3f
20002ec0:	03800783 	orreq	r0, r0, #34340864	; 0x20c0000
20002ec4:	00000078 	andeq	r0, r0, r8, ror r0
20002ec8:	80003c00 	andhi	r3, r0, r0, lsl #24
20002ecc:	81c001ff 	strdhi	r0, [r0, #31]
20002ed0:	039c0f83 	orrseq	r0, ip, #524	; 0x20c
20002ed4:	1ff00078 	svcne	0x00f00078
20002ed8:	00003e00 	andeq	r3, r0, r0, lsl #28
20002edc:	81c001fe 	strdhi	r0, [r0, #30]
20002ee0:	039fff83 	orrseq	pc, pc, #524	; 0x20c
20002ee4:	1fff0078 	svcne	0x00ff0078
20002ee8:	00001e00 	andeq	r1, r0, r0, lsl #28
20002eec:	81e000f8 	strdhi	r0, [r0, #8]!
20002ef0:	039fff03 	orrseq	pc, pc, #3, 30
20002ef4:	1fffe078 	svcne	0x00ffe078
20002ef8:	00001e00 	andeq	r1, r0, r0, lsl #28
20002efc:	81e00000 	mvnhi	r0, r0
20002f00:	038ffc03 	orreq	pc, pc, #768	; 0x300
20002f04:	003ffff8 	ldrshteq	pc, [pc], -r8	; <UNPREDICTABLE>
20002f08:	00000000 	andeq	r0, r0, r0
20002f0c:	80e00000 	rschi	r0, r0, r0
20002f10:	0381f003 	orreq	pc, r1, #3
20002f14:	0003fff8 	strdeq	pc, [r3], -r8
20002f18:	00000000 	andeq	r0, r0, r0
20002f1c:	00e00000 	rsceq	r0, r0, r0
20002f20:	03800000 	orreq	r0, r0, #0
20002f24:	00007fe0 	andeq	r7, r0, r0, ror #31
	...
20002f30:	07800000 	streq	r0, [r0, r0]
	...
20002f40:	07800000 	streq	r0, [r0, r0]
	...
20002f50:	07000000 	streq	r0, [r0, -r0]
	...
20002f60:	07000000 	streq	r0, [r0, -r0]
	...
20002f70:	07000000 	streq	r0, [r0, -r0]
	...
20002f80:	07000000 	streq	r0, [r0, -r0]
	...

20003048 <paddle_geometry>:
20003048:	0000001c 	andeq	r0, r0, ip, lsl r0
2000304c:	00000002 	andeq	r0, r0, r2
20003050:	0000000e 	andeq	r0, r0, lr
20003054:	01000000 	mrseq	r0, (UNDEF: 0)
20003058:	03000200 	movweq	r0, #512	; 0x200
2000305c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
20003060:	07000600 	streq	r0, [r0, -r0, lsl #12]
20003064:	09000800 	stmdbeq	r0, {fp}
20003068:	0b000a00 	bleq	20005870 <ball+0x2758>
2000306c:	0d000c00 	stceq	12, cr0, [r0, #-0]
20003070:	01010001 	tsteq	r1, r1
20003074:	03010201 	movweq	r0, #4609	; 0x1201
20003078:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
2000307c:	07010601 	streq	r0, [r1, -r1, lsl #12]
20003080:	09010801 	stmdbeq	r1, {r0, fp}
20003084:	0b010a01 	bleq	20045890 <ball+0x42778>
20003088:	0d010c01 	stceq	12, cr0, [r1, #-4]

2000308c <paddle_left>:
2000308c:	20003048 	andcs	r3, r0, r8, asr #32
	...
20003098:	00000032 	andeq	r0, r0, r2, lsr r0
2000309c:	00000019 	andeq	r0, r0, r9, lsl r0
200030a0:	20000639 	andcs	r0, r0, r9, lsr r6
200030a4:	2000069b 	mulcs	r0, fp, r6
200030a8:	20000bf7 	strdcs	r0, [r0], -r7
200030ac:	20000a71 	andcs	r0, r0, r1, ror sl

200030b0 <paddle_right>:
200030b0:	20003048 	andcs	r3, r0, r8, asr #32
	...
200030bc:	0000004e 	andeq	r0, r0, lr, asr #32
200030c0:	00000019 	andeq	r0, r0, r9, lsl r0
200030c4:	20000639 	andcs	r0, r0, r9, lsr r6
200030c8:	2000069b 	mulcs	r0, fp, r6
200030cc:	20000bf7 	strdcs	r0, [r0], -r7
200030d0:	20000a71 	andcs	r0, r0, r1, ror sl

200030d4 <ball_geometry>:
200030d4:	0000000c 	andeq	r0, r0, ip
200030d8:	00000004 	andeq	r0, r0, r4
200030dc:	00000004 	andeq	r0, r0, r4
200030e0:	02000100 	andeq	r0, r0, #0, 2
200030e4:	01010001 	tsteq	r1, r1
200030e8:	03010201 	movweq	r0, #4609	; 0x1201
200030ec:	01020002 	tsteq	r2, r2
200030f0:	03020202 	movweq	r0, #8706	; 0x2202
200030f4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20003118 <ball>:
20003118:	200030d4 	ldrdcs	r3, [r0], -r4
	...
20003124:	00000040 	andeq	r0, r0, r0, asr #32
20003128:	00000020 	andeq	r0, r0, r0, lsr #32
2000312c:	20000639 	andcs	r0, r0, r9, lsr r6
20003130:	2000069b 	mulcs	r0, fp, r6
20003134:	20000a91 	mulcs	r0, r1, sl
20003138:	20000a71 	andcs	r0, r0, r1, ror sl
2000313c:	0a030201 	beq	200c3948 <ball+0xc0830>
20003140:	0b060504 	bleq	20184558 <ball+0x181440>
20003144:	0c090807 	stceq	8, cr0, [r9], {7}
20003148:	0d0e000f 	stceq	0, cr0, [lr, #-60]	; 0xffffffc4
2000314c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20003150:	4c207265 	sfmmi	f7, 4, [r0], #-404	; 0xfffffe6c
20003154:	3a746665 	bcc	21d1caf0 <ball+0x1d199d8>
20003158:	00003020 	andeq	r3, r0, r0, lsr #32
2000315c:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20003160:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
20003164:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
20003168:	0030203a 	eorseq	r2, r0, sl, lsr r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000f31 	andeq	r0, r0, r1, lsr pc
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
  10:	0006130c 	andeq	r1, r6, ip, lsl #6
  14:	00041000 	andeq	r1, r4, r0
  18:	00001800 	andeq	r1, r0, r0, lsl #16
	...
  24:	012e0200 			; <UNDEFINED> instruction: 0x012e0200
  28:	3d080000 	stccc	0, cr0, [r8, #-0]
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000291 	muleq	r0, r1, r2
  38:	00036904 	andeq	r6, r3, r4, lsl #18
  3c:	01070200 	mrseq	r0, (UNDEF: 39)
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	250a0207 	strcs	r0, [sl, #-519]	; 0xfffffdf9
  4c:	00000000 	andeq	r0, r0, r0
  50:	07007905 	streq	r7, [r0, -r5, lsl #18]
  54:	00250a03 	eoreq	r0, r5, r3, lsl #20
  58:	00010000 	andeq	r0, r1, r0
  5c:	00018802 	andeq	r8, r1, r2, lsl #16
  60:	02040700 	andeq	r0, r4, #0, 14
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00005804 	andeq	r5, r0, r4, lsl #16
  6c:	06074400 	streq	r4, [r7], -r0, lsl #8
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	02870600 	addeq	r0, r7, #0, 12
  78:	07070000 	streq	r0, [r7, -r0]
  7c:	0000a906 	andeq	sl, r0, r6, lsl #18
  80:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
  84:	07000002 	streq	r0, [r0, -r2]
  88:	00a90608 	adceq	r0, r9, r8, lsl #12
  8c:	06040000 	streq	r0, [r4], -r0
  90:	00000224 	andeq	r0, r0, r4, lsr #4
  94:	a9060907 	stmdbge	r6, {r0, r1, r2, r8, fp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b0080a07 	andlt	r0, r8, r7, lsl #20
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	001b0000 	andseq	r0, fp, r0
  c0:	a2070403 	andge	r0, r7, #50331648	; 0x3000000
  c4:	02000003 	andeq	r0, r0, #3
  c8:	00000103 	andeq	r0, r0, r3, lsl #2
  cc:	68030b07 	stmdavs	r3, {r0, r1, r2, r8, r9, fp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000102 	andeq	r0, r0, r2, lsl #2
  d8:	df0e0b07 	svcle	0x000e0b07
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	047c0400 	ldrbteq	r0, [ip], #-1024	; 0xfffffc00
  e8:	07240000 	streq	r0, [r4, -r0]!
  ec:	0166100d 	cmneq	r6, sp
  f0:	67050000 	strvs	r0, [r5, -r0]
  f4:	07006f65 	streq	r6, [r0, -r5, ror #30]
  f8:	00d30c0e 	sbcseq	r0, r3, lr, lsl #24
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	07007864 	streq	r7, [r0, -r4, ror #16]
 104:	00a9060f 	adceq	r0, r9, pc, lsl #12
 108:	05040000 	streq	r0, [r4, #-0]
 10c:	07007964 	streq	r7, [r0, -r4, ror #18]
 110:	00a90a0f 	adceq	r0, r9, pc, lsl #20
 114:	06080000 	streq	r0, [r8], -r0
 118:	0000001b 	andeq	r0, r0, fp, lsl r0
 11c:	a9061007 	stmdbge	r6, {r0, r1, r2, ip}
 120:	0c000000 	stceq	0, cr0, [r0], {-0}
 124:	0001ab06 	andeq	sl, r1, r6, lsl #22
 128:	0b100700 	bleq	401d30 <startup-0x1fbfe2d0>
 12c:	000000a9 	andeq	r0, r0, r9, lsr #1
 130:	05090610 	streq	r0, [r9, #-1552]	; 0xfffff9f0
 134:	11070000 	mrsne	r0, (UNDEF: 7)
 138:	0001770a 	andeq	r7, r1, sl, lsl #14
 13c:	52061400 	andpl	r1, r6, #0, 8
 140:	07000003 	streq	r0, [r0, -r3]
 144:	01770a12 	cmneq	r7, r2, lsl sl
 148:	06180000 	ldreq	r0, [r8], -r0
 14c:	0000068f 	andeq	r0, r0, pc, lsl #13
 150:	8d0a1307 	stchi	3, cr1, [sl, #-28]	; 0xffffffe4
 154:	1c000001 	stcne	0, cr0, [r0], {1}
 158:	00050e06 	andeq	r0, r5, r6, lsl #28
 15c:	0a140700 	beq	501d64 <startup-0x1fafe29c>
 160:	000001a8 	andeq	r0, r0, r8, lsr #3
 164:	710b0020 	tstvc	fp, r0, lsr #32
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000171 	andeq	r0, r0, r1, ror r1
 170:	e5040a00 	str	r0, [r4, #-2560]	; 0xfffff600
 174:	0a000000 	beq	17c <startup-0x1ffffe84>
 178:	00016604 	andeq	r6, r1, r4, lsl #12
 17c:	018d0b00 	orreq	r0, sp, r0, lsl #22
 180:	710c0000 	mrsvc	r0, (UNDEF: 12)
 184:	0c000001 	stceq	0, cr0, [r0], {1}
 188:	00000171 	andeq	r0, r0, r1, ror r1
 18c:	7d040a00 	vstrvc	s0, [r4, #-0]
 190:	0b000001 	bleq	19c <startup-0x1ffffe64>
 194:	000001a8 	andeq	r0, r0, r8, lsr #3
 198:	0001710c 	andeq	r7, r1, ip, lsl #2
 19c:	00a90c00 	adceq	r0, r9, r0, lsl #24
 1a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	0193040a 	orrseq	r0, r3, sl, lsl #8
 1ac:	d5020000 	strle	r0, [r2, #-0]
 1b0:	07000005 	streq	r0, [r0, -r5]
 1b4:	00e50315 	rsceq	r0, r5, r5, lsl r3
 1b8:	d4020000 	strle	r0, [r2], #-0
 1bc:	07000005 	streq	r0, [r0, -r5]
 1c0:	01710c15 	cmneq	r1, r5, lsl ip
 1c4:	25080000 	strcs	r0, [r8, #-0]
 1c8:	d7000000 	strle	r0, [r0, -r0]
 1cc:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d0:	000000c0 	andeq	r0, r0, r0, asr #1
 1d4:	0e0003ff 	mcreq	3, 0, r0, cr0, cr15, {7}
 1d8:	0000035e 	andeq	r0, r0, lr, asr r3
 1dc:	c6100102 	ldrgt	r0, [r0], -r2, lsl #2
 1e0:	05000001 	streq	r0, [r0, #-1]
 1e4:	00144403 	andseq	r4, r4, r3, lsl #8
 1e8:	02080f20 	andeq	r0, r8, #32, 30	; 0x80
 1ec:	021a09e2 	andseq	r0, sl, #3702784	; 0x388000
 1f0:	a5060000 	strge	r0, [r6, #-0]
 1f4:	02000001 	andeq	r0, r0, #1
 1f8:	003110e3 	eorseq	r1, r1, r3, ror #1
 1fc:	06000000 	streq	r0, [r0], -r0
 200:	0000039b 	muleq	r0, fp, r3
 204:	3110e402 	tstcc	r0, r2, lsl #8
 208:	01000000 	mrseq	r0, (UNDEF: 0)
 20c:	00021306 	andeq	r1, r2, r6, lsl #6
 210:	11e50200 	mvnne	r0, r0, lsl #4
 214:	0000021a 	andeq	r0, r0, sl, lsl r2
 218:	040a0004 	streq	r0, [sl], #-4
 21c:	00000031 	andeq	r0, r0, r1, lsr r0
 220:	0004e202 	andeq	lr, r4, r2, lsl #4
 224:	03e60200 	mvneq	r0, #0, 4
 228:	000001e9 	andeq	r0, r0, r9, ror #3
 22c:	0005180e 	andeq	r1, r5, lr, lsl #16
 230:	10010400 	andne	r0, r1, r0, lsl #8
 234:	00000025 	andeq	r0, r0, r5, lsr #32
 238:	18440305 	stmdane	r4, {r0, r2, r8, r9}^
 23c:	440e2000 	strmi	r2, [lr], #-0
 240:	04000001 	streq	r0, [r0], #-1
 244:	00251002 	eoreq	r1, r5, r2
 248:	03050000 	movweq	r0, #20480	; 0x5000
 24c:	20001845 	andcs	r1, r0, r5, asr #16
 250:	00003108 	andeq	r3, r0, r8, lsl #2
 254:	00026100 	andeq	r6, r2, r0, lsl #2
 258:	00c00d00 	sbceq	r0, r0, r0, lsl #26
 25c:	03ff0000 	mvnseq	r0, #0
 260:	00750e00 	rsbseq	r0, r5, r0, lsl #28
 264:	03090000 	movweq	r0, #36864	; 0x9000
 268:	00025016 	andeq	r5, r2, r6, lsl r0
 26c:	48030500 	stmdami	r3, {r8, sl}
 270:	0e200018 	miaeq	acc0, r8, r0
 274:	00000095 	muleq	r0, r5, r0
 278:	5016030a 	andspl	r0, r6, sl, lsl #6
 27c:	05000002 	streq	r0, [r0, #-2]
 280:	001c4803 	andseq	r4, ip, r3, lsl #16
 284:	03ce0e20 	biceq	r0, lr, #32, 28	; 0x200
 288:	030b0000 	movweq	r0, #45056	; 0xb000
 28c:	00025016 	andeq	r5, r2, r6, lsl r0
 290:	48030500 	stmdami	r3, {r8, sl}
 294:	0e200020 	cdpeq	0, 2, cr0, cr0, cr0, {1}
 298:	00000495 	muleq	r0, r5, r4
 29c:	5016030c 	andspl	r0, r6, ip, lsl #6
 2a0:	05000002 	streq	r0, [r0, #-2]
 2a4:	00244803 	eoreq	r4, r4, r3, lsl #16
 2a8:	018e0e20 	orreq	r0, lr, r0, lsr #28
 2ac:	030d0000 	movweq	r0, #53248	; 0xd000
 2b0:	00025016 	andeq	r5, r2, r6, lsl r0
 2b4:	48030500 	stmdami	r3, {r8, sl}
 2b8:	0e200028 	cdpeq	0, 2, cr0, cr0, cr8, {1}
 2bc:	000001cc 	andeq	r0, r0, ip, asr #3
 2c0:	5016030e 	andspl	r0, r6, lr, lsl #6
 2c4:	05000002 	streq	r0, [r0, #-2]
 2c8:	002c4803 	eoreq	r4, ip, r3, lsl #16
 2cc:	00e00e20 	rsceq	r0, r0, r0, lsr #28
 2d0:	1e060000 	cdpne	0, 0, cr0, cr6, cr0, {0}
 2d4:	0000c711 	andeq	ip, r0, r1, lsl r7
 2d8:	48030500 	stmdami	r3, {r8, sl}
 2dc:	0e200030 	mcreq	0, 1, r0, cr0, cr0, {1}
 2e0:	0000025a 	andeq	r0, r0, sl, asr r2
 2e4:	ae0f1f06 	cdpge	15, 0, cr1, cr15, cr6, {0}
 2e8:	05000001 	streq	r0, [r0, #-1]
 2ec:	00308c03 	eorseq	r8, r0, r3, lsl #24
 2f0:	01570e20 	cmpeq	r7, r0, lsr #28
 2f4:	20060000 	andcs	r0, r6, r0
 2f8:	0001ae0f 	andeq	sl, r1, pc, lsl #28
 2fc:	b0030500 	andlt	r0, r3, r0, lsl #10
 300:	0e200030 	mcreq	0, 1, r0, cr0, cr0, {1}
 304:	00000561 	andeq	r0, r0, r1, ror #10
 308:	c7112206 	ldrgt	r2, [r1, -r6, lsl #4]
 30c:	05000000 	streq	r0, [r0, #-0]
 310:	0030d403 	eorseq	sp, r0, r3, lsl #8
 314:	059d0e20 	ldreq	r0, [sp, #3616]	; 0xe20
 318:	23060000 	movwcs	r0, #24576	; 0x6000
 31c:	0001ae0f 	andeq	sl, r1, pc, lsl #28
 320:	18030500 	stmdane	r3, {r8, sl}
 324:	10200031 	eorne	r0, r0, r1, lsr r0
 328:	000000b1 	strheq	r0, [r0], -r1
 32c:	fc06f306 	stc2	3, cr15, [r6], {6}
 330:	30200011 	eorcc	r0, r0, r1, lsl r0
 334:	01000001 	tsteq	r0, r1
 338:	0003b39c 	muleq	r3, ip, r3
 33c:	00621100 	rsbeq	r1, r2, r0, lsl #2
 340:	ba0af506 	blt	2bd760 <startup-0x1fd428a0>
 344:	02000001 	andeq	r0, r0, #1
 348:	a80e6c91 	stmdage	lr, {r0, r4, r7, sl, fp, sp, lr}
 34c:	06000005 	streq	r0, [r0], -r5
 350:	01ba0af6 			; <UNDEFINED> instruction: 0x01ba0af6
 354:	91020000 	mrsls	r0, (UNDEF: 2)
 358:	03fa0e68 	mvnseq	r0, #104, 28	; 0x680
 35c:	f7060000 			; <UNDEFINED> instruction: 0xf7060000
 360:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 364:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 368:	00122a12 	andseq	r2, r2, r2, lsl sl
 36c:	0000ea20 	andeq	lr, r0, r0, lsr #20
 370:	04811300 	streq	r1, [r1], #768	; 0x300
 374:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
 378:	03b30801 			; <UNDEFINED> instruction: 0x03b30801
 37c:	91020000 	mrsls	r0, (UNDEF: 2)
 380:	054c1363 	strbeq	r1, [ip, #-867]	; 0xfffffc9d
 384:	0f060000 	svceq	0x00060000
 388:	03b30801 			; <UNDEFINED> instruction: 0x03b30801
 38c:	91020000 	mrsls	r0, (UNDEF: 2)
 390:	03361362 	teqeq	r6, #-2013265919	; 0x88000001
 394:	20060000 	andcs	r0, r6, r0
 398:	00250b01 	eoreq	r0, r5, r1, lsl #22
 39c:	91020000 	mrsls	r0, (UNDEF: 2)
 3a0:	02661361 	rsbeq	r1, r6, #-2080374783	; 0x84000001
 3a4:	21060000 	mrscs	r0, (UNDEF: 6)
 3a8:	00250b01 	eoreq	r0, r5, r1, lsl #22
 3ac:	91020000 	mrsls	r0, (UNDEF: 2)
 3b0:	03000060 	movweq	r0, #96	; 0x60
 3b4:	029a0801 	addseq	r0, sl, #65536	; 0x10000
 3b8:	36140000 	ldrcc	r0, [r4], -r0
 3bc:	06000001 	streq	r0, [r0], -r1
 3c0:	00a905bc 	strhteq	r0, [r9], ip
 3c4:	11d80000 	bicsne	r0, r8, r0
 3c8:	00242000 	eoreq	r2, r4, r0
 3cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 3d0:	000003f3 	strdeq	r0, [r0], -r3
 3d4:	0005c20e 	andeq	ip, r5, lr, lsl #4
 3d8:	0abd0600 	beq	fef41be0 <ball+0xdef3eac8>
 3dc:	00000025 	andeq	r0, r0, r5, lsr #32
 3e0:	0e6f9102 	lgneqe	f1, f2
 3e4:	0000016a 	andeq	r0, r0, sl, ror #2
 3e8:	250abe06 	strcs	fp, [sl, #-3590]	; 0xfffff1fa
 3ec:	02000000 	andeq	r0, r0, #0
 3f0:	15006e91 	strne	r6, [r0, #-3729]	; 0xfffff16f
 3f4:	00000391 	muleq	r0, r1, r3
 3f8:	ac067e06 	stcge	14, cr7, [r6], {6}
 3fc:	2c200010 	stccs	0, cr0, [r0], #-64	; 0xffffffc0
 400:	01000001 	tsteq	r0, r1
 404:	0004649c 	muleq	r4, ip, r4
 408:	02500e00 	subseq	r0, r0, #0, 28
 40c:	7f060000 	svcvc	0x00060000
 410:	00022009 	andeq	r2, r2, r9
 414:	68910200 	ldmvs	r1, {r9}
 418:	00056f0e 	andeq	r6, r5, lr, lsl #30
 41c:	09800600 	stmibeq	r0, {r9, sl}
 420:	00000220 	andeq	r0, r0, r0, lsr #4
 424:	0e609102 	lgneqs	f1, f2
 428:	0000060a 	andeq	r0, r0, sl, lsl #12
 42c:	20098106 	andcs	r8, r9, r6, lsl #2
 430:	02000002 	andeq	r0, r0, #2
 434:	290e5891 	stmdbcs	lr, {r0, r4, r7, fp, ip, lr}
 438:	06000003 	streq	r0, [r0], -r3
 43c:	02200982 	eoreq	r0, r0, #2129920	; 0x208000
 440:	91020000 	mrsls	r0, (UNDEF: 2)
 444:	05c20e50 	strbeq	r0, [r2, #3664]	; 0xe50
 448:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
 44c:	0000a906 	andeq	sl, r0, r6, lsl #18
 450:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 454:	00016a0e 	andeq	r6, r1, lr, lsl #20
 458:	068a0600 	streq	r0, [sl], r0, lsl #12
 45c:	000000a9 	andeq	r0, r0, r9, lsr #1
 460:	00709102 	rsbseq	r9, r0, r2, lsl #2
 464:	00008915 	andeq	r8, r0, r5, lsl r9
 468:	06580600 	ldrbeq	r0, [r8], -r0, lsl #12
 46c:	2000100c 	andcs	r1, r0, ip
 470:	000000a0 	andeq	r0, r0, r0, lsr #1
 474:	04b79c01 	ldrteq	r9, [r7], #3073	; 0xc01
 478:	2b0e0000 	blcs	380480 <startup-0x1fc7fb80>
 47c:	06000000 	streq	r0, [r0], -r0
 480:	02200959 	eoreq	r0, r0, #1458176	; 0x164000
 484:	91020000 	mrsls	r0, (UNDEF: 2)
 488:	00260e68 	eoreq	r0, r6, r8, ror #28
 48c:	5a060000 	bpl	180494 <startup-0x1fe7fb6c>
 490:	00022009 	andeq	r2, r2, r9
 494:	60910200 	addsvs	r0, r1, r0, lsl #4
 498:	0005c20e 	andeq	ip, r5, lr, lsl #4
 49c:	065f0600 	ldrbeq	r0, [pc], -r0, lsl #12
 4a0:	000000a9 	andeq	r0, r0, r9, lsr #1
 4a4:	0e749102 	expeqs	f1, f2
 4a8:	0000016a 	andeq	r0, r0, sl, ror #2
 4ac:	a9066006 	stmdbge	r6, {r1, r2, sp, lr}
 4b0:	02000000 	andeq	r0, r0, #0
 4b4:	16007091 			; <UNDEFINED> instruction: 0x16007091
 4b8:	00000407 	andeq	r0, r0, r7, lsl #8
 4bc:	cc062506 	cfstr32gt	mvfx2, [r6], {6}
 4c0:	4020000f 	eormi	r0, r0, pc
 4c4:	01000000 	mrseq	r0, (UNDEF: 0)
 4c8:	05f7169c 	ldrbeq	r1, [r7, #1692]!	; 0x69c
 4cc:	17060000 	strne	r0, [r6, -r0]
 4d0:	00000006 	andeq	r0, r0, r6
 4d4:	00000c20 	andeq	r0, r0, r0, lsr #24
 4d8:	109c0100 	addsne	r0, ip, r0, lsl #2
 4dc:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 4e0:	4a068105 	bmi	1a08fc <startup-0x1fe5f704>
 4e4:	8220000f 	eorhi	r0, r0, #15
 4e8:	01000000 	mrseq	r0, (UNDEF: 0)
 4ec:	00051d9c 	muleq	r5, ip, sp
 4f0:	00731100 	rsbseq	r1, r3, r0, lsl #2
 4f4:	1d098205 	sfmne	f0, 1, [r9, #-20]	; 0xffffffec
 4f8:	02000005 	andeq	r0, r0, #5
 4fc:	a20e6c91 	andge	r6, lr, #37120	; 0x9100
 500:	05000005 	streq	r0, [r0, #-5]
 504:	05230783 	streq	r0, [r3, #-1923]!	; 0xfffff87d
 508:	91020000 	mrsls	r0, (UNDEF: 2)
 50c:	01640e5c 	cmneq	r4, ip, asr lr
 510:	84050000 	strhi	r0, [r5], #-0
 514:	00053307 	andeq	r3, r5, r7, lsl #6
 518:	4c910200 	lfmmi	f0, 4, [r1], {0}
 51c:	b3040a00 	movwlt	r0, #18944	; 0x4a00
 520:	08000003 	stmdaeq	r0, {r0, r1}
 524:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 528:	00000533 	andeq	r0, r0, r3, lsr r5
 52c:	0000c009 	andeq	ip, r0, r9
 530:	08000e00 	stmdaeq	r0, {r9, sl, fp}
 534:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 538:	00000543 	andeq	r0, r0, r3, asr #10
 53c:	0000c009 	andeq	ip, r0, r9
 540:	10000f00 	andne	r0, r0, r0, lsl #30
 544:	0000057d 	andeq	r0, r0, sp, ror r5
 548:	10067a05 	andne	r7, r6, r5, lsl #20
 54c:	3a20000f 	bcc	800590 <startup-0x1f7ffa70>
 550:	01000000 	mrseq	r0, (UNDEF: 0)
 554:	0005679c 	muleq	r5, ip, r7
 558:	00631700 	rsbeq	r1, r3, r0, lsl #14
 55c:	31257a05 			; <UNDEFINED> instruction: 0x31257a05
 560:	02000000 	andeq	r0, r0, #0
 564:	10007791 	mulne	r0, r1, r7
 568:	000003ed 	andeq	r0, r0, sp, ror #7
 56c:	c2067005 	andgt	r7, r6, #5
 570:	4e20000e 	cdpmi	0, 2, cr0, cr0, cr14, {0}
 574:	01000000 	mrseq	r0, (UNDEF: 0)
 578:	0005a79c 	muleq	r5, ip, r7
 57c:	00781700 	rsbseq	r1, r8, r0, lsl #14
 580:	a9177005 	ldmdbge	r7, {r0, r2, ip, sp, lr}
 584:	02000000 	andeq	r0, r0, #0
 588:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
 58c:	1e700500 	cdpne	5, 7, cr0, cr0, cr0, {0}
 590:	000000a9 	andeq	r0, r0, r9, lsr #1
 594:	0e689102 	lgneqe	f1, f2
 598:	000004d1 	ldrdeq	r0, [r0], -r1
 59c:	31107305 	tstcc	r0, r5, lsl #6
 5a0:	02000000 	andeq	r0, r0, #0
 5a4:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 5a8:	000006a6 	andeq	r0, r0, r6, lsr #13
 5ac:	94066705 	strls	r6, [r6], #-1797	; 0xfffff8fb
 5b0:	2e20000e 	cdpcs	0, 2, cr0, cr0, cr14, {0}
 5b4:	01000000 	mrseq	r0, (UNDEF: 0)
 5b8:	022a109c 	eoreq	r1, sl, #156	; 0x9c
 5bc:	60050000 	andvs	r0, r5, r0
 5c0:	000e5806 	andeq	r5, lr, r6, lsl #16
 5c4:	00003c20 	andeq	r3, r0, r0, lsr #24
 5c8:	df9c0100 	svcle	0x009c0100
 5cc:	19000005 	stmdbne	r0, {r0, r2}
 5d0:	000000d8 	ldrdeq	r0, [r0], -r8
 5d4:	31226005 			; <UNDEFINED> instruction: 0x31226005
 5d8:	02000000 	andeq	r0, r0, #0
 5dc:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
 5e0:	00000694 	muleq	r0, r4, r6
 5e4:	310f5605 	tstcc	pc, r5, lsl #12
 5e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 5ec:	4020000e 	eormi	r0, r0, lr
 5f0:	01000000 	mrseq	r0, (UNDEF: 0)
 5f4:	0006089c 	muleq	r6, ip, r8
 5f8:	76721100 	ldrbtvc	r1, [r2], -r0, lsl #2
 5fc:	10580500 	subsne	r0, r8, r0, lsl #10
 600:	00000031 	andeq	r0, r0, r1, lsr r0
 604:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 608:	00037014 	andeq	r7, r3, r4, lsl r0
 60c:	0f4c0500 	svceq	0x004c0500
 610:	00000031 	andeq	r0, r0, r1, lsr r0
 614:	20000dd8 	ldrdcs	r0, [r0], -r8
 618:	00000040 	andeq	r0, r0, r0, asr #32
 61c:	06319c01 	ldrteq	r9, [r1], -r1, lsl #24
 620:	72110000 	andsvc	r0, r1, #0
 624:	4e050076 	mcrmi	0, 0, r0, cr5, cr6, {3}
 628:	00003110 	andeq	r3, r0, r0, lsl r1
 62c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 630:	04bb1400 	ldrteq	r1, [fp], #1024	; 0x400
 634:	42050000 	andmi	r0, r5, #0
 638:	0000310f 	andeq	r3, r0, pc, lsl #2
 63c:	000da400 	andeq	sl, sp, r0, lsl #8
 640:	00003420 	andeq	r3, r0, r0, lsr #8
 644:	5a9c0100 	bpl	fe700a4c <ball+0xde6fd934>
 648:	11000006 	tstne	r0, r6
 64c:	05007672 	streq	r7, [r0, #-1650]	; 0xfffff98e
 650:	00311043 	eorseq	r1, r1, r3, asr #32
 654:	91020000 	mrsls	r0, (UNDEF: 2)
 658:	ea100077 	b	40083c <startup-0x1fbff7c4>
 65c:	05000001 	streq	r0, [r0, #-1]
 660:	0d740639 	ldcleq	6, cr0, [r4, #-228]!	; 0xffffff1c
 664:	00302000 	eorseq	r2, r0, r0
 668:	9c010000 	stcls	0, cr0, [r1], {-0}
 66c:	00000680 	andeq	r0, r0, r0, lsl #13
 670:	0000d819 	andeq	sp, r0, r9, lsl r8
 674:	2b390500 	blcs	e41a7c <startup-0x1f1be584>
 678:	00000031 	andeq	r0, r0, r1, lsr r0
 67c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 680:	0004e910 	andeq	lr, r4, r0, lsl r9
 684:	06330500 	ldrteq	r0, [r3], -r0, lsl #10
 688:	20000d4a 	andcs	r0, r0, sl, asr #26
 68c:	0000002a 	andeq	r0, r0, sl, lsr #32
 690:	06b49c01 	ldrteq	r9, [r4], r1, lsl #24
 694:	13190000 	tstne	r9, #0
 698:	05000002 	streq	r0, [r0, #-2]
 69c:	00312533 	eorseq	r2, r1, r3, lsr r5
 6a0:	91020000 	mrsls	r0, (UNDEF: 2)
 6a4:	01ea1a77 	mvneq	r1, r7, ror sl
 6a8:	30050000 	andcc	r0, r5, r0
 6ac:	0000a902 	andeq	sl, r0, r2, lsl #18
 6b0:	00001b00 	andeq	r1, r0, r0, lsl #22
 6b4:	0006b110 	andeq	fp, r6, r0, lsl r1
 6b8:	062d0500 	strteq	r0, [sp], -r0, lsl #10
 6bc:	20000d20 	andcs	r0, r0, r0, lsr #26
 6c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 6c4:	06e89c01 	strbteq	r9, [r8], r1, lsl #24
 6c8:	d8190000 	ldmdale	r9, {}	; <UNPREDICTABLE>
 6cc:	05000000 	streq	r0, [r0, #-0]
 6d0:	0031242d 	eorseq	r2, r1, sp, lsr #8
 6d4:	91020000 	mrsls	r0, (UNDEF: 2)
 6d8:	01ea1a77 	mvneq	r1, r7, ror sl
 6dc:	30050000 	andcc	r0, r5, r0
 6e0:	0000a902 	andeq	sl, r0, r2, lsl #18
 6e4:	00001b00 	andeq	r1, r0, r0, lsl #22
 6e8:	0002721c 	andeq	r7, r2, ip, lsl r2
 6ec:	06270500 	strteq	r0, [r7], -r0, lsl #10
 6f0:	20000cd8 	ldrdcs	r0, [r0], -r8
 6f4:	00000048 	andeq	r0, r0, r8, asr #32
 6f8:	071b9c01 	ldreq	r9, [fp, -r1, lsl #24]
 6fc:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 700:	29270500 	stmdbcs	r7!, {r8, sl}
 704:	00000031 	andeq	r0, r0, r1, lsr r0
 708:	0e6f9102 	lgneqe	f1, f2
 70c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 710:	b3072805 	movwlt	r2, #30725	; 0x7805
 714:	02000003 	andeq	r0, r0, #3
 718:	1c007791 	stcne	7, cr7, [r0], {145}	; 0x91
 71c:	00000062 	andeq	r0, r0, r2, rrx
 720:	a8062305 	stmdage	r6, {r0, r2, r8, r9, sp}
 724:	3020000c 	eorcc	r0, r0, ip
 728:	01000000 	mrseq	r0, (UNDEF: 0)
 72c:	00073f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
 730:	00781700 	rsbseq	r1, r8, r0, lsl #14
 734:	31272305 			; <UNDEFINED> instruction: 0x31272305
 738:	02000000 	andeq	r0, r0, #0
 73c:	10007791 	mulne	r0, r1, r7
 740:	0000000f 	andeq	r0, r0, pc
 744:	f6063804 			; <UNDEFINED> instruction: 0xf6063804
 748:	b220000b 	eorlt	r0, r0, #11
 74c:	01000000 	mrseq	r0, (UNDEF: 0)
 750:	0007819c 	muleq	r7, ip, r1
 754:	006f1700 	rsbeq	r1, pc, r0, lsl #14
 758:	ba1a3804 	blt	68e770 <startup-0x1f971890>
 75c:	02000001 	andeq	r0, r0, #1
 760:	9d196c91 	ldcls	12, cr6, [r9, #-580]	; 0xfffffdbc
 764:	04000005 	streq	r0, [r0], #-5
 768:	01ba2538 			; <UNDEFINED> instruction: 0x01ba2538
 76c:	91020000 	mrsls	r0, (UNDEF: 2)
 770:	04d80e68 	ldrbeq	r0, [r8], #3688	; 0xe68
 774:	3d040000 	stccc	0, cr0, [r4, #-0]
 778:	0000a906 	andeq	sl, r0, r6, lsl #18
 77c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 780:	052c1d00 	streq	r1, [ip, #-3328]!	; 0xfffff300
 784:	2c040000 	stccs	0, cr0, [r4], {-0}
 788:	00002509 	andeq	r2, r0, r9, lsl #10
 78c:	000b8800 	andeq	r8, fp, r0, lsl #16
 790:	00006e20 	andeq	r6, r0, r0, lsr #28
 794:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
 798:	17000007 	strne	r0, [r0, -r7]
 79c:	2c04006f 	stccs	0, cr0, [r4], {111}	; 0x6f
 7a0:	0001ba25 	andeq	fp, r1, r5, lsr #20
 7a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7a8:	0003e819 	andeq	lr, r3, r9, lsl r8
 7ac:	2c2c0400 	cfstrscs	mvf0, [ip], #-0
 7b0:	000000a9 	andeq	r0, r0, r9, lsr #1
 7b4:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
 7b8:	0000059d 	muleq	r0, sp, r5
 7bc:	ba3a2c04 	blt	e8b7d4 <startup-0x1f17482c>
 7c0:	02000001 	andeq	r0, r0, #1
 7c4:	10006c91 	mulne	r0, r1, ip
 7c8:	00000598 	muleq	r0, r8, r5
 7cc:	90060904 	andls	r0, r6, r4, lsl #18
 7d0:	f820000a 			; <UNDEFINED> instruction: 0xf820000a
 7d4:	01000000 	mrseq	r0, (UNDEF: 0)
 7d8:	0008709c 	muleq	r8, ip, r0
 7dc:	006f1700 	rsbeq	r1, pc, r0, lsl #14
 7e0:	ba180904 	blt	602bf8 <startup-0x1f9fd408>
 7e4:	02000001 	andeq	r0, r0, #1
 7e8:	18196c91 	ldmdane	r9, {r0, r4, r7, sl, fp, sp, lr}
 7ec:	04000002 	streq	r0, [r0], #-2
 7f0:	01ba2309 			; <UNDEFINED> instruction: 0x01ba2309
 7f4:	91020000 	mrsls	r0, (UNDEF: 2)
 7f8:	01b00e68 	rorseq	r0, r8, #28
 7fc:	0d040000 	stceq	0, cr0, [r4, #-0]
 800:	0000a906 	andeq	sl, r0, r6, lsl #18
 804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 808:	0004d80e 	andeq	sp, r4, lr, lsl #16
 80c:	060e0400 	streq	r0, [lr], -r0, lsl #8
 810:	000000a9 	andeq	r0, r0, r9, lsr #1
 814:	1e709102 	expnes	f1, f2
 818:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
 81c:	0000002c 	andeq	r0, r0, ip, lsr #32
 820:	00000845 	andeq	r0, r0, r5, asr #16
 824:	0003ed1f 	andeq	lr, r3, pc, lsl sp
 828:	03140400 	tsteq	r4, #0, 8
 82c:	000000a9 	andeq	r0, r0, r9, lsr #1
 830:	00000836 	andeq	r0, r0, r6, lsr r8
 834:	7d1a001b 	ldcvc	0, cr0, [sl, #-108]	; 0xffffff94
 838:	04000005 	streq	r0, [r0], #-5
 83c:	00a90315 	adceq	r0, r9, r5, lsl r3
 840:	001b0000 	andseq	r0, fp, r0
 844:	0af41200 	beq	ffd0504c <ball+0xdfd01f34>
 848:	002c2000 	eoreq	r2, ip, r0
 84c:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 854 <startup-0x1ffff7ac>
 850:	04000003 	streq	r0, [r0], #-3
 854:	00a90314 	adceq	r0, r9, r4, lsl r3
 858:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
 85c:	001b0000 	andseq	r0, fp, r0
 860:	00057d1a 	andeq	r7, r5, sl, lsl sp
 864:	03150400 	tsteq	r5, #0, 8
 868:	000000a9 	andeq	r0, r0, r9, lsr #1
 86c:	0000001b 	andeq	r0, r0, fp, lsl r0
 870:	0003801c 	andeq	r8, r3, ip, lsl r0
 874:	06040400 	streq	r0, [r4], -r0, lsl #8
 878:	20000a70 	andcs	r0, r0, r0, ror sl
 87c:	00000020 	andeq	r0, r0, r0, lsr #32
 880:	08b29c01 	ldmeq	r2!, {r0, sl, fp, ip, pc}
 884:	6f170000 	svcvs	0x00170000
 888:	1f040400 	svcne	0x00040400
 88c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 890:	19749102 	ldmdbne	r4!, {r1, r8, ip, pc}^
 894:	00000127 	andeq	r0, r0, r7, lsr #2
 898:	a9260404 	stmdbge	r6!, {r2, sl}
 89c:	02000000 	andeq	r0, r0, #0
 8a0:	00197091 	mulseq	r9, r1, r0
 8a4:	04000000 	streq	r0, [r0], #-0
 8a8:	00a93204 	adceq	r3, r9, r4, lsl #4
 8ac:	91020000 	mrsls	r0, (UNDEF: 2)
 8b0:	0714006c 	ldreq	r0, [r4, -ip, rrx]
 8b4:	03000000 	movweq	r0, #0
 8b8:	00310f3e 	eorseq	r0, r1, lr, lsr pc
 8bc:	0a1a0000 	beq	6808c4 <startup-0x1f97f73c>
 8c0:	00562000 	subseq	r2, r6, r0
 8c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8c8:	00000904 	andeq	r0, r0, r4, lsl #18
 8cc:	0003c70e 	andeq	ip, r3, lr, lsl #14
 8d0:	073f0300 	ldreq	r0, [pc, -r0, lsl #6]!
 8d4:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 8d8:	11739102 	cmnne	r3, r2, lsl #2
 8dc:	0079656b 	rsbseq	r6, r9, fp, ror #10
 8e0:	b3074003 	movwlt	r4, #28675	; 0x7003
 8e4:	02000003 	andeq	r0, r0, #3
 8e8:	20127291 	mulscs	r2, r1, r2
 8ec:	4620000a 	strtmi	r0, [r0], -sl
 8f0:	11000000 	mrsne	r0, (UNDEF: 0)
 8f4:	00776f72 	rsbseq	r6, r7, r2, ror pc
 8f8:	a90a4103 	stmdbge	sl, {r0, r1, r8, lr}
 8fc:	02000000 	andeq	r0, r0, #0
 900:	00007491 	muleq	r0, r1, r4
 904:	0004b214 	andeq	fp, r4, r4, lsl r2
 908:	0f2f0300 	svceq	0x002f0300
 90c:	00000031 	andeq	r0, r0, r1, lsr r0
 910:	200009c4 	andcs	r0, r0, r4, asr #19
 914:	00000056 	andeq	r0, r0, r6, asr r0
 918:	09569c01 	ldmdbeq	r6, {r0, sl, fp, ip, pc}^
 91c:	c70e0000 	strgt	r0, [lr, -r0]
 920:	03000003 	movweq	r0, #3
 924:	03b30730 			; <UNDEFINED> instruction: 0x03b30730
 928:	91020000 	mrsls	r0, (UNDEF: 2)
 92c:	656b1173 	strbvs	r1, [fp, #-371]!	; 0xfffffe8d
 930:	31030079 	tstcc	r3, r9, ror r0
 934:	0003b307 	andeq	fp, r3, r7, lsl #6
 938:	72910200 	addsvc	r0, r1, #0, 4
 93c:	0009ca12 	andeq	ip, r9, r2, lsl sl
 940:	00004620 	andeq	r4, r0, r0, lsr #12
 944:	6f721100 	svcvs	0x00721100
 948:	32030077 	andcc	r0, r3, #119	; 0x77
 94c:	0000a90a 	andeq	sl, r0, sl, lsl #18
 950:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 954:	89200000 	stmdbhi	r0!, {}	; <UNPREDICTABLE>
 958:	03000004 	movweq	r0, #4
 95c:	00a90529 	adceq	r0, r9, r9, lsr #10
 960:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
 964:	00342000 	eorseq	r2, r4, r0
 968:	9c010000 	stcls	0, cr0, [r1], {-0}
 96c:	0000099e 	muleq	r0, lr, r9
 970:	776f7217 			; <UNDEFINED> instruction: 0x776f7217
 974:	15290300 	strne	r0, [r9, #-768]!	; 0xfffffd00
 978:	000000a9 	andeq	r0, r0, r9, lsr #1
 97c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
 980:	000003c7 	andeq	r0, r0, r7, asr #7
 984:	a91e2903 	ldmdbge	lr, {r0, r1, r8, fp, sp}
 988:	02000000 	andeq	r0, r0, #0
 98c:	020e5891 	andeq	r5, lr, #9502720	; 0x910000
 990:	03000004 	movweq	r0, #4
 994:	099e102a 	ldmibeq	lr, {r1, r3, r5, ip}
 998:	91020000 	mrsls	r0, (UNDEF: 2)
 99c:	31080060 	tstcc	r8, r0, rrx
 9a0:	b4000000 	strlt	r0, [r0], #-0
 9a4:	09000009 	stmdbeq	r0, {r0, r3}
 9a8:	000000c0 	andeq	r0, r0, r0, asr #1
 9ac:	00c00903 	sbceq	r0, r0, r3, lsl #18
 9b0:	00030000 	andeq	r0, r3, r0
 9b4:	00031b21 	andeq	r1, r3, r1, lsr #22
 9b8:	05200300 	streq	r0, [r0, #-768]!	; 0xfffffd00
 9bc:	000000a9 	andeq	r0, r0, r9, lsr #1
 9c0:	2000093c 	andcs	r0, r0, ip, lsr r9
 9c4:	00000054 	andeq	r0, r0, r4, asr r0
 9c8:	09dc9c01 	ldmibeq	ip, {r0, sl, fp, ip, pc}^
 9cc:	63110000 	tstvs	r1, #0
 9d0:	10210300 	eorne	r0, r1, r0, lsl #6
 9d4:	00000031 	andeq	r0, r0, r1, lsr r0
 9d8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 9dc:	0001db21 	andeq	sp, r1, r1, lsr #22
 9e0:	05170300 	ldreq	r0, [r7, #-768]	; 0xfffffd00
 9e4:	000000a9 	andeq	r0, r0, r9, lsr #1
 9e8:	200008e8 	andcs	r0, r0, r8, ror #17
 9ec:	00000054 	andeq	r0, r0, r4, asr r0
 9f0:	0a049c01 	beq	1279fc <startup-0x1fed8604>
 9f4:	63110000 	tstvs	r1, #0
 9f8:	10180300 	andsne	r0, r8, r0, lsl #6
 9fc:	00000031 	andeq	r0, r0, r1, lsr r0
 a00:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a04:	0004fa1c 	andeq	pc, r4, ip, lsl sl	; <UNPREDICTABLE>
 a08:	060d0300 	streq	r0, [sp], -r0, lsl #6
 a0c:	20000884 	andcs	r0, r0, r4, lsl #17
 a10:	00000064 	andeq	r0, r0, r4, rrx
 a14:	0a2a9c01 	beq	aa7a20 <startup-0x1f5585e0>
 a18:	72170000 	andsvc	r0, r7, #0
 a1c:	0300776f 	movweq	r7, #1903	; 0x76f
 a20:	00a9190d 	adceq	r1, r9, sp, lsl #18
 a24:	91020000 	mrsls	r0, (UNDEF: 2)
 a28:	711c0074 	tstvc	ip, r4, ror r0
 a2c:	03000006 	movweq	r0, #6
 a30:	08200603 	stmdaeq	r0!, {r0, r1, r9, sl}
 a34:	00642000 	rsbeq	r2, r4, r0
 a38:	9c010000 	stcls	0, cr0, [r1], {-0}
 a3c:	00000a50 	andeq	r0, r0, r0, asr sl
 a40:	776f7217 			; <UNDEFINED> instruction: 0x776f7217
 a44:	1a030300 	bne	c164c <startup-0x1ff3e9b4>
 a48:	000000a9 	andeq	r0, r0, r9, lsr #1
 a4c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 a50:	0005eb10 	andeq	lr, r5, r0, lsl fp
 a54:	06ee0200 	strbteq	r0, [lr], r0, lsl #4
 a58:	2000075c 	andcs	r0, r0, ip, asr r7
 a5c:	000000c4 	andeq	r0, r0, r4, asr #1
 a60:	0aec9c01 	beq	ffb27a6c <ball+0xdfb24954>
 a64:	73170000 	tstvc	r7, #0
 a68:	1aee0200 	bne	ffb81270 <ball+0xdfb7e158>
 a6c:	00000aec 	andeq	r0, r0, ip, ror #21
 a70:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
 a74:	ee020078 	mcr	0, 0, r0, cr2, cr8, {3}
 a78:	0000a921 	andeq	sl, r0, r1, lsr #18
 a7c:	58910200 	ldmpl	r1, {r9}
 a80:	02007917 	andeq	r7, r0, #376832	; 0x5c000
 a84:	00a928ee 	adceq	r2, r9, lr, ror #17
 a88:	91020000 	mrsls	r0, (UNDEF: 2)
 a8c:	65731754 	ldrbvs	r1, [r3, #-1876]!	; 0xfffff8ac
 a90:	ee020074 	mcr	0, 0, r0, cr2, cr4, {3}
 a94:	0000a92f 	andeq	sl, r0, pc, lsr #18
 a98:	50910200 	addspl	r0, r1, r0, lsl #4
 a9c:	02006911 	andeq	r6, r0, #278528	; 0x44000
 aa0:	00a906ef 	adceq	r0, r9, pc, ror #13
 aa4:	91020000 	mrsls	r0, (UNDEF: 2)
 aa8:	006a1174 	rsbeq	r1, sl, r4, ror r1
 aac:	a908ef02 	stmdbge	r8, {r1, r8, r9, sl, fp, sp, lr, pc}
 ab0:	02000000 	andeq	r0, r0, #0
 ab4:	6b117091 	blvs	45cd00 <startup-0x1fba3300>
 ab8:	0aef0200 	beq	ffbc12c0 <ball+0xdfbbe1a8>
 abc:	000000a9 	andeq	r0, r0, r9, lsr #1
 ac0:	0e6c9102 	lgneqe	f1, f2
 ac4:	000005dc 	ldrdeq	r0, [r0], -ip
 ac8:	a90def02 	stmdbge	sp, {r1, r8, r9, sl, fp, sp, lr, pc}
 acc:	02000000 	andeq	r0, r0, #0
 ad0:	9c126891 	ldcls	8, cr6, [r2], {145}	; 0x91
 ad4:	5a200007 	bpl	800af8 <startup-0x1f7ff508>
 ad8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 adc:	0000058e 	andeq	r0, r0, lr, lsl #11
 ae0:	3112f602 	tstcc	r2, r2, lsl #12	; <UNPREDICTABLE>
 ae4:	02000000 	andeq	r0, r0, #0
 ae8:	00006791 	muleq	r0, r1, r7
 aec:	0220040a 	eoreq	r0, r0, #167772160	; 0xa000000
 af0:	dd220000 	stcle	0, cr0, [r2, #-0]
 af4:	02000004 	andeq	r0, r0, #4
 af8:	07300de8 	ldreq	r0, [r0, -r8, ror #27]!
 afc:	002c2000 	eoreq	r2, ip, r0
 b00:	9c010000 	stcls	0, cr0, [r1], {-0}
 b04:	00000b43 	andeq	r0, r0, r3, asr #22
 b08:	02007317 	andeq	r7, r0, #1543503872	; 0x5c000000
 b0c:	0aec21e8 	beq	ffb092b4 <ball+0xdfb0619c>
 b10:	91020000 	mrsls	r0, (UNDEF: 2)
 b14:	02131974 	andseq	r1, r3, #116, 18	; 0x1d0000
 b18:	e8020000 	stmda	r2, {}	; <UNPREDICTABLE>
 b1c:	00021a33 	andeq	r1, r2, r3, lsr sl
 b20:	70910200 	addsvc	r0, r1, r0, lsl #4
 b24:	0001a519 	andeq	sl, r1, r9, lsl r5
 b28:	3de80200 	sfmcc	f0, 2, [r8]
 b2c:	000000a9 	andeq	r0, r0, r9, lsr #1
 b30:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
 b34:	0000039b 	muleq	r0, fp, r3
 b38:	a948e802 	stmdbge	r8, {r1, fp, sp, lr, pc}^
 b3c:	02000000 	andeq	r0, r0, #0
 b40:	23006891 	movwcs	r6, #2193	; 0x891
 b44:	00000358 	andeq	r0, r0, r8, asr r3
 b48:	fc06dc02 	stc2	12, cr13, [r6], {2}
 b4c:	34200006 	strtcc	r0, [r0], #-6
 b50:	01000000 	mrseq	r0, (UNDEF: 0)
 b54:	000b679c 	muleq	fp, ip, r7
 b58:	00691100 	rsbeq	r1, r9, r0, lsl #2
 b5c:	a905dd02 	stmdbge	r5, {r1, r8, sl, fp, ip, lr, pc}
 b60:	02000000 	andeq	r0, r0, #0
 b64:	10007491 	mulne	r0, r1, r4
 b68:	00000554 	andeq	r0, r0, r4, asr r5
 b6c:	9a06d402 	bls	1b5b7c <startup-0x1fe4a484>
 b70:	62200006 	eorvs	r0, r0, #6
 b74:	01000000 	mrseq	r0, (UNDEF: 0)
 b78:	000ba29c 	muleq	fp, ip, r2
 b7c:	006f1700 	rsbeq	r1, pc, r0, lsl #14
 b80:	ba1bd402 	blt	6f5b90 <startup-0x1f90a470>
 b84:	02000001 	andeq	r0, r0, #1
 b88:	a2126c91 	andsge	r6, r2, #37120	; 0x9100
 b8c:	50200006 	eorpl	r0, r0, r6
 b90:	11000000 	mrsne	r0, (UNDEF: 0)
 b94:	d5020074 	strle	r0, [r2, #-116]	; 0xffffff8c
 b98:	0000a90a 	andeq	sl, r0, sl, lsl #18
 b9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 ba0:	af100000 	svcge	0x00100000
 ba4:	02000003 	andeq	r0, r0, #3
 ba8:	063806ce 	ldrteq	r0, [r8], -lr, asr #13
 bac:	00622000 	rsbeq	r2, r2, r0
 bb0:	9c010000 	stcls	0, cr0, [r1], {-0}
 bb4:	00000bdd 	ldrdeq	r0, [r0], -sp
 bb8:	02006f17 	andeq	r6, r0, #23, 30	; 0x5c
 bbc:	01ba1ace 			; <UNDEFINED> instruction: 0x01ba1ace
 bc0:	91020000 	mrsls	r0, (UNDEF: 2)
 bc4:	0640126c 	strbeq	r1, [r0], -ip, ror #4
 bc8:	00502000 	subseq	r2, r0, r0
 bcc:	74110000 	ldrvc	r0, [r1], #-0
 bd0:	0acf0200 	beq	ff3c13d8 <ball+0xdf3be2c0>
 bd4:	000000a9 	andeq	r0, r0, r9, lsr #1
 bd8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 bdc:	00b61000 	adcseq	r1, r6, r0
 be0:	bc020000 	stclt	0, cr0, [r2], {-0}
 be4:	00056c06 	andeq	r6, r5, r6, lsl #24
 be8:	0000cc20 	andeq	ip, r0, r0, lsr #24
 bec:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
 bf0:	1100000c 	tstne	r0, ip
 bf4:	bd020069 	stclt	0, cr0, [r2, #-420]	; 0xfffffe5c
 bf8:	0000250a 	andeq	r2, r0, sl, lsl #10
 bfc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c00:	02006a11 	andeq	r6, r0, #69632	; 0x11000
 c04:	00250dbd 	strhteq	r0, [r5], -sp
 c08:	91020000 	mrsls	r0, (UNDEF: 2)
 c0c:	04c60e76 	strbeq	r0, [r6], #3702	; 0xe76
 c10:	bd020000 	stclt	0, cr0, [r2, #-0]
 c14:	00002510 	andeq	r2, r0, r0, lsl r5
 c18:	6f910200 	svcvs	0x00910200
 c1c:	02006311 	andeq	r6, r0, #1140850688	; 0x44000000
 c20:	00251cbd 	strhteq	r1, [r5], -sp
 c24:	91020000 	mrsls	r0, (UNDEF: 2)
 c28:	006b1175 	rsbeq	r1, fp, r5, ror r1
 c2c:	c00fbe02 	andgt	fp, pc, r2, lsl #28
 c30:	02000000 	andeq	r0, r0, #0
 c34:	1c007091 	stcne	0, cr7, [r0], {145}	; 0x91
 c38:	00000020 	andeq	r0, r0, r0, lsr #32
 c3c:	ca06af02 	bgt	1ac84c <startup-0x1fe537b4>
 c40:	a2200004 	eorge	r0, r0, #4
 c44:	01000000 	mrseq	r0, (UNDEF: 0)
 c48:	000c959c 	muleq	ip, ip, r5
 c4c:	00781700 	rsbseq	r1, r8, r0, lsl #14
 c50:	a910af02 	ldmdbge	r0, {r1, r8, r9, sl, fp, sp, pc}
 c54:	02000000 	andeq	r0, r0, #0
 c58:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
 c5c:	17af0200 	strne	r0, [pc, r0, lsl #4]!
 c60:	000000a9 	andeq	r0, r0, r9, lsr #1
 c64:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
 c68:	00746573 	rsbseq	r6, r4, r3, ror r5
 c6c:	a91eaf02 	ldmdbge	lr, {r1, r8, r9, sl, fp, sp, pc}
 c70:	02000000 	andeq	r0, r0, #0
 c74:	930e6491 	movwls	r6, #58513	; 0xe491
 c78:	02000005 	andeq	r0, r0, #5
 c7c:	00250ab0 	strhteq	r0, [r5], -r0
 c80:	91020000 	mrsls	r0, (UNDEF: 2)
 c84:	06040e73 			; <UNDEFINED> instruction: 0x06040e73
 c88:	b1020000 	mrslt	r0, (UNDEF: 2)
 c8c:	0000a906 	andeq	sl, r0, r6, lsl #18
 c90:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 c94:	01121500 	tsteq	r2, r0, lsl #10
 c98:	7b020000 	blvc	80ca0 <startup-0x1ff7f360>
 c9c:	00046206 	andeq	r6, r4, r6, lsl #4
 ca0:	00006820 	andeq	r6, r0, r0, lsr #16
 ca4:	de9c0100 	fmllee	f0, f4, f0
 ca8:	1200000c 	andne	r0, r0, #12
 cac:	20000468 	andcs	r0, r0, r8, ror #8
 cb0:	00000058 	andeq	r0, r0, r8, asr r0
 cb4:	0002010e 	andeq	r0, r2, lr, lsl #2
 cb8:	0f7c0200 	svceq	0x007c0200
 cbc:	00000025 	andeq	r0, r0, r5, lsr #32
 cc0:	12779102 	rsbsne	r9, r7, #-2147483648	; 0x80000000
 cc4:	2000048c 	andcs	r0, r0, ip, lsl #9
 cc8:	00000022 	andeq	r0, r0, r2, lsr #32
 ccc:	64646111 	strbtvs	r6, [r4], #-273	; 0xfffffeef
 cd0:	0f7f0200 	svceq	0x007f0200
 cd4:	00000025 	andeq	r0, r0, r5, lsr #32
 cd8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 cdc:	45180000 	ldrmi	r0, [r8, #-0]
 ce0:	02000000 	andeq	r0, r0, #0
 ce4:	040c066d 	streq	r0, [ip], #-1645	; 0xfffff993
 ce8:	00562000 	subseq	r2, r6, r0
 cec:	9c010000 	stcls	0, cr0, [r1], {-0}
 cf0:	0002061d 	andeq	r0, r2, sp, lsl r6
 cf4:	09680200 	stmdbeq	r8!, {r9}^
 cf8:	00000025 	andeq	r0, r0, r5, lsr #32
 cfc:	200003e2 	andcs	r0, r0, r2, ror #7
 d00:	0000002a 	andeq	r0, r0, sl, lsr #32
 d04:	0d1a9c01 	ldceq	12, cr9, [sl, #-4]
 d08:	c6190000 	ldrgt	r0, [r9], -r0
 d0c:	02000004 	andeq	r0, r0, #4
 d10:	00252368 	eoreq	r2, r5, r8, ror #6
 d14:	91020000 	mrsls	r0, (UNDEF: 2)
 d18:	32100077 	andscc	r0, r0, #119	; 0x77
 d1c:	02000000 	andeq	r0, r0, #0
 d20:	039c0660 	orrseq	r0, ip, #96, 12	; 0x6000000
 d24:	00462000 	subeq	r2, r6, r0
 d28:	9c010000 	stcls	0, cr0, [r1], {-0}
 d2c:	00000d4f 	andeq	r0, r0, pc, asr #26
 d30:	00021319 	andeq	r1, r2, r9, lsl r3
 d34:	21600200 	cmncs	r0, r0, lsl #4
 d38:	00000025 	andeq	r0, r0, r5, lsr #32
 d3c:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
 d40:	000004c6 	andeq	r0, r0, r6, asr #9
 d44:	252f6002 	strcs	r6, [pc, #-2]!	; d4a <startup-0x1ffff2b6>
 d48:	02000000 	andeq	r0, r0, #0
 d4c:	10007691 	mulne	r0, r1, r6
 d50:	000000ca 	andeq	r0, r0, sl, asr #1
 d54:	5c065902 			; <UNDEFINED> instruction: 0x5c065902
 d58:	40200003 	eormi	r0, r0, r3
 d5c:	01000000 	mrseq	r0, (UNDEF: 0)
 d60:	000d849c 	muleq	sp, ip, r4
 d64:	00d81900 	sbcseq	r1, r8, r0, lsl #18
 d68:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
 d6c:	00002524 	andeq	r2, r0, r4, lsr #10
 d70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d74:	0004c619 	andeq	ip, r4, r9, lsl r6
 d78:	35590200 	ldrbcc	r0, [r9, #-512]	; 0xfffffe00
 d7c:	00000025 	andeq	r0, r0, r5, lsr #32
 d80:	00769102 	rsbseq	r9, r6, r2, lsl #2
 d84:	00068110 	andeq	r8, r6, r0, lsl r1
 d88:	06440200 	strbeq	r0, [r4], -r0, lsl #4
 d8c:	200002dc 	ldrdcs	r0, [r0], -ip
 d90:	00000080 	andeq	r0, r0, r0, lsl #1
 d94:	0db99c01 	ldceq	12, cr9, [r9, #4]!
 d98:	0c190000 	ldceq	0, cr0, [r9], {-0}
 d9c:	02000001 	andeq	r0, r0, #1
 da0:	00251c44 	eoreq	r1, r5, r4, asr #24
 da4:	91020000 	mrsls	r0, (UNDEF: 2)
 da8:	04c61977 	strbeq	r1, [r6], #2423	; 0x977
 dac:	44020000 	strmi	r0, [r2], #-0
 db0:	0000252b 	andeq	r2, r0, fp, lsr #10
 db4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 db8:	017b1d00 	cmneq	fp, r0, lsl #26
 dbc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 dc0:	00002509 	andeq	r2, r0, r9, lsl #10
 dc4:	00024c00 	andeq	r4, r2, r0, lsl #24
 dc8:	00009020 	andeq	r9, r0, r0, lsr #32
 dcc:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
 dd0:	1900000d 	stmdbne	r0, {r0, r2, r3}
 dd4:	000004c6 	andeq	r0, r0, r6, asr #9
 dd8:	251e2e02 	ldrcs	r2, [lr, #-3586]	; 0xfffff1fe
 ddc:	02000000 	andeq	r0, r0, #0
 de0:	72116f91 	andsvc	r6, r1, #580	; 0x244
 de4:	36020076 			; <UNDEFINED> instruction: 0x36020076
 de8:	0000250a 	andeq	r2, r0, sl, lsl #10
 dec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 df0:	05af1000 	streq	r1, [pc, #0]!	; df8 <startup-0x1ffff208>
 df4:	1a020000 	bne	80dfc <startup-0x1ff7f204>
 df8:	0001d606 	andeq	sp, r1, r6, lsl #12
 dfc:	00007620 	andeq	r7, r0, r0, lsr #12
 e00:	1b9c0100 	blne	fe701208 <ball+0xde6fe0f0>
 e04:	2400000e 	strcs	r0, [r0], #-14
 e08:	00000000 	andeq	r0, r0, r0
 e0c:	02006311 	andeq	r6, r0, #1140850688	; 0x44000000
 e10:	00250b23 	eoreq	r0, r5, r3, lsr #22
 e14:	91020000 	mrsls	r0, (UNDEF: 2)
 e18:	10000077 	andne	r0, r0, r7, ror r0
 e1c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 e20:	74060d02 	strvc	r0, [r6], #-3330	; 0xfffff2fe
 e24:	62200001 	eorvs	r0, r0, #1
 e28:	01000000 	mrseq	r0, (UNDEF: 0)
 e2c:	000e509c 	muleq	lr, ip, r0
 e30:	04c61900 	strbeq	r1, [r6], #2304	; 0x900
 e34:	0d020000 	stceq	0, cr0, [r2, #-0]
 e38:	00002520 	andeq	r2, r0, r0, lsr #10
 e3c:	6f910200 	svcvs	0x00910200
 e40:	0003e30e 	andeq	lr, r3, lr, lsl #6
 e44:	0a0e0200 	beq	38164c <startup-0x1fc7e9b4>
 e48:	00000025 	andeq	r0, r0, r5, lsr #32
 e4c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 e50:	0003411c 	andeq	r4, r3, ip, lsl r1
 e54:	06090200 	streq	r0, [r9], -r0, lsl #4
 e58:	20000138 	andcs	r0, r0, r8, lsr r1
 e5c:	0000003c 	andeq	r0, r0, ip, lsr r0
 e60:	0e749c01 	cdpeq	12, 7, cr9, cr4, cr1, {0}
 e64:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 e68:	25090200 	strcs	r0, [r9, #-512]	; 0xfffffe00
 e6c:	00000025 	andeq	r0, r0, r5, lsr #32
 e70:	00779102 	rsbseq	r9, r7, r2, lsl #2
 e74:	0004671c 	andeq	r6, r4, ip, lsl r7
 e78:	06040200 	streq	r0, [r4], -r0, lsl #4
 e7c:	200000f2 	strdcs	r0, [r0], -r2
 e80:	00000046 	andeq	r0, r0, r6, asr #32
 e84:	0e989c01 	cdpeq	12, 9, cr9, cr8, cr1, {0}
 e88:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 e8c:	23040200 	movwcs	r0, #16896	; 0x4200
 e90:	00000025 	andeq	r0, r0, r5, lsr #32
 e94:	00779102 	rsbseq	r9, r7, r2, lsl #2
 e98:	0003bb18 	andeq	fp, r3, r8, lsl fp
 e9c:	06210100 	strteq	r0, [r1], -r0, lsl #2
 ea0:	200000e0 	andcs	r0, r0, r0, ror #1
 ea4:	00000012 	andeq	r0, r0, r2, lsl r0
 ea8:	44109c01 	ldrmi	r9, [r0], #-3073	; 0xfffff3ff
 eac:	01000002 	tsteq	r0, r2
 eb0:	009a0617 	addseq	r0, sl, r7, lsl r6
 eb4:	00462000 	subeq	r2, r6, r0
 eb8:	9c010000 	stcls	0, cr0, [r1], {-0}
 ebc:	00000ee6 	andeq	r0, r0, r6, ror #29
 ec0:	00736d17 	rsbseq	r6, r3, r7, lsl sp
 ec4:	c01f1701 	andsgt	r1, pc, r1, lsl #14
 ec8:	02000000 	andeq	r0, r0, #0
 ecc:	b8126c91 	ldmdalt	r2, {r0, r4, r7, sl, fp, sp, lr}
 ed0:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 ed4:	11000000 	mrsne	r0, (UNDEF: 0)
 ed8:	1c010069 	stcne	0, cr0, [r1], {105}	; 0x69
 edc:	0000a90a 	andeq	sl, r0, sl, lsl #18
 ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 ee4:	40100000 	andsmi	r0, r0, r0
 ee8:	01000005 	tsteq	r0, r5
 eec:	0058060d 	subseq	r0, r8, sp, lsl #12
 ef0:	00422000 	subeq	r2, r2, r0
 ef4:	9c010000 	stcls	0, cr0, [r1], {-0}
 ef8:	00000f22 	andeq	r0, r0, r2, lsr #30
 efc:	00737517 	rsbseq	r7, r3, r7, lsl r5
 f00:	c01f0d01 	andsgt	r0, pc, r1, lsl #26
 f04:	02000000 	andeq	r0, r0, #0
 f08:	76126c91 			; <UNDEFINED> instruction: 0x76126c91
 f0c:	1a200000 	bne	800f14 <startup-0x1f7ff0ec>
 f10:	11000000 	mrsne	r0, (UNDEF: 0)
 f14:	12010069 	andne	r0, r1, #105	; 0x69
 f18:	0000a90a 	andeq	sl, r0, sl, lsl #18
 f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 f20:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
 f24:	01000002 	tsteq	r0, r2
 f28:	00100603 	andseq	r0, r0, r3, lsl #12
 f2c:	00482000 	subeq	r2, r8, r0
 f30:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	150b0000 	strne	r0, [fp, #-0]
  88:	01192701 	tsteq	r9, r1, lsl #14
  8c:	0c000013 	stceq	0, cr0, [r0], {19}
  90:	13490005 	movtne	r0, #36869	; 0x9005
  94:	210d0000 	mrscs	r0, (UNDEF: 13)
  98:	2f134900 	svccs	0x00134900
  9c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b01130f 	bleq	44cf4 <startup-0x1ffbb30c>
  b4:	3b0b3a0b 	blcc	2ce8e8 <startup-0x1fd31718>
  b8:	010b390b 	tsteq	fp, fp, lsl #18
  bc:	10000013 	andne	r0, r0, r3, lsl r0
  c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c4:	0b3a0e03 	bleq	e838d8 <startup-0x1f17c728>
  c8:	0b390b3b 	bleq	e42dbc <startup-0x1f1bd244>
  cc:	01111927 	tsteq	r1, r7, lsr #18
  d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d8:	11000013 	tstne	r0, r3, lsl r0
  dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
  e0:	0b3b0b3a 	bleq	ec2dd0 <startup-0x1f13d230>
  e4:	13490b39 	movtne	r0, #39737	; 0x9b39
  e8:	00001802 	andeq	r1, r0, r2, lsl #16
  ec:	11010b12 	tstne	r1, r2, lsl fp
  f0:	00061201 	andeq	r1, r6, r1, lsl #4
  f4:	00341300 	eorseq	r1, r4, r0, lsl #6
  f8:	0b3a0e03 	bleq	e8390c <startup-0x1f17c6f4>
  fc:	0b39053b 	bleq	e415f0 <startup-0x1f1bea10>
 100:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 104:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 108:	03193f01 	tsteq	r9, #1, 30
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 114:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 118:	96184006 	ldrls	r4, [r8], -r6
 11c:	13011942 	movwne	r1, #6466	; 0x1942
 120:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	110b390b 	tstne	fp, fp, lsl #18
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	3f002e16 	svccc	0x00002e16
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 148:	1119270b 	tstne	r9, fp, lsl #14
 14c:	40061201 	andmi	r1, r6, r1, lsl #4
 150:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 154:	05170000 	ldreq	r0, [r7, #-0]
 158:	3a080300 	bcc	200d60 <startup-0x1fdff2a0>
 15c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 164:	18000018 	stmdane	r0, {r3, r4}
 168:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 16c:	0b3a0e03 	bleq	e83980 <startup-0x1f17c680>
 170:	0b390b3b 	bleq	e42e64 <startup-0x1f1bd19c>
 174:	06120111 			; <UNDEFINED> instruction: 0x06120111
 178:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 17c:	19000019 	stmdbne	r0, {r0, r3, r4}
 180:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 184:	0b3b0b3a 	bleq	ec2e74 <startup-0x1f13d18c>
 188:	13490b39 	movtne	r0, #39737	; 0x9b39
 18c:	00001802 	andeq	r1, r0, r2, lsl #16
 190:	3f012e1a 	svccc	0x00012e1a
 194:	3a0e0319 	bcc	380e00 <startup-0x1fc7f200>
 198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1a0:	1b000019 	blne	20c <startup-0x1ffffdf4>
 1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 1a8:	3f012e1c 	svccc	0x00012e1c
 1ac:	3a0e0319 	bcc	380e18 <startup-0x1fc7f1e8>
 1b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1b4:	1119270b 	tstne	r9, fp, lsl #14
 1b8:	40061201 	andmi	r1, r6, r1, lsl #4
 1bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1c0:	00001301 	andeq	r1, r0, r1, lsl #6
 1c4:	3f012e1d 	svccc	0x00012e1d
 1c8:	3a0e0319 	bcc	380e34 <startup-0x1fc7f1cc>
 1cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1d8:	96184006 	ldrls	r4, [r8], -r6
 1dc:	13011942 	movwne	r1, #6466	; 0x1942
 1e0:	0b1e0000 	bleq	7801e8 <startup-0x1f87fe18>
 1e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1e8:	00130106 	andseq	r0, r3, r6, lsl #2
 1ec:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 1f0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f4:	0b3b0b3a 	bleq	ec2ee4 <startup-0x1f13d11c>
 1f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1fc:	1301193c 	movwne	r1, #6460	; 0x193c
 200:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 204:	03193f01 	tsteq	r9, #1, 30
 208:	3b0b3a0e 	blcc	2cea48 <startup-0x1fd315b8>
 20c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 210:	11134919 	tstne	r3, r9, lsl r9
 214:	40061201 	andmi	r1, r6, r1, lsl #4
 218:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 21c:	00001301 	andeq	r1, r0, r1, lsl #6
 220:	3f012e21 	svccc	0x00012e21
 224:	3a0e0319 	bcc	380e90 <startup-0x1fc7f170>
 228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 22c:	1113490b 	tstne	r3, fp, lsl #18
 230:	40061201 	andmi	r1, r6, r1, lsl #4
 234:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 238:	00001301 	andeq	r1, r0, r1, lsl #6
 23c:	03012e22 	movweq	r2, #7714	; 0x1e22
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 248:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 24c:	97184006 	ldrls	r4, [r8, -r6]
 250:	13011942 	movwne	r1, #6466	; 0x1942
 254:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 258:	03193f01 	tsteq	r9, #1, 30
 25c:	3b0b3a0e 	blcc	2cea9c <startup-0x1fd31564>
 260:	110b390b 	tstne	fp, fp, lsl #18
 264:	40061201 	andmi	r1, r6, r1, lsl #4
 268:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	55010b24 	strpl	r0, [r1, #-2852]	; 0xfffff4dc
 274:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000131c 	andeq	r1, r0, ip, lsl r3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200001f8 	strdcs	r0, [r0], -r8
   4:	20000222 	andcs	r0, r0, r2, lsr #4
   8:	20000224 	andcs	r0, r0, r4, lsr #4
   c:	20000226 	andcs	r0, r0, r6, lsr #4
	...
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	2000132c 	andcs	r1, r0, ip, lsr #6
  20:	20000000 	andcs	r0, r0, r0
  24:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000b50 	andeq	r0, r0, r0, asr fp
   4:	017b0003 	cmneq	fp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
  28:	6f442f6e 	svcvs	0x00442f6e
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	50746947 	rsbspl	r6, r4, r7, asr #18
  38:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  3c:	2f737463 	svccs	0x00737463
  40:	6f686353 	svcvs	0x00686353
  44:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
  48:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
  4c:	442f7374 	strtmi	r7, [pc], #-884	; 54 <startup-0x1fffffac>
  50:	31305441 	teqcc	r0, r1, asr #8
  54:	614c2f37 	cmpvs	ip, r7, lsr pc
  58:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
  5c:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
  60:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
  64:	525f5250 	subspl	r5, pc, #80, 4
  68:	41505254 	cmpmi	r0, r4, asr r2
  6c:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
  70:	44000067 	strmi	r0, [r0], #-103	; 0xffffff99
  74:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  78:	00682e73 	rsbeq	r2, r8, r3, ror lr
  7c:	47000001 	strmi	r0, [r0, -r1]
  80:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  84:	72446369 	subvc	r6, r4, #-1543503871	; 0xa4000001
  88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
  8c:	00682e73 	rsbeq	r2, r8, r3, ror lr
  90:	4b000001 	blmi	9c <startup-0x1fffff64>
  94:	44627965 	strbtmi	r7, [r2], #-2405	; 0xfffff69b
  98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
  9c:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  a0:	00000100 	andeq	r0, r0, r0, lsl #2
  a4:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
  a8:	69676f4c 	stmdbvs	r7!, {r2, r3, r6, r8, r9, sl, fp, sp, lr}^
  ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
  b0:	41000001 	tstmi	r0, r1
  b4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  b8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  bc:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
  c0:	00010068 	andeq	r0, r1, r8, rrx
  c4:	6e6f5000 	cdpvs	0, 6, cr5, cr15, cr0, {0}
  c8:	00632e67 	rsbeq	r2, r3, r7, ror #28
  cc:	53000001 	movwpl	r0, #1
  d0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
  d4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
  d8:	00682e73 	rsbeq	r2, r8, r3, ror lr
  dc:	44000001 	strmi	r0, [r0], #-1
  e0:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
  e4:	6f697469 	svcvs	0x00697469
  e8:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
  ec:	00000100 	andeq	r0, r0, r0, lsl #2
  f0:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
  f4:	654c7265 	strbvs	r7, [ip, #-613]	; 0xfffffd9b
  f8:	69577466 	ldmdbvs	r7, {r1, r2, r5, r6, sl, ip, sp, lr}^
  fc:	782e736e 	stmdavc	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 100:	01006d62 	tsteq	r0, r2, ror #26
 104:	6c500000 	mravs	r0, r0, acc0
 108:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 10c:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 110:	736e6957 	cmnvc	lr, #1425408	; 0x15c000
 114:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 118:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 11c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 120:	00000100 	andeq	r0, r0, r0, lsl #2
 124:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 128:	69527265 	ldmdbvs	r2, {r0, r2, r5, r6, r9, ip, sp, lr}^
 12c:	57746867 	ldrbpl	r6, [r4, -r7, ror #16]!
 130:	2e736e69 	cdpcs	14, 7, cr6, cr3, cr9, {3}
 134:	006d6278 	rsbeq	r6, sp, r8, ror r2
 138:	50000001 	andpl	r0, r0, r1
 13c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 140:	67695272 			; <UNDEFINED> instruction: 0x67695272
 144:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 148:	6957736e 	ldmdbvs	r7, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 14c:	65546874 	ldrbvs	r6, [r4, #-2164]	; 0xfffff78c
 150:	782e7478 	stmdavc	lr!, {r3, r4, r5, r6, sl, ip, sp, lr}
 154:	01006d62 	tsteq	r0, r2, ror #26
 158:	74530000 	ldrbvc	r0, [r3], #-0
 15c:	6d747261 	lfmvs	f7, 2, [r4, #-388]!	; 0xfffffe7c
 160:	57756e65 	ldrbpl	r6, [r5, -r5, ror #28]!
 164:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
 168:	2e747865 	cdpcs	8, 7, cr7, cr4, cr5, {3}
 16c:	006d6278 	rsbeq	r6, sp, r8, ror r2
 170:	53000001 	movwpl	r0, #1
 174:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 178:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
 17c:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
 180:	00000100 	andeq	r0, r0, r0, lsl #2
 184:	00170500 	andseq	r0, r7, r0, lsl #10
 188:	00100205 	andseq	r0, r0, r5, lsl #4
 18c:	05142000 	ldreq	r2, [r4, #-0]
 190:	0c052f02 	stceq	15, cr2, [r5], {2}
 194:	2f020520 	svccs	0x00020520
 198:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 19c:	0b052f02 	bleq	14bdac <startup-0x1feb4254>
 1a0:	2f020520 	svccs	0x00020520
 1a4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
 1a8:	0a052f07 	beq	14bdcc <startup-0x1feb4234>
 1ac:	01040200 	mrseq	r0, R12_usr
 1b0:	00190520 	andseq	r0, r9, r0, lsr #10
 1b4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1b8:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 1bc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1c0:	0c052202 	sfmeq	f2, 4, [r5], {2}
 1c4:	2f010520 	svccs	0x00010520
 1c8:	05ae2205 	streq	r2, [lr, #517]!	; 0x205
 1cc:	05834c05 	streq	r4, [r3, #3077]	; 0xc05
 1d0:	02053e0a 	andeq	r3, r5, #10, 28	; 0xa0
 1d4:	0003052e 	andeq	r0, r3, lr, lsr #10
 1d8:	21030402 	tstcs	r3, r2, lsl #8
 1dc:	02001c05 	andeq	r1, r0, #1280	; 0x500
 1e0:	052d0304 	streq	r0, [sp, #-772]!	; 0xfffffcfc
 1e4:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
 1e8:	13053c01 	movwne	r3, #23553	; 0x5c01
 1ec:	01040200 	mrseq	r0, R12_usr
 1f0:	0002052e 	andeq	r0, r2, lr, lsr #10
 1f4:	20010402 	andcs	r0, r1, r2, lsl #8
 1f8:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
 1fc:	06055a22 	streq	r5, [r5], -r2, lsr #20
 200:	0a05834c 	beq	160f38 <startup-0x1fe9f0c8>
 204:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 208:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 20c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 210:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 214:	13055703 	movwne	r5, #22275	; 0x5703
 218:	01040200 	mrseq	r0, R12_usr
 21c:	0002053c 	andeq	r0, r2, ip, lsr r5
 220:	20010402 	andcs	r0, r1, r2, lsl #8
 224:	053f0105 	ldreq	r0, [pc, #-261]!	; 127 <startup-0x1ffffed9>
 228:	02055a13 	andeq	r5, r5, #77824	; 0x13000
 22c:	01052f2f 	tsteq	r5, pc, lsr #30
 230:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
 234:	3c600325 	stclcc	3, cr0, [r0], #-148	; 0xffffff6c
 238:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 23c:	0f054a15 	svceq	0x00054a15
 240:	01055966 	tsteq	r5, r6, ror #18
 244:	68270583 	stmdavs	r7!, {r0, r1, r7, r8, sl}
 248:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
 24c:	05130801 	ldreq	r0, [r3, #-2049]	; 0xfffff7ff
 250:	0a05762b 	beq	15db04 <startup-0x1fea24fc>
 254:	4b020567 	blmi	817f8 <startup-0x1ff7e808>
 258:	05c10c05 	strbeq	r0, [r1, #3077]	; 0xc05
 25c:	207a030b 	rsbscs	r0, sl, fp, lsl #6
 260:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 264:	0605210f 	streq	r2, [r5], -pc, lsl #2
 268:	4b0f053d 	blmi	3c1764 <startup-0x1fc3e89c>
 26c:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
 270:	03054b1b 	movweq	r4, #23323	; 0x5b1b
 274:	210c053c 	tstcs	ip, ip, lsr r5
 278:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 27c:	02053e1e 	andeq	r3, r5, #480	; 0x1e0
 280:	0d053d3d 	stceq	13, cr3, [r5, #-244]	; 0xffffff0c
 284:	2f020520 	svccs	0x00020520
 288:	03053d3d 	movweq	r3, #23869	; 0x5d3d
 28c:	1d053d30 	stcne	13, cr3, [r5, #-192]	; 0xffffff40
 290:	3c0b052f 	cfstr32cc	mvfx0, [fp], {47}	; 0x2f
 294:	3d4b0305 	stclcc	3, cr0, [fp, #-20]	; 0xffffffec
 298:	052f0505 	streq	r0, [pc, #-1285]!	; fffffd9b <ball+0xdfffcc83>
 29c:	4a7a030a 	bmi	1e80ecc <startup-0x1e17f134>
 2a0:	05270405 	streq	r0, [r7, #-1029]!	; 0xfffffbfb
 2a4:	053d2302 	ldreq	r2, [sp, #-770]!	; 0xfffffcfe
 2a8:	0105200e 	tsteq	r5, lr
 2ac:	ca29052f 	bgt	a41770 <startup-0x1f5be890>
 2b0:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 2b4:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 2b8:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 2bc:	0f053d2f 	svceq	0x00053d2f
 2c0:	200a052f 	andcs	r0, sl, pc, lsr #10
 2c4:	3d4b0205 	sfmcc	f0, 2, [fp, #-20]	; 0xffffffec
 2c8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 2cc:	03052f04 	movweq	r2, #24324	; 0x5f04
 2d0:	04053d4b 	streq	r3, [r5], #-3403	; 0xfffff2b5
 2d4:	4b030530 	blmi	c179c <startup-0x1ff3e864>
 2d8:	3009053d 	andcc	r0, r9, sp, lsr r5
 2dc:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 2e0:	0205ca36 	andeq	ip, r5, #221184	; 0x36000
 2e4:	20100591 	mulscs	r0, r1, r5
 2e8:	593d0205 	ldmdbpl	sp!, {r0, r2, r9}
 2ec:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffff5c5 <ball+0xdfffc4ad>
 2f0:	04053e10 	streq	r3, [r5], #-3600	; 0xfffff1f0
 2f4:	2103054a 	tstcs	r3, sl, asr #10
 2f8:	3010053d 	andscc	r0, r0, sp, lsr r5
 2fc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 300:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 304:	0f053002 	svceq	0x00053002
 308:	2f020520 	svccs	0x00020520
 30c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 310:	05764005 	ldrbeq	r4, [r6, #-5]!
 314:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 318:	8301053d 	movwhi	r0, #5437	; 0x153d
 31c:	054c3a05 	strbeq	r3, [ip, #-2565]	; 0xfffff5fb
 320:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 324:	01053d3d 	tsteq	r5, sp, lsr sp
 328:	4c2e0583 	cfstr32mi	mvfx0, [lr], #-524	; 0xfffffdf4
 32c:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
 330:	01055909 	tsteq	r5, r9, lsl #18
 334:	4c1a0567 	cfldr32mi	mvfx0, [sl], {103}	; 0x67
 338:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 32c <startup-0x1ffffcd4>
 33c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 340:	4b4b4b4b 	blmi	12d3074 <startup-0x1ed2cf8c>
 344:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 348:	053e1c05 	ldreq	r1, [lr, #-3077]!	; 0xfffff3fb
 34c:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 350:	2103053c 	tstcs	r3, ip, lsr r5
 354:	4b0f059f 	blmi	3c19d8 <startup-0x1fc3e628>
 358:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 35c:	04020004 	streq	r0, [r2], #-4
 360:	25052103 	strcs	r2, [r5, #-259]	; 0xfffffefd
 364:	03040200 	movweq	r0, #16896	; 0x4200
 368:	00030549 	andeq	r0, r3, r9, asr #10
 36c:	58010402 	stmdapl	r1, {r1, sl}
 370:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 374:	05470204 	strbeq	r0, [r7, #-516]	; 0xfffffdfc
 378:	04020002 	streq	r0, [r2], #-2
 37c:	01055801 	tsteq	r5, r1, lsl #16
 380:	03230551 			; <UNDEFINED> instruction: 0x03230551
 384:	0605582c 	streq	r5, [r5], -ip, lsr #16
 388:	2f040568 	svccs	0x00040568
 38c:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 390:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 394:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
 398:	28053c04 	stmdacs	r5, {r2, sl, fp, ip, sp}
 39c:	06040200 	streq	r0, [r4], -r0, lsl #4
 3a0:	3d12053c 	cfldr32cc	mvfx0, [r2, #-240]	; 0xffffff10
 3a4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 3a8:	0805900c 	stmdaeq	r5, {r2, r3, ip, pc}
 3ac:	3d04053c 	cfstr32cc	mvfx0, [r4, #-240]	; 0xffffff10
 3b0:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 3b4:	12053d09 	andne	r3, r5, #576	; 0x240
 3b8:	2e15053e 	mrccs	5, 0, r0, cr5, cr14, {1}
 3bc:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
 3c0:	0805200d 	stmdaeq	r5, {r0, r2, r3, sp}
 3c4:	3d14052e 	cfldr32cc	mvfx0, [r4, #-184]	; 0xffffff48
 3c8:	79033505 	stmdbvc	r3, {r0, r2, r8, sl, ip, sp}
 3cc:	280105e4 	stmdacs	r1, {r2, r5, r6, r7, r8, sl}
 3d0:	05762005 	ldrbeq	r2, [r6, #-5]!
 3d4:	08053e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, ip, sp}
 3d8:	4a02052f 	bmi	8189c <startup-0x1ff7e764>
 3dc:	00210e05 	eoreq	r0, r1, r5, lsl #28
 3e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3e4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 3e8:	02002e02 	andeq	r2, r0, #2, 28
 3ec:	05200404 	streq	r0, [r0, #-1028]!	; 0xfffffbfc
 3f0:	04020009 	streq	r0, [r2], #-9
 3f4:	052f0604 	streq	r0, [pc, #-1540]!	; fffffdf8 <ball+0xdfffcce0>
 3f8:	04020003 	streq	r0, [r2], #-3
 3fc:	04054a04 	streq	r4, [r5], #-2564	; 0xfffff5fc
 400:	0a05c921 	beq	17288c <startup-0x1fe8d774>
 404:	4a040567 	bmi	1019a8 <startup-0x1fefe658>
 408:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 40c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 410:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 414:	1e059d03 	cdpne	13, 0, cr9, cr5, cr3, {0}
 418:	03040200 	movweq	r0, #16896	; 0x4200
 41c:	00040566 	andeq	r0, r4, r6, ror #10
 420:	3c010402 	cfstrscc	mvf0, [r1], {2}
 424:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 428:	05550204 	ldrbeq	r0, [r5, #-516]	; 0xfffffdfc
 42c:	04020003 	streq	r0, [r2], #-3
 430:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
 434:	02040200 	andeq	r0, r4, #0, 4
 438:	00020556 	andeq	r0, r2, r6, asr r5
 43c:	66010402 	strvs	r0, [r1], -r2, lsl #8
 440:	0a030105 	beq	c085c <startup-0x1ff3f7a4>
 444:	791c0558 	ldmdbvc	ip, {r3, r4, r6, r8, sl}
 448:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 44c:	0a052e02 	beq	14bc5c <startup-0x1feb43a4>
 450:	03040200 	movweq	r0, #16896	; 0x4200
 454:	00160521 	andseq	r0, r6, r1, lsr #10
 458:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 45c:	02001c05 	andeq	r1, r0, #1280	; 0x500
 460:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 464:	04020003 	streq	r0, [r2], #-3
 468:	25052e03 	strcs	r2, [r5, #-3587]	; 0xfffff1fd
 46c:	03040200 	movweq	r0, #16896	; 0x4200
 470:	00310520 	eorseq	r0, r1, r0, lsr #10
 474:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 478:	02003705 	andeq	r3, r0, #1310720	; 0x140000
 47c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 480:	04020003 	streq	r0, [r2], #-3
 484:	2c052e03 	stccs	14, cr2, [r5], {3}
 488:	03040200 	movweq	r0, #16896	; 0x4200
 48c:	00160557 	andseq	r0, r6, r7, asr r5
 490:	3c010402 	cfstrscc	mvf0, [r1], {2}
 494:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 498:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 49c:	04020002 	streq	r0, [r2], #-2
 4a0:	01052001 	tsteq	r5, r1
 4a4:	5a1d053f 	bpl	7419a8 <startup-0x1f8be658>
 4a8:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 4ac:	0a052e02 	beq	14bcbc <startup-0x1feb4344>
 4b0:	03040200 	movweq	r0, #16896	; 0x4200
 4b4:	00160521 	andseq	r0, r6, r1, lsr #10
 4b8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4bc:	02001c05 	andeq	r1, r0, #1280	; 0x500
 4c0:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 4c4:	04020003 	streq	r0, [r2], #-3
 4c8:	25052e03 	strcs	r2, [r5, #-3587]	; 0xfffff1fd
 4cc:	03040200 	movweq	r0, #16896	; 0x4200
 4d0:	00310520 	eorseq	r0, r1, r0, lsr #10
 4d4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4d8:	02003705 	andeq	r3, r0, #1310720	; 0x140000
 4dc:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 4e0:	04020003 	streq	r0, [r2], #-3
 4e4:	29052e03 	stmdbcs	r5, {r0, r1, r9, sl, fp, sp}
 4e8:	03040200 	movweq	r0, #16896	; 0x4200
 4ec:	00160557 	andseq	r0, r6, r7, asr r5
 4f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 4f4:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 4f8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4fc:	04020002 	streq	r0, [r2], #-2
 500:	01052001 	tsteq	r5, r1
 504:	5a190541 	bpl	641a10 <startup-0x1f9be5f0>
 508:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 50c:	0f052e01 	svceq	0x00052e01
 510:	03040200 	movweq	r0, #16896	; 0x4200
 514:	00180521 	andseq	r0, r8, r1, lsr #10
 518:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 51c:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 520:	5a3c0104 	bpl	f00938 <startup-0x1f0ff6c8>
 524:	057c4f05 	ldrbeq	r4, [ip, #-3845]!	; 0xfffff0fb
 528:	0c05750b 	cfstr32eq	mvfx7, [r5], {11}
 52c:	4b0a054b 	blmi	281a60 <startup-0x1fd7e5a0>
 530:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 534:	07054c34 	smladxeq	r5, r4, ip, r4
 538:	2e130576 	mrccs	5, 0, r0, cr3, cr6, {3}
 53c:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 540:	1d052f15 	stcne	15, cr2, [r5, #-84]	; 0xffffffac
 544:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
 548:	05301505 	ldreq	r1, [r0, #-1285]!	; 0xfffffafb
 54c:	12052e1d 	andne	r2, r5, #464	; 0x1d0
 550:	2f09052e 	svccs	0x0009052e
 554:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 558:	0305210a 	movweq	r2, #20746	; 0x510a
 55c:	211a052e 	tstcs	sl, lr, lsr #10
 560:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
 564:	20053c34 	andcs	r3, r5, r4, lsr ip
 568:	2012052e 	andscs	r0, r2, lr, lsr #10
 56c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 570:	09052e04 	stmdbeq	r5, {r2, r9, sl, fp, sp}
 574:	82080521 	andhi	r0, r8, #138412032	; 0x8400000
 578:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
 57c:	16052e12 			; <UNDEFINED> instruction: 0x16052e12
 580:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 584:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
 588:	17053c06 	strne	r3, [r5, -r6, lsl #24]
 58c:	02040200 	andeq	r0, r4, #0, 4
 590:	00040556 	andeq	r0, r4, r6, asr r5
 594:	3c010402 	cfstrscc	mvf0, [r1], {2}
 598:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 59c:	053a0204 	ldreq	r0, [sl, #-516]!	; 0xfffffdfc
 5a0:	04020003 	streq	r0, [r2], #-3
 5a4:	1e053c01 	cdpne	12, 0, cr3, cr5, cr1, {0}
 5a8:	02040200 	andeq	r0, r4, #0, 4
 5ac:	00130549 	andseq	r0, r3, r9, asr #10
 5b0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5b4:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 5b8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 5bc:	3c090301 	stccc	3, cr0, [r9], {1}
 5c0:	1e050304 	cdpne	3, 0, cr0, cr5, cr4, {0}
 5c4:	587e8603 	ldmdapl	lr!, {r0, r1, r9, sl, pc}^
 5c8:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 5cc:	052f080b 	streq	r0, [pc, #-2059]!	; fffffdc9 <ball+0xdfffccb1>
 5d0:	0305201c 	movweq	r2, #20508	; 0x501c
 5d4:	210b052e 	tstcs	fp, lr, lsr #10
 5d8:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 5dc:	0b052e03 	bleq	14bdf0 <startup-0x1feb4210>
 5e0:	201c0521 	andscs	r0, ip, r1, lsr #10
 5e4:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 5e8:	1c05210b 	stfnes	f2, [r5], {11}
 5ec:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 5f0:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 5f4:	0105201d 	tsteq	r5, sp, lsl r0
 5f8:	841d0530 	ldrhi	r0, [sp], #-1328	; 0xfffffad0
 5fc:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 600:	052f080b 	streq	r0, [pc, #-2059]!	; fffffdfd <ball+0xdfffcce5>
 604:	0305201b 	movweq	r2, #20507	; 0x501b
 608:	210b052e 	tstcs	fp, lr, lsr #10
 60c:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 610:	0b052e03 	bleq	14be24 <startup-0x1feb41dc>
 614:	201b0521 	andscs	r0, fp, r1, lsr #10
 618:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 61c:	1b05210b 	blne	148a50 <startup-0x1feb75b0>
 620:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 624:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
 628:	0105201c 	tsteq	r5, ip, lsl r0
 62c:	84150530 	ldrhi	r0, [r5], #-1328	; 0xfffffad0
 630:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
 634:	07052010 	smladeq	r5, r0, r0, r2
 638:	4a04053d 	bmi	101b34 <startup-0x1fefe4cc>
 63c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 640:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 644:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 648:	0015054a 	andseq	r0, r5, sl, asr #10
 64c:	20010402 	andcs	r0, r1, r2, lsl #8
 650:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff53 <ball+0xdfffce3b>
 654:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 658:	01040200 	mrseq	r0, R12_usr
 65c:	2f070520 	svccs	0x00070520
 660:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 664:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 668:	09052001 	stmdbeq	r5, {r0, sp}
 66c:	2101052f 	tstcs	r1, pc, lsr #10
 670:	3d681405 	cfstrdcc	mvd1, [r8, #-20]!	; 0xffffffec
 674:	05201005 	streq	r1, [r0, #-5]!
 678:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 67c:	0015054a 	andseq	r0, r5, sl, asr #10
 680:	20010402 	andcs	r0, r1, r2, lsl #8
 684:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff87 <ball+0xdfffce6f>
 688:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 68c:	01040200 	mrseq	r0, R12_usr
 690:	2f070520 	svccs	0x00070520
 694:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 698:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 69c:	07052001 	streq	r2, [r5, -r1]
 6a0:	4a04052f 	bmi	101b64 <startup-0x1fefe49c>
 6a4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 6a8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6ac:	01052f09 	tsteq	r5, r9, lsl #30
 6b0:	68250521 	stmdavs	r5!, {r0, r5, r8, sl}
 6b4:	05591005 	ldrbeq	r1, [r9, #-5]
 6b8:	01057512 	tsteq	r5, r2, lsl r5
 6bc:	77190575 			; <UNDEFINED> instruction: 0x77190575
 6c0:	053f0a05 	ldreq	r0, [pc, #-2565]!	; fffffcc3 <ball+0xdfffcbab>
 6c4:	03052e02 	movweq	r2, #24066	; 0x5e02
 6c8:	4b0c0521 	blmi	301b54 <startup-0x1fcfe4ac>
 6cc:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
 6d0:	0a053006 	beq	14c6f0 <startup-0x1feb3910>
 6d4:	8208054b 	andhi	r0, r8, #314572800	; 0x12c00000
 6d8:	052f0b05 	streq	r0, [pc, #-2821]!	; fffffbdb <ball+0xdfffcac3>
 6dc:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 6e0:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
 6e4:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 6e8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6ec:	3c090309 	stccc	3, cr0, [r9], {9}
 6f0:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 6f4:	0a054c18 	beq	15375c <startup-0x1feac8a4>
 6f8:	2e02053f 	mcrcs	5, 0, r0, cr2, cr15, {1}
 6fc:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 700:	0a054b0c 	beq	153338 <startup-0x1feaccc8>
 704:	3006053c 	andcc	r0, r6, ip, lsr r5
 708:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 70c:	0b058208 	bleq	160f34 <startup-0x1fe9f0cc>
 710:	001f052f 	andseq	r0, pc, pc, lsr #10
 714:	03020402 	movweq	r0, #9218	; 0x2402
 718:	02053c7a 	andeq	r3, r5, #31232	; 0x7a00
 71c:	01040200 	mrseq	r0, R12_usr
 720:	0309053c 	movweq	r0, #38204	; 0x953c
 724:	01053c09 	tsteq	r5, r9, lsl #24
 728:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
 72c:	7fb90339 	svcvc	0x00b90339
 730:	6708054a 	strvs	r0, [r8, -sl, asr #10]
 734:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 738:	054c2905 	strbeq	r2, [ip, #-2309]	; 0xfffff6fb
 73c:	18055c0e 	stmdane	r5, {r1, r2, r3, sl, fp, ip, lr}
 740:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
 744:	052f0e05 	streq	r0, [pc, #-3589]!	; fffff947 <ball+0xdfffc82f>
 748:	06052e18 			; <UNDEFINED> instruction: 0x06052e18
 74c:	3004052e 	andcc	r0, r4, lr, lsr #10
 750:	3d3d0b05 	fldmdbxcc	sp!, {d0-d1}	;@ Deprecated
 754:	053d1605 	ldreq	r1, [sp, #-1541]!	; 0xfffff9fb
 758:	054b6703 	strbeq	r6, [fp, #-1795]	; 0xfffff8fd
 75c:	18057613 	stmdane	r5, {r0, r1, r4, r9, sl, ip, sp, lr}
 760:	2010052e 	andscs	r0, r0, lr, lsr #10
 764:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 768:	053d2f0b 	ldreq	r2, [sp, #-3851]!	; 0xfffff0f5
 76c:	03053d15 	movweq	r3, #23829	; 0x5d15
 770:	09054b67 	stmdbeq	r5, {r0, r1, r2, r5, r6, r8, r9, fp, lr}
 774:	3d0d0576 	cfstr32cc	mvfx0, [sp, #-472]	; 0xfffffe28
 778:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 77c:	0b052009 	bleq	1487a8 <startup-0x1feb7858>
 780:	4c17052f 	cfldr32mi	mvfx0, [r7], {47}	; 0x2f
 784:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 788:	09052014 	stmdbeq	r5, {r2, r4, sp}
 78c:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 790:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 794:	13052009 	movwne	r2, #20489	; 0x5009
 798:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 79c:	05201005 	streq	r1, [r0, #-5]!
 7a0:	3d3e2e0b 	ldccc	14, cr2, [lr, #-44]!	; 0xffffffd4
 7a4:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 7a8:	3f054b01 	svccc	0x00054b01
 7ac:	680e0584 	stmdavs	lr, {r2, r7, r8, sl}
 7b0:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 7b4:	15052e20 	strne	r2, [r5, #-3616]	; 0xfffff1e0
 7b8:	202d0520 	eorcs	r0, sp, r0, lsr #10
 7bc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 7c0:	04020009 	streq	r0, [r2], #-9
 7c4:	14052f01 	strne	r2, [r5], #-3841	; 0xfffff0ff
 7c8:	01040200 	mrseq	r0, R12_usr
 7cc:	001e052e 	andseq	r0, lr, lr, lsr #10
 7d0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 7d4:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
 7d8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 7dc:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 7e0:	34052001 	strcc	r2, [r5], #-1
 7e4:	01040200 	mrseq	r0, R12_usr
 7e8:	300b051f 	andcc	r0, fp, pc, lsl r5
 7ec:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 7f0:	12052e1d 	andne	r2, r5, #464	; 0x1d0
 7f4:	1f2d0520 	svcne	0x002d0520
 7f8:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 7fc:	21052e1c 	tstcs	r5, ip, lsl lr
 800:	2019052e 	andscs	r0, r9, lr, lsr #10
 804:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
 808:	0e053004 	cdpeq	0, 0, cr3, cr5, cr4, {0}
 80c:	3009054b 	andcc	r0, r9, fp, asr #10
 810:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
 814:	0e054c2a 	cdpeq	12, 0, cr4, cr5, cr10, {1}
 818:	2e18055d 	mrccs	5, 0, r0, cr8, cr13, {2}
 81c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 820:	04053005 	streq	r3, [r5], #-5
 824:	21070574 	tstcs	r7, r4, ror r5
 828:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 82c:	0f052f15 	svceq	0x00052f15
 830:	200d052e 	andcs	r0, sp, lr, lsr #10
 834:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff937 <ball+0xdfffc81f>
 838:	19054c14 	stmdbne	r5, {r2, r4, sl, fp, lr}
 83c:	200d052e 	andcs	r0, sp, lr, lsr #10
 840:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff943 <ball+0xdfffc82b>
 844:	09053e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, ip, sp}
 848:	3d0d055b 	cfstr32cc	mvfx0, [sp, #-364]	; 0xfffffe94
 84c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 850:	0b052009 	bleq	14887c <startup-0x1feb7784>
 854:	4c17052f 	cfldr32mi	mvfx0, [r7], {47}	; 0x2f
 858:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
 85c:	09052014 	stmdbeq	r5, {r2, r4, sp}
 860:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
 864:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 868:	13052009 	movwne	r2, #20489	; 0x5009
 86c:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 870:	05201005 	streq	r1, [r0, #-5]!
 874:	053e2e0b 	ldreq	r2, [lr, #-3595]!	; 0xfffff1f5
 878:	01053e02 	tsteq	r5, r2, lsl #28
 87c:	0505044b 	streq	r0, [r5, #-1099]	; 0xfffffbb5
 880:	4a4e0329 	bmi	138152c <startup-0x1ec7ead4>
 884:	05671105 	strbeq	r1, [r7, #-261]!	; 0xfffffefb
 888:	2b05bb01 	blcs	16f494 <startup-0x1fe90b6c>
 88c:	67070568 	strvs	r0, [r7, -r8, ror #10]
 890:	91670f05 	cmnls	r7, r5, lsl #30
 894:	05830105 	streq	r0, [r3, #261]	; 0x105
 898:	0205762c 	andeq	r7, r5, #44, 12	; 0x2c00000
 89c:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 8a0:	2a055901 	bcs	156cac <startup-0x1fea9354>
 8a4:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 8a8:	01053d3d 	tsteq	r5, sp, lsr sp
 8ac:	4c330559 	cfldr32mi	mvfx0, [r3], #-356	; 0xfffffe9c
 8b0:	3d680205 	sfmcc	f0, 2, [r8, #-20]!	; 0xffffffec
 8b4:	05201005 	streq	r1, [r0, #-5]!
 8b8:	053d3e02 	ldreq	r3, [sp, #-3586]!	; 0xfffff1fe
 8bc:	26052f01 	strcs	r2, [r5], -r1, lsl #30
 8c0:	3e020568 	cfsh32cc	mvfx0, mvfx2, #56
 8c4:	07052f3d 	smladxeq	r5, sp, pc, r2	; <UNPREDICTABLE>
 8c8:	2005052f 	andcs	r0, r5, pc, lsr #10
 8cc:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 8d0:	01053d09 	tsteq	r5, r9, lsl #26
 8d4:	7620052f 	strtvc	r0, [r0], -pc, lsr #10
 8d8:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 8dc:	0205200e 	andeq	r2, r5, #14
 8e0:	05053d30 	streq	r3, [r5, #-3376]	; 0xfffff2d0
 8e4:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
 8e8:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 8ec:	01052f09 	tsteq	r5, r9, lsl #30
 8f0:	bc22052f 	cfstr32lt	mvfx0, [r2], #-188	; 0xffffff44
 8f4:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 8f8:	0205200e 	andeq	r2, r5, #14
 8fc:	07053d30 	smladxeq	r5, r0, sp, r3
 900:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 904:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 908:	01052f09 	tsteq	r5, r9, lsl #30
 90c:	a02a052f 	eorge	r0, sl, pc, lsr #10
 910:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 914:	04020009 	streq	r0, [r2], #-9
 918:	1d052001 	stcne	0, cr2, [r5, #-4]
 91c:	01040200 	mrseq	r0, R12_usr
 920:	0007053c 	andeq	r0, r7, ip, lsr r5
 924:	3c010402 	cfstrscc	mvf0, [r1], {2}
 928:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 91c <startup-0x1ffff6e4>
 92c:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
 930:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
 934:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
 938:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 93c:	20053d01 	andcs	r3, r5, r1, lsl #26
 940:	5902053e 	stmdbpl	r2, {r1, r2, r3, r4, r5, r8, sl}
 944:	3d1b053d 	cfldr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
 948:	052e1005 	streq	r1, [lr, #-5]!
 94c:	0a054b04 	beq	153564 <startup-0x1feaca9c>
 950:	5a02053d 	bpl	81e4c <startup-0x1ff7e1b4>
 954:	059f0105 	ldreq	r0, [pc, #261]	; a61 <startup-0x1ffff59f>
 958:	07054c27 	streq	r4, [r5, -r7, lsr #24]
 95c:	00080567 	andeq	r0, r8, r7, ror #10
 960:	20010402 	andcs	r0, r1, r2, lsl #8
 964:	02001c05 	andeq	r1, r0, #1280	; 0x500
 968:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 96c:	04020007 	streq	r0, [r2], #-7
 970:	02053c01 	andeq	r3, r5, #256	; 0x100
 974:	05593d21 	ldrbeq	r3, [r9, #-3361]	; 0xfffff2df
 978:	22053d01 	andcs	r3, r5, #1, 26	; 0x40
 97c:	3e07054c 	cfsh32cc	mvfx0, mvfx7, #44
 980:	68020591 	stmdavs	r2, {r0, r4, r7, r8, sl}
 984:	4b04052f 	blmi	101e48 <startup-0x1fefe1b8>
 988:	052f0705 	streq	r0, [pc, #-1797]!	; 28b <startup-0x1ffffd75>
 98c:	03052116 	movweq	r2, #20758	; 0x5116
 990:	4908053c 	stmdbmi	r8, {r2, r3, r4, r5, r8, sl}
 994:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 998:	03053102 	movweq	r3, #20738	; 0x5102
 99c:	2f07054b 	svccs	0x0007054b
 9a0:	05211605 	streq	r1, [r1, #-1541]!	; 0xfffff9fb
 9a4:	08053c03 	stmdaeq	r5, {r0, r1, sl, fp, ip, sp}
 9a8:	2e070549 	cfsh32cs	mvfx0, mvfx7, #41
 9ac:	05310905 	ldreq	r0, [r1, #-2309]!	; 0xfffff6fb
 9b0:	06042101 	streq	r2, [r4], -r1, lsl #2
 9b4:	93031405 	movwls	r1, #13317	; 0x3405
 9b8:	0205827f 	andeq	r8, r5, #-268435449	; 0xf0000007
 9bc:	200e0535 	andcs	r0, lr, r5, lsr r5
 9c0:	052f0205 	streq	r0, [pc, #-517]!	; 7c3 <startup-0x1ffff83d>
 9c4:	02052010 	andeq	r2, r5, #16
 9c8:	2010052f 	andscs	r0, r0, pc, lsr #10
 9cc:	052f0205 	streq	r0, [pc, #-517]!	; 7cf <startup-0x1ffff831>
 9d0:	01052011 	tsteq	r5, r1, lsl r0
 9d4:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
 9d8:	05200828 	streq	r0, [r0, #-2088]!	; 0xfffff7d8
 9dc:	05754002 	ldrbeq	r4, [r5, #-2]!
 9e0:	75306c03 	ldrvc	r6, [r0, #-3075]!	; 0xfffff3fd
 9e4:	17052f2f 	strne	r2, [r5, -pc, lsr #30]
 9e8:	3c15053e 	cfldr32cc	mvfx0, [r5], {62}	; 0x3e
 9ec:	05211605 	streq	r1, [r1, #-1541]!	; 0xfffff9fb
 9f0:	05053c14 	streq	r3, [r5, #-3092]	; 0xfffff3ec
 9f4:	00210522 	eoreq	r0, r1, r2, lsr #10
 9f8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 9fc:	67400305 	strbvs	r0, [r0, -r5, lsl #6]
 a00:	3e17052f 	cfmul64cc	mvdx0, mvdx7, mvdx15
 a04:	053c1505 	ldreq	r1, [ip, #-1285]!	; 0xfffffafb
 a08:	14052116 	strne	r2, [r5], #-278	; 0xfffffeea
 a0c:	2205053c 	andcs	r0, r5, #60, 10	; 0xf000000
 a10:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 a14:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 a18:	3c6b0303 	stclcc	3, cr0, [fp], #-12
 a1c:	19030105 	stmdbne	r3, {r0, r2, r8}
 a20:	84110520 	ldrhi	r0, [r1], #-1312	; 0xfffffae0
 a24:	75420205 	strbvc	r0, [r2, #-517]	; 0xfffffdfb
 a28:	03057575 	movweq	r7, #21877	; 0x5575
 a2c:	3019056c 	andscc	r0, r9, ip, ror #10
 a30:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 a34:	2f752f04 	svccs	0x00752f04
 a38:	3e18052f 	cfmul64cc	mvdx0, mvdx8, mvdx15
 a3c:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 a40:	15052117 	strne	r2, [r5, #-279]	; 0xfffffee9
 a44:	2206053c 	andcs	r0, r6, #60, 10	; 0xf000000
 a48:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 a4c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 a50:	2f674004 	svccs	0x00674004
 a54:	053f1a05 	ldreq	r1, [pc, #-2565]!	; 57 <startup-0x1fffffa9>
 a58:	04052e05 	streq	r2, [r5], #-3589	; 0xfffff1fb
 a5c:	2f2f752f 	svccs	0x002f752f
 a60:	053e1805 	ldreq	r1, [lr, #-2053]!	; 0xfffff7fb
 a64:	17053c16 	smladne	r5, r6, ip, r3
 a68:	3c150521 	cfldr32cc	mvfx0, [r5], {33}	; 0x21
 a6c:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
 a70:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 a74:	04053c01 	streq	r3, [r5], #-3073	; 0xfffff3ff
 a78:	052f7540 	streq	r7, [pc, #-1344]!	; 540 <startup-0x1ffffac0>
 a7c:	15053f17 	strne	r3, [r5, #-3863]	; 0xfffff0e9
 a80:	2116053c 	tstcs	r6, ip, lsr r5
 a84:	053c1405 	ldreq	r1, [ip, #-1029]!	; 0xfffffbfb
 a88:	20052205 	andcs	r2, r5, r5, lsl #4
 a8c:	01040200 	mrseq	r0, R12_usr
 a90:	0303053c 	movweq	r0, #13628	; 0x353c
 a94:	01053c57 	tsteq	r5, r7, asr ip
 a98:	05202d03 	streq	r2, [r0, #-3331]!	; 0xfffff2fd
 a9c:	1e05f414 	cfmvdlrne	mvd5, pc
 aa0:	591d053d 	ldmdbpl	sp, {r0, r2, r3, r4, r5, r8, sl}
 aa4:	055b0a05 	ldrbeq	r0, [fp, #-2565]	; 0xfffff5fb
 aa8:	10052301 	andne	r2, r5, r1, lsl #6
 aac:	054a2f03 	strbeq	r2, [sl, #-3843]	; 0xfffff0fd
 ab0:	2f2f3e0a 	svccs	0x002f3e0a
 ab4:	2f300205 	svccs	0x00300205
 ab8:	3008052f 	andcc	r0, r8, pc, lsr #10
 abc:	4202053d 	andmi	r0, r2, #255852544	; 0xf400000
 ac0:	05320305 	ldreq	r0, [r2, #-773]!	; 0xfffffcfb
 ac4:	03053004 	movweq	r3, #20484	; 0x5004
 ac8:	4b09052e 	blmi	241f88 <startup-0x1fdbe078>
 acc:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 ad0:	03054b0a 	movweq	r4, #23306	; 0x5b0a
 ad4:	4c12052e 	cfldr32mi	mvfx0, [r2], {46}	; 0x2e
 ad8:	5a060559 	bpl	182044 <startup-0x1fe7dfbc>
 adc:	05751205 	ldrbeq	r1, [r5, #-517]!	; 0xfffffdfb
 ae0:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 ae4:	21120558 	tstcs	r2, r8, asr r5
 ae8:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 aec:	13054a04 	movwne	r4, #23044	; 0x5a04
 af0:	2e0d0521 	cfsh32cs	mvfx0, mvfx13, #17
 af4:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 af8:	13052303 	movwne	r2, #21251	; 0x5303
 afc:	2e0c0575 	cfrshl64cs	mvdx12, mvdx5, r0
 b00:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 b04:	0c052113 	stfeqs	f2, [r5], {19}
 b08:	4a04052e 	bmi	101fc8 <startup-0x1fefe038>
 b0c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
 b10:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
 b14:	2303054a 	movwcs	r0, #13642	; 0x354a
 b18:	3e0b052f 	cfsh32cc	mvfx0, mvfx11, #31
 b1c:	4c05054b 	cfstr32mi	mvfx0, [r5], {75}	; 0x4b
 b20:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 b24:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
 b28:	17054b04 	strne	r4, [r5, -r4, lsl #22]
 b2c:	3d18052f 	cfldr32cc	mvfx0, [r8, #-188]	; 0xffffff44
 b30:	60030a05 	andvs	r0, r3, r5, lsl #20
 b34:	000c023c 	andeq	r0, ip, ip, lsr r2
 b38:	06040101 	streq	r0, [r4], -r1, lsl #2
 b3c:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
 b40:	00000002 	andeq	r0, r0, r2
 b44:	01160320 	tsteq	r6, r0, lsr #6
 b48:	21130105 	tstcs	r3, r5, lsl #2
 b4c:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
 b50:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	6b007964 	blvs	1e59c <startup-0x1ffe1a64>
   8:	4c627965 			; <UNDEFINED> instruction: 0x4c627965
   c:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
  10:	5f65766f 	svcpl	0x0065766f
  14:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  18:	7000656c 	andvc	r6, r0, ip, ror #10
  1c:	0078736f 	rsbseq	r7, r8, pc, ror #6
  20:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  24:	6574006c 	ldrbvs	r0, [r4, #-108]!	; 0xffffff94
  28:	6e007478 	mcrvs	4, 0, r7, cr0, cr8, {3}
  2c:	7865546f 	stmdavc	r5!, {r0, r1, r2, r3, r5, r6, sl, ip, lr}^
  30:	72670074 	rsbvc	r0, r7, #116	; 0x74
  34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  38:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  3c:	5f657469 	svcpl	0x00657469
  40:	61746164 	cmnvs	r4, r4, ror #2
  44:	61726700 	cmnvs	r2, r0, lsl #14
  48:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  4c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
  50:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
  54:	00657a69 	rsbeq	r7, r5, r9, ror #20
  58:	6f654774 	svcvs	0x00654774
  5c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  60:	73610079 	cmnvc	r1, #121	; 0x79
  64:	5f696963 	svcpl	0x00696963
  68:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  6c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  70:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  74:	616c5000 	cmnvs	ip, r0
  78:	4c726579 	cfldr64mi	mvdx6, [r2], #-484	; 0xfffffe1c
  7c:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
  80:	5f736e69 	svcpl	0x00736e69
  84:	73746962 	cmnvc	r4, #1605632	; 0x188000
  88:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
  8c:	735f6f72 	cmpvc	pc, #456	; 0x1c8
  90:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
  94:	616c5000 	cmnvs	ip, r0
  98:	4c726579 	cfldr64mi	mvdx6, [r2], #-484	; 0xfffffe1c
  9c:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
  a0:	57736e69 	ldrbpl	r6, [r3, -r9, ror #28]!
  a4:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
  a8:	5f747865 	svcpl	0x00747865
  ac:	73746962 	cmnvc	r4, #1605632	; 0x188000
  b0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  b4:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  b8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  bc:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
  c0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
  c4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  c8:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  cc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  d0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  d4:	5f657469 	svcpl	0x00657469
  d8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  dc:	00646e61 	rsbeq	r6, r4, r1, ror #28
  e0:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  e4:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
  e8:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  ec:	00797274 	rsbseq	r7, r9, r4, ror r2
  f0:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  f4:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  f8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  fc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 100:	47500072 			; <UNDEFINED> instruction: 0x47500072
 104:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 108:	00595254 	subseq	r5, r9, r4, asr r2
 10c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 110:	72670065 	rsbvc	r0, r7, #101	; 0x65
 114:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 118:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 11c:	5f726165 	svcpl	0x00726165
 120:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 124:	73006e65 	movwvc	r6, #3685	; 0xe65
 128:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 12c:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
 130:	5f38746e 	svcpl	0x0038746e
 134:	6f620074 	svcvs	0x00620074
 138:	61656c6f 	cmnvs	r5, pc, ror #24
 13c:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
 140:	00747570 	rsbseq	r7, r4, r0, ror r5
 144:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 148:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
 14c:	5f746665 	svcpl	0x00746665
 150:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 154:	70007374 	andvc	r7, r0, r4, ror r3
 158:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 15c:	69725f65 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 160:	00746867 	rsbseq	r6, r4, r7, ror #16
 164:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 168:	656b0032 	strbvs	r0, [fp, #-50]!	; 0xffffffce
 16c:	616f6279 	smcvs	63017	; 0xf629
 170:	6f4c6472 	svcvs	0x004c6472
 174:	706e4977 	rsbvc	r4, lr, r7, ror r9
 178:	67007475 	smlsdxvs	r0, r5, r4, r7
 17c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 180:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 184:	00646165 	rsbeq	r6, r4, r5, ror #2
 188:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 18c:	74530054 	ldrbvc	r0, [r3], #-84	; 0xffffffac
 190:	6d747261 	lfmvs	f7, 2, [r4, #-388]!	; 0xfffffe7c
 194:	57756e65 	ldrbpl	r6, [r5, -r5, ror #28]!
 198:	54687469 	strbtpl	r7, [r8], #-1129	; 0xfffffb97
 19c:	5f747865 	svcpl	0x00747865
 1a0:	73746962 	cmnvc	r4, #1605632	; 0x188000
 1a4:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 1a8:	70006874 	andvc	r6, r0, r4, ror r8
 1ac:	0079736f 	rsbseq	r7, r9, pc, ror #6
 1b0:	7877656e 	ldmdavc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 1b4:	63736100 	cmnvs	r3, #0, 2
 1b8:	705f6969 	subsvc	r6, pc, r9, ror #18
 1bc:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 1c0:	6f637372 	svcvs	0x00637372
 1c4:	695f6572 	ldmdbvs	pc, {r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 1c8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1cc:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 1d0:	6e656d74 	mcrvs	13, 3, r6, cr5, cr4, {3}
 1d4:	69625f75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d8:	72007374 	andvc	r7, r0, #116, 6	; 0xd0000001
 1dc:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 1e0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 1e4:	6769486e 	strbvs	r4, [r9, -lr, ror #16]!
 1e8:	73610068 	cmnvc	r1, #104	; 0x68
 1ec:	5f696963 	svcpl	0x00696963
 1f0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1f4:	6f635f65 	svcvs	0x00635f65
 1f8:	6f72746e 	svcvs	0x0072746e
 1fc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 200:	67617000 	strbvs	r7, [r1, -r0]!
 204:	72670065 	rsbvc	r0, r7, #101	; 0x65
 208:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 20c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 210:	645f6461 	ldrbvs	r6, [pc], #-1121	; 218 <startup-0x1ffffde8>
 214:	00617461 	rsbeq	r7, r1, r1, ror #8
 218:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
 21c:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
 220:	0078657a 	rsbseq	r6, r8, sl, ror r5
 224:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 228:	73610079 	cmnvc	r1, #121	; 0x79
 22c:	5f696963 	svcpl	0x00696963
 230:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 234:	00646e61 	rsbeq	r6, r4, r1, ror #28
 238:	616c6564 	cmnvs	ip, r4, ror #10
 23c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 240:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 244:	616c6564 	cmnvs	ip, r4, ror #10
 248:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 24c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 250:	67695270 			; <UNDEFINED> instruction: 0x67695270
 254:	69577468 	ldmdbvs	r7, {r3, r5, r6, sl, ip, sp, lr}^
 258:	6170006e 	cmnvs	r0, lr, rrx
 25c:	656c6464 	strbvs	r6, [ip, #-1124]!	; 0xfffffb9c
 260:	66656c5f 			; <UNDEFINED> instruction: 0x66656c5f
 264:	69720074 	ldmdbvs	r2!, {r2, r4, r5, r6}^
 268:	50746867 	rsbspl	r6, r4, r7, ror #16
 26c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 270:	73610073 	cmnvc	r1, #115	; 0x73
 274:	5f696963 	svcpl	0x00696963
 278:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 27c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 280:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 284:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 288:	6f706d75 	svcvs	0x00706d75
 28c:	73746e69 	cmnvc	r4, #1680	; 0x690
 290:	736e7500 	cmnvc	lr, #0, 10
 294:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 298:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 29c:	47007261 	strmi	r7, [r0, -r1, ror #4]
 2a0:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 2a4:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
 2a8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 2ac:	31303220 	teqcc	r0, r0, lsr #4
 2b0:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
 2b4:	72282035 	eorvc	r2, r8, #53	; 0x35
 2b8:	61656c65 	cmnvs	r5, r5, ror #24
 2bc:	20296573 	eorcs	r6, r9, r3, ror r5
 2c0:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 2c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 2c8:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
 2cc:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 2d0:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 2d4:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 2d8:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 2dc:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
 2e0:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
 2e4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 2e8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 2ec:	6f6c666d 	svcvs	0x006c666d
 2f0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 2f4:	733d6962 	teqvc	sp, #1605632	; 0x188000
 2f8:	2074666f 	rsbscs	r6, r4, pc, ror #12
 2fc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 300:	613d6863 	teqvs	sp, r3, ror #16
 304:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 308:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 30c:	4f2d2067 	svcmi	0x002d2067
 310:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 314:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 318:	72003939 	andvc	r3, r0, #933888	; 0xe4000
 31c:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 320:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 324:	776f4c6e 	strbvc	r4, [pc, -lr, ror #24]!
 328:	654c7000 	strbvs	r7, [ip, #-0]
 32c:	69577466 	ldmdbvs	r7, {r1, r2, r5, r6, sl, ip, sp, lr}^
 330:	7865546e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, lr}^
 334:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
 338:	6f507466 	svcvs	0x00507466
 33c:	73746e69 	cmnvc	r4, #1680	; 0x690
 340:	61726700 	cmnvs	r2, r0, lsl #14
 344:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 348:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 34c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 350:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 354:	00726165 	rsbseq	r6, r2, r5, ror #2
 358:	61656c63 	cmnvs	r5, r3, ror #24
 35c:	61625f72 	smcvs	9714	; 0x25f2
 360:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 364:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 368:	6f507400 	svcvs	0x00507400
 36c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 370:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 374:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 378:	645f6461 	ldrbvs	r6, [pc], #-1121	; 380 <startup-0x1ffffc80>
 37c:	00617461 	rsbeq	r7, r1, r1, ror #8
 380:	5f746573 	svcpl	0x00746573
 384:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 388:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 38c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 390:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
 394:	6174735f 	cmnvs	r4, pc, asr r3
 398:	68006574 	stmdavs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 39c:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 3a0:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 3a4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 3a8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 3ac:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 3b0:	5f776172 	svcpl	0x00776172
 3b4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3b8:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 3bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3c0:	3030355f 	eorscc	r3, r0, pc, asr r5
 3c4:	6300736e 	movwvs	r7, #878	; 0x36e
 3c8:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 3cc:	6c50006e 	mrrcvs	0, 6, r0, r0, cr14	; <UNPREDICTABLE>
 3d0:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 3d4:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 3d8:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
 3dc:	69625f73 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 3e0:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
 3e4:	0068746f 	rsbeq	r7, r8, pc, ror #8
 3e8:	5977656e 	ldmdbpl	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 3ec:	63736100 	cmnvs	r3, #0, 2
 3f0:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 3f4:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 3f8:	5f700079 	svcpl	0x00700079
 3fc:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 400:	656b0074 	strbvs	r0, [fp, #-116]!	; 0xffffff8c
 404:	69007379 	stmdbvs	r0, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
 408:	5f74696e 	svcpl	0x0074696e
 40c:	00707061 	rsbseq	r7, r0, r1, rrx
 410:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 414:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 418:	61736f5c 	cmnvs	r3, ip, asr pc
 41c:	445c6e6e 	ldrbmi	r6, [ip], #-3694	; 0xfffff192
 420:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 424:	73746e65 	cmnvc	r4, #1616	; 0x650
 428:	7469475c 	strbtvc	r4, [r9], #-1884	; 0xfffff8a4
 42c:	6a6f7250 	bvs	1bdcd74 <startup-0x1e42328c>
 430:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 434:	6863535c 	stmdavs	r3!, {r2, r3, r4, r6, r8, r9, ip, lr}^
 438:	506c6f6f 	rsbpl	r6, ip, pc, ror #30
 43c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 440:	5c737463 	cfldrdpl	mvd7, [r3], #-396	; 0xfffffe74
 444:	30544144 	subscc	r4, r4, r4, asr #2
 448:	4c5c3731 	mrrcmi	7, 3, r3, ip, cr1
 44c:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 450:	495f4557 	ldmdbmi	pc, {r0, r1, r2, r4, r6, r8, sl, lr}^	; <UNPREDICTABLE>
 454:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
 458:	5f525044 	svcpl	0x00525044
 45c:	50525452 	subspl	r5, r2, r2, asr r4
 460:	6f505c41 	svcvs	0x00505c41
 464:	6700676e 	strvs	r6, [r0, -lr, ror #14]
 468:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 46c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 470:	5f6c7274 	svcpl	0x006c7274
 474:	5f746962 	svcpl	0x00746962
 478:	00746573 	rsbseq	r6, r4, r3, ror r5
 47c:	6a624f74 	bvs	1894254 <startup-0x1e76bdac>
 480:	6c5f7000 	mravs	r7, pc, acc0
 484:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 488:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 48c:	5679654b 	ldrbtpl	r6, [r9], -fp, asr #10
 490:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 494:	616c5000 	cmnvs	ip, r0
 498:	52726579 	rsbspl	r6, r2, #507510784	; 0x1e400000
 49c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 4a0:	736e6957 	cmnvc	lr, #1425408	; 0x15c000
 4a4:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 4a8:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 4ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 4b0:	656b0073 	strbvs	r0, [fp, #-115]!	; 0xffffff8d
 4b4:	69486279 	stmdbvs	r8, {r0, r3, r4, r5, r6, r9, sp, lr}^
 4b8:	61006867 	tstvs	r0, r7, ror #16
 4bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4c0:	6165725f 	cmnvs	r5, pc, asr r2
 4c4:	6f635f64 	svcvs	0x00635f64
 4c8:	6f72746e 	svcvs	0x0072746e
 4cc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4d0:	72646100 	rsbvc	r6, r4, #0, 2
 4d4:	00737365 	rsbseq	r7, r3, r5, ror #6
 4d8:	7977656e 	ldmdbvc	r7!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 4dc:	616f6c00 	cmnvs	pc, r0, lsl #24
 4e0:	70735f64 	rsbsvc	r5, r3, r4, ror #30
 4e4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4e8:	63736100 	cmnvs	r3, #0, 2
 4ec:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 4f4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 4f8:	63610061 	cmnvs	r1, #97	; 0x61
 4fc:	61766974 	cmnvs	r6, r4, ror r9
 500:	6f526574 	svcvs	0x00526574
 504:	776f4c77 			; <UNDEFINED> instruction: 0x776f4c77
 508:	61726400 	cmnvs	r2, r0, lsl #8
 50c:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 510:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 514:	00646565 	rsbeq	r6, r4, r5, ror #10
 518:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 51c:	725f7265 	subsvc	r7, pc, #1342177286	; 0x50000006
 520:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 524:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 528:	0073746e 	rsbseq	r7, r3, lr, ror #8
 52c:	6c6c6f63 	stclvs	15, cr6, [ip], #-396	; 0xfffffe74
 530:	6f697369 	svcvs	0x00697369
 534:	69775f6e 	ldmdbvs	r7!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 538:	625f6874 	subsvs	r6, pc, #116, 16	; 0x740000
 53c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 540:	616c6564 	cmnvs	ip, r4, ror #10
 544:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 548:	006f726b 	rsbeq	r7, pc, fp, ror #4
 54c:	5f725f70 	svcpl	0x00725f70
 550:	0079656b 	rsbseq	r6, r9, fp, ror #10
 554:	61656c63 	cmnvs	r5, r3, ror #24
 558:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 55c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 560:	6c616200 	sfmvs	f6, 2, [r1], #-0
 564:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 568:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 56c:	70007972 	andvc	r7, r0, r2, ror r9
 570:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 574:	6e695774 	mcrvs	7, 3, r5, cr9, cr4, {3}
 578:	74786554 	ldrbtvc	r6, [r8], #-1364	; 0xfffffaac
 57c:	63736100 	cmnvs	r3, #0, 2
 580:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 584:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 588:	6168635f 	cmnvs	r8, pc, asr r3
 58c:	79620072 	stmdbvc	r2!, {r1, r4, r5, r6}^
 590:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
 594:	006b7361 	rsbeq	r7, fp, r1, ror #6
 598:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 59c:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 5a0:	6574006c 	ldrbvs	r0, [r4, #-108]!	; 0xffffff94
 5a4:	00317473 	eorseq	r7, r1, r3, ror r4
 5a8:	656c5f70 	strbvs	r5, [ip, #-3952]!	; 0xfffff090
 5ac:	67007466 	strvs	r7, [r0, -r6, ror #8]
 5b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5b4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 5b8:	5f746961 	svcpl	0x00746961
 5bc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 5c0:	656b0079 	strbvs	r0, [fp, #-121]!	; 0xffffff87
 5c4:	616f6279 	smcvs	63017	; 0xf629
 5c8:	69486472 	stmdbvs	r8, {r1, r4, r5, r6, sl, sp, lr}^
 5cc:	6e496867 	cdpvs	8, 4, cr6, cr9, cr7, {3}
 5d0:	00747570 	rsbseq	r7, r4, r0, ror r5
 5d4:	4a424f50 	bmi	109431c <startup-0x1ef6bce4>
 5d8:	00544345 	subseq	r4, r4, r5, asr #6
 5dc:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 5e0:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
 5e4:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 5e8:	64007365 	strvs	r7, [r0], #-869	; 0xfffffc9b
 5ec:	5f776172 	svcpl	0x00776172
 5f0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 5f4:	73006574 	movwvc	r6, #1396	; 0x574
 5f8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 5fc:	6e007075 	mcrvs	0, 0, r7, cr0, cr5, {3}
 600:	0058746f 	subseq	r7, r8, pc, ror #8
 604:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 608:	4c700078 	ldclmi	0, cr0, [r0], #-480	; 0xfffffe20
 60c:	57746665 	ldrbpl	r6, [r4, -r5, ror #12]!
 610:	43006e69 	movwmi	r6, #3689	; 0xe69
 614:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 618:	2f737265 	svccs	0x00737265
 61c:	6e61736f 	cdpvs	3, 6, cr7, cr1, cr15, {3}
 620:	6f442f6e 	svcvs	0x00442f6e
 624:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 628:	2f73746e 	svccs	0x0073746e
 62c:	50746947 	rsbspl	r6, r4, r7, asr #18
 630:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 634:	2f737463 	svccs	0x00737463
 638:	6f686353 	svcvs	0x00686353
 63c:	72506c6f 	subsvc	r6, r0, #28416	; 0x6f00
 640:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 644:	442f7374 	strtmi	r7, [pc], #-884	; 64c <startup-0x1ffff9b4>
 648:	31305441 	teqcc	r0, r1, asr #8
 64c:	614c2f37 	cmpvs	ip, r7, lsr pc
 650:	57356262 	ldrpl	r6, [r5, -r2, ror #4]!
 654:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
 658:	44475f45 	strbmi	r5, [r7], #-3909	; 0xfffff0bb
 65c:	525f5250 	subspl	r5, pc, #80, 4
 660:	41505254 	cmpmi	r0, r4, asr r2
 664:	6e6f502f 	cdpvs	0, 6, cr5, cr15, cr15, {1}
 668:	6f502f67 	svcvs	0x00502f67
 66c:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
 670:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 674:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 678:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 67c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 680:	61726700 	cmnvs	r2, r0, lsl #14
 684:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 688:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 68c:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
 690:	0065766f 	rsbeq	r7, r5, pc, ror #12
 694:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 698:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 69c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 6a0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
 6a4:	73610073 	cmnvc	r1, #115	; 0x73
 6a8:	5f696963 	svcpl	0x00696963
 6ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 6b0:	63736100 	cmnvs	r3, #0, 2
 6b4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 6b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 6bc:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000058 	andcs	r0, r0, r8, asr r0
  38:	00000042 	andeq	r0, r0, r2, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	2000009a 	mulcs	r0, sl, r0
  58:	00000046 	andeq	r0, r0, r6, asr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000e0 	andcs	r0, r0, r0, ror #1
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0000070d 	andeq	r0, r0, sp, lsl #14
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	200000f2 	strdcs	r0, [r0], -r2
  94:	00000046 	andeq	r0, r0, r6, asr #32
  98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  9c:	41018e02 	tstmi	r1, r2, lsl #28
  a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  a4:	00000007 	andeq	r0, r0, r7
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	20000138 	andcs	r0, r0, r8, lsr r1
  b4:	0000003c 	andeq	r0, r0, ip, lsr r0
  b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  bc:	41018e02 	tstmi	r1, r2, lsl #28
  c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  c4:	00000007 	andeq	r0, r0, r7
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	20000174 	andcs	r0, r0, r4, ror r1
  d4:	00000062 	andeq	r0, r0, r2, rrx
  d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  dc:	41018e02 	tstmi	r1, r2, lsl #28
  e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  e4:	00000007 	andeq	r0, r0, r7
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	200001d6 	ldrdcs	r0, [r0], -r6
  f4:	00000076 	andeq	r0, r0, r6, ror r0
  f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  fc:	41018e02 	tstmi	r1, r2, lsl #28
 100:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 104:	00000007 	andeq	r0, r0, r7
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	2000024c 	andcs	r0, r0, ip, asr #4
 114:	00000090 	muleq	r0, r0, r0
 118:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 11c:	41018e02 	tstmi	r1, r2, lsl #28
 120:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 124:	00000007 	andeq	r0, r0, r7
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	200002dc 	ldrdcs	r0, [r0], -ip
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 144:	00000007 	andeq	r0, r0, r7
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	2000035c 	andcs	r0, r0, ip, asr r3
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 15c:	41018e02 	tstmi	r1, r2, lsl #28
 160:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 164:	00000007 	andeq	r0, r0, r7
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	2000039c 	mulcs	r0, ip, r3
 174:	00000046 	andeq	r0, r0, r6, asr #32
 178:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 17c:	41018e02 	tstmi	r1, r2, lsl #28
 180:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 184:	00000007 	andeq	r0, r0, r7
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200003e2 	andcs	r0, r0, r2, ror #7
 194:	0000002a 	andeq	r0, r0, sl, lsr #32
 198:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 19c:	41018e02 	tstmi	r1, r2, lsl #28
 1a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1a4:	00000007 	andeq	r0, r0, r7
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	2000040c 	andcs	r0, r0, ip, lsl #8
 1b4:	00000056 	andeq	r0, r0, r6, asr r0
 1b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1bc:	41018e02 	tstmi	r1, r2, lsl #28
 1c0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	20000462 	andcs	r0, r0, r2, ror #8
 1d0:	00000068 	andeq	r0, r0, r8, rrx
 1d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d8:	41018e02 	tstmi	r1, r2, lsl #28
 1dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1e0:	00000007 	andeq	r0, r0, r7
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	200004ca 	andcs	r0, r0, sl, asr #9
 1f0:	000000a2 	andeq	r0, r0, r2, lsr #1
 1f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1f8:	41018e02 	tstmi	r1, r2, lsl #28
 1fc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 200:	00000007 	andeq	r0, r0, r7
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000000 	andeq	r0, r0, r0
 20c:	2000056c 	andcs	r0, r0, ip, ror #10
 210:	000000cc 	andeq	r0, r0, ip, asr #1
 214:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 218:	41018e02 	tstmi	r1, r2, lsl #28
 21c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 220:	00000007 	andeq	r0, r0, r7
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	20000638 	andcs	r0, r0, r8, lsr r6
 230:	00000062 	andeq	r0, r0, r2, rrx
 234:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 238:	41018e02 	tstmi	r1, r2, lsl #28
 23c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 240:	00000007 	andeq	r0, r0, r7
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	2000069a 	mulcs	r0, sl, r6
 250:	00000062 	andeq	r0, r0, r2, rrx
 254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 258:	41018e02 	tstmi	r1, r2, lsl #28
 25c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 260:	00000007 	andeq	r0, r0, r7
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000000 	andeq	r0, r0, r0
 26c:	200006fc 	strdcs	r0, [r0], -ip
 270:	00000034 	andeq	r0, r0, r4, lsr r0
 274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 278:	41018e02 	tstmi	r1, r2, lsl #28
 27c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 280:	00000007 	andeq	r0, r0, r7
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	20000730 	andcs	r0, r0, r0, lsr r7
 290:	0000002c 	andeq	r0, r0, ip, lsr #32
 294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 298:	41018e02 	tstmi	r1, r2, lsl #28
 29c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a0:	00000007 	andeq	r0, r0, r7
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	2000075c 	andcs	r0, r0, ip, asr r7
 2b0:	000000c4 	andeq	r0, r0, r4, asr #1
 2b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b8:	41018e02 	tstmi	r1, r2, lsl #28
 2bc:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 2c0:	00000007 	andeq	r0, r0, r7
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	20000820 	andcs	r0, r0, r0, lsr #16
 2d0:	00000064 	andeq	r0, r0, r4, rrx
 2d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d8:	41018e02 	tstmi	r1, r2, lsl #28
 2dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e0:	00000007 	andeq	r0, r0, r7
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	20000884 	andcs	r0, r0, r4, lsl #17
 2f0:	00000064 	andeq	r0, r0, r4, rrx
 2f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f8:	41018e02 	tstmi	r1, r2, lsl #28
 2fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 300:	00000007 	andeq	r0, r0, r7
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000000 	andeq	r0, r0, r0
 30c:	200008e8 	andcs	r0, r0, r8, ror #17
 310:	00000054 	andeq	r0, r0, r4, asr r0
 314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 318:	41018e02 	tstmi	r1, r2, lsl #28
 31c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 320:	00000007 	andeq	r0, r0, r7
 324:	0000001c 	andeq	r0, r0, ip, lsl r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	2000093c 	andcs	r0, r0, ip, lsr r9
 330:	00000054 	andeq	r0, r0, r4, asr r0
 334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 338:	41018e02 	tstmi	r1, r2, lsl #28
 33c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 340:	00000007 	andeq	r0, r0, r7
 344:	00000020 	andeq	r0, r0, r0, lsr #32
 348:	00000000 	andeq	r0, r0, r0
 34c:	20000990 	mulcs	r0, r0, r9
 350:	00000034 	andeq	r0, r0, r4, lsr r0
 354:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 358:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 35c:	41018e02 	tstmi	r1, r2, lsl #28
 360:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 364:	00000007 	andeq	r0, r0, r7
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	00000000 	andeq	r0, r0, r0
 370:	200009c4 	andcs	r0, r0, r4, asr #19
 374:	00000056 	andeq	r0, r0, r6, asr r0
 378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 37c:	41018e02 	tstmi	r1, r2, lsl #28
 380:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 384:	00000007 	andeq	r0, r0, r7
 388:	0000001c 	andeq	r0, r0, ip, lsl r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	20000a1a 	andcs	r0, r0, sl, lsl sl
 394:	00000056 	andeq	r0, r0, r6, asr r0
 398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 39c:	41018e02 	tstmi	r1, r2, lsl #28
 3a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3a4:	00000007 	andeq	r0, r0, r7
 3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ac:	00000000 	andeq	r0, r0, r0
 3b0:	20000a70 	andcs	r0, r0, r0, ror sl
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3bc:	41018e02 	tstmi	r1, r2, lsl #28
 3c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3c4:	00000007 	andeq	r0, r0, r7
 3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3cc:	00000000 	andeq	r0, r0, r0
 3d0:	20000a90 	mulcs	r0, r0, sl
 3d4:	000000f8 	strdeq	r0, [r0], -r8
 3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3dc:	41018e02 	tstmi	r1, r2, lsl #28
 3e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3e4:	00000007 	andeq	r0, r0, r7
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	00000000 	andeq	r0, r0, r0
 3f0:	20000b88 	andcs	r0, r0, r8, lsl #23
 3f4:	0000006e 	andeq	r0, r0, lr, rrx
 3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3fc:	41018e02 	tstmi	r1, r2, lsl #28
 400:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 404:	00000007 	andeq	r0, r0, r7
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	20000bf6 	strdcs	r0, [r0], -r6
 414:	000000b2 	strheq	r0, [r0], -r2
 418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 41c:	41018e02 	tstmi	r1, r2, lsl #28
 420:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 424:	00000007 	andeq	r0, r0, r7
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	20000ca8 	andcs	r0, r0, r8, lsr #25
 434:	00000030 	andeq	r0, r0, r0, lsr r0
 438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 43c:	41018e02 	tstmi	r1, r2, lsl #28
 440:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 444:	00000007 	andeq	r0, r0, r7
 448:	0000001c 	andeq	r0, r0, ip, lsl r0
 44c:	00000000 	andeq	r0, r0, r0
 450:	20000cd8 	ldrdcs	r0, [r0], -r8
 454:	00000048 	andeq	r0, r0, r8, asr #32
 458:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 45c:	41018e02 	tstmi	r1, r2, lsl #28
 460:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 464:	00000007 	andeq	r0, r0, r7
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000000 	andeq	r0, r0, r0
 470:	20000d20 	andcs	r0, r0, r0, lsr #26
 474:	0000002a 	andeq	r0, r0, sl, lsr #32
 478:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 47c:	41018e02 	tstmi	r1, r2, lsl #28
 480:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 484:	00000007 	andeq	r0, r0, r7
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000000 	andeq	r0, r0, r0
 490:	20000d4a 	andcs	r0, r0, sl, asr #26
 494:	0000002a 	andeq	r0, r0, sl, lsr #32
 498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 49c:	41018e02 	tstmi	r1, r2, lsl #28
 4a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4a4:	00000007 	andeq	r0, r0, r7
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	20000d74 	andcs	r0, r0, r4, ror sp
 4b4:	00000030 	andeq	r0, r0, r0, lsr r0
 4b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4bc:	41018e02 	tstmi	r1, r2, lsl #28
 4c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4c4:	00000007 	andeq	r0, r0, r7
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	00000000 	andeq	r0, r0, r0
 4d0:	20000da4 	andcs	r0, r0, r4, lsr #27
 4d4:	00000034 	andeq	r0, r0, r4, lsr r0
 4d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4dc:	41018e02 	tstmi	r1, r2, lsl #28
 4e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 4e4:	00000007 	andeq	r0, r0, r7
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	20000dd8 	ldrdcs	r0, [r0], -r8
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 504:	00000007 	andeq	r0, r0, r7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000000 	andeq	r0, r0, r0
 510:	20000e18 	andcs	r0, r0, r8, lsl lr
 514:	00000040 	andeq	r0, r0, r0, asr #32
 518:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 51c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 520:	180e4101 	stmdane	lr, {r0, r8, lr}
 524:	00070d41 	andeq	r0, r7, r1, asr #26
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	20000e58 	andcs	r0, r0, r8, asr lr
 534:	0000003c 	andeq	r0, r0, ip, lsr r0
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	00000018 	andeq	r0, r0, r8, lsl r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	20000e94 	mulcs	r0, r4, lr
 554:	0000002e 	andeq	r0, r0, lr, lsr #32
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0000070d 	andeq	r0, r0, sp, lsl #14
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	00000000 	andeq	r0, r0, r0
 56c:	20000ec2 	andcs	r0, r0, r2, asr #29
 570:	0000004e 	andeq	r0, r0, lr, asr #32
 574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 578:	41018e02 	tstmi	r1, r2, lsl #28
 57c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 580:	00000007 	andeq	r0, r0, r7
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	20000f10 	andcs	r0, r0, r0, lsl pc
 590:	0000003a 	andeq	r0, r0, sl, lsr r0
 594:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 598:	41018e02 	tstmi	r1, r2, lsl #28
 59c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5a0:	00000007 	andeq	r0, r0, r7
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	00000000 	andeq	r0, r0, r0
 5ac:	20000f4a 	andcs	r0, r0, sl, asr #30
 5b0:	00000082 	andeq	r0, r0, r2, lsl #1
 5b4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5b8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5bc:	41018e02 	tstmi	r1, r2, lsl #28
 5c0:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 5c4:	00000007 	andeq	r0, r0, r7
 5c8:	0000000c 	andeq	r0, r0, ip
 5cc:	00000000 	andeq	r0, r0, r0
 5d0:	20000000 	andcs	r0, r0, r0
 5d4:	0000000c 	andeq	r0, r0, ip
 5d8:	00000018 	andeq	r0, r0, r8, lsl r0
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	20000fcc 	andcs	r0, r0, ip, asr #31
 5e4:	00000040 	andeq	r0, r0, r0, asr #32
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	2000100c 	andcs	r1, r0, ip
 600:	000000a0 	andeq	r0, r0, r0, lsr #1
 604:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 608:	41018e02 	tstmi	r1, r2, lsl #28
 60c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 610:	00000007 	andeq	r0, r0, r7
 614:	0000001c 	andeq	r0, r0, ip, lsl r0
 618:	00000000 	andeq	r0, r0, r0
 61c:	200010ac 	andcs	r1, r0, ip, lsr #1
 620:	0000012c 	andeq	r0, r0, ip, lsr #2
 624:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 628:	41018e02 	tstmi	r1, r2, lsl #28
 62c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 630:	00000007 	andeq	r0, r0, r7
 634:	0000001c 	andeq	r0, r0, ip, lsl r0
 638:	00000000 	andeq	r0, r0, r0
 63c:	200011d8 	ldrdcs	r1, [r0], -r8
 640:	00000024 	andeq	r0, r0, r4, lsr #32
 644:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 648:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 64c:	180e4101 	stmdane	lr, {r0, r8, lr}
 650:	00070d41 	andeq	r0, r7, r1, asr #26
 654:	0000001c 	andeq	r0, r0, ip, lsl r0
 658:	00000000 	andeq	r0, r0, r0
 65c:	200011fc 	strdcs	r1, [r0], -ip
 660:	00000130 	andeq	r0, r0, r0, lsr r1
 664:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 668:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 66c:	200e4101 	andcs	r4, lr, r1, lsl #2
 670:	00070d41 	andeq	r0, r7, r1, asr #26
 674:	0000000c 	andeq	r0, r0, ip
 678:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 67c:	7c010001 	stcvc	0, cr0, [r1], {1}
 680:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 684:	0000000c 	andeq	r0, r0, ip
 688:	00000674 	andeq	r0, r0, r4, ror r6
 68c:	2000132d 	andcs	r1, r0, sp, lsr #6
 690:	0000010a 	andeq	r0, r0, sl, lsl #2
