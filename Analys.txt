-- Labb 2 del A--
	
	Uppgift 2


-Vilka beroenden är nödvändiga?
	Angled flatbed:
		Flatbed (Extends, är OK)
	*StateFlatbed:
		Car (Har en lista, aggregation. ok(?))	//ok(?) då vi eventuellt vill ha interface Loadable istället för Car.
		Flatbed (Extends, är OK)
	Flatbed:
		Inget
	*Workshop:
		Car (Har en lista, aggregation. ok(?)) 
		ICanLoadCars(Implements, OK)
	*CarFerry:
		StateFlatbed (Har en flatbed(Komp/Del) OK)
		ICanLoadCars(Implements, OK)
		MotorizedVehicle(Extends, är OK)
		Car (Har en lista, ok(?)) (Gör om till generic)
	*CarTransporter:
		Truck (Extends, är OK)
		ICanLoadCars(Implements, OK)
		Car (StateFlatbed med T extends Car ok(?))
		StateFlatbed (Komp/Del OK)
	Scania:
		Truck (Extends, OK)
		AngledFlatbed (Komp/Del OK)
	Volvo240:
		Car(Extends, är OK)
	Saab95:
		Car(Extends, är OK)
	Car:
		MotorizedVehicle (Extends, är OK)
	Truck:
		MotorizedVehicle (Extends, är OK)
	*ICanLoadCars:
		MotorizedVehicle (Association, Ej OK(!))
		Car (T extends Car ok(?))
	Direction:
		Inget
	*MotorizedVehicle:
		IMovable (Implements, är OK)
		Direction (Komp, är OK)
		ICanLoadCars (Låsmekanism, ok(!?))
	*CarController:
		Saab95 (Komposition ok(?))
		Volvo240 (Komposition ok(?))
		Scania (Komposition ok(?))
		MotorizedVehicles (Komposition, ok(?!))
		CarView (Kompostition, ok(!?))
		TimerListener (Klass i klassen ok(!?))
	*CarView:
		Saab95 (Komposition, EJ OK(!))
		Scania (Komposition, EJ OK(!))
		DrawPanel (Komposition, ok(!?))
		CarController(Komposition (?? Vi måste bestämma vem skall skall ha komp till vem, går dubbelt nu))
	*DrawPanel:
		MotorizedVehicle(Association, EJ OK (Hårdkodning mm))

-Vilka klasser är beroende av varandra som inte bör vara det?
	CarTransporter, CarFerry, Workshop, (StateFlatbed), ICanLoadCars beroende av Car
		Inför loadable? Måste ta bort låsmekanism  så fall.
	CarTransporter, CarFerry, Workshop beroende av MotorizedVehice.
		Handskakningen/Låsmekanism, behövs ej. (Paket uppdelnning) packagePrivate setters
	MotorizedVehicle, beroende av ICanLoadCars
		Handskakningen/Låsmekanism, behövs ej
	CarController, beroende av Saab/Volvo/Scania
		Behöver inte vara så, kan iställt vara beroende av motorizedVehicle och låta användaren skapa objekten vid uppstart.
	CarView, beroende av Scania och Saab.
		Får inte vara så. Lägg över logik berörande scanian och saaben till CarController.
	DrawPanel, beroende av MotorizedVehicle
		Kör .getModelName och jämför, bör få in data från annan klass.

-Finns det starkare beroenden än nödvändigt?
	Ja, många klasser som implementerar ICanLoadCars samt ICanLoadCars själv, använder sig av Car direkt.
	Det skulle bli ett svagare beroende om de istället använde sig av ett interface (Loadable).
	Det beroendet som finns mellan ICanLoadCars, MotorizedVehicles och Car är mycket starkare än vad 
	det skulle behöva. <--("Handskakningen").

-Kan ni identifiera några brott mot övriga designprinciper vi pratat om i kursen?
	Vi bryter mot:
		Single Responsibility Principle - Vår handskakningsmetod finns lite överallt.
		Open Closed Principle		- Eventuellt kan vi ha en superklass till båtar.
						  Vi beror väldigt mycket på implementationsarv, vilket gör att det är svårt att extenda.
						  Väldigt mycket hårdkodat i GUI klasserna.
		Dependency Inversion Principle	- Ganska mycket GUI-Klasser som dependar på olika typer av Cars etc.
						  Väldigt många ICanLoadCars dependar på bilar, vi bör eventuellt ha ett interface (Loadable)
		Composition Over Inheritance	- Rätt bra på att utnyttja komposition, men ändå väldigt mycket implementationsarv i koden.		
		Speration of Concern		- Ingen paketuppdelning, allt blir mer sammanbundet, påverkar coupling och cohesion.
		
		Allmänt har vi dålig paketuppdelning, vilket gör det svårt att analysera coupling och cohesion.
						
		
	Uppgift 3.

Analysera era klasser med avseende på Separation of Concern (SoC) och Single
Responsibility Principle (SRP).

-Vilka ansvarsområden har era klasser?
	Angled flatbed: [OK]
		Är en flatbed med vinklar.
	StateFlatbed: [OK]
		Är en flatbed med lägen. Kan lasta på och av bilar.
	Flatbed: [OK]
		Representerar all funktionalitet hos en flatbed. 
	Workshop: [Kanske ok]
		Är ett lager för bilar. Kan lasta på och av dessa. Har (också) låsmekanism.
	CarFerry: [Kanske ok]
		Är en motorizedVehicle som kan lasta på och av bilar. Har (också) låsmekanism.
	CarTransporter: [Kanske ok]
		Är en truck som kan lasta på och av bilar. Har (också) låsmekanism.
	Scania: [OK]
		Är en typ av truck. Har en angled flatbed.
	Volvo240: [OK]
		Är en typ av car.
	Saab95: [OK]
		Är en typ av car.
	Car: [OK]
		Representerar en typ av MotorizedVehicle. Abstrakt.
	Truck: [OK]
		Representerar en typ av MotorizedVehicle. Abstrakt.
	ICanLoadCars: [Kanske ok]
		Interface som representerar funktionalitet hos objekt som kan lasta på bilar. 
		Denna funktionalitet omfattar även låsmekanism.
	Direction: [OK]
		Representerar riktning hos flyttbara objekt.
	MotorizedVehicle: [Kanske ok]
		Represneterar alla fordon med motor. Ansvarar över att dessa får funktionalitet så som gasning, bromsing, kordinater.
		Denna funktionallitet innefattar även låsmekanism (fordonet "har" en ICanLoadCars).
		NOTE: Vill kanske ha en point klass, istället för koordinater.		
	CarController: [Ej ok då den egentligen bör ha ansvar för ALL logik (Eventlistener, kontakt med modellen)]
		Uppdaterar logiken (med timer) och lyder order från CarView (gas brake)
	CarView: [ej ok, både renderar, lyssnar och kommunicerar med modellen]
		Ansvarar för ritning av kontrollpanelen (Knappar m.m.), har ansvaret för knapparnas funktioner. 
	DrawPanel: [Ansvar OK, behöver förändras]
		Ansvarar för ritning av simulationen (bilar och bakgrund).
		
-Vilka anledningar har de att förändras?
	
	Angled flatbed:
		Om man vill ha en utökad funktionallitet hos en ANGLED flatbed. Tex om de skall kunna lasta.
	StateFlatbed:
		Om man vill ha en utökad funktionallitet hos en STATE flatbed. Tex om de skall kunna lasta andra förmål.
	Flatbed:
		Om man vill ha en utökad funktionallitet hos ALLA flatbeds. T.ex om de skall ha färger.
	Workshop:
		Om man vill ha mer funktionallitet i sin workshop. Man kanske vill kunna trimma bilmotorer.
		(Om man vill ändra vad man gör med bilarna i workshoppen).
		(Om man vill ändra hur man laddar in bilar i workshoppen).
	CarFerry:
		Om man vill ändra hur bilarna lastas på båten.
		Om man vill ändra hur båten beter sig när bilarna är lastade.
	CarTransporter:
		Om man vill ändra hur bilarna lastas på cartransporten
		Om man vill ändra hur cartransporten beter sig när bilarna är lastade.
	Scania:
		Om man vill ändra Scanians funktionallitet som en typ av lastbil. Den kanske kan laddas. Eller få en annan typ av motor.
	Volvo240:
		Om man vill ändra Volvons funktionallitet som en typ av bil. Kanske lägga till ett servosystem.
	Saab95:
		Om man vill ändra Saabens funktionallitet som en typ av bil. Kanske lägga till en katalysator.
	Car:
		Om man vill ändra funktionalliteten hos ALLA bilar. Man kanske vill implementera att alla bilar har hjul.
	Truck:
		Om man vill ändra funktionalliteten hos ALLA lastbilar. Alla lastbilar kanske har en vändskiva eller en fjäderstötdämpat hyttfäste. 
	ICanLoadCars:
		Om man vill ändra vad som krävs av ALLA entiteter som kan lasta på bilar. Man kanske vill att nämnda entiteter skall kunna lasta av bilar. 
	Direction:
		Om man vill ändra vad direktion innebär. T.ex kunna ha ett gradsystem istället för "Vänster höger upp ner".
	MotorizedVehicle:
		Om man vill ändra funktionalliteten hos ALLA fordon med motor. Man kanske vill implementera att alla motordrivna fordon kan öppna sina dörrar.
	CarController:
		Om man vill att simulationen skall ha mer funktionalitet, tex svängning.
		Om man vill ändra på hur bilarna interagerar med varandra och sin omgivning. 
	CarView:
		Om man vill ändra funktionalitet hos styrpanelen i programmet. T.ex. ha fler knappar.
		Om man vill ändra funktionaliteten hos vissa av knapparna 
	DrawPanel:
		Om man vill ändra den grafiska representationen av simuleringen, t.ex. bilarna. 
		
-På vilka klasser skulle ni behöva tillämpa dekomposition för att bättre följa SoC och SRP?
	


